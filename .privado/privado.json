{
  "privadoCoreVersion" : "1.1.10",
  "privadoCLIVersion" : "v2.2.0",
  "privadoMainVersion" : "",
  "createdAt" : 1675023235668,
  "repoName" : "unitTest",
  "gitMetadata" : {
    
  },
  "localScanPath" : "/home/bitaashna/Desktop/unitTest",
  "sources" : [
    {
      "sourceType" : "Data Element",
      "id" : "Data.Sensitive.AccountData.AccountID",
      "name" : "Account ID",
      "category" : "Account Data",
      "sensitivity" : "medium",
      "isSensitive" : false,
      "tags" : {
        "law" : "GDPR"
      }
    },
    {
      "sourceType" : "Data Element",
      "id" : "Data.Sensitive.AccountData.AccountPassword",
      "name" : "Account Password",
      "category" : "Account Data",
      "sensitivity" : "high",
      "isSensitive" : false,
      "tags" : {
        "law" : "GDPR"
      }
    },
    {
      "sourceType" : "Data Element",
      "id" : "Data.Sensitive.ContactData.EmailAddress",
      "name" : "Email Address",
      "category" : "Contact Data",
      "sensitivity" : "medium",
      "isSensitive" : false,
      "tags" : {
        "law" : "GDPR"
      }
    },
    {
      "sourceType" : "Data Element",
      "id" : "Data.Sensitive.PersonalIdentification.Age",
      "name" : "Age",
      "category" : "Personal Identification",
      "sensitivity" : "low",
      "isSensitive" : false,
      "tags" : {
        "law" : "GDPR"
      }
    },
    {
      "sourceType" : "Data Element",
      "id" : "Data.Sensitive.AccountData.AccountName",
      "name" : "Account Name",
      "category" : "Account Data",
      "sensitivity" : "medium",
      "isSensitive" : false,
      "tags" : {
        "law" : "GDPR"
      }
    }
  ],
  "processing" : [
    {
      "sourceId" : "Data.Sensitive.AccountData.AccountPassword",
      "occurrences" : [
        {
          "sample" : "password",
          "lineNumber" : 15,
          "columnNumber" : 16,
          "fileName" : "/app/code/rds.java",
          "excerpt" : "    public static void main(String[] args) {\n        String hostname = \"sample-rds-instance.rds.amazonaws.com\";\n        int port = 5432;\n        String dbName = \"sample_db\";\n        String username = \"sample_user\";\n        String password = \"sample_password\"; /* <=== java.lang.String */ \n        String jdbcUrl = \"jdbc:postgresql://\" + hostname + \":\" + port + \"/\" + dbName;\n\n        Connection connection = null;\n        try {\n            connection = DriverManager.getConnection(jdbcUrl, username, password);"
        }
      ]
    },
    {
      "sourceId" : "Data.Sensitive.AccountData.AccountName",
      "occurrences" : [
        {
          "sample" : "username",
          "lineNumber" : 20,
          "columnNumber" : 63,
          "fileName" : "/app/code/rds.java",
          "excerpt" : "        String password = \"sample_password\";\n        String jdbcUrl = \"jdbc:postgresql://\" + hostname + \":\" + port + \"/\" + dbName;\n\n        Connection connection = null;\n        try {\n            connection = DriverManager.getConnection(jdbcUrl, username, password); /* <=== java.lang.String */ \n            String insertSql = \"INSERT INTO personal_data (first_name, last_name, email) VALUES (?, ?, ?)\";\n            PreparedStatement insertStatement = connection.prepareStatement(insertSql);\n            insertStatement.setString(1, \"John\");\n            insertStatement.setString(2, \"Doe\");\n            insertStatement.setString(3, \"john.doe@example.com\");"
        },
        {
          "sample" : "personalData",
          "lineNumber" : 17,
          "columnNumber" : 31,
          "fileName" : "/app/code/identitystore.java",
          "excerpt" : "\n    public void processData(PersonalData personalData) {\n        try {\n            CreateUserRequest createUserRequest = new CreateUserRequest()\n                .withUserPoolId(personalData.getUserPoolId())\n                .withUsername(personalData.getUsername()) /* <=== PersonalData */ \n                .withUserAttributes(personalData.getUserAttributes());\n\n            CreateUserResult createUserResult = identityStoreClient.createUser(createUserRequest);\n            System.out.println(\"Successfully sent personal data to Amazon Identity Store\");\n        } catch (Exception e) {"
        }
      ]
    },
    {
      "sourceId" : "Data.Sensitive.PersonalIdentification.Age",
      "occurrences" : [
        {
          "sample" : "this.age",
          "lineNumber" : 52,
          "columnNumber" : 95,
          "fileName" : "/app/code/applicationcostprofiler.java",
          "excerpt" : "        return age;\n    }\n\n    @Override\n    public String toString() {\n        return String.format(\"{costProfileArn: %s, name: %s, age: %d}\", costProfileArn, name, age); /* <===  */ \n    }\n}\n"
        },
        {
          "sample" : "age",
          "lineNumber" : 35,
          "columnNumber" : 20,
          "fileName" : "/app/code/ssm.java",
          "excerpt" : "    private final int age;\n\n    public PersonalData(String id, String name, int age) {\n        this.id = id;\n        this.name = name;\n        this.age = age; /* <=== int */ \n    }\n\n    public String getId() {\n        return id;\n    }"
        },
        {
          "sample" : "personalData",
          "lineNumber" : 17,
          "columnNumber" : 31,
          "fileName" : "/app/code/identitystore.java",
          "excerpt" : "\n    public void processData(PersonalData personalData) {\n        try {\n            CreateUserRequest createUserRequest = new CreateUserRequest()\n                .withUserPoolId(personalData.getUserPoolId())\n                .withUsername(personalData.getUsername()) /* <=== PersonalData */ \n                .withUserAttributes(personalData.getUserAttributes());\n\n            CreateUserResult createUserResult = identityStoreClient.createUser(createUserRequest);\n            System.out.println(\"Successfully sent personal data to Amazon Identity Store\");\n        } catch (Exception e) {"
        }
      ]
    },
    {
      "sourceId" : "Data.Sensitive.ContactData.EmailAddress",
      "occurrences" : [
        {
          "sample" : "\"email\"",
          "lineNumber" : 19,
          "columnNumber" : 42,
          "fileName" : "/app/code/lexRuntime.java",
          "excerpt" : "    public void processPersonalData(Map<String,String> personalData) {\n        // Send the personal data to Amazon Lex for processing\n        PostTextRequest postTextRequest = new PostTextRequest()\n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\")) /* <===  */ \n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);\n\n        // Handle the Lex response\n        if (postTextResult.getDialogState() == \"Fulfilled\") {"
        },
        {
          "sample" : "processedEmail",
          "lineNumber" : 36,
          "columnNumber" : 16,
          "fileName" : "/app/code/workmailmessageflow.java",
          "excerpt" : "\n        // Process raw email\n        ProcessRawEmailResult result = client.processRawEmail(request);\n\n        // Retrieve processed email result\n        byte[] processedEmail = result.getProcessedEmail(); /* <=== byte[] */ \n    }\n\n    private static byte[] getRawMessageData() {\n        // retrieve raw message data\n        ..."
        }
      ]
    },
    {
      "sourceId" : "Data.Sensitive.AccountData.AccountID",
      "occurrences" : [
        {
          "sample" : "accountId",
          "lineNumber" : 21,
          "columnNumber" : 16,
          "fileName" : "/app/code/organizations.java",
          "excerpt" : "        CreateAccountRequest createAccountRequest = new CreateAccountRequest()\n            .withEmail(personalData.get(\"email\"))\n            .withAccountName(personalData.get(\"name\"))\n            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest);\n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId(); /* <=== java.lang.String */ \n\n        // Add the personal data as tags to the created account\n        TagResourceRequest tagResourceRequest = new TagResourceRequest()\n            .withResourceId(accountId)\n            .withTags(personalData);"
        }
      ]
    }
  ],
  "sinks" : [
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.IoTFleetHub",
      "name" : "Amazonaws IoT Fleet Hub",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Finspace",
      "name" : "Amazonaws Finspace",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "storages",
      "id" : "Storages.SpringFramework.Jdbc.Write",
      "name" : "Java Database Connector(Write)",
      "domains" : [
        "oracle.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.RDSData",
      "name" : "Amazonaws RDS Data",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Backup",
      "name" : "Amazonaws Backup",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.ApplicationCatalog",
      "name" : "Amazonaws Application Catalog",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Translate",
      "name" : "Amazonaws Translate",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.CloudWatchLogs",
      "name" : "Amazonaws CloudWatch Logs",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.LexRuntime",
      "name" : "Amazonaws Lex Runtime",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Elasticache",
      "name" : "Amazonaws Elasticache",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Kendra",
      "name" : "Amazonaws Kendra",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Textract",
      "name" : "Amazonaws Textract",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.SageMaker",
      "name" : "Amazonaws SageMaker",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.CloudTrail",
      "name" : "Amazonaws CloudTrail",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.SSM",
      "name" : "Amazonaws SSM",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Glacier",
      "name" : "Amazonaws Glacier",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Budgets",
      "name" : "Amazonaws Budgets",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.EC2",
      "name" : "Amazonaws EC2",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.IdentityStore",
      "name" : "Amazonaws Identity Store",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.TranscribeStreaming",
      "name" : "Amazonaws Transcribe Streaming",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Polly",
      "name" : "Amazonaws Polly",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.DocumentDB",
      "name" : "Amazonaws DocumentDB",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.MarketplaceEntitlement",
      "name" : "Amazonaws MarketplaceEntitlement",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.SimpleWorkflowService",
      "name" : "Amazonaws Simple Workflow Service",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.ElasticContainerService",
      "name" : "Amazonaws Elastic Container Service",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.XRay",
      "name" : "Amazonaws XRay",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.SimpleDB",
      "name" : "Amazonaws SimpleDB",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Workdocs",
      "name" : "Amazonaws Workdocs",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.ApplicationDiscovery",
      "name" : "Amazonaws Application Discovery",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.ApplicationCostProfiler",
      "name" : "Amazonaws Application Cost Profiler",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.LookoutForVision",
      "name" : "Amazonaws Lookout for Vision",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.DisasterRecoveryService",
      "name" : "Amazonaws Disaster Recovery Service",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.HealthLake",
      "name" : "Amazonaws HealthLake",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Forecast",
      "name" : "Amazonaws Forecast",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.CustomerProfiles",
      "name" : "Amazonaws Customer Profiles",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Kinesis",
      "name" : "Amazonaws Kinesis",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Personalize",
      "name" : "Amazonaws Personalize",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.IoTWireless",
      "name" : "Amazonaws IoT Wireless",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.TranscribeMedical",
      "name" : "Amazonaws Transcribe Medical",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.CloudWatch",
      "name" : "Amazonaws CloudWatch",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.KinesisDataFirehose",
      "name" : "Amazonaws Kinesis Data Firehose",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.AppSync",
      "name" : "Amazonaws AppSync",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.FraudDetector",
      "name" : "Amazonaws Fraud Detector",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.RelationalDatabaseService",
      "name" : "Amazonaws Relational Database Service",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Health",
      "name" : "Amazonaws Health",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Comprehend",
      "name" : "Amazonaws Comprehend",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Organizations",
      "name" : "Amazonaws Organizations",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.CloudFormation",
      "name" : "Amazonaws CloudFormation",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.ComprehendMedical",
      "name" : "Amazonaws Comprehend Medical",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.StepFunctions",
      "name" : "Amazonaws StepFunctions",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.FinspaceData",
      "name" : "Amazonaws Finspace Data",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.CodeGuruReviewer",
      "name" : "Amazonaws CodeGuru Reviewer",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Transcribe",
      "name" : "Amazonaws Transcribe",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.WorkMailMessageFlow",
      "name" : "Amazonaws WorkMail Message Flow",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Rekognition",
      "name" : "Amazonaws Rekognition",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.PinpointSMSVoice",
      "name" : "Amazonaws Pinpoint SMS and Voice",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.IoT",
      "name" : "Amazonaws IoT",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Config",
      "name" : "Amazonaws Config",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "storages",
      "id" : "Storages.AmazonTimestream.Write",
      "name" : "Amazon Timestream(Write)",
      "domains" : [
        "aws.amazon.com",
        "amazon.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.FSx",
      "name" : "Amazonaws FSx",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Batch",
      "name" : "Amazonaws Batch",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.SimpleEmailService",
      "name" : "Amazonaws Simple Email Service",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.ServerMigration",
      "name" : "Amazonaws ServerMigration",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.ElasticFileSystem",
      "name" : "Amazonaws ElasticFileSystem",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Neptune",
      "name" : "Amazonaws Neptune",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.CloudWatchEvents",
      "name" : "Amazonaws CloudWatch Events",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.S3Outposts",
      "name" : "Amazonaws S3 Outposts",
      "domains" : [
        "s3.amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.SimpleNotificationService",
      "name" : "Amazonaws Simple Notification Service",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.S3",
      "name" : "Amazonaws S3",
      "domains" : [
        "s3.amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Pinpoint",
      "name" : "Amazonaws Pinpoint",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Greengrass",
      "name" : "Amazonaws Greengrass",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Elasticsearch",
      "name" : "Amazonaws Elasticsearch",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazon.Aws",
      "name" : "Amazon Aws",
      "domains" : [
        "aws.amazon.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.AppFlow",
      "name" : "Amazonaws App Flow",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.ElasticContainerRegistry",
      "name" : "Amazonaws Elastic Container Registry",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.ServiceCatalog",
      "name" : "Amazonaws Service Catalog",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Lightsail",
      "name" : "Amazonaws Lightsail",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Timestream",
      "name" : "Amazonaws Timestream",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.CodeBuild",
      "name" : "Amazonaws CodeBuild",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.QuickSight",
      "name" : "Amazonaws QuickSight",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Connect",
      "name" : "Amazonaws Connect",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.ElasticMapReduce",
      "name" : "Amazonaws Elastic MapReduce",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.AppStream",
      "name" : "Amazonaws AppStream",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.StorageGateway",
      "name" : "Amazonaws StorageGateway",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.OpsWorks",
      "name" : "Amazonaws OpsWorks",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.TranslateMedical",
      "name" : "Amazonaws Translate Medical",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.IoTSecureTunneling",
      "name" : "Amazonaws IoT Secure Tunneling",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.CostAndUsageReport",
      "name" : "Amazonaws Cost And Usage Report",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.ApplicationAutoScaling",
      "name" : "Amazonaws Application Auto Scaling",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.ElastiCache",
      "name" : "Amazonaws ElastiCache",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.SQS",
      "name" : "Amazonaws SQS",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.GroundStation",
      "name" : "Amazonaws GroundStation",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Shield",
      "name" : "Amazonaws Shield",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.AugmentedAI",
      "name" : "Amazonaws Augmented AI",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.ManagedBlockchain",
      "name" : "Amazonaws ManagedBlockchain",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Snowball",
      "name" : "Amazonaws Snowball",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Eventbridge",
      "name" : "Amazonaws EventBridge",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    }
  ],
  "sinkProcessing" : [
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Finspace",
      "occurrences" : [
        {
          "sample" : "setRegion(Region.getRegion(Regions.US_WEST_2))",
          "lineNumber" : 12,
          "columnNumber" : 9,
          "fileName" : "/app/code/finspacedata.java",
          "excerpt" : "        // Create an instance of the AmazonFinspaceDataClient class\n        AmazonFinspaceDataClient client = new AmazonFinspaceDataClient();\n\n        // Set the dataset name and the access key and secret key \n        client.setEndpoint(\"finspacedata.us-west-2.amazonaws.com\");\n        client.setRegion(Region.getRegion(Regions.US_WEST_2)); /* <=== com.amazonaws.services.finspacedata.AmazonFinspaceDataClient.setRegion */ \n        client.setAWSCredentials(new BasicAWSCredentials(\"accessKey\", \"secretKey\"));\n\n        // Create a ListTablesRequest object\n        ListTablesRequest request = new ListTablesRequest();\n        request.setDatasetName(\"myDataset\");"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Config",
      "occurrences" : [
        {
          "sample" : "withConfigurationRecorder(configRecorder)",
          "lineNumber" : 25,
          "columnNumber" : 51,
          "fileName" : "/app/code/config.java",
          "excerpt" : "\n        ConfigurationRecorder configRecorder = new ConfigurationRecorder()\n            .withName(\"PersonalDataRecorder\")\n            .withRecordingGroup(recordingGroup);\n\n        PutConfigurationRecorderRequest request = new PutConfigurationRecorderRequest() /* <=== com.amazonaws.services.config.model.PutConfigurationRecorderRequest.withConfigurationRecorder */ \n            .withConfigurationRecorder(configRecorder);\n\n        config.putConfigurationRecorder(request);\n    }\n}"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.RDSData",
      "occurrences" : [
        {
          "sample" : "getResultSet()",
          "lineNumber" : 26,
          "columnNumber" : 30,
          "fileName" : "/app/code/rdsData.java",
          "excerpt" : "        \n        // Send the RDS Data Request\n        ExecuteSqlResult rdsDataResult = rdsDataClient.executeSql(rdsDataRequest);\n        \n        // Get the RDS Data Result\n        List<Field> fields = rdsDataResult.getResultSet().getRecords().get(0).getFields(); /* <=== com.amazonaws.services.rdsdata.model.ExecuteSqlResult.getResultSet */ \n        \n        // Print the RDS Data Result\n        System.out.println(\"RDS Data Result:\");\n        for (Field field : fields) {\n            System.out.println(field.getStringValue());"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Backup",
      "occurrences" : [
        {
          "sample" : "getBackupVaultArn()",
          "lineNumber" : 26,
          "columnNumber" : 33,
          "fileName" : "/app/code/backup.java",
          "excerpt" : "        CreateBackupVaultRequest createBackupVaultRequest = new CreateBackupVaultRequest()\n                .withBackupVaultName(\"my-backup-vault\");\n        CreateBackupVaultResult createBackupVaultResult = backup.createBackupVault(createBackupVaultRequest);\n\n        // Get the ARN of the newly created Backup Vault\n        String backupVaultArn = createBackupVaultResult.getBackupVaultArn(); /* <=== com.amazonaws.services.backup.model.CreateBackupVaultResult.getBackupVaultArn */ \n    }\n}\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.SageMaker",
      "occurrences" : [
        {
          "sample" : "standard()",
          "lineNumber" : 13,
          "columnNumber" : 27,
          "fileName" : "/app/code/sagemaker.java",
          "excerpt" : "public class SageMakerSink {\n    private AmazonSageMaker sagemakerClient;\n\n    public SageMakerSink(String accessKey, String secretKey) {\n        AWSCredentials credentials = new BasicAWSCredentials(accessKey, secretKey);\n        sagemakerClient = AmazonSageMakerClientBuilder.standard() /* <=== com.amazonaws.services.sagemaker.AmazonSageMakerClientBuilder.standard */ \n                .withCredentials(new AWSStaticCredentialsProvider(credentials))\n                .withRegion(Regions.US_EAST_1)\n                .build();\n    }\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Kinesis",
      "occurrences" : [
        {
          "sample" : "standard()",
          "lineNumber" : 12,
          "columnNumber" : 39,
          "fileName" : "/app/code/kinesis.java",
          "excerpt" : "\n    private static final String STREAM_NAME = \"your-stream-name\";\n    private static final String REGION = \"your-region\";\n\n    public static void main(String[] args) {\n        AmazonKinesis kinesisClient = AmazonKinesisClientBuilder.standard() /* <=== com.amazonaws.services.kinesis.AmazonKinesisClientBuilder.standard */ \n                                        .withRegion(REGION)\n                                        .build();\n\n        byte[] data = \"your-data\".getBytes();\n        PutRecordRequest putRecordRequest = new PutRecordRequest()"
        },
        {
          "sample" : "defaultClient()",
          "lineNumber" : 9,
          "columnNumber" : 48,
          "fileName" : "/app/code/kinesisFirehose.java",
          "excerpt" : "import com.amazonaws.services.kinesisfirehose.model.CreateDeliveryStreamResult;\n\npublic class FirehoseSample {\n\n    public static void main(String[] args) {\n        AmazonKinesisFirehose firehoseClient = AmazonKinesisFirehoseClientBuilder.defaultClient(); /* <=== com.amazonaws.services.kinesisfirehose.AmazonKinesisFirehoseClientBuilder.defaultClient */ \n\n        CreateDeliveryStreamRequest createDeliveryStreamRequest = new CreateDeliveryStreamRequest();\n        createDeliveryStreamRequest.setDeliveryStreamName(\"your-delivery-stream-name\");\n        createDeliveryStreamRequest.setS3DestinationConfiguration(\n            // S3 configuration goes here"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.ApplicationCatalog",
      "occurrences" : [
        {
          "sample" : "createApplication(request)",
          "lineNumber" : 26,
          "columnNumber" : 42,
          "fileName" : "/app/code/applicationCatalog.java",
          "excerpt" : "        // Create the application in the Amazon AWS Application Catalog\n        CreateApplicationRequest request = new CreateApplicationRequest()\n            .withName(APPLICATION_NAME)\n            .withDescription(DESCRIPTION)\n            .withDataSources(personalDataSources);\n        CreateApplicationResult result = client.createApplication(request); /* <=== com.amazonaws.services.applicationcatalog.AWSApplicationCatalog.createApplication */ \n\n        // Print the application ID\n        System.out.println(\"Application ID: \" + result.getApplicationId());\n    }\n}"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.GroundStation",
      "occurrences" : [
        {
          "sample" : "withEndpointDetails(new EndpointDetails().withEndpoint(endpoint))",
          "lineNumber" : 19,
          "columnNumber" : 49,
          "fileName" : "/app/code/groundStation.java",
          "excerpt" : "    }\n\n    public void createDataflowEndpointGroup(String name, List<String> endpoints) {\n        List<DataflowEndpoint> dataflowEndpoints = new ArrayList<>();\n        for (String endpoint : endpoints) {\n            DataflowEndpoint dataflowEndpoint = new DataflowEndpoint() /* <=== com.amazonaws.services.groundstation.model.DataflowEndpoint.withEndpointDetails */ \n                .withEndpointDetails(new EndpointDetails().withEndpoint(endpoint));\n            dataflowEndpoints.add(dataflowEndpoint);\n        }\n        CreateDataflowEndpointGroupRequest request = new CreateDataflowEndpointGroupRequest()\n            .withEndpointDetails(dataflowEndpoints)"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.SimpleWorkflowService",
      "occurrences" : [
        {
          "sample" : "defaultClient()",
          "lineNumber" : 13,
          "columnNumber" : 15,
          "fileName" : "/app/code/simpleWorkflow.java",
          "excerpt" : "    private AmazonSimpleWorkflow swf;\n    private String domain;\n\n    public SWFWorker(String domain) {\n        this.domain = domain;\n        swf = AmazonSimpleWorkflowClientBuilder.defaultClient(); /* <=== com.amazonaws.services.simpleworkflow.AmazonSimpleWorkflowClientBuilder.defaultClient */ \n    }\n\n    public void processPersonalData() {\n        while (true) {\n            PollForDecisionTaskRequest decisionTaskRequest = new PollForDecisionTaskRequest()"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.ServiceCatalog",
      "occurrences" : [
        {
          "sample" : "defaultClient()",
          "lineNumber" : 15,
          "columnNumber" : 5,
          "fileName" : "/app/code/serviceCatalog.java",
          "excerpt" : "    // Create a Portfolio\n    CreatePortfolioRequest createPortfolioRequest = new CreatePortfolioRequest()\n        .withDisplayName(\"TestPortfolio\")\n        .withDescription(\"Test Portfolio Description\");\n\n    AWSServiceCatalogClientBuilder.defaultClient().createPortfolio(createPortfolioRequest); /* <=== com.amazonaws.services.servicecatalog.AWSServiceCatalogClientBuilder.defaultClient */ \n\n    // Process Personal Data\n    List<String> personalData = new ArrayList<>();\n    personalData.add(\"John Doe\");\n    personalData.add(\"Jane Doe\");"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.AppSync",
      "occurrences" : [
        {
          "sample" : "standard()",
          "lineNumber" : 8,
          "columnNumber" : 29,
          "fileName" : "/app/code/appSync.java",
          "excerpt" : "import com.amazonaws.services.appsync.model.*;\n\npublic class AppSyncExample {\n    public static void main(String[] args) {\n        // Create a new AppSync client\n        AWSAppSync client = AWSAppSyncClientBuilder.standard() /* <=== com.amazonaws.services.appsync.AWSAppSyncClientBuilder.standard */ \n                .build();\n\n        // Create a new GraphQL query\n        ListGraphqlApisRequest listApisRequest = new ListGraphqlApisRequest();\n        ListGraphqlApisResult listApisResult = client.listGraphqlApis(listApisRequest);"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.TranscribeStreaming",
      "occurrences" : [
        {
          "sample" : "startStreamTranscription(request)",
          "lineNumber" : 18,
          "columnNumber" : 49,
          "fileName" : "/app/code/transcribeStreaming.java",
          "excerpt" : "            .withMediaEncoding(\"pcm\")\n            .withMediaSampleRateHertz(16000)\n            .withTranscriptionJobName(\"MyTranscriptionJob\")\n            .withMediaEventHandler(new MyAudioStreamHandler());\n\n        StartStreamTranscriptionResult result = transcribe.startStreamTranscription(request); /* <=== com.amazonaws.services.transcribestreaming.AmazonTranscribeStreaming.startStreamTranscription */ \n        System.out.println(\"Transcription started with job id: \" + result.getTranscriptionJob().getTranscriptionJobName());\n    }\n}\n\nclass MyAudioStreamHandler implements MediaEventStreamHandler {"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.CloudFormation",
      "occurrences" : [
        {
          "sample" : "withStackName(\"PersonalDataStack\")",
          "lineNumber" : 20,
          "columnNumber" : 38,
          "fileName" : "/app/code/cloudformation.java",
          "excerpt" : "        List<Parameter> parameters = new ArrayList<>();\n        for (Map.Entry<String, String> entry : personalData.entrySet()) {\n            parameters.add(new Parameter().withParameterKey(entry.getKey()).withParameterValue(entry.getValue()));\n        }\n\n        CreateStackRequest request = new CreateStackRequest() /* <=== com.amazonaws.services.cloudformation.model.CreateStackRequest.withStackName */ \n            .withStackName(\"PersonalDataStack\")\n            .withTemplateBody(getTemplate())\n            .withParameters(parameters);\n\n        cloudFormation.createStack(request);"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.SSM",
      "occurrences" : [
        {
          "sample" : "withTitle(String.format(\"Personal Data Incident - %s\", personalData.getName()))",
          "lineNumber" : 15,
          "columnNumber" : 53,
          "fileName" : "/app/code/ssm.java",
          "excerpt" : "        ssmClient = AWSSimpleSystemsManagementClientBuilder.defaultClient();\n    }\n\n    public void processData(PersonalData personalData) {\n        try {\n            CreateIncidentRequest incidentRequest = new CreateIncidentRequest() /* <=== com.amazonaws.services.ssm.model.CreateIncidentRequest.withTitle */ \n                .withTitle(String.format(\"Personal Data Incident - %s\", personalData.getName()))\n                .withDescription(personalData.toString());\n\n            CreateIncidentResult incidentResult = ssmClient.createIncident(incidentRequest);\n            System.out.println(String.format(\"Successfully created incident with id %s\", incidentResult.getIncidentId()));"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.FinspaceData",
      "occurrences" : [
        {
          "sample" : "setRegion(Region.getRegion(Regions.US_WEST_2))",
          "lineNumber" : 12,
          "columnNumber" : 9,
          "fileName" : "/app/code/finspacedata.java",
          "excerpt" : "        // Create an instance of the AmazonFinspaceDataClient class\n        AmazonFinspaceDataClient client = new AmazonFinspaceDataClient();\n\n        // Set the dataset name and the access key and secret key \n        client.setEndpoint(\"finspacedata.us-west-2.amazonaws.com\");\n        client.setRegion(Region.getRegion(Regions.US_WEST_2)); /* <=== com.amazonaws.services.finspacedata.AmazonFinspaceDataClient.setRegion */ \n        client.setAWSCredentials(new BasicAWSCredentials(\"accessKey\", \"secretKey\"));\n\n        // Create a ListTablesRequest object\n        ListTablesRequest request = new ListTablesRequest();\n        request.setDatasetName(\"myDataset\");"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Neptune",
      "occurrences" : [
        {
          "sample" : "standard()",
          "lineNumber" : 19,
          "columnNumber" : 39,
          "fileName" : "/app/code/neptune.java",
          "excerpt" : "        String endpoint = \"NEPTUNE_ENDPOINT\";\n        \n        // Replace with your region\n        String region = \"REGION\";\n        \n        AmazonNeptune neptuneClient = AmazonNeptuneClientBuilder.standard() /* <=== com.amazonaws.services.neptune.AmazonNeptuneClientBuilder.standard */ \n            .withCredentials(new AWSStaticCredentialsProvider(credentials))\n            .withEndpointConfiguration(new AwsClientBuilder.EndpointConfiguration(endpoint, region))\n            .build();\n    }\n}"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Eventbridge",
      "occurrences" : [
        {
          "sample" : "standard()",
          "lineNumber" : 19,
          "columnNumber" : 36,
          "fileName" : "/app/code/eventBridge.java",
          "excerpt" : "    public static void main(String[] args) {\n        // Replace with your access key and secret key\n        AWSCredentials credentials = new BasicAWSCredentials(\"access_key\", \"secret_key\");\n\n        // Create an EventBridge client\n        AmazonEventBridge client = AmazonEventBridgeClientBuilder /* <=== com.amazonaws.services.eventbridge.AmazonEventBridgeClientBuilder.standard */ \n                .standard()\n                .withCredentials(new AWSStaticCredentialsProvider(credentials))\n                .build();\n\n        // Create a new event to send to EventBridge"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.ElasticMapReduce",
      "occurrences" : [
        {
          "sample" : "listClusters(request)",
          "lineNumber" : 13,
          "columnNumber" : 37,
          "fileName" : "/app/code/elasticMapReduce.java",
          "excerpt" : "    public static void main(String[] args) {\n\n        AmazonElasticMapReduce emr = AmazonElasticMapReduceClientBuilder.defaultClient();\n\n        ListClustersRequest request = new ListClustersRequest();\n        ListClustersResult result = emr.listClusters(request); /* <=== com.amazonaws.services.elasticmapreduce.AmazonElasticMapReduce.listClusters */ \n\n        System.out.println(\"List of EMR clusters: \" + result.getClusters());\n    }\n}\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Textract",
      "occurrences" : [
        {
          "sample" : "defaultClient()",
          "lineNumber" : 10,
          "columnNumber" : 41,
          "fileName" : "/app/code/textract.java",
          "excerpt" : "import com.amazonaws.services.textract.model.Block;\n\npublic class TextractExample {\n\n    public static void main(String[] args) {\n        AmazonTextract textractClient = AmazonTextractClientBuilder.defaultClient(); /* <=== com.amazonaws.services.textract.AmazonTextractClientBuilder.defaultClient */ \n\n        AnalyzeDocumentRequest request = new AnalyzeDocumentRequest()\n                .withDocument(new S3Object()\n                        .withBucket(\"my-bucket\")\n                        .withName(\"example.png\"))"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.SimpleEmailService",
      "occurrences" : [
        {
          "sample" : "defaultClient()",
          "lineNumber" : 9,
          "columnNumber" : 43,
          "fileName" : "/app/code/simpleemail.java",
          "excerpt" : "import com.amazonaws.services.simpleemail.model.SendEmailResult;\n\npublic class SESSink {\n    public static void main(String[] args) {\n        // Set up the client\n        AmazonSimpleEmailService client = AmazonSimpleEmailServiceClientBuilder.defaultClient(); /* <=== com.amazonaws.services.simpleemail.AmazonSimpleEmailServiceClientBuilder.defaultClient */ \n\n        // Create the request\n        SendEmailRequest request = new SendEmailRequest()\n            .withDestination(\n                // Set the recipient"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.CodeBuild",
      "occurrences" : [
        {
          "sample" : "defaultClient()",
          "lineNumber" : 11,
          "columnNumber" : 43,
          "fileName" : "/app/code/codebuild.java",
          "excerpt" : "public class PersonalDataProcessor {\n\n    private static final String PROJECT_NAME = \"personal-data-project\";\n\n    public static void main(String[] args) {\n        AmazonCodeBuild codeBuildClient = AmazonCodeBuildClientBuilder.defaultClient(); /* <=== com.amazonaws.services.codebuild.AmazonCodeBuildClientBuilder.defaultClient */ \n\n        StartBuildRequest startBuildRequest = new StartBuildRequest()\n                .withProjectName(PROJECT_NAME);\n\n        Build build = codeBuildClient.startBuild(startBuildRequest).getBuild();"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.S3Outposts",
      "occurrences" : [
        {
          "sample" : "setEndpoint(endpoint)",
          "lineNumber" : 19,
          "columnNumber" : 9,
          "fileName" : "/app/code/s3Outpost.java",
          "excerpt" : "                .withSecurityGroupIds(\"sg-01234567890abcdef\");\n        CreateEndpointResult createEndpointResult = client.createEndpoint(createEndpointRequest);\n        String endpoint = createEndpointResult.getEndpoint();\n\n        // Set the endpoint for the client\n        client.setEndpoint(endpoint); /* <=== com.amazonaws.services.s3outposts.AWSS3OutpostsClient.setEndpoint */ \n\n        // Create a PutObjectRequest to upload a file to the S3 Outposts bucket\n        PutObjectRequest putObjectRequest = new PutObjectRequest()\n                .withBucketName(\"my-outposts-bucket\")\n                .withKey(\"my-file.txt\")"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.XRay",
      "occurrences" : [
        {
          "sample" : "new GetTraceSummariesRequest()",
          "lineNumber" : 11,
          "columnNumber" : -1,
          "fileName" : "/app/code/xray.java",
          "excerpt" : "public class PersonalDataProcessor {\n\n    public static void main(String[] args) {\n        AWSXRay xRayClient = AWSXRayClientBuilder.defaultClient();\n\n        GetTraceSummariesRequest getTraceSummariesRequest = new GetTraceSummariesRequest(); /* <=== com.amazonaws.services.xray.model.GetTraceSummariesRequest.<init> */ \n\n        GetTraceSummariesResult getTraceSummariesResult = xRayClient.getTraceSummaries(getTraceSummariesRequest);\n\n        System.out.println(\"Number of Traces: \" + getTraceSummariesResult.getTraceSummaries().size());\n    }"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.ApplicationCostProfiler",
      "occurrences" : [
        {
          "sample" : "new PutCostProfileDataRequest()",
          "lineNumber" : 15,
          "columnNumber" : -1,
          "fileName" : "/app/code/applicationcostprofiler.java",
          "excerpt" : "        costProfilerClient = AWSApplicationCostProfilerClientBuilder.defaultClient();\n    }\n\n    public void processData(PersonalData personalData) {\n        try {\n            PutCostProfileDataRequest putCostProfileDataRequest = new PutCostProfileDataRequest() /* <=== com.amazonaws.services.applicationcostprofiler.model.PutCostProfileDataRequest.<init> */ \n                .withCostProfileArn(personalData.getCostProfileArn())\n                .withProfileData(personalData.toString());\n\n            PutCostProfileDataResult putCostProfileDataResult = costProfilerClient.putCostProfileData(putCostProfileDataRequest);\n            System.out.println(\"Successfully sent personal data to Amazon Application Cost Profiler\");"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.LookoutForVision",
      "occurrences" : [
        {
          "sample" : "new CreateDatasetRequest()",
          "lineNumber" : 21,
          "columnNumber" : -1,
          "fileName" : "/app/code/lookoutForVision.java",
          "excerpt" : "    // Create a dataset\n    String datasetName = \"personal_data_dataset\";\n    String datasetDisplayName = \"Personal Data Dataset\";\n    S3DataSource s3DataSource = new S3DataSource().withBucket(\"personal-data-bucket\");\n    S3DataConfig s3DataConfig = new S3DataConfig().withS3DataSource(s3DataSource);\n    CreateDatasetRequest createDatasetRequest = new CreateDatasetRequest() /* <=== com.amazonaws.services.lookoutforvision.model.CreateDatasetRequest.<init> */ \n        .withDatasetName(datasetName)\n        .withDisplayName(datasetDisplayName)\n        .withDataSource(s3DataConfig);\n    DatasetMetadata datasetMetadata = client.createDataset(createDatasetRequest).getDataset();\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.FSx",
      "occurrences" : [
        {
          "sample" : "standard()",
          "lineNumber" : 15,
          "columnNumber" : 25,
          "fileName" : "/app/code/fsx.java",
          "excerpt" : "    public static void main(String[] args) {\n        // Replace with your access key and secret key\n        AWSCredentials credentials = new BasicAWSCredentials(\"access_key\", \"secret_key\");\n\n        // Create an FSx client\n        AmazonFSx fsx = AmazonFSxClientBuilder.standard() /* <=== com.amazonaws.services.fsx.AmazonFSxClientBuilder.standard */ \n                .withCredentials(new AWSStaticCredentialsProvider(credentials))\n                .withRegion(\"us-west-2\")\n                .build();\n\n        // Create a new FSx file system"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.ServerMigration",
      "occurrences" : [
        {
          "sample" : "new CreateReplicationJobRequest()",
          "lineNumber" : 18,
          "columnNumber" : -1,
          "fileName" : "/app/code/serverMigration.java",
          "excerpt" : "                .withCredentials(new AWSStaticCredentialsProvider(credentials))\n                .withRegion(Regions.US_EAST_1)\n                .build();\n\n        // Define the replication job request\n        CreateReplicationJobRequest request = new CreateReplicationJobRequest() /* <=== com.amazonaws.services.servermigration.model.CreateReplicationJobRequest.<init> */ \n                .withServerId(\"server-id\")\n                .withS3Location(\"s3://bucket-name/folder/\")\n                .withDescription(\"Replicating personal data\");\n\n        // Create the replication job"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.SimpleDB",
      "occurrences" : [
        {
          "sample" : "new ReplaceableAttribute(\"name\", \"value\", true)",
          "lineNumber" : 13,
          "columnNumber" : -1,
          "fileName" : "/app/code/simpleDB.java",
          "excerpt" : "public class SimpleDBSample {\n\n    public static void main(String[] args) {\n        AmazonSimpleDB simpleDB = AmazonSimpleDBClientBuilder.defaultClient();\n\n        ReplaceableAttribute attribute1 = new ReplaceableAttribute(\"name\", \"value\", true); /* <=== com.amazonaws.services.simpledb.model.ReplaceableAttribute.<init> */ \n        ReplaceableAttribute attribute2 = new ReplaceableAttribute(\"age\", \"25\", true);\n\n        PutAttributesRequest request = new PutAttributesRequest(\"mydomain\", \"itemName\", Arrays.asList(attribute1, attribute2));\n\n        simpleDB.putAttributes(request);"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.ElasticFileSystem",
      "occurrences" : [
        {
          "sample" : "createFileSystem(createFileSystemRequest)",
          "lineNumber" : 23,
          "columnNumber" : 57,
          "fileName" : "/app/code/elasticFileSystem.java",
          "excerpt" : "                .build();\n\n        // Create a new EFS file system\n        CreateFileSystemRequest createFileSystemRequest = new CreateFileSystemRequest()\n                .withCreationToken(\"my-file-system\");\n        CreateFileSystemResult createFileSystemResult = efs.createFileSystem(createFileSystemRequest); /* <=== com.amazonaws.services.elasticfilesystem.AmazonElasticFileSystem.createFileSystem */ \n\n        // Get the ID of the newly created EFS file system\n        String fileSystemId = createFileSystemResult.getFileSystemId();\n    }\n}"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.ManagedBlockchain",
      "occurrences" : [
        {
          "sample" : "withNetworkId(\"my-network-id\")",
          "lineNumber" : 12,
          "columnNumber" : 55,
          "fileName" : "/app/code/managedBlockchain.java",
          "excerpt" : "    public static void main(String[] args) {\n        // Create an AMB client\n        AmazonManagedBlockchain client = AmazonManagedBlockchainClientBuilder.defaultClient();\n\n        // Create a proposal\n        CreateProposalRequest createProposalRequest = new CreateProposalRequest() /* <=== com.amazonaws.services.managedblockchain.model.CreateProposalRequest.withNetworkId */ \n                .withNetworkId(\"my-network-id\")\n                .withActions(new Action().withMemberId(\"my-member-id\"));\n        \n        // Submitting the proposal\n        CreateProposalResult createProposalResult = client.createProposal(createProposalRequest);"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.CloudWatch",
      "occurrences" : [
        {
          "sample" : "withMetricName(\"personal_data_count\")",
          "lineNumber" : 16,
          "columnNumber" : 29,
          "fileName" : "/app/code/cloudwatch.java",
          "excerpt" : "    public CloudWatchWorker() {\n        cloudWatch = AmazonCloudWatchClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        MetricDatum datum = new MetricDatum() /* <=== com.amazonaws.services.cloudwatch.model.MetricDatum.withMetricName */ \n            .withMetricName(\"personal_data_count\")\n            .withUnit(\"Count\")\n            .withValue(personalData.size())\n            .withDimensions(new Dimension().withName(\"data_type\").withValue(\"personal\"));\n"
        },
        {
          "sample" : "standard()",
          "lineNumber" : 15,
          "columnNumber" : 34,
          "fileName" : "/app/code/cloudwatchEvents.java",
          "excerpt" : "public class CloudWatchEventsDataProcessor {\n\n    private AmazonCloudWatchEvents cloudWatchEventsClient;\n\n    public CloudWatchEventsDataProcessor() {\n        cloudWatchEventsClient = AmazonCloudWatchEventsClientBuilder.standard().build(); /* <=== com.amazonaws.services.cloudwatchevents.AmazonCloudWatchEventsClientBuilder.standard */ \n    }\n\n    public void processPersonalData(Map<String, String> personalData) {\n        // Validate and sanitize the personal data\n        // ..."
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.IoTFleetHub",
      "occurrences" : [
        {
          "sample" : "withFleetId(fleetId)",
          "lineNumber" : 25,
          "columnNumber" : 35,
          "fileName" : "/app/code/iotFleetHub.java",
          "excerpt" : "    CreateAssetResult result = fleetHubClient.createAsset(request);\n    System.out.println(\"Asset created: \" + result.getAssetId());\n  }\n\n  public void createMetric(String metricName, String assetId) {\n    CreateMetricRequest request = new CreateMetricRequest() /* <=== com.amazonaws.services.iotfleethub.model.CreateMetricRequest.withFleetId */ \n      .withFleetId(fleetId)\n      .withMetricName(metricName)\n      .withAssetId(assetId);\n    CreateMetricResult result = fleetHubClient.createMetric(request);\n    System.out.println(\"Metric created: \" + result.getMetricId());"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.EC2",
      "occurrences" : [
        {
          "sample" : "getVolume()",
          "lineNumber" : 28,
          "columnNumber" : 27,
          "fileName" : "/app/code/ebs.java",
          "excerpt" : "                .withSize(1)\n                .withVolumeType(\"gp2\");\n        CreateVolumeResult createVolumeResult = ec2.createVolume(createVolumeRequest);\n\n        // Get the ID of the newly created EBS volume\n        String volumeId = createVolumeResult.getVolume().getVolumeId(); /* <=== com.amazonaws.services.ec2.model.CreateVolumeResult.getVolume */ \n    }\n}\n"
        },
        {
          "sample" : "standard()",
          "lineNumber" : 14,
          "columnNumber" : 23,
          "fileName" : "/app/code/ec2.java",
          "excerpt" : "\n    private AmazonEC2 client;\n\n    public PersonalDataProcessor(String accessKey, String secretKey) {\n        BasicAWSCredentials credentials = new BasicAWSCredentials(accessKey, secretKey);\n        this.client = AmazonEC2ClientBuilder.standard() /* <=== com.amazonaws.services.ec2.AmazonEC2ClientBuilder.standard */ \n                .withCredentials(new AWSStaticCredentialsProvider(credentials))\n                .build();\n    }\n\n    public void processData(List<String> data) {"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Organizations",
      "occurrences" : [
        {
          "sample" : "createAccount(createAccountRequest)",
          "lineNumber" : 20,
          "columnNumber" : 51,
          "fileName" : "/app/code/organizations.java",
          "excerpt" : "        // Create a new account in Amazon Organizations to store the personal data\n        CreateAccountRequest createAccountRequest = new CreateAccountRequest()\n            .withEmail(personalData.get(\"email\"))\n            .withAccountName(personalData.get(\"name\"))\n            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest); /* <=== com.amazonaws.services.organizations.AWSOrganizations.createAccount */ \n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId();\n\n        // Add the personal data as tags to the created account\n        TagResourceRequest tagResourceRequest = new TagResourceRequest()\n            .withResourceId(accountId)"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.ComprehendMedical",
      "occurrences" : [
        {
          "sample" : "getEntities()",
          "lineNumber" : 16,
          "columnNumber" : 49,
          "fileName" : "/app/code/comprehendMedical.java",
          "excerpt" : "        String text = \"Patient has a history of heart disease and is currently taking lisinopril and aspirin.\";\n\n        DetectEntitiesRequest request = new DetectEntitiesRequest().withText(text);\n        DetectEntitiesResult result = comprehendMedical.detectEntities(request);\n\n        System.out.println(\"Entities found: \" + result.getEntities()); /* <=== com.amazonaws.services.comprehendmedical.model.DetectEntitiesResult.getEntities */ \n    }\n}"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.StepFunctions",
      "occurrences" : [
        {
          "sample" : "startExecution(startExecutionRequest)",
          "lineNumber" : 32,
          "columnNumber" : 53,
          "fileName" : "/app/code/stepFunction.java",
          "excerpt" : "        StartExecutionRequest startExecutionRequest = new StartExecutionRequest()\n                .withStateMachineArn(STATE_MACHINE_ARN)\n                .withInput(input);\n\n        // Start the execution\n        StartExecutionResult startExecutionResult = stepFunctions.startExecution(startExecutionRequest); /* <=== com.amazonaws.services.stepfunctions.AWSStepFunctions.startExecution */ \n        System.out.println(\"Execution ARN: \" + startExecutionResult.getExecutionArn());\n    }\n}\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.PinpointSMSVoice",
      "occurrences" : [
        {
          "sample" : "withConfigurationSetName(configurationSetName)",
          "lineNumber" : 17,
          "columnNumber" : 65,
          "fileName" : "/app/code/pinpointsmsvoice.java",
          "excerpt" : "        String eventDestinationName = \"sample-event-destination\";\n\n        EventDestinationDefinition eventDestination = new EventDestinationDefinition()\n                .withSnsDestination(new SnsDestination().withTopicArn(\"arn:aws:sns:us-west-2:123456789012:sample-topic\"));\n\n        CreateConfigurationSetEventDestinationRequest request = new CreateConfigurationSetEventDestinationRequest() /* <=== com.amazonaws.services.pinpointsmsvoice.model.CreateConfigurationSetEventDestinationRequest.withConfigurationSetName */ \n                .withConfigurationSetName(configurationSetName)\n                .withEventDestinationName(eventDestinationName)\n                .withEventDestination(eventDestination);\n\n        client.createConfigurationSetEventDestination(request);"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.WorkMailMessageFlow",
      "occurrences" : [
        {
          "sample" : "new ProcessRawEmailRequest()",
          "lineNumber" : 30,
          "columnNumber" : -1,
          "fileName" : "/app/code/workmailmessageflow.java",
          "excerpt" : "\n        // Merge raw message data and processed personal data\n        byte[] finalMessageData = mergeRawMessageDataAndProcessedPersonalData(rawMessageData, processedPersonalData);\n\n        // Create and set ProcessRawEmailRequest\n        ProcessRawEmailRequest request = new ProcessRawEmailRequest().withRawEmailContent(finalMessageData); /* <=== com.amazonaws.services.workmailmessageflow.model.ProcessRawEmailRequest.<init> */ \n\n        // Process raw email\n        ProcessRawEmailResult result = client.processRawEmail(request);\n\n        // Retrieve processed email result"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.DocumentDB",
      "occurrences" : [
        {
          "sample" : "putItem(putItemRequest)",
          "lineNumber" : 27,
          "columnNumber" : 9,
          "fileName" : "/app/code/docDB.java",
          "excerpt" : "        Map<String, AttributeValue> item = new HashMap<>();\n        item.put(\"personal_data\", new AttributeValue(personalData));\n        PutItemRequest putItemRequest = new PutItemRequest()\n                .withTableName(\"personal_data_table\")\n                .withItem(item);\n        docDBClient.putItem(putItemRequest); /* <=== com.amazonaws.services.docdb.AmazonDocDB.putItem */ \n    }\n}\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.RelationalDatabaseService",
      "occurrences" : [
        {
          "sample" : "standard()",
          "lineNumber" : 40,
          "columnNumber" : 42,
          "fileName" : "/app/code/rds.java",
          "excerpt" : "                }\n            }\n        }\n\n        // Use com.amazonaws.services.rds to process personal data\n        AmazonRDSClientBuilder builder = AmazonRDSClientBuilder.standard(); /* <=== com.amazonaws.services.rds.AmazonRDSClientBuilder.standard */ \n        com.amazonaws.services.rds.AmazonRDS client = builder.build();\n        DBInstance instance = client.describeDBInstances().getDBInstances().get(0);\n        System.out.println(\"DBInstance: \" + instance.getDBInstanceIdentifier());\n\n        // Process personal data in com.amazonaws.services.rds"
        },
        {
          "sample" : "getResultSet()",
          "lineNumber" : 26,
          "columnNumber" : 30,
          "fileName" : "/app/code/rdsData.java",
          "excerpt" : "        \n        // Send the RDS Data Request\n        ExecuteSqlResult rdsDataResult = rdsDataClient.executeSql(rdsDataRequest);\n        \n        // Get the RDS Data Result\n        List<Field> fields = rdsDataResult.getResultSet().getRecords().get(0).getFields(); /* <=== com.amazonaws.services.rdsdata.model.ExecuteSqlResult.getResultSet */ \n        \n        // Print the RDS Data Result\n        System.out.println(\"RDS Data Result:\");\n        for (Field field : fields) {\n            System.out.println(field.getStringValue());"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Translate",
      "occurrences" : [
        {
          "sample" : "translateMedicalText(request)",
          "lineNumber" : 31,
          "columnNumber" : 41,
          "fileName" : "/app/code/translateMedical.java",
          "excerpt" : "            .withSourceLanguageCode(\"en\")\n            .withTargetLanguageCode(\"fr\")\n            .withText(\"I have a headache\");\n\n    // Translate the text\n    TranslateMedicalTextResult result = translateMedical.translateMedicalText(request); /* <=== com.amazonaws.services.translatemedical.AWSTranslateMedical.translateMedicalText */ \n    System.out.println(\"Translated Text: \" + result.getTranslatedText());\n}\n}"
        },
        {
          "sample" : "translateText(request)",
          "lineNumber" : 34,
          "columnNumber" : 38,
          "fileName" : "/app/code/translate.java",
          "excerpt" : "            .withText(\"Hello World\")\n            .withSourceLanguageCode(SOURCE_LANGUAGE)\n            .withTargetLanguageCode(TARGET_LANGUAGE);\n\n        // Send the request and get the result\n        TranslateTextResult result = translate.translateText(request); /* <=== com.amazonaws.services.translate.AmazonTranslate.translateText */ \n\n        // Print the translated text\n        System.out.println(result.getTranslatedText());\n    }\n}"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.FraudDetector",
      "occurrences" : [
        {
          "sample" : "standard()",
          "lineNumber" : 9,
          "columnNumber" : 42,
          "fileName" : "/app/code/fraudDetector.java",
          "excerpt" : "import com.amazonaws.services.frauddetector.model.CreateDetectorVersionResult;\n\npublic class FraudDetectorSink {\n    public static void main(String[] args) {\n        // Build the Fraud Detector client\n        AWSFraudDetector fraudDetector = AWSFraudDetectorClientBuilder.standard() /* <=== com.amazonaws.services.frauddetector.AWSFraudDetectorClientBuilder.standard */ \n                .withRegion(\"us-west-2\")\n                .build();\n\n        // Create a detector version\n        CreateDetectorVersionRequest request = new CreateDetectorVersionRequest()"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.TranscribeMedical",
      "occurrences" : [
        {
          "sample" : "withLanguageCode(\"en-US\")",
          "lineNumber" : 14,
          "columnNumber" : 55,
          "fileName" : "/app/code/transcribeMedical.java",
          "excerpt" : "        AWSTranscribeMedical transcribeMedical = AWSTranscribeMedicalClientBuilder.standard()\n                .withRegion(\"us-west-2\")\n                .build();\n        \n        // Define the input and output settings for the transcription job\n        StartMedicalTranscriptionJobRequest request = new StartMedicalTranscriptionJobRequest() /* <=== com.amazonaws.services.transcribemedical.model.StartMedicalTranscriptionJobRequest.withLanguageCode */ \n                .withLanguageCode(\"en-US\")\n                .withMediaSampleRateHertz(8000)\n                .withMediaFormat(\"wav\")\n                .withTranscriptionJobName(\"my-transcription-job\")\n                .withOutputBucketName(\"my-output-bucket\")"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazon.Aws",
      "occurrences" : [
        {
          "sample" : "withConfigurationSetName(configurationSetName)",
          "lineNumber" : 17,
          "columnNumber" : 65,
          "fileName" : "/app/code/pinpointsmsvoice.java",
          "excerpt" : "        String eventDestinationName = \"sample-event-destination\";\n\n        EventDestinationDefinition eventDestination = new EventDestinationDefinition()\n                .withSnsDestination(new SnsDestination().withTopicArn(\"arn:aws:sns:us-west-2:123456789012:sample-topic\"));\n\n        CreateConfigurationSetEventDestinationRequest request = new CreateConfigurationSetEventDestinationRequest() /* <=== com.amazonaws.services.pinpointsmsvoice.model.CreateConfigurationSetEventDestinationRequest.withConfigurationSetName */ \n                .withConfigurationSetName(configurationSetName)\n                .withEventDestinationName(eventDestinationName)\n                .withEventDestination(eventDestination);\n\n        client.createConfigurationSetEventDestination(request);"
        },
        {
          "sample" : "sendEmail(request)",
          "lineNumber" : 24,
          "columnNumber" : 34,
          "fileName" : "/app/code/simpleemail.java",
          "excerpt" : "                    .withSubject(new Content().withData(\"Test email\"))\n                    .withBody(new Body().withText(new Content().withData(\"Hello, this is a test email.\"))))\n            .withSource(\"sender@example.com\"); // Set the sender\n\n        // Send the email\n        SendEmailResult result = client.sendEmail(request); /* <=== com.amazonaws.services.simpleemail.AmazonSimpleEmailService.sendEmail */ \n\n        // Print the result\n        System.out.println(\"Email sent with ID: \" + result.getMessageId());\n    }\n}"
        },
        {
          "sample" : "new CreateModelRequest()",
          "lineNumber" : 30,
          "columnNumber" : -1,
          "fileName" : "/app/code/lookoutForVision.java",
          "excerpt" : "    DatasetMetadata datasetMetadata = client.createDataset(createDatasetRequest).getDataset();\n\n    // Create a model\n    String modelName = \"personal_data_model\";\n    String modelDisplayName = \"Personal Data Model\";\n    CreateModelRequest createModelRequest = new CreateModelRequest() /* <=== com.amazonaws.services.lookoutforvision.model.CreateModelRequest.<init> */ \n        .withModelName(modelName)\n        .withDisplayName(modelDisplayName)\n        .withDatasetName(datasetMetadata.getDatasetName());\n    ModelMetadata modelMetadata = client.createModel(createModelRequest).getModel();\n"
        },
        {
          "sample" : "withId(\"1\")",
          "lineNumber" : 22,
          "columnNumber" : 29,
          "fileName" : "/app/code/kendra.java",
          "excerpt" : "\n        // Create a list of documents to index\n        List<Document> documents = new ArrayList<Document>();\n\n        // Add a document to the list\n        Document document = new Document() /* <=== com.amazonaws.services.kendra.model.Document.withId */ \n            .withId(\"1\")\n            .withTitle(\"My first document\")\n            .withContent(\"This is the content of my first document.\")\n            .withAttributes(\n                new DocumentAttributeValue()"
        },
        {
          "sample" : "withMetadata(metadata)",
          "lineNumber" : 37,
          "columnNumber" : 36,
          "fileName" : "/app/code/s3.java",
          "excerpt" : "        ObjectMetadata metadata = new ObjectMetadata();\n        metadata.setContentType(\"text/plain\");\n        metadata.addUserMetadata(\"x-amz-meta-title\", \"my-file-title\");\n\n        // Create an S3 put object request\n        PutObjectRequest request = new PutObjectRequest(bucketName, \"path/in/bucket/file.txt\", file) /* <=== com.amazonaws.services.s3.model.PutObjectRequest.withMetadata */ \n                .withMetadata(metadata);\n\n        // Upload the file to S3\n        s3Client.putObject(request);\n    }"
        },
        {
          "sample" : "getDeliveryStreamARN()",
          "lineNumber" : 18,
          "columnNumber" : 67,
          "fileName" : "/app/code/kinesisFirehose.java",
          "excerpt" : "        createDeliveryStreamRequest.setS3DestinationConfiguration(\n            // S3 configuration goes here\n        );\n\n        CreateDeliveryStreamResult createDeliveryStreamResult = firehoseClient.createDeliveryStream(createDeliveryStreamRequest);\n        System.out.println(\"Delivery stream created with ARN: \" + createDeliveryStreamResult.getDeliveryStreamARN()); /* <=== com.amazonaws.services.kinesisfirehose.model.CreateDeliveryStreamResult.getDeliveryStreamARN */ \n    }\n}\n"
        },
        {
          "sample" : "putMetricData(request)",
          "lineNumber" : 26,
          "columnNumber" : 9,
          "fileName" : "/app/code/cloudwatch.java",
          "excerpt" : "\n        PutMetricDataRequest request = new PutMetricDataRequest()\n            .withNamespace(\"PersonalData\")\n            .withMetricData(datum);\n\n        cloudWatch.putMetricData(request); /* <=== com.amazonaws.services.cloudwatch.AmazonCloudWatch.putMetricData */ \n    }\n}\n"
        },
        {
          "sample" : "new StartStreamTranscriptionRequest()",
          "lineNumber" : 11,
          "columnNumber" : -1,
          "fileName" : "/app/code/transcribeStreaming.java",
          "excerpt" : "public class Main {\n\n    public static void main(String[] args) {\n        AmazonTranscribeStreaming transcribe = AmazonTranscribeStreamingClientBuilder.defaultClient();\n\n        StartStreamTranscriptionRequest request = new StartStreamTranscriptionRequest() /* <=== com.amazonaws.services.transcribestreaming.model.StartStreamTranscriptionRequest.<init> */ \n            .withLanguageCode(\"en-US\")\n            .withMediaEncoding(\"pcm\")\n            .withMediaSampleRateHertz(16000)\n            .withTranscriptionJobName(\"MyTranscriptionJob\")\n            .withMediaEventHandler(new MyAudioStreamHandler());"
        },
        {
          "sample" : "new Image()",
          "lineNumber" : 16,
          "columnNumber" : -1,
          "fileName" : "/app/code/rekognition.java",
          "excerpt" : "    public static void main(String[] args) {\n        // Create an Amazon Rekognition client\n        AmazonRekognition rekognitionClient = AmazonRekognitionClientBuilder.defaultClient();\n\n        // Provide an image to detect labels in\n        Image image = new Image() /* <=== com.amazonaws.services.rekognition.model.Image.<init> */ \n            .withBytes(ByteBuffer.wrap(imageBytes));\n\n        // Create a DetectLabelsRequest\n        DetectLabelsRequest request = new DetectLabelsRequest()\n            .withImage(image)"
        },
        {
          "sample" : "withDatabaseName(\"my_database\")",
          "lineNumber" : 19,
          "columnNumber" : 49,
          "fileName" : "/app/code/timestream.java",
          "excerpt" : "        CreateDatabaseRequest createDatabaseRequest = new CreateDatabaseRequest()\n            .withDatabaseName(\"my_database\");\n        client.createDatabase(createDatabaseRequest);\n        \n        // Create a table\n        CreateTableRequest createTableRequest = new CreateTableRequest() /* <=== com.amazonaws.services.timestreamwrite.model.CreateTableRequest.withDatabaseName */ \n            .withDatabaseName(\"my_database\")\n            .withTableName(\"my_table\");\n        client.createTable(createTableRequest);\n        \n        // Prepare data to be written to the table"
        },
        {
          "sample" : "putItem(putItemRequest)",
          "lineNumber" : 27,
          "columnNumber" : 9,
          "fileName" : "/app/code/docDB.java",
          "excerpt" : "        Map<String, AttributeValue> item = new HashMap<>();\n        item.put(\"personal_data\", new AttributeValue(personalData));\n        PutItemRequest putItemRequest = new PutItemRequest()\n                .withTableName(\"personal_data_table\")\n                .withItem(item);\n        docDBClient.putItem(putItemRequest); /* <=== com.amazonaws.services.docdb.AmazonDocDB.putItem */ \n    }\n}\n"
        },
        {
          "sample" : "new SubmitJobRequest()",
          "lineNumber" : 14,
          "columnNumber" : -1,
          "fileName" : "/app/code/batch.java",
          "excerpt" : "    private static final String JOB_DEFINITION = \"personal-data-definition\";\n\n    public static void main(String[] args) {\n        AmazonBatch batchClient = AmazonBatchClientBuilder.defaultClient();\n\n        SubmitJobRequest submitJobRequest = new SubmitJobRequest() /* <=== com.amazonaws.services.batch.model.SubmitJobRequest.<init> */ \n                .withJobName(JOB_NAME)\n                .withJobQueue(JOB_QUEUE)\n                .withJobDefinition(JOB_DEFINITION);\n\n        batchClient.submitJob(submitJobRequest);"
        },
        {
          "sample" : "standard()",
          "lineNumber" : 13,
          "columnNumber" : 29,
          "fileName" : "/app/code/iotwireless.java",
          "excerpt" : "public class IoTWirelessDataProcessor {\n\n    private AWSIoTWireless iotWirelessClient;\n\n    public IoTWirelessDataProcessor() {\n        iotWirelessClient = AWSIoTWirelessClientBuilder.standard().build(); /* <=== com.amazonaws.services.iotwireless.AWSIoTWirelessClientBuilder.standard */ \n    }\n\n    public void processPersonalData(Map<String, String> personalData) {\n        // Validate and sanitize the personal data\n        // ..."
        },
        {
          "sample" : "new TranslateMedicalTextRequest()",
          "lineNumber" : 25,
          "columnNumber" : -1,
          "fileName" : "/app/code/translateMedical.java",
          "excerpt" : "            .withCredentials(new AWSStaticCredentialsProvider(credentials))\n            .withClientConfiguration(clientConfig)\n            .build();\n\n    // Create a TranslateMedicalTextRequest\n    TranslateMedicalTextRequest request = new TranslateMedicalTextRequest() /* <=== com.amazonaws.services.translatemedical.model.TranslateMedicalTextRequest.<init> */ \n            .withSourceLanguageCode(\"en\")\n            .withTargetLanguageCode(\"fr\")\n            .withText(\"I have a headache\");\n\n    // Translate the text"
        },
        {
          "sample" : "listAnalyses(request)",
          "lineNumber" : 10,
          "columnNumber" : 37,
          "fileName" : "/app/code/quickSight.java",
          "excerpt" : "\npublic class QuickSightSample {\n    public static void main(String[] args) {\n        AmazonQuickSight client = AmazonQuickSightClientBuilder.standard().build();\n        ListAnalysesRequest request = new ListAnalysesRequest();\n        ListAnalysesResult result = client.listAnalyses(request); /* <=== com.amazonaws.services.quicksight.AmazonQuickSight.listAnalyses */ \n        System.out.println(\"Analysis list: \" + result.getAnalysisSummaryList());\n    }\n}\n"
        },
        {
          "sample" : "withEndpointDetails(dataflowEndpoints)",
          "lineNumber" : 23,
          "columnNumber" : 54,
          "fileName" : "/app/code/groundStation.java",
          "excerpt" : "        for (String endpoint : endpoints) {\n            DataflowEndpoint dataflowEndpoint = new DataflowEndpoint()\n                .withEndpointDetails(new EndpointDetails().withEndpoint(endpoint));\n            dataflowEndpoints.add(dataflowEndpoint);\n        }\n        CreateDataflowEndpointGroupRequest request = new CreateDataflowEndpointGroupRequest() /* <=== com.amazonaws.services.groundstation.model.CreateDataflowEndpointGroupRequest.withEndpointDetails */ \n            .withEndpointDetails(dataflowEndpoints)\n            .withName(name);\n        dataflowEndpointGroupId = client.createDataflowEndpointGroup(request).getDataflowEndpointGroupId();\n    }\n"
        },
        {
          "sample" : "startExecution(startExecutionRequest)",
          "lineNumber" : 32,
          "columnNumber" : 53,
          "fileName" : "/app/code/stepFunction.java",
          "excerpt" : "        StartExecutionRequest startExecutionRequest = new StartExecutionRequest()\n                .withStateMachineArn(STATE_MACHINE_ARN)\n                .withInput(input);\n\n        // Start the execution\n        StartExecutionResult startExecutionResult = stepFunctions.startExecution(startExecutionRequest); /* <=== com.amazonaws.services.stepfunctions.AWSStepFunctions.startExecution */ \n        System.out.println(\"Execution ARN: \" + startExecutionResult.getExecutionArn());\n    }\n}\n"
        },
        {
          "sample" : "defaultClient()",
          "lineNumber" : 9,
          "columnNumber" : 34,
          "fileName" : "/app/code/health.java",
          "excerpt" : "import com.amazonaws.services.health.model.DescribeEventsResult;\n\npublic class PersonalDataProcessor {\n\n    public static void main(String[] args) {\n        AWSHealth healthClient = AWSHealthClientBuilder.defaultClient(); /* <=== com.amazonaws.services.health.AWSHealthClientBuilder.defaultClient */ \n\n        DescribeEventsRequest describeEventsRequest = new DescribeEventsRequest();\n\n        DescribeEventsResult describeEventsResult = healthClient.describeEvents(describeEventsRequest);\n"
        },
        {
          "sample" : "getReplicationJobArn()",
          "lineNumber" : 28,
          "columnNumber" : 36,
          "fileName" : "/app/code/disasterRecoveryService.java",
          "excerpt" : "                .withFrequency(24)\n                .withStartTimestamp(System.currentTimeMillis());\n        CreateReplicationJobResult createReplicationJobResult = disasterRecovery.createReplicationJob(createReplicationJobRequest);\n\n        // Get the ARN of the newly created Replication Job\n        String replicationJobArn = createReplicationJobResult.getReplicationJobArn(); /* <=== com.amazonaws.services.disasterrecovery.model.CreateReplicationJobResult.getReplicationJobArn */ \n    }\n}\n"
        },
        {
          "sample" : "getEntries()",
          "lineNumber" : 47,
          "columnNumber" : 43,
          "fileName" : "/app/code/eventBridge.java",
          "excerpt" : "\n        // Send the events to EventBridge\n        PutEventsResult result = client.putEvents(request);\n\n        // Print the results of sending the events\n        for (PutEventsResultEntry entry : result.getEntries()) { /* <=== com.amazonaws.services.eventbridge.model.PutEventsResult.getEntries */ \n            System.out.println(\"Event sent: \" + entry.getEventId());\n        }\n    }\n}\n"
        },
        {
          "sample" : "getStackSummaries()",
          "lineNumber" : 15,
          "columnNumber" : 51,
          "fileName" : "/app/code/opsworks.java",
          "excerpt" : "\n        DescribeStackSummariesRequest describeStackSummariesRequest = new DescribeStackSummariesRequest();\n\n        DescribeStackSummariesResult describeStackSummariesResult = opsWorksClient.describeStackSummaries(describeStackSummariesRequest);\n\n        System.out.println(\"Number of Stacks: \" + describeStackSummariesResult.getStackSummaries().size()); /* <=== com.amazonaws.services.opsworks.model.DescribeStackSummariesResult.getStackSummaries */ \n    }\n}\n"
        },
        {
          "sample" : "openTunnel(openTunnelRequest)",
          "lineNumber" : 21,
          "columnNumber" : 45,
          "fileName" : "/app/code/iotsecuretunneling.java",
          "excerpt" : "\n        // Open a secure tunnel\n        OpenTunnelRequest openTunnelRequest = new OpenTunnelRequest()\n                .withDescription(\"My tunnel\")\n                .withDestinationConfig(new DestinationConfig().withThingName(\"myThing\"));\n        OpenTunnelResult openTunnelResult = client.openTunnel(openTunnelRequest); /* <=== com.amazonaws.services.iotsecuretunneling.AWSIoTSecureTunneling.openTunnel */ \n        String tunnelId = openTunnelResult.getTunnelId();\n\n        // List the tunnels\n        ListTunnelsResult listTunnelsResult = client.listTunnels(new ListTunnelsRequest());\n        for (TunnelSummary tunnelSummary : listTunnelsResult.getTunnelSummaries()) {"
        },
        {
          "sample" : "withNotificationType(\"FORECASTED\")",
          "lineNumber" : 34,
          "columnNumber" : 9,
          "fileName" : "/app/code/budgets.java",
          "excerpt" : "            .withNotificationType(\"ACTUAL\")\n            .withComparisonOperator(\"GREATER_THAN\")\n            .withThreshold(80.0)\n            .withThresholdType(\"PERCENTAGE\"));\n    notifications.add(\n        new Notification() /* <=== com.amazonaws.services.budgets.model.Notification.withNotificationType */ \n            .withNotificationType(\"FORECASTED\")\n            .withComparisonOperator(\"GREATER_THAN\")\n            .withThreshold(100.0)\n            .withThresholdType(\"ABSOLUTE_VALUE\"));\n    createBudgetRequest"
        },
        {
          "sample" : "build()",
          "lineNumber" : 41,
          "columnNumber" : 55,
          "fileName" : "/app/code/rds.java",
          "excerpt" : "            }\n        }\n\n        // Use com.amazonaws.services.rds to process personal data\n        AmazonRDSClientBuilder builder = AmazonRDSClientBuilder.standard();\n        com.amazonaws.services.rds.AmazonRDS client = builder.build(); /* <=== com.amazonaws.services.rds.AmazonRDSClientBuilder.build */ \n        DBInstance instance = client.describeDBInstances().getDBInstances().get(0);\n        System.out.println(\"DBInstance: \" + instance.getDBInstanceIdentifier());\n\n        // Process personal data in com.amazonaws.services.rds\n        // ..."
        },
        {
          "sample" : "new PutLogEventsRequest(logGroupName, logStreamName, logEvents)",
          "lineNumber" : 35,
          "columnNumber" : -1,
          "fileName" : "/app/code/logs.java",
          "excerpt" : "                .withMessage(data)\n                .withTimestamp(System.currentTimeMillis());\n        }).collect(Collectors.toList());\n        \n        // Put the CloudWatch Logs events\n        cloudWatchLogsClient.putLogEvents(new PutLogEventsRequest(logGroupName, logStreamName, logEvents)); /* <=== com.amazonaws.services.logs.model.PutLogEventsRequest.<init> */ \n    }\n}\n"
        },
        {
          "sample" : "putEvents(request)",
          "lineNumber" : 33,
          "columnNumber" : 34,
          "fileName" : "/app/code/cloudwatchEvents.java",
          "excerpt" : "        entries.add(entry);\n\n        PutEventsRequest request = new PutEventsRequest().withEntries(entries);\n\n        // Send the data to CloudWatch Events\n        PutEventsResult result = cloudWatchEventsClient.putEvents(request); /* <=== com.amazonaws.services.cloudwatchevents.AmazonCloudWatchEvents.putEvents */ \n\n        // Handle the response from CloudWatch Events\n        // ...\n    }\n}"
        },
        {
          "sample" : "getProcessedEmail()",
          "lineNumber" : 36,
          "columnNumber" : 33,
          "fileName" : "/app/code/workmailmessageflow.java",
          "excerpt" : "\n        // Process raw email\n        ProcessRawEmailResult result = client.processRawEmail(request);\n\n        // Retrieve processed email result\n        byte[] processedEmail = result.getProcessedEmail(); /* <=== com.amazonaws.services.workmailmessageflow.model.ProcessRawEmailResult.getProcessedEmail */ \n    }\n\n    private static byte[] getRawMessageData() {\n        // retrieve raw message data\n        ..."
        },
        {
          "sample" : "new AmazonFinspaceDataClient()",
          "lineNumber" : 8,
          "columnNumber" : -1,
          "fileName" : "/app/code/finspacedata.java",
          "excerpt" : "import com.amazonaws.services.finspacedata.model.ListTablesResult;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create an instance of the AmazonFinspaceDataClient class\n        AmazonFinspaceDataClient client = new AmazonFinspaceDataClient(); /* <=== com.amazonaws.services.finspacedata.AmazonFinspaceDataClient.<init> */ \n\n        // Set the dataset name and the access key and secret key \n        client.setEndpoint(\"finspacedata.us-west-2.amazonaws.com\");\n        client.setRegion(Region.getRegion(Regions.US_WEST_2));\n        client.setAWSCredentials(new BasicAWSCredentials(\"accessKey\", \"secretKey\"));"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Lightsail",
      "occurrences" : [
        {
          "sample" : "withInstanceName(\"exampleInstanceName\")",
          "lineNumber" : 11,
          "columnNumber" : 49,
          "fileName" : "/app/code/lightsail.java",
          "excerpt" : "public class PersonalDataProcessor {\n\n    public static void main(String[] args) {\n        AmazonLightsail lightsailClient = AmazonLightsailClientBuilder.defaultClient();\n\n        GetInstanceRequest getInstanceRequest = new GetInstanceRequest() /* <=== com.amazonaws.services.lightsail.model.GetInstanceRequest.withInstanceName */ \n            .withInstanceName(\"exampleInstanceName\");\n\n        GetInstanceResult getInstanceResult = lightsailClient.getInstance(getInstanceRequest);\n\n        System.out.println(\"Instance Name: \" + getInstanceResult.getInstance().getName());"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Batch",
      "occurrences" : [
        {
          "sample" : "withJobName(JOB_NAME)",
          "lineNumber" : 14,
          "columnNumber" : 45,
          "fileName" : "/app/code/batch.java",
          "excerpt" : "    private static final String JOB_DEFINITION = \"personal-data-definition\";\n\n    public static void main(String[] args) {\n        AmazonBatch batchClient = AmazonBatchClientBuilder.defaultClient();\n\n        SubmitJobRequest submitJobRequest = new SubmitJobRequest() /* <=== com.amazonaws.services.batch.model.SubmitJobRequest.withJobName */ \n                .withJobName(JOB_NAME)\n                .withJobQueue(JOB_QUEUE)\n                .withJobDefinition(JOB_DEFINITION);\n\n        batchClient.submitJob(submitJobRequest);"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Kendra",
      "occurrences" : [
        {
          "sample" : "new DocumentAttributeValue()",
          "lineNumber" : 30,
          "columnNumber" : -1,
          "fileName" : "/app/code/kendra.java",
          "excerpt" : "            .withContent(\"This is the content of my first document.\")\n            .withAttributes(\n                new DocumentAttributeValue()\n                    .withKey(\"key1\")\n                    .withValue(\"value1\"),\n                new DocumentAttributeValue() /* <=== com.amazonaws.services.kendra.model.DocumentAttributeValue.<init> */ \n                    .withKey(\"key2\")\n                    .withValue(\"value2\")\n            );\n        documents.add(document);\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.AugmentedAI",
      "occurrences" : [
        {
          "sample" : "invokeEndpoint(invokeEndpointRequest)",
          "lineNumber" : 21,
          "columnNumber" : 53,
          "fileName" : "/app/code/augmentedairuntime.java",
          "excerpt" : "        \n        // Create the request to invoke the endpoint\n        InvokeEndpointRequest invokeEndpointRequest = new InvokeEndpointRequest().withEndpointName(endpointArn).withBody(inputData);\n        \n        // Invoke the endpoint\n        InvokeEndpointResult invokeEndpointResult = aiRuntimeClient.invokeEndpoint(invokeEndpointRequest); /* <=== com.amazonaws.services.augmentedairuntime.AmazonAugmentedAIRuntime.invokeEndpoint */ \n        \n        // Get the response\n        String response = new String(invokeEndpointResult.getBody().array());\n        \n        // Print the response"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Timestream",
      "occurrences" : [
        {
          "sample" : "withDatabaseName(\"my_database\")",
          "lineNumber" : 19,
          "columnNumber" : 49,
          "fileName" : "/app/code/timestream.java",
          "excerpt" : "        CreateDatabaseRequest createDatabaseRequest = new CreateDatabaseRequest()\n            .withDatabaseName(\"my_database\");\n        client.createDatabase(createDatabaseRequest);\n        \n        // Create a table\n        CreateTableRequest createTableRequest = new CreateTableRequest() /* <=== com.amazonaws.services.timestreamwrite.model.CreateTableRequest.withDatabaseName */ \n            .withDatabaseName(\"my_database\")\n            .withTableName(\"my_table\");\n        client.createTable(createTableRequest);\n        \n        // Prepare data to be written to the table"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.CloudWatchEvents",
      "occurrences" : [
        {
          "sample" : "setDetailType(\"personalData\")",
          "lineNumber" : 27,
          "columnNumber" : 9,
          "fileName" : "/app/code/cloudwatchEvents.java",
          "excerpt" : "        // Prepare the data to send to CloudWatch Events\n        ArrayList<PutEventsRequestEntry> entries = new ArrayList<>();\n        PutEventsRequestEntry entry = new PutEventsRequestEntry();\n        // format the personal data as desired\n        entry.setDetail(personalData.toString());\n        entry.setDetailType(\"personalData\"); /* <=== com.amazonaws.services.cloudwatchevents.model.PutEventsRequestEntry.setDetailType */ \n        entries.add(entry);\n\n        PutEventsRequest request = new PutEventsRequest().withEntries(entries);\n\n        // Send the data to CloudWatch Events"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.OpsWorks",
      "occurrences" : [
        {
          "sample" : "describeStackSummaries(describeStackSummariesRequest)",
          "lineNumber" : 13,
          "columnNumber" : 69,
          "fileName" : "/app/code/opsworks.java",
          "excerpt" : "    public static void main(String[] args) {\n        AWSOpsWorks opsWorksClient = AWSOpsWorksClientBuilder.defaultClient();\n\n        DescribeStackSummariesRequest describeStackSummariesRequest = new DescribeStackSummariesRequest();\n\n        DescribeStackSummariesResult describeStackSummariesResult = opsWorksClient.describeStackSummaries(describeStackSummariesRequest); /* <=== com.amazonaws.services.opsworks.AWSOpsWorks.describeStackSummaries */ \n\n        System.out.println(\"Number of Stacks: \" + describeStackSummariesResult.getStackSummaries().size());\n    }\n}\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.CloudTrail",
      "occurrences" : [
        {
          "sample" : "new DataResource()",
          "lineNumber" : 16,
          "columnNumber" : -1,
          "fileName" : "/app/code/cloudtrail.java",
          "excerpt" : "    public CloudTrailWorker() {\n        cloudTrail = AWSCloudTrailClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        DataResource dataResource = new DataResource() /* <=== com.amazonaws.services.cloudtrail.model.DataResource.<init> */ \n            .withType(\"AWS::S3::Object\")\n            .withValues(Arrays.asList(\"arn:aws:s3:::personal-data-bucket/*\"));\n\n        EventSelector eventSelector = new EventSelector()\n            .withReadWriteType(\"All\")"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.CodeGuruReviewer",
      "occurrences" : [
        {
          "sample" : "putRecommendationFeedback(request)",
          "lineNumber" : 26,
          "columnNumber" : 50,
          "fileName" : "/app/code/codeguruReviewer.java",
          "excerpt" : "        PutRecommendationFeedbackRequest request = new PutRecommendationFeedbackRequest();\n        // format the personal data as desired\n        request.setUserIdentity(personalData.toString());\n\n        // Send the data to CodeGuru Reviewer\n        PutRecommendationFeedbackResult result = codeGuruReviewerClient.putRecommendationFeedback(request); /* <=== com.amazonaws.services.codegurureviewer.AmazonCodeGuruReviewer.putRecommendationFeedback */ \n\n        // Handle the response from CodeGuru Reviewer\n        // ...\n    }\n}"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Personalize",
      "occurrences" : [
        {
          "sample" : "withDatasetType(\"USER\")",
          "lineNumber" : 13,
          "columnNumber" : 40,
          "fileName" : "/app/code/personalize.java",
          "excerpt" : "    public static void main(String[] args) {\n        // Build the Amazon Personalize client\n        AmazonPersonalize personalize = AmazonPersonalizeClientBuilder.defaultClient();\n\n        // Create a new dataset\n        CreateDatasetRequest request = new CreateDatasetRequest() /* <=== com.amazonaws.services.personalize.model.CreateDatasetRequest.withDatasetType */ \n            .withDatasetType(\"USER\")\n            .withSchemaArn(\"arn:aws:personalize:us-west-2:123456789012:schema/MovieLens\");\n        CreateDatasetResult result = personalize.createDataset(request);\n\n        // Print the dataset ARN"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Elasticsearch",
      "occurrences" : [
        {
          "sample" : "describeElasticsearchDomain(request)",
          "lineNumber" : 19,
          "columnNumber" : 52,
          "fileName" : "/app/code/elasticSearch.java",
          "excerpt" : "        esClient.setRegion(region);\n    }\n\n    public void describeElasticSearchDomain() {\n        DescribeElasticsearchDomainRequest request = new DescribeElasticsearchDomainRequest().withDomainName(domainName);\n        DescribeElasticsearchDomainResult result = esClient.describeElasticsearchDomain(request); /* <=== com.amazonaws.services.elasticsearch.AmazonElasticsearchClient.describeElasticsearchDomain */ \n        System.out.println(result);\n    }\n}\n"
        }
      ]
    },
    {
      "sinkId" : "Storages.AmazonTimestream.Write",
      "occurrences" : [
        {
          "sample" : "withDatabaseName(\"my_database\")",
          "lineNumber" : 19,
          "columnNumber" : 49,
          "fileName" : "/app/code/timestream.java",
          "excerpt" : "        CreateDatabaseRequest createDatabaseRequest = new CreateDatabaseRequest()\n            .withDatabaseName(\"my_database\");\n        client.createDatabase(createDatabaseRequest);\n        \n        // Create a table\n        CreateTableRequest createTableRequest = new CreateTableRequest() /* <=== com.amazonaws.services.timestreamwrite.model.CreateTableRequest.withDatabaseName */ \n            .withDatabaseName(\"my_database\")\n            .withTableName(\"my_table\");\n        client.createTable(createTableRequest);\n        \n        // Prepare data to be written to the table"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.ElastiCache",
      "occurrences" : [
        {
          "sample" : "new DescribeCacheClustersRequest()",
          "lineNumber" : 32,
          "columnNumber" : -1,
          "fileName" : "/app/code/elasticCache.java",
          "excerpt" : "                .withCacheClusterId(CACHE_CLUSTER_ID)\n                .withNumCacheNodes(1);\n        elastiCache.createCacheCluster(createCacheClusterRequest);\n\n        // Describe the cache cluster\n        DescribeCacheClustersRequest describeCacheClustersRequest = new DescribeCacheClustersRequest() /* <=== com.amazonaws.services.elasticache.model.DescribeCacheClustersRequest.<init> */ \n                .withCacheClusterId(CACHE_CLUSTER_ID);\n        DescribeCacheClustersResult describeCacheClustersResult = elastiCache.describeCacheClusters(describeCacheClustersRequest);\n        System.out.println(describeCacheClustersResult);\n    }\n}"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.ApplicationDiscovery",
      "occurrences" : [
        {
          "sample" : "getAgentsConfigurationStatus()",
          "lineNumber" : 18,
          "columnNumber" : 57,
          "fileName" : "/app/code/applicationDiscovery.java",
          "excerpt" : "        StartDataCollectionByAgentIdsRequest request = new StartDataCollectionByAgentIdsRequest()\n            .withAgentIds(AGENT_ID);\n        StartDataCollectionByAgentIdsResult result = client.startDataCollectionByAgentIds(request);\n\n        // Print the status of the data collection\n        System.out.println(\"Data Collection Status: \" + result.getAgentsConfigurationStatus().get(0).getAgentId()); /* <=== com.amazonaws.services.discovery.model.StartDataCollectionByAgentIdsResult.getAgentsConfigurationStatus */ \n    }\n}\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Polly",
      "occurrences" : [
        {
          "sample" : "new SynthesizeSpeechRequest()",
          "lineNumber" : 11,
          "columnNumber" : -1,
          "fileName" : "/app/code/polly.java",
          "excerpt" : "public class PersonalDataProcessor {\n\n    public static void main(String[] args) {\n        AmazonPolly pollyClient = AmazonPollyClientBuilder.defaultClient();\n\n        SynthesizeSpeechRequest synthesizeSpeechRequest = new SynthesizeSpeechRequest() /* <=== com.amazonaws.services.polly.model.SynthesizeSpeechRequest.<init> */ \n            .withText(\"Example personal data\")\n            .withVoiceId(\"Joanna\")\n            .withOutputFormat(\"mp3\");\n\n        SynthesizeSpeechResult synthesizeSpeechResult = pollyClient.synthesizeSpeech(synthesizeSpeechRequest);"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.QuickSight",
      "occurrences" : [
        {
          "sample" : "new ListAnalysesRequest()",
          "lineNumber" : 9,
          "columnNumber" : -1,
          "fileName" : "/app/code/quickSight.java",
          "excerpt" : "import com.amazonaws.services.quicksight.model.ListAnalysesResult;\n\npublic class QuickSightSample {\n    public static void main(String[] args) {\n        AmazonQuickSight client = AmazonQuickSightClientBuilder.standard().build();\n        ListAnalysesRequest request = new ListAnalysesRequest(); /* <=== com.amazonaws.services.quicksight.model.ListAnalysesRequest.<init> */ \n        ListAnalysesResult result = client.listAnalyses(request);\n        System.out.println(\"Analysis list: \" + result.getAnalysisSummaryList());\n    }\n}\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.ApplicationAutoScaling",
      "occurrences" : [
        {
          "sample" : "getPolicyARN()",
          "lineNumber" : 25,
          "columnNumber" : 53,
          "fileName" : "/app/code/applicationAutoScaling.java",
          "excerpt" : "            .withPolicyType(\"TargetTrackingScaling\")\n            .withTargetTrackingScalingPolicyConfiguration(TARGET_TRACKING_CONFIGURATION);\n        PutScalingPolicyResult result = client.putScalingPolicy(request);\n\n        // Print the policy ARN\n        System.out.println(\"Scaling Policy ARN: \" + result.getPolicyARN()); /* <=== com.amazonaws.services.applicationautoscaling.model.PutScalingPolicyResult.getPolicyARN */ \n    }\n}\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.HealthLake",
      "occurrences" : [
        {
          "sample" : "builder()",
          "lineNumber" : 10,
          "columnNumber" : 24,
          "fileName" : "/app/code/healthlake.java",
          "excerpt" : "\npublic class PersonalDataProcessor {\n  private AmazonHealthLakeClient healthLakeClient;\n  \n  public PersonalDataProcessor() {\n    healthLakeClient = AmazonHealthLakeClient.builder().build(); /* <=== com.amazonaws.services.healthlake.AmazonHealthLakeClient.builder */ \n  }\n  \n  public List<HealthLakeResponse> processPersonalData(List<HealthLakeRequest> personalDataRecords) {\n    List<HealthLakeResponse> processedData = new ArrayList<>();\n    for (HealthLakeRequest request : personalDataRecords) {"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.IoTWireless",
      "occurrences" : [
        {
          "sample" : "new SendDataToWirelessDeviceRequest()",
          "lineNumber" : 22,
          "columnNumber" : -1,
          "fileName" : "/app/code/iotwireless.java",
          "excerpt" : "        // Validate and sanitize the personal data\n        // ...\n\n        // Prepare the data to send to the AWS IoT Wireless device\n        String data = \"\"; // format the personal data as a string\n        SendDataToWirelessDeviceRequest request = new SendDataToWirelessDeviceRequest() /* <=== com.amazonaws.services.iotwireless.model.SendDataToWirelessDeviceRequest.<init> */ \n                .withPayload(data)\n                .withDeviceId(\"device-id\"); // replace with actual device ID\n\n        // Send the data to the AWS IoT Wireless device\n        SendDataToWirelessDeviceResult result = iotWirelessClient.sendDataToWirelessDevice(request);"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.IdentityStore",
      "occurrences" : [
        {
          "sample" : "withUserPoolId(personalData.getUserPoolId())",
          "lineNumber" : 15,
          "columnNumber" : 51,
          "fileName" : "/app/code/identitystore.java",
          "excerpt" : "        identityStoreClient = AWSIdentityStoreClientBuilder.defaultClient();\n    }\n\n    public void processData(PersonalData personalData) {\n        try {\n            CreateUserRequest createUserRequest = new CreateUserRequest() /* <=== com.amazonaws.services.identitystore.model.CreateUserRequest.withUserPoolId */ \n                .withUserPoolId(personalData.getUserPoolId())\n                .withUsername(personalData.getUsername())\n                .withUserAttributes(personalData.getUserAttributes());\n\n            CreateUserResult createUserResult = identityStoreClient.createUser(createUserRequest);"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.ElasticContainerService",
      "occurrences" : [
        {
          "sample" : "standard()",
          "lineNumber" : 17,
          "columnNumber" : 21,
          "fileName" : "/app/code/ecs.java",
          "excerpt" : "\n    private AmazonECS ecsClient;\n\n    public EcsSink() {\n        AWSCredentials credentials = new BasicAWSCredentials(ACCESS_KEY, SECRET_KEY);\n        ecsClient = AmazonECSClientBuilder.standard() /* <=== com.amazonaws.services.ecs.AmazonECSClientBuilder.standard */ \n                .withCredentials(new AWSStaticCredentialsProvider(credentials))\n                .withRegion(REGION)\n                .build();\n    }\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Connect",
      "occurrences" : [
        {
          "sample" : "standard()",
          "lineNumber" : 6,
          "columnNumber" : 33,
          "fileName" : "/app/code/connect.java",
          "excerpt" : "import com.amazonaws.services.connect.AmazonConnect;\nimport com.amazonaws.services.connect.AmazonConnectClientBuilder;\n\npublic class ConnectSample {\n    public static void main(String[] args) {\n        AmazonConnect connect = AmazonConnectClientBuilder.standard().build(); /* <=== com.amazonaws.services.connect.AmazonConnectClientBuilder.standard */ \n        \n        // Use the connect object to interact with the Amazon Connect service.\n    }\n}\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.CustomerProfiles",
      "occurrences" : [
        {
          "sample" : "new CreateProfileRequest()",
          "lineNumber" : 12,
          "columnNumber" : -1,
          "fileName" : "/app/code/customerprofiles.java",
          "excerpt" : "  public static void main(String[] args) {\n    // Set up the Amazon Customer Profiles client\n    AmazonCustomerProfiles client = AmazonCustomerProfilesClientBuilder.defaultClient();\n\n    // Create a profile request with personal data\n    CreateProfileRequest request = new CreateProfileRequest() /* <=== com.amazonaws.services.customerprofiles.model.CreateProfileRequest.<init> */ \n        .withProfileId(\"example-profile-id\")\n        .withDomainName(\"example-domain-name\")\n        .withProfileAttributes(\n            Map.of(\n                \"firstName\", \"John\","
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Glacier",
      "occurrences" : [
        {
          "sample" : "new CreateVaultRequest()",
          "lineNumber" : 21,
          "columnNumber" : -1,
          "fileName" : "/app/code/glacier.java",
          "excerpt" : "                .withCredentials(new AWSStaticCredentialsProvider(credentials))\n                .withRegion(\"us-west-2\")\n                .build();\n\n        // Create a new vault\n        CreateVaultRequest createVaultRequest = new CreateVaultRequest() /* <=== com.amazonaws.services.glacier.model.CreateVaultRequest.<init> */ \n                .withVaultName(\"my-vault\");\n        CreateVaultResult createVaultResult = glacier.createVault(createVaultRequest);\n    }\n}\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Forecast",
      "occurrences" : [
        {
          "sample" : "getDatasetArn()",
          "lineNumber" : 18,
          "columnNumber" : 46,
          "fileName" : "/app/code/forecast.java",
          "excerpt" : "                .withDatasetName(\"myDataset\")\n                .withDomain(\"RETAIL\");\n        CreateDatasetResult createDatasetResult = forecast.createDataset(createDatasetRequest);\n\n        // Print the dataset ARN\n        System.out.println(\"Dataset ARN: \" + createDatasetResult.getDatasetArn()); /* <=== com.amazonaws.services.forecast.model.CreateDatasetResult.getDatasetArn */ \n    }\n}\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.IoT",
      "occurrences" : [
        {
          "sample" : "withFleetId(fleetId)",
          "lineNumber" : 25,
          "columnNumber" : 35,
          "fileName" : "/app/code/iotFleetHub.java",
          "excerpt" : "    CreateAssetResult result = fleetHubClient.createAsset(request);\n    System.out.println(\"Asset created: \" + result.getAssetId());\n  }\n\n  public void createMetric(String metricName, String assetId) {\n    CreateMetricRequest request = new CreateMetricRequest() /* <=== com.amazonaws.services.iotfleethub.model.CreateMetricRequest.withFleetId */ \n      .withFleetId(fleetId)\n      .withMetricName(metricName)\n      .withAssetId(assetId);\n    CreateMetricResult result = fleetHubClient.createMetric(request);\n    System.out.println(\"Metric created: \" + result.getMetricId());"
        },
        {
          "sample" : "closeTunnel(new CloseTunnelRequest().withTunnelId(tunnelId))",
          "lineNumber" : 31,
          "columnNumber" : 47,
          "fileName" : "/app/code/iotsecuretunneling.java",
          "excerpt" : "        for (TunnelSummary tunnelSummary : listTunnelsResult.getTunnelSummaries()) {\n            System.out.println(tunnelSummary.getTunnelId() + \": \" + tunnelSummary.getDescription());\n        }\n\n        // Close the secure tunnel\n        CloseTunnelResult closeTunnelResult = client.closeTunnel(new CloseTunnelRequest().withTunnelId(tunnelId)); /* <=== com.amazonaws.services.iotsecuretunneling.AWSIoTSecureTunneling.closeTunnel */ \n    }\n}\n"
        },
        {
          "sample" : "sendDataToWirelessDevice(request)",
          "lineNumber" : 27,
          "columnNumber" : 49,
          "fileName" : "/app/code/iotwireless.java",
          "excerpt" : "        SendDataToWirelessDeviceRequest request = new SendDataToWirelessDeviceRequest()\n                .withPayload(data)\n                .withDeviceId(\"device-id\"); // replace with actual device ID\n\n        // Send the data to the AWS IoT Wireless device\n        SendDataToWirelessDeviceResult result = iotWirelessClient.sendDataToWirelessDevice(request); /* <=== com.amazonaws.services.iotwireless.AWSIoTWireless.sendDataToWirelessDevice */ \n\n        // Handle the response from the AWS IoT Wireless device\n        // ...\n    }\n}"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.CostAndUsageReport",
      "occurrences" : [
        {
          "sample" : "new CreateReportDefinitionRequest()",
          "lineNumber" : 14,
          "columnNumber" : -1,
          "fileName" : "/app/code/costAndUsageReport.java",
          "excerpt" : "    private static final String S3_BUCKET = \"personal-data-bucket\";\n\n    public static void main(String[] args) {\n        AWSCostAndUsageReport costAndUsageReportClient = AWSCostAndUsageReportClientBuilder.defaultClient();\n\n        CreateReportDefinitionRequest createReportDefinitionRequest = new CreateReportDefinitionRequest() /* <=== com.amazonaws.services.costandusagereport.model.CreateReportDefinitionRequest.<init> */ \n                .withReportName(REPORT_NAME)\n                .withS3Bucket(S3_BUCKET);\n\n        CreateReportDefinitionResult createReportDefinitionResult = costAndUsageReportClient.createReportDefinition(createReportDefinitionRequest);\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Budgets",
      "occurrences" : [
        {
          "sample" : "new Notification()",
          "lineNumber" : 34,
          "columnNumber" : -1,
          "fileName" : "/app/code/budgets.java",
          "excerpt" : "            .withNotificationType(\"ACTUAL\")\n            .withComparisonOperator(\"GREATER_THAN\")\n            .withThreshold(80.0)\n            .withThresholdType(\"PERCENTAGE\"));\n    notifications.add(\n        new Notification() /* <=== com.amazonaws.services.budgets.model.Notification.<init> */ \n            .withNotificationType(\"FORECASTED\")\n            .withComparisonOperator(\"GREATER_THAN\")\n            .withThreshold(100.0)\n            .withThresholdType(\"ABSOLUTE_VALUE\"));\n    createBudgetRequest"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.AppFlow",
      "occurrences" : [
        {
          "sample" : "withDestinationConnectionArn(\"arn:aws:appflow:us-west-2:123456789012:connectiondestination/example-connection\")",
          "lineNumber" : 28,
          "columnNumber" : 42,
          "fileName" : "/app/code/appflow.java",
          "excerpt" : "        // Prepare the data to send to Appflow\n        CreateFlowRequest request = new CreateFlowRequest();\n        request.setName(\"SampleFlow\");\n        request.setDescription(\"Sample flow to process personal data\");\n        request.setSourceFlowConfig(new SourceFlowConfig().withSourceConnectionArn(\"arn:aws:appflow:us-west-2:123456789012:connectionsource/example-connection\"));\n        request.setDestinationFlowConfig(new DestinationFlowConfig().withDestinationConnectionArn(\"arn:aws:appflow:us-west-2:123456789012:connectiondestination/example-connection\")); /* <=== com.amazonaws.services.appflow.model.DestinationFlowConfig.withDestinationConnectionArn */ \n        request.setTriggerConfig(new TriggerConfig().withTriggerProperties(personalData));\n\n        // Send the data to Appflow\n        CreateFlowResult result = appflowClient.createFlow(request);\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.TranslateMedical",
      "occurrences" : [
        {
          "sample" : "translateMedicalText(request)",
          "lineNumber" : 31,
          "columnNumber" : 41,
          "fileName" : "/app/code/translateMedical.java",
          "excerpt" : "            .withSourceLanguageCode(\"en\")\n            .withTargetLanguageCode(\"fr\")\n            .withText(\"I have a headache\");\n\n    // Translate the text\n    TranslateMedicalTextResult result = translateMedical.translateMedicalText(request); /* <=== com.amazonaws.services.translatemedical.AWSTranslateMedical.translateMedicalText */ \n    System.out.println(\"Translated Text: \" + result.getTranslatedText());\n}\n}"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Rekognition",
      "occurrences" : [
        {
          "sample" : "detectLabels(request)",
          "lineNumber" : 26,
          "columnNumber" : 37,
          "fileName" : "/app/code/rekognition.java",
          "excerpt" : "            .withImage(image)\n            .withMaxLabels(10)\n            .withMinConfidence(75F);\n\n        // Send the request\n        DetectLabelsResult result = rekognitionClient.detectLabels(request); /* <=== com.amazonaws.services.rekognition.AmazonRekognition.detectLabels */ \n\n        // Get the list of labels\n        List<Label> labels = result.getLabels();\n\n        // Print out the labels"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.MarketplaceEntitlement",
      "occurrences" : [
        {
          "sample" : "builder()",
          "lineNumber" : 14,
          "columnNumber" : 23,
          "fileName" : "/app/code/marketplaceEntitlement.java",
          "excerpt" : "\n    private AmazonMarketplaceEntitlementClient client;\n\n    public PersonalDataProcessor(String accessKey, String secretKey) {\n        BasicAWSCredentials credentials = new BasicAWSCredentials(accessKey, secretKey);\n        this.client = AmazonMarketplaceEntitlementClient.builder() /* <=== com.amazonaws.services.marketplaceentitlement.AmazonMarketplaceEntitlementClient.builder */ \n                .withCredentials(new AWSStaticCredentialsProvider(credentials))\n                .build();\n    }\n\n    public void processData(List<String> data, List<Entitlement> entitlements) {"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Snowball",
      "occurrences" : [
        {
          "sample" : "getJobId()",
          "lineNumber" : 35,
          "columnNumber" : 24,
          "fileName" : "/app/code/snowball.java",
          "excerpt" : "                .withShippingOption(\"SECOND_DAY\")\n                .withAddressId(\"ADDRESS_ID\");\n        CreateJobResult createJobResult = snowball.createJob(createJobRequest);\n\n        // Get the ID of the newly created Snowball Job\n        String jobId = createJobResult.getJobId(); /* <=== com.amazonaws.services.snowball.model.CreateJobResult.getJobId */ \n    }\n}\n"
        }
      ]
    },
    {
      "sinkId" : "Storages.SpringFramework.Jdbc.Write",
      "occurrences" : [
        {
          "sample" : "insertStatement.executeUpdate()",
          "lineNumber" : 26,
          "columnNumber" : 13,
          "fileName" : "/app/code/rds.java",
          "excerpt" : "            String insertSql = \"INSERT INTO personal_data (first_name, last_name, email) VALUES (?, ?, ?)\";\n            PreparedStatement insertStatement = connection.prepareStatement(insertSql);\n            insertStatement.setString(1, \"John\");\n            insertStatement.setString(2, \"Doe\");\n            insertStatement.setString(3, \"john.doe@example.com\");\n            insertStatement.executeUpdate(); /* <=== java.sql.PreparedStatement.executeUpdate */ \n        } catch (SQLException e) {\n            System.err.println(\"Error connecting to the database: \" + e.getMessage());\n        } finally {\n            if (connection != null) {\n                try {"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Workdocs",
      "occurrences" : [
        {
          "sample" : "createFolder(createFolderRequest)",
          "lineNumber" : 19,
          "columnNumber" : 49,
          "fileName" : "/app/code/workdocs.java",
          "excerpt" : "    public void processPersonalData(Map<String,String> personalData) {\n        // Create a new folder in Amazon WorkDocs to store the personal data\n        CreateFolderRequest createFolderRequest = new CreateFolderRequest()\n            .withParentFolderId(\"PARENT_FOLDER_ID\")\n            .withName(\"PersonalDataFolder\");\n        CreateFolderResult createFolderResult = workDocsClient.createFolder(createFolderRequest); /* <=== com.amazonaws.services.workdocs.AmazonWorkDocs.createFolder */ \n        String personalDataFolderId = createFolderResult.getFolderId();\n\n        // Iterate through the personal data and upload each piece to the created folder\n        for (Map.Entry<String, String> entry : personalData.entrySet()) {\n            // create a File object for the personal data"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.AppStream",
      "occurrences" : [
        {
          "sample" : "createStack(stackRequest)",
          "lineNumber" : 14,
          "columnNumber" : 9,
          "fileName" : "/app/code/appStream.java",
          "excerpt" : "\n        // Create a new AppStream stack\n        CreateStackRequest stackRequest = new CreateStackRequest()\n            .withName(\"MyStack\")\n            .withDescription(\"This is a sample stack for processing personal data.\");\n        appStream.createStack(stackRequest); /* <=== com.amazonaws.services.appstream.AmazonAppStream.createStack */ \n    }\n}\n\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.ElasticContainerRegistry",
      "occurrences" : [
        {
          "sample" : "withRepositoryName(\"my-repository\")",
          "lineNumber" : 21,
          "columnNumber" : 41,
          "fileName" : "/app/code/ecr.java",
          "excerpt" : "        AmazonECR ecr = AmazonECRClientBuilder.standard()\n                .withCredentials(new AWSStaticCredentialsProvider(credentials))\n                .withRegion(\"us-west-2\")\n                .build();\n\n        DescribeImagesRequest request = new DescribeImagesRequest().withRepositoryName(\"my-repository\"); /* <=== com.amazonaws.services.ecr.model.DescribeImagesRequest.withRepositoryName */ \n        DescribeImagesResult result = ecr.describeImages(request);\n        System.out.println(result);\n    }\n}\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.KinesisDataFirehose",
      "occurrences" : [
        {
          "sample" : "defaultClient()",
          "lineNumber" : 9,
          "columnNumber" : 48,
          "fileName" : "/app/code/kinesisFirehose.java",
          "excerpt" : "import com.amazonaws.services.kinesisfirehose.model.CreateDeliveryStreamResult;\n\npublic class FirehoseSample {\n\n    public static void main(String[] args) {\n        AmazonKinesisFirehose firehoseClient = AmazonKinesisFirehoseClientBuilder.defaultClient(); /* <=== com.amazonaws.services.kinesisfirehose.AmazonKinesisFirehoseClientBuilder.defaultClient */ \n\n        CreateDeliveryStreamRequest createDeliveryStreamRequest = new CreateDeliveryStreamRequest();\n        createDeliveryStreamRequest.setDeliveryStreamName(\"your-delivery-stream-name\");\n        createDeliveryStreamRequest.setS3DestinationConfiguration(\n            // S3 configuration goes here"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.IoTSecureTunneling",
      "occurrences" : [
        {
          "sample" : "getTunnelSummaries()",
          "lineNumber" : 26,
          "columnNumber" : 44,
          "fileName" : "/app/code/iotsecuretunneling.java",
          "excerpt" : "        OpenTunnelResult openTunnelResult = client.openTunnel(openTunnelRequest);\n        String tunnelId = openTunnelResult.getTunnelId();\n\n        // List the tunnels\n        ListTunnelsResult listTunnelsResult = client.listTunnels(new ListTunnelsRequest());\n        for (TunnelSummary tunnelSummary : listTunnelsResult.getTunnelSummaries()) { /* <=== com.amazonaws.services.iotsecuretunneling.model.ListTunnelsResult.getTunnelSummaries */ \n            System.out.println(tunnelSummary.getTunnelId() + \": \" + tunnelSummary.getDescription());\n        }\n\n        // Close the secure tunnel\n        CloseTunnelResult closeTunnelResult = client.closeTunnel(new CloseTunnelRequest().withTunnelId(tunnelId));"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.StorageGateway",
      "occurrences" : [
        {
          "sample" : "new CreateCachediSCSIVolumeRequest()",
          "lineNumber" : 18,
          "columnNumber" : -1,
          "fileName" : "/app/code/storageGateway.java",
          "excerpt" : "        // Create a Storage Gateway client\n        AWSStorageGatewayClient client = new AWSStorageGatewayClient(credentials);\n        client.setEndpoint(\"https://storagegateway.us-west-2.amazonaws.com\");\n\n        // Create a new cached iSCSI volume\n        CreateCachediSCSIVolumeRequest request = new CreateCachediSCSIVolumeRequest() /* <=== com.amazonaws.services.storagegateway.model.CreateCachediSCSIVolumeRequest.<init> */ \n                .withGatewayARN(\"arn:aws:storagegateway:us-west-2:1234567890:gateway/sgw-12A3456B\")\n                .withVolumeSizeInBytes(1099511627776L)\n                .withSnapshotId(\"snap-01234567890abcdef0\")\n                .withTargetName(\"myiscsitarget\")\n                .withNetworkInterfaceId(\"eni-01234567890abcdef0\");"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Greengrass",
      "occurrences" : [
        {
          "sample" : "getArn()",
          "lineNumber" : 18,
          "columnNumber" : 47,
          "fileName" : "/app/code/greengrass.java",
          "excerpt" : "        CreateFunctionDefinitionRequest request = new CreateFunctionDefinitionRequest()\n            .withName(FUNCTION_NAME);\n        CreateFunctionDefinitionResult result = client.createFunctionDefinition(request);\n\n        // Print the ARN of the created function\n        System.out.println(\"Function ARN: \" + result.getArn()); /* <=== com.amazonaws.services.greengrass.model.CreateFunctionDefinitionResult.getArn */ \n    }\n}\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Pinpoint",
      "occurrences" : [
        {
          "sample" : "withConfigurationSetName(configurationSetName)",
          "lineNumber" : 17,
          "columnNumber" : 65,
          "fileName" : "/app/code/pinpointsmsvoice.java",
          "excerpt" : "        String eventDestinationName = \"sample-event-destination\";\n\n        EventDestinationDefinition eventDestination = new EventDestinationDefinition()\n                .withSnsDestination(new SnsDestination().withTopicArn(\"arn:aws:sns:us-west-2:123456789012:sample-topic\"));\n\n        CreateConfigurationSetEventDestinationRequest request = new CreateConfigurationSetEventDestinationRequest() /* <=== com.amazonaws.services.pinpointsmsvoice.model.CreateConfigurationSetEventDestinationRequest.withConfigurationSetName */ \n                .withConfigurationSetName(configurationSetName)\n                .withEventDestinationName(eventDestinationName)\n                .withEventDestination(eventDestination);\n\n        client.createConfigurationSetEventDestination(request);"
        },
        {
          "sample" : "new CreateCampaignRequest()",
          "lineNumber" : 12,
          "columnNumber" : -1,
          "fileName" : "/app/code/pinpoint.java",
          "excerpt" : "    public static void main(String[] args) {\n        // Create a Pinpoint client\n        AmazonPinpoint pinpoint = AmazonPinpointClientBuilder.defaultClient();\n\n        // Create a new campaign\n        CreateCampaignRequest request = new CreateCampaignRequest() /* <=== com.amazonaws.services.pinpoint.model.CreateCampaignRequest.<init> */ \n                .withApplicationId(\"YOUR_APP_ID\")\n                .withName(\"Example Campaign\")\n                .withDescription(\"This is an example campaign.\");\n        pinpoint.createCampaign(request);\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Elasticache",
      "occurrences" : [
        {
          "sample" : "new DescribeCacheClustersRequest()",
          "lineNumber" : 32,
          "columnNumber" : -1,
          "fileName" : "/app/code/elasticCache.java",
          "excerpt" : "                .withCacheClusterId(CACHE_CLUSTER_ID)\n                .withNumCacheNodes(1);\n        elastiCache.createCacheCluster(createCacheClusterRequest);\n\n        // Describe the cache cluster\n        DescribeCacheClustersRequest describeCacheClustersRequest = new DescribeCacheClustersRequest() /* <=== com.amazonaws.services.elasticache.model.DescribeCacheClustersRequest.<init> */ \n                .withCacheClusterId(CACHE_CLUSTER_ID);\n        DescribeCacheClustersResult describeCacheClustersResult = elastiCache.describeCacheClusters(describeCacheClustersRequest);\n        System.out.println(describeCacheClustersResult);\n    }\n}"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Transcribe",
      "occurrences" : [
        {
          "sample" : "new StartTranscriptionJobRequest()",
          "lineNumber" : 26,
          "columnNumber" : -1,
          "fileName" : "/app/code/transcribe.java",
          "excerpt" : "\n        // Replace with your file's S3 bucket and key\n        String s3Bucket = \"BUCKET_NAME\";\n        String s3Key = \"FILE_KEY\";\n\n        StartTranscriptionJobRequest request = new StartTranscriptionJobRequest() /* <=== com.amazonaws.services.transcribe.model.StartTranscriptionJobRequest.<init> */ \n                .withLanguageCode(\"en-US\")\n                .withMediaFormat(\"mp3\")\n                .withMediaSampleRateHertz(8000)\n                .withTranscriptionJobName(\"TranscriptionJobName\")\n                .withMedia(new Media().withMediaFileUri(\"s3://\" + s3Bucket + \"/\" + s3Key));"
        },
        {
          "sample" : "startStreamTranscription(request)",
          "lineNumber" : 18,
          "columnNumber" : 49,
          "fileName" : "/app/code/transcribeStreaming.java",
          "excerpt" : "            .withMediaEncoding(\"pcm\")\n            .withMediaSampleRateHertz(16000)\n            .withTranscriptionJobName(\"MyTranscriptionJob\")\n            .withMediaEventHandler(new MyAudioStreamHandler());\n\n        StartStreamTranscriptionResult result = transcribe.startStreamTranscription(request); /* <=== com.amazonaws.services.transcribestreaming.AmazonTranscribeStreaming.startStreamTranscription */ \n        System.out.println(\"Transcription started with job id: \" + result.getTranscriptionJob().getTranscriptionJobName());\n    }\n}\n\nclass MyAudioStreamHandler implements MediaEventStreamHandler {"
        },
        {
          "sample" : "startMedicalTranscriptionJob(request)",
          "lineNumber" : 23,
          "columnNumber" : 53,
          "fileName" : "/app/code/transcribeMedical.java",
          "excerpt" : "                .withTranscriptionJobName(\"my-transcription-job\")\n                .withOutputBucketName(\"my-output-bucket\")\n                .withInputMediaFileUri(\"s3://my-input-bucket/audio-file.wav\");\n        \n        // Start the transcription job\n        StartMedicalTranscriptionJobResult result = transcribeMedical.startMedicalTranscriptionJob(request); /* <=== com.amazonaws.services.transcribemedical.AWSTranscribeMedical.startMedicalTranscriptionJob */ \n        \n        // Print the job status\n        System.out.println(\"Transcription job status: \" + result.getTranscriptionJob().getTranscriptionJobStatus());\n    }\n}"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.SQS",
      "occurrences" : [
        {
          "sample" : "sendMessage(sendMessageRequest)",
          "lineNumber" : 31,
          "columnNumber" : 9,
          "fileName" : "/app/code/sqs.java",
          "excerpt" : "        // Create a message to send\n        String messageBody = \"Hello, SQS!\";\n\n        // Send the message\n        SendMessageRequest sendMessageRequest = new SendMessageRequest(QUEUE_URL, messageBody);\n        sqs.sendMessage(sendMessageRequest); /* <=== com.amazonaws.services.sqs.AmazonSQS.sendMessage */ \n    }\n}\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.DisasterRecoveryService",
      "occurrences" : [
        {
          "sample" : "getReplicationJobArn()",
          "lineNumber" : 28,
          "columnNumber" : 36,
          "fileName" : "/app/code/disasterRecoveryService.java",
          "excerpt" : "                .withFrequency(24)\n                .withStartTimestamp(System.currentTimeMillis());\n        CreateReplicationJobResult createReplicationJobResult = disasterRecovery.createReplicationJob(createReplicationJobRequest);\n\n        // Get the ARN of the newly created Replication Job\n        String replicationJobArn = createReplicationJobResult.getReplicationJobArn(); /* <=== com.amazonaws.services.disasterrecovery.model.CreateReplicationJobResult.getReplicationJobArn */ \n    }\n}\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.SimpleNotificationService",
      "occurrences" : [
        {
          "sample" : "publish(topicArn, message)",
          "lineNumber" : 22,
          "columnNumber" : 9,
          "fileName" : "/app/code/sns.java",
          "excerpt" : "                .withRegion(Regions.US_EAST_1)\n                .build();\n    }\n\n    public void sendMessage(String topicArn, String message) {\n        snsClient.publish(topicArn, message); /* <=== com.amazonaws.services.sns.AmazonSNS.publish */ \n        System.out.println(\"Sent message: \" + message);\n    }\n\n    public static void main(String[] args) {\n        SNSSink snsSink = new SNSSink();"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.S3",
      "occurrences" : [
        {
          "sample" : "setEndpoint(endpoint)",
          "lineNumber" : 19,
          "columnNumber" : 9,
          "fileName" : "/app/code/s3Outpost.java",
          "excerpt" : "                .withSecurityGroupIds(\"sg-01234567890abcdef\");\n        CreateEndpointResult createEndpointResult = client.createEndpoint(createEndpointRequest);\n        String endpoint = createEndpointResult.getEndpoint();\n\n        // Set the endpoint for the client\n        client.setEndpoint(endpoint); /* <=== com.amazonaws.services.s3outposts.AWSS3OutpostsClient.setEndpoint */ \n\n        // Create a PutObjectRequest to upload a file to the S3 Outposts bucket\n        PutObjectRequest putObjectRequest = new PutObjectRequest()\n                .withBucketName(\"my-outposts-bucket\")\n                .withKey(\"my-file.txt\")"
        },
        {
          "sample" : "setContentType(\"text/plain\")",
          "lineNumber" : 33,
          "columnNumber" : 9,
          "fileName" : "/app/code/s3.java",
          "excerpt" : "                .withRegion(Regions.US_EAST_1)\n                .build();\n\n        // Create an S3 object metadata\n        ObjectMetadata metadata = new ObjectMetadata();\n        metadata.setContentType(\"text/plain\"); /* <=== com.amazonaws.services.s3.model.ObjectMetadata.setContentType */ \n        metadata.addUserMetadata(\"x-amz-meta-title\", \"my-file-title\");\n\n        // Create an S3 put object request\n        PutObjectRequest request = new PutObjectRequest(bucketName, \"path/in/bucket/file.txt\", file)\n                .withMetadata(metadata);"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.LexRuntime",
      "occurrences" : [
        {
          "sample" : "getMessage()",
          "lineNumber" : 26,
          "columnNumber" : 69,
          "fileName" : "/app/code/lexRuntime.java",
          "excerpt" : "        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);\n\n        // Handle the Lex response\n        if (postTextResult.getDialogState() == \"Fulfilled\") {\n            // The personal data was successfully processed by Lex\n            System.out.println(\"Personal data processed by Lex: \" + postTextResult.getMessage()); /* <=== com.amazonaws.services.lexruntime.model.PostTextResult.getMessage */ \n        } else {\n            // An error occurred while processing the personal data\n            System.err.println(\"Error processing personal data: \" + postTextResult.getMessage());\n        }\n    }"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Health",
      "occurrences" : [
        {
          "sample" : "defaultClient()",
          "lineNumber" : 9,
          "columnNumber" : 34,
          "fileName" : "/app/code/health.java",
          "excerpt" : "import com.amazonaws.services.health.model.DescribeEventsResult;\n\npublic class PersonalDataProcessor {\n\n    public static void main(String[] args) {\n        AWSHealth healthClient = AWSHealthClientBuilder.defaultClient(); /* <=== com.amazonaws.services.health.AWSHealthClientBuilder.defaultClient */ \n\n        DescribeEventsRequest describeEventsRequest = new DescribeEventsRequest();\n\n        DescribeEventsResult describeEventsResult = healthClient.describeEvents(describeEventsRequest);\n"
        },
        {
          "sample" : "storePersonalData(request)",
          "lineNumber" : 16,
          "columnNumber" : 37,
          "fileName" : "/app/code/healthlake.java",
          "excerpt" : "  }\n  \n  public List<HealthLakeResponse> processPersonalData(List<HealthLakeRequest> personalDataRecords) {\n    List<HealthLakeResponse> processedData = new ArrayList<>();\n    for (HealthLakeRequest request : personalDataRecords) {\n      HealthLakeResponse response = healthLakeClient.storePersonalData(request); /* <=== com.amazonaws.services.healthlake.AmazonHealthLakeClient.storePersonalData */ \n      processedData.add(response);\n    }\n    return processedData;\n  }\n}"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Shield",
      "occurrences" : [
        {
          "sample" : "defaultClient()",
          "lineNumber" : 9,
          "columnNumber" : 34,
          "fileName" : "/app/code/shield.java",
          "excerpt" : "import com.amazonaws.services.shield.model.DescribeProtectionResult;\n\npublic class PersonalDataProcessor {\n\n    public static void main(String[] args) {\n        AWSShield shieldClient = AWSShieldClientBuilder.defaultClient(); /* <=== com.amazonaws.services.shield.AWSShieldClientBuilder.defaultClient */ \n\n        DescribeProtectionRequest describeProtectionRequest = new DescribeProtectionRequest();\n\n        DescribeProtectionResult describeProtectionResult = shieldClient.describeProtection(describeProtectionRequest);\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Comprehend",
      "occurrences" : [
        {
          "sample" : "detectSentiment(detectSentimentRequest)",
          "lineNumber" : 18,
          "columnNumber" : 55,
          "fileName" : "/app/code/comprehend.java",
          "excerpt" : "\n        DetectSentimentRequest detectSentimentRequest = new DetectSentimentRequest()\n                .withText(text)\n                .withLanguageCode(\"en\");\n\n        DetectSentimentResult detectSentimentResult = comprehendClient.detectSentiment(detectSentimentRequest); /* <=== com.amazonaws.services.comprehend.AmazonComprehend.detectSentiment */ \n        System.out.println(\"Sentiment: \" + detectSentimentResult.getSentiment());\n    }\n}\n"
        },
        {
          "sample" : "new DetectEntitiesRequest()",
          "lineNumber" : 13,
          "columnNumber" : -1,
          "fileName" : "/app/code/comprehendMedical.java",
          "excerpt" : "    public static void main(String[] args) {\n        AmazonComprehendMedical comprehendMedical = AmazonComprehendMedicalClientBuilder.standard().build();\n\n        String text = \"Patient has a history of heart disease and is currently taking lisinopril and aspirin.\";\n\n        DetectEntitiesRequest request = new DetectEntitiesRequest().withText(text); /* <=== com.amazonaws.services.comprehendmedical.model.DetectEntitiesRequest.<init> */ \n        DetectEntitiesResult result = comprehendMedical.detectEntities(request);\n\n        System.out.println(\"Entities found: \" + result.getEntities());\n    }\n}"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.CloudWatchLogs",
      "occurrences" : [
        {
          "sample" : "defaultClient()",
          "lineNumber" : 13,
          "columnNumber" : 40,
          "fileName" : "/app/code/logs.java",
          "excerpt" : "import com.amazonaws.services.logs.model.PutLogEventsRequest;\n\npublic class CloudWatchLogs {\n    public static void main(String[] args) {\n        // Initialize the Amazon CloudWatch Logs client\n        AWSLogs cloudWatchLogsClient = AWSLogsClientBuilder.defaultClient(); /* <=== com.amazonaws.services.logs.AWSLogsClientBuilder.defaultClient */ \n        \n        // Define the CloudWatch Logs stream\n        String logGroupName = \"personal-data-logs\";\n        String logStreamName = \"personal-data-stream\";\n        "
        }
      ]
    }
  ],
  "probableSinks" : [
  ],
  "dataFlow" : {
    "storages" : [
      {
        "sourceId" : "Data.Sensitive.AccountData.AccountPassword",
        "sinks" : [
          {
            "sinkType" : "storages",
            "id" : "Storages.SpringFramework.Jdbc.Write",
            "name" : "Java Database Connector(Write)",
            "category" : "",
            "domains" : [
              "oracle.com"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "databaseDetails" : {
              "dbName" : "",
              "dbVendor" : "",
              "dbLocation" : "",
              "dbOperation" : ""
            },
            "paths" : [
              {
                "pathId" : "4458-4486-4485-4484-4482-4481-4495-4494-4493-4498-4502-4506-4509",
                "path" : [
                  {
                    "sample" : "password",
                    "lineNumber" : 15,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/rds.java",
                    "excerpt" : "    public static void main(String[] args) {\n        String hostname = \"sample-rds-instance.rds.amazonaws.com\";\n        int port = 5432;\n        String dbName = \"sample_db\";\n        String username = \"sample_user\";\n        String password = \"sample_password\"; /* <=== java.lang.String */ \n        String jdbcUrl = \"jdbc:postgresql://\" + hostname + \":\" + port + \"/\" + dbName;\n\n        Connection connection = null;\n        try {\n            connection = DriverManager.getConnection(jdbcUrl, username, password);"
                  },
                  {
                    "sample" : "password",
                    "lineNumber" : 20,
                    "columnNumber" : 73,
                    "fileName" : "/app/code/rds.java",
                    "excerpt" : "        String password = \"sample_password\";\n        String jdbcUrl = \"jdbc:postgresql://\" + hostname + \":\" + port + \"/\" + dbName;\n\n        Connection connection = null;\n        try {\n            connection = DriverManager.getConnection(jdbcUrl, username, password); /* <=== java.lang.String */ \n            String insertSql = \"INSERT INTO personal_data (first_name, last_name, email) VALUES (?, ?, ?)\";\n            PreparedStatement insertStatement = connection.prepareStatement(insertSql);\n            insertStatement.setString(1, \"John\");\n            insertStatement.setString(2, \"Doe\");\n            insertStatement.setString(3, \"john.doe@example.com\");"
                  },
                  {
                    "sample" : "username",
                    "lineNumber" : 20,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/rds.java",
                    "excerpt" : "        String password = \"sample_password\";\n        String jdbcUrl = \"jdbc:postgresql://\" + hostname + \":\" + port + \"/\" + dbName;\n\n        Connection connection = null;\n        try {\n            connection = DriverManager.getConnection(jdbcUrl, username, password); /* <=== java.lang.String */ \n            String insertSql = \"INSERT INTO personal_data (first_name, last_name, email) VALUES (?, ?, ?)\";\n            PreparedStatement insertStatement = connection.prepareStatement(insertSql);\n            insertStatement.setString(1, \"John\");\n            insertStatement.setString(2, \"Doe\");\n            insertStatement.setString(3, \"john.doe@example.com\");"
                  },
                  {
                    "sample" : "jdbcUrl",
                    "lineNumber" : 20,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/rds.java",
                    "excerpt" : "        String password = \"sample_password\";\n        String jdbcUrl = \"jdbc:postgresql://\" + hostname + \":\" + port + \"/\" + dbName;\n\n        Connection connection = null;\n        try {\n            connection = DriverManager.getConnection(jdbcUrl, username, password); /* <=== java.lang.String */ \n            String insertSql = \"INSERT INTO personal_data (first_name, last_name, email) VALUES (?, ?, ?)\";\n            PreparedStatement insertStatement = connection.prepareStatement(insertSql);\n            insertStatement.setString(1, \"John\");\n            insertStatement.setString(2, \"Doe\");\n            insertStatement.setString(3, \"john.doe@example.com\");"
                  },
                  {
                    "sample" : "DriverManager.getConnection(jdbcUrl, username, password)",
                    "lineNumber" : 20,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/rds.java",
                    "excerpt" : "        String password = \"sample_password\";\n        String jdbcUrl = \"jdbc:postgresql://\" + hostname + \":\" + port + \"/\" + dbName;\n\n        Connection connection = null;\n        try {\n            connection = DriverManager.getConnection(jdbcUrl, username, password); /* <=== java.sql.DriverManager.getConnection */ \n            String insertSql = \"INSERT INTO personal_data (first_name, last_name, email) VALUES (?, ?, ?)\";\n            PreparedStatement insertStatement = connection.prepareStatement(insertSql);\n            insertStatement.setString(1, \"John\");\n            insertStatement.setString(2, \"Doe\");\n            insertStatement.setString(3, \"john.doe@example.com\");"
                  },
                  {
                    "sample" : "connection",
                    "lineNumber" : 20,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/rds.java",
                    "excerpt" : "        String password = \"sample_password\";\n        String jdbcUrl = \"jdbc:postgresql://\" + hostname + \":\" + port + \"/\" + dbName;\n\n        Connection connection = null;\n        try {\n            connection = DriverManager.getConnection(jdbcUrl, username, password); /* <=== java.sql.Connection */ \n            String insertSql = \"INSERT INTO personal_data (first_name, last_name, email) VALUES (?, ?, ?)\";\n            PreparedStatement insertStatement = connection.prepareStatement(insertSql);\n            insertStatement.setString(1, \"John\");\n            insertStatement.setString(2, \"Doe\");\n            insertStatement.setString(3, \"john.doe@example.com\");"
                  },
                  {
                    "sample" : "connection",
                    "lineNumber" : 22,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/rds.java",
                    "excerpt" : "\n        Connection connection = null;\n        try {\n            connection = DriverManager.getConnection(jdbcUrl, username, password);\n            String insertSql = \"INSERT INTO personal_data (first_name, last_name, email) VALUES (?, ?, ?)\";\n            PreparedStatement insertStatement = connection.prepareStatement(insertSql); /* <=== java.sql.Connection */ \n            insertStatement.setString(1, \"John\");\n            insertStatement.setString(2, \"Doe\");\n            insertStatement.setString(3, \"john.doe@example.com\");\n            insertStatement.executeUpdate();\n        } catch (SQLException e) {"
                  },
                  {
                    "sample" : "connection.prepareStatement(insertSql)",
                    "lineNumber" : 22,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/rds.java",
                    "excerpt" : "\n        Connection connection = null;\n        try {\n            connection = DriverManager.getConnection(jdbcUrl, username, password);\n            String insertSql = \"INSERT INTO personal_data (first_name, last_name, email) VALUES (?, ?, ?)\";\n            PreparedStatement insertStatement = connection.prepareStatement(insertSql); /* <=== java.sql.Connection.prepareStatement */ \n            insertStatement.setString(1, \"John\");\n            insertStatement.setString(2, \"Doe\");\n            insertStatement.setString(3, \"john.doe@example.com\");\n            insertStatement.executeUpdate();\n        } catch (SQLException e) {"
                  },
                  {
                    "sample" : "insertStatement",
                    "lineNumber" : 22,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/rds.java",
                    "excerpt" : "\n        Connection connection = null;\n        try {\n            connection = DriverManager.getConnection(jdbcUrl, username, password);\n            String insertSql = \"INSERT INTO personal_data (first_name, last_name, email) VALUES (?, ?, ?)\";\n            PreparedStatement insertStatement = connection.prepareStatement(insertSql); /* <=== java.sql.PreparedStatement */ \n            insertStatement.setString(1, \"John\");\n            insertStatement.setString(2, \"Doe\");\n            insertStatement.setString(3, \"john.doe@example.com\");\n            insertStatement.executeUpdate();\n        } catch (SQLException e) {"
                  },
                  {
                    "sample" : "insertStatement",
                    "lineNumber" : 23,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/rds.java",
                    "excerpt" : "        Connection connection = null;\n        try {\n            connection = DriverManager.getConnection(jdbcUrl, username, password);\n            String insertSql = \"INSERT INTO personal_data (first_name, last_name, email) VALUES (?, ?, ?)\";\n            PreparedStatement insertStatement = connection.prepareStatement(insertSql);\n            insertStatement.setString(1, \"John\"); /* <=== java.sql.PreparedStatement */ \n            insertStatement.setString(2, \"Doe\");\n            insertStatement.setString(3, \"john.doe@example.com\");\n            insertStatement.executeUpdate();\n        } catch (SQLException e) {\n            System.err.println(\"Error connecting to the database: \" + e.getMessage());"
                  },
                  {
                    "sample" : "insertStatement",
                    "lineNumber" : 24,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/rds.java",
                    "excerpt" : "        try {\n            connection = DriverManager.getConnection(jdbcUrl, username, password);\n            String insertSql = \"INSERT INTO personal_data (first_name, last_name, email) VALUES (?, ?, ?)\";\n            PreparedStatement insertStatement = connection.prepareStatement(insertSql);\n            insertStatement.setString(1, \"John\");\n            insertStatement.setString(2, \"Doe\"); /* <=== java.sql.PreparedStatement */ \n            insertStatement.setString(3, \"john.doe@example.com\");\n            insertStatement.executeUpdate();\n        } catch (SQLException e) {\n            System.err.println(\"Error connecting to the database: \" + e.getMessage());\n        } finally {"
                  },
                  {
                    "sample" : "insertStatement",
                    "lineNumber" : 25,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/rds.java",
                    "excerpt" : "            connection = DriverManager.getConnection(jdbcUrl, username, password);\n            String insertSql = \"INSERT INTO personal_data (first_name, last_name, email) VALUES (?, ?, ?)\";\n            PreparedStatement insertStatement = connection.prepareStatement(insertSql);\n            insertStatement.setString(1, \"John\");\n            insertStatement.setString(2, \"Doe\");\n            insertStatement.setString(3, \"john.doe@example.com\"); /* <=== java.sql.PreparedStatement */ \n            insertStatement.executeUpdate();\n        } catch (SQLException e) {\n            System.err.println(\"Error connecting to the database: \" + e.getMessage());\n        } finally {\n            if (connection != null) {"
                  },
                  {
                    "sample" : "insertStatement.executeUpdate()",
                    "lineNumber" : 26,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/rds.java",
                    "excerpt" : "            String insertSql = \"INSERT INTO personal_data (first_name, last_name, email) VALUES (?, ?, ?)\";\n            PreparedStatement insertStatement = connection.prepareStatement(insertSql);\n            insertStatement.setString(1, \"John\");\n            insertStatement.setString(2, \"Doe\");\n            insertStatement.setString(3, \"john.doe@example.com\");\n            insertStatement.executeUpdate(); /* <=== java.sql.PreparedStatement.executeUpdate */ \n        } catch (SQLException e) {\n            System.err.println(\"Error connecting to the database: \" + e.getMessage());\n        } finally {\n            if (connection != null) {\n                try {"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.AccountData.AccountName",
        "sinks" : [
          {
            "sinkType" : "storages",
            "id" : "Storages.SpringFramework.Jdbc.Write",
            "name" : "Java Database Connector(Write)",
            "category" : "",
            "domains" : [
              "oracle.com"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "databaseDetails" : {
              "dbName" : "",
              "dbVendor" : "",
              "dbLocation" : "",
              "dbOperation" : ""
            },
            "paths" : [
              {
                "pathId" : "4454-4485-4484-4482-4481-4495-4494-4493-4498-4502-4506-4509",
                "path" : [
                  {
                    "sample" : "username",
                    "lineNumber" : 14,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/rds.java",
                    "excerpt" : "\n    public static void main(String[] args) {\n        String hostname = \"sample-rds-instance.rds.amazonaws.com\";\n        int port = 5432;\n        String dbName = \"sample_db\";\n        String username = \"sample_user\"; /* <=== java.lang.String */ \n        String password = \"sample_password\";\n        String jdbcUrl = \"jdbc:postgresql://\" + hostname + \":\" + port + \"/\" + dbName;\n\n        Connection connection = null;\n        try {"
                  },
                  {
                    "sample" : "username",
                    "lineNumber" : 20,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/rds.java",
                    "excerpt" : "        String password = \"sample_password\";\n        String jdbcUrl = \"jdbc:postgresql://\" + hostname + \":\" + port + \"/\" + dbName;\n\n        Connection connection = null;\n        try {\n            connection = DriverManager.getConnection(jdbcUrl, username, password); /* <=== java.lang.String */ \n            String insertSql = \"INSERT INTO personal_data (first_name, last_name, email) VALUES (?, ?, ?)\";\n            PreparedStatement insertStatement = connection.prepareStatement(insertSql);\n            insertStatement.setString(1, \"John\");\n            insertStatement.setString(2, \"Doe\");\n            insertStatement.setString(3, \"john.doe@example.com\");"
                  },
                  {
                    "sample" : "jdbcUrl",
                    "lineNumber" : 20,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/rds.java",
                    "excerpt" : "        String password = \"sample_password\";\n        String jdbcUrl = \"jdbc:postgresql://\" + hostname + \":\" + port + \"/\" + dbName;\n\n        Connection connection = null;\n        try {\n            connection = DriverManager.getConnection(jdbcUrl, username, password); /* <=== java.lang.String */ \n            String insertSql = \"INSERT INTO personal_data (first_name, last_name, email) VALUES (?, ?, ?)\";\n            PreparedStatement insertStatement = connection.prepareStatement(insertSql);\n            insertStatement.setString(1, \"John\");\n            insertStatement.setString(2, \"Doe\");\n            insertStatement.setString(3, \"john.doe@example.com\");"
                  },
                  {
                    "sample" : "DriverManager.getConnection(jdbcUrl, username, password)",
                    "lineNumber" : 20,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/rds.java",
                    "excerpt" : "        String password = \"sample_password\";\n        String jdbcUrl = \"jdbc:postgresql://\" + hostname + \":\" + port + \"/\" + dbName;\n\n        Connection connection = null;\n        try {\n            connection = DriverManager.getConnection(jdbcUrl, username, password); /* <=== java.sql.DriverManager.getConnection */ \n            String insertSql = \"INSERT INTO personal_data (first_name, last_name, email) VALUES (?, ?, ?)\";\n            PreparedStatement insertStatement = connection.prepareStatement(insertSql);\n            insertStatement.setString(1, \"John\");\n            insertStatement.setString(2, \"Doe\");\n            insertStatement.setString(3, \"john.doe@example.com\");"
                  },
                  {
                    "sample" : "connection",
                    "lineNumber" : 20,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/rds.java",
                    "excerpt" : "        String password = \"sample_password\";\n        String jdbcUrl = \"jdbc:postgresql://\" + hostname + \":\" + port + \"/\" + dbName;\n\n        Connection connection = null;\n        try {\n            connection = DriverManager.getConnection(jdbcUrl, username, password); /* <=== java.sql.Connection */ \n            String insertSql = \"INSERT INTO personal_data (first_name, last_name, email) VALUES (?, ?, ?)\";\n            PreparedStatement insertStatement = connection.prepareStatement(insertSql);\n            insertStatement.setString(1, \"John\");\n            insertStatement.setString(2, \"Doe\");\n            insertStatement.setString(3, \"john.doe@example.com\");"
                  },
                  {
                    "sample" : "connection",
                    "lineNumber" : 22,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/rds.java",
                    "excerpt" : "\n        Connection connection = null;\n        try {\n            connection = DriverManager.getConnection(jdbcUrl, username, password);\n            String insertSql = \"INSERT INTO personal_data (first_name, last_name, email) VALUES (?, ?, ?)\";\n            PreparedStatement insertStatement = connection.prepareStatement(insertSql); /* <=== java.sql.Connection */ \n            insertStatement.setString(1, \"John\");\n            insertStatement.setString(2, \"Doe\");\n            insertStatement.setString(3, \"john.doe@example.com\");\n            insertStatement.executeUpdate();\n        } catch (SQLException e) {"
                  },
                  {
                    "sample" : "connection.prepareStatement(insertSql)",
                    "lineNumber" : 22,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/rds.java",
                    "excerpt" : "\n        Connection connection = null;\n        try {\n            connection = DriverManager.getConnection(jdbcUrl, username, password);\n            String insertSql = \"INSERT INTO personal_data (first_name, last_name, email) VALUES (?, ?, ?)\";\n            PreparedStatement insertStatement = connection.prepareStatement(insertSql); /* <=== java.sql.Connection.prepareStatement */ \n            insertStatement.setString(1, \"John\");\n            insertStatement.setString(2, \"Doe\");\n            insertStatement.setString(3, \"john.doe@example.com\");\n            insertStatement.executeUpdate();\n        } catch (SQLException e) {"
                  },
                  {
                    "sample" : "insertStatement",
                    "lineNumber" : 22,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/rds.java",
                    "excerpt" : "\n        Connection connection = null;\n        try {\n            connection = DriverManager.getConnection(jdbcUrl, username, password);\n            String insertSql = \"INSERT INTO personal_data (first_name, last_name, email) VALUES (?, ?, ?)\";\n            PreparedStatement insertStatement = connection.prepareStatement(insertSql); /* <=== java.sql.PreparedStatement */ \n            insertStatement.setString(1, \"John\");\n            insertStatement.setString(2, \"Doe\");\n            insertStatement.setString(3, \"john.doe@example.com\");\n            insertStatement.executeUpdate();\n        } catch (SQLException e) {"
                  },
                  {
                    "sample" : "insertStatement",
                    "lineNumber" : 23,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/rds.java",
                    "excerpt" : "        Connection connection = null;\n        try {\n            connection = DriverManager.getConnection(jdbcUrl, username, password);\n            String insertSql = \"INSERT INTO personal_data (first_name, last_name, email) VALUES (?, ?, ?)\";\n            PreparedStatement insertStatement = connection.prepareStatement(insertSql);\n            insertStatement.setString(1, \"John\"); /* <=== java.sql.PreparedStatement */ \n            insertStatement.setString(2, \"Doe\");\n            insertStatement.setString(3, \"john.doe@example.com\");\n            insertStatement.executeUpdate();\n        } catch (SQLException e) {\n            System.err.println(\"Error connecting to the database: \" + e.getMessage());"
                  },
                  {
                    "sample" : "insertStatement",
                    "lineNumber" : 24,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/rds.java",
                    "excerpt" : "        try {\n            connection = DriverManager.getConnection(jdbcUrl, username, password);\n            String insertSql = \"INSERT INTO personal_data (first_name, last_name, email) VALUES (?, ?, ?)\";\n            PreparedStatement insertStatement = connection.prepareStatement(insertSql);\n            insertStatement.setString(1, \"John\");\n            insertStatement.setString(2, \"Doe\"); /* <=== java.sql.PreparedStatement */ \n            insertStatement.setString(3, \"john.doe@example.com\");\n            insertStatement.executeUpdate();\n        } catch (SQLException e) {\n            System.err.println(\"Error connecting to the database: \" + e.getMessage());\n        } finally {"
                  },
                  {
                    "sample" : "insertStatement",
                    "lineNumber" : 25,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/rds.java",
                    "excerpt" : "            connection = DriverManager.getConnection(jdbcUrl, username, password);\n            String insertSql = \"INSERT INTO personal_data (first_name, last_name, email) VALUES (?, ?, ?)\";\n            PreparedStatement insertStatement = connection.prepareStatement(insertSql);\n            insertStatement.setString(1, \"John\");\n            insertStatement.setString(2, \"Doe\");\n            insertStatement.setString(3, \"john.doe@example.com\"); /* <=== java.sql.PreparedStatement */ \n            insertStatement.executeUpdate();\n        } catch (SQLException e) {\n            System.err.println(\"Error connecting to the database: \" + e.getMessage());\n        } finally {\n            if (connection != null) {"
                  },
                  {
                    "sample" : "insertStatement.executeUpdate()",
                    "lineNumber" : 26,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/rds.java",
                    "excerpt" : "            String insertSql = \"INSERT INTO personal_data (first_name, last_name, email) VALUES (?, ?, ?)\";\n            PreparedStatement insertStatement = connection.prepareStatement(insertSql);\n            insertStatement.setString(1, \"John\");\n            insertStatement.setString(2, \"Doe\");\n            insertStatement.setString(3, \"john.doe@example.com\");\n            insertStatement.executeUpdate(); /* <=== java.sql.PreparedStatement.executeUpdate */ \n        } catch (SQLException e) {\n            System.err.println(\"Error connecting to the database: \" + e.getMessage());\n        } finally {\n            if (connection != null) {\n                try {"
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "miscellaneous" : [
    ],
    "internal_apis" : [
    ],
    "leakages" : [
      {
        "sourceId" : "Data.Sensitive.ContactData.EmailAddress",
        "sinks" : [
          {
            "sinkType" : "leakages",
            "id" : "Leakages.Log.Console",
            "name" : "Log Console",
            "category" : "",
            "domains" : [
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "databaseDetails" : {
              "dbName" : "",
              "dbVendor" : "",
              "dbLocation" : "",
              "dbOperation" : ""
            },
            "paths" : [
              {
                "pathId" : "7539-7538-7537-7526-7525-7524-7523-7545-7544-7556",
                "path" : [
                  {
                    "sample" : "\"email\"",
                    "lineNumber" : 19,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "    public void processPersonalData(Map<String,String> personalData) {\n        // Send the personal data to Amazon Lex for processing\n        PostTextRequest postTextRequest = new PostTextRequest()\n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\")) /* <===  */ \n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);\n\n        // Handle the Lex response\n        if (postTextResult.getDialogState() == \"Fulfilled\") {"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 19,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "    public void processPersonalData(Map<String,String> personalData) {\n        // Send the personal data to Amazon Lex for processing\n        PostTextRequest postTextRequest = new PostTextRequest()\n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\")) /* <=== <unresolvedNamespace>.Map<String,String> */ \n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);\n\n        // Handle the Lex response\n        if (postTextResult.getDialogState() == \"Fulfilled\") {"
                  },
                  {
                    "sample" : "get(\"email\")",
                    "lineNumber" : 19,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "    public void processPersonalData(Map<String,String> personalData) {\n        // Send the personal data to Amazon Lex for processing\n        PostTextRequest postTextRequest = new PostTextRequest()\n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\")) /* <===  */ \n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);\n\n        // Handle the Lex response\n        if (postTextResult.getDialogState() == \"Fulfilled\") {"
                  },
                  {
                    "sample" : "withBotAlias(\"latest\")",
                    "lineNumber" : 16,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "        lexRuntimeClient = AmazonLexRuntimeClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Send the personal data to Amazon Lex for processing\n        PostTextRequest postTextRequest = new PostTextRequest() /* <===  */ \n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\"))\n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);"
                  },
                  {
                    "sample" : "withUserId(personalData.get(\"email\"))",
                    "lineNumber" : 16,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "        lexRuntimeClient = AmazonLexRuntimeClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Send the personal data to Amazon Lex for processing\n        PostTextRequest postTextRequest = new PostTextRequest() /* <===  */ \n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\"))\n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);"
                  },
                  {
                    "sample" : "withInputText(personalData.toString())",
                    "lineNumber" : 16,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "        lexRuntimeClient = AmazonLexRuntimeClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Send the personal data to Amazon Lex for processing\n        PostTextRequest postTextRequest = new PostTextRequest() /* <===  */ \n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\"))\n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);"
                  },
                  {
                    "sample" : "postTextRequest",
                    "lineNumber" : 16,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "        lexRuntimeClient = AmazonLexRuntimeClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Send the personal data to Amazon Lex for processing\n        PostTextRequest postTextRequest = new PostTextRequest() /* <=== com.amazonaws.services.lexruntime.model.PostTextRequest */ \n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\"))\n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);"
                  },
                  {
                    "sample" : "postText(postTextRequest)",
                    "lineNumber" : 21,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "        PostTextRequest postTextRequest = new PostTextRequest()\n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\"))\n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest); /* <=== com.amazonaws.services.lexruntime.AmazonLexRuntime.postText */ \n\n        // Handle the Lex response\n        if (postTextResult.getDialogState() == \"Fulfilled\") {\n            // The personal data was successfully processed by Lex\n            System.out.println(\"Personal data processed by Lex: \" + postTextResult.getMessage());"
                  },
                  {
                    "sample" : "postTextResult",
                    "lineNumber" : 21,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "        PostTextRequest postTextRequest = new PostTextRequest()\n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\"))\n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest); /* <=== com.amazonaws.services.lexruntime.model.PostTextResult */ \n\n        // Handle the Lex response\n        if (postTextResult.getDialogState() == \"Fulfilled\") {\n            // The personal data was successfully processed by Lex\n            System.out.println(\"Personal data processed by Lex: \" + postTextResult.getMessage());"
                  },
                  {
                    "sample" : "println(\"Personal data processed by Lex: \" + postTextResult.getMessage())",
                    "lineNumber" : 26,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);\n\n        // Handle the Lex response\n        if (postTextResult.getDialogState() == \"Fulfilled\") {\n            // The personal data was successfully processed by Lex\n            System.out.println(\"Personal data processed by Lex: \" + postTextResult.getMessage()); /* <=== java.io.PrintStream.println */ \n        } else {\n            // An error occurred while processing the personal data\n            System.err.println(\"Error processing personal data: \" + postTextResult.getMessage());\n        }\n    }"
                  }
                ]
              },
              {
                "pathId" : "7539-7538-7537-7526-7525-7524-7523-7545-7544-7566",
                "path" : [
                  {
                    "sample" : "\"email\"",
                    "lineNumber" : 19,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "    public void processPersonalData(Map<String,String> personalData) {\n        // Send the personal data to Amazon Lex for processing\n        PostTextRequest postTextRequest = new PostTextRequest()\n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\")) /* <===  */ \n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);\n\n        // Handle the Lex response\n        if (postTextResult.getDialogState() == \"Fulfilled\") {"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 19,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "    public void processPersonalData(Map<String,String> personalData) {\n        // Send the personal data to Amazon Lex for processing\n        PostTextRequest postTextRequest = new PostTextRequest()\n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\")) /* <=== <unresolvedNamespace>.Map<String,String> */ \n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);\n\n        // Handle the Lex response\n        if (postTextResult.getDialogState() == \"Fulfilled\") {"
                  },
                  {
                    "sample" : "get(\"email\")",
                    "lineNumber" : 19,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "    public void processPersonalData(Map<String,String> personalData) {\n        // Send the personal data to Amazon Lex for processing\n        PostTextRequest postTextRequest = new PostTextRequest()\n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\")) /* <===  */ \n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);\n\n        // Handle the Lex response\n        if (postTextResult.getDialogState() == \"Fulfilled\") {"
                  },
                  {
                    "sample" : "withBotAlias(\"latest\")",
                    "lineNumber" : 16,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "        lexRuntimeClient = AmazonLexRuntimeClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Send the personal data to Amazon Lex for processing\n        PostTextRequest postTextRequest = new PostTextRequest() /* <===  */ \n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\"))\n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);"
                  },
                  {
                    "sample" : "withUserId(personalData.get(\"email\"))",
                    "lineNumber" : 16,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "        lexRuntimeClient = AmazonLexRuntimeClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Send the personal data to Amazon Lex for processing\n        PostTextRequest postTextRequest = new PostTextRequest() /* <===  */ \n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\"))\n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);"
                  },
                  {
                    "sample" : "withInputText(personalData.toString())",
                    "lineNumber" : 16,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "        lexRuntimeClient = AmazonLexRuntimeClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Send the personal data to Amazon Lex for processing\n        PostTextRequest postTextRequest = new PostTextRequest() /* <===  */ \n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\"))\n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);"
                  },
                  {
                    "sample" : "postTextRequest",
                    "lineNumber" : 16,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "        lexRuntimeClient = AmazonLexRuntimeClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Send the personal data to Amazon Lex for processing\n        PostTextRequest postTextRequest = new PostTextRequest() /* <=== com.amazonaws.services.lexruntime.model.PostTextRequest */ \n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\"))\n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);"
                  },
                  {
                    "sample" : "postText(postTextRequest)",
                    "lineNumber" : 21,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "        PostTextRequest postTextRequest = new PostTextRequest()\n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\"))\n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest); /* <=== com.amazonaws.services.lexruntime.AmazonLexRuntime.postText */ \n\n        // Handle the Lex response\n        if (postTextResult.getDialogState() == \"Fulfilled\") {\n            // The personal data was successfully processed by Lex\n            System.out.println(\"Personal data processed by Lex: \" + postTextResult.getMessage());"
                  },
                  {
                    "sample" : "postTextResult",
                    "lineNumber" : 21,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "        PostTextRequest postTextRequest = new PostTextRequest()\n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\"))\n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest); /* <=== com.amazonaws.services.lexruntime.model.PostTextResult */ \n\n        // Handle the Lex response\n        if (postTextResult.getDialogState() == \"Fulfilled\") {\n            // The personal data was successfully processed by Lex\n            System.out.println(\"Personal data processed by Lex: \" + postTextResult.getMessage());"
                  },
                  {
                    "sample" : "println(\"Error processing personal data: \" + postTextResult.getMessage())",
                    "lineNumber" : 29,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "        if (postTextResult.getDialogState() == \"Fulfilled\") {\n            // The personal data was successfully processed by Lex\n            System.out.println(\"Personal data processed by Lex: \" + postTextResult.getMessage());\n        } else {\n            // An error occurred while processing the personal data\n            System.err.println(\"Error processing personal data: \" + postTextResult.getMessage()); /* <=== java.io.PrintStream.println */ \n        }\n    }\n}\n"
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "third_parties" : [
      {
        "sourceId" : "Data.Sensitive.PersonalIdentification.Age",
        "sinks" : [
          {
            "sinkType" : "third_parties",
            "id" : "ThirdParties.SDK.Amazon.Aws",
            "name" : "Amazon Aws",
            "category" : "",
            "domains" : [
              "aws.amazon.com"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "databaseDetails" : {
              "dbName" : "",
              "dbVendor" : "",
              "dbLocation" : "",
              "dbOperation" : ""
            },
            "paths" : [
              {
                "pathId" : "3392-3394-3393-3383",
                "path" : [
                  {
                    "sample" : "int age",
                    "lineNumber" : 30,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/ssm.java",
                    "excerpt" : "}\n\nclass PersonalData {\n    private final String id;\n    private final String name;\n    private final int age; /* <=== 'age' is a member of 'PersonalData' class */ \n\n    public PersonalData(String id, String name, int age) {\n        this.id = id;\n        this.name = name;\n        this.age = age;"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 16,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/identitystore.java",
                    "excerpt" : "    }\n\n    public void processData(PersonalData personalData) {\n        try {\n            CreateUserRequest createUserRequest = new CreateUserRequest()\n                .withUserPoolId(personalData.getUserPoolId()) /* <=== PersonalData */ \n                .withUsername(personalData.getUsername())\n                .withUserAttributes(personalData.getUserAttributes());\n\n            CreateUserResult createUserResult = identityStoreClient.createUser(createUserRequest);\n            System.out.println(\"Successfully sent personal data to Amazon Identity Store\");"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 17,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/identitystore.java",
                    "excerpt" : "\n    public void processData(PersonalData personalData) {\n        try {\n            CreateUserRequest createUserRequest = new CreateUserRequest()\n                .withUserPoolId(personalData.getUserPoolId())\n                .withUsername(personalData.getUsername()) /* <=== PersonalData */ \n                .withUserAttributes(personalData.getUserAttributes());\n\n            CreateUserResult createUserResult = identityStoreClient.createUser(createUserRequest);\n            System.out.println(\"Successfully sent personal data to Amazon Identity Store\");\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "personalData.getUsername()",
                    "lineNumber" : 17,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/identitystore.java",
                    "excerpt" : "\n    public void processData(PersonalData personalData) {\n        try {\n            CreateUserRequest createUserRequest = new CreateUserRequest()\n                .withUserPoolId(personalData.getUserPoolId())\n                .withUsername(personalData.getUsername()) /* <=== PersonalData.getUsername */ \n                .withUserAttributes(personalData.getUserAttributes());\n\n            CreateUserResult createUserResult = identityStoreClient.createUser(createUserRequest);\n            System.out.println(\"Successfully sent personal data to Amazon Identity Store\");\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "withUserPoolId(personalData.getUserPoolId())",
                    "lineNumber" : 15,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/identitystore.java",
                    "excerpt" : "        identityStoreClient = AWSIdentityStoreClientBuilder.defaultClient();\n    }\n\n    public void processData(PersonalData personalData) {\n        try {\n            CreateUserRequest createUserRequest = new CreateUserRequest() /* <=== com.amazonaws.services.identitystore.model.CreateUserRequest.withUserPoolId */ \n                .withUserPoolId(personalData.getUserPoolId())\n                .withUsername(personalData.getUsername())\n                .withUserAttributes(personalData.getUserAttributes());\n\n            CreateUserResult createUserResult = identityStoreClient.createUser(createUserRequest);"
                  }
                ]
              },
              {
                "pathId" : "3396-3395-3382-3381-3380-3400",
                "path" : [
                  {
                    "sample" : "int age",
                    "lineNumber" : 30,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/ssm.java",
                    "excerpt" : "}\n\nclass PersonalData {\n    private final String id;\n    private final String name;\n    private final int age; /* <=== 'age' is a member of 'PersonalData' class */ \n\n    public PersonalData(String id, String name, int age) {\n        this.id = id;\n        this.name = name;\n        this.age = age;"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 18,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/identitystore.java",
                    "excerpt" : "    public void processData(PersonalData personalData) {\n        try {\n            CreateUserRequest createUserRequest = new CreateUserRequest()\n                .withUserPoolId(personalData.getUserPoolId())\n                .withUsername(personalData.getUsername())\n                .withUserAttributes(personalData.getUserAttributes()); /* <=== PersonalData */ \n\n            CreateUserResult createUserResult = identityStoreClient.createUser(createUserRequest);\n            System.out.println(\"Successfully sent personal data to Amazon Identity Store\");\n        } catch (Exception e) {\n            System.err.println(\"Error processing personal data: \" + e.getMessage());"
                  },
                  {
                    "sample" : "personalData.getUserAttributes()",
                    "lineNumber" : 18,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/identitystore.java",
                    "excerpt" : "    public void processData(PersonalData personalData) {\n        try {\n            CreateUserRequest createUserRequest = new CreateUserRequest()\n                .withUserPoolId(personalData.getUserPoolId())\n                .withUsername(personalData.getUsername())\n                .withUserAttributes(personalData.getUserAttributes()); /* <=== PersonalData.getUserAttributes */ \n\n            CreateUserResult createUserResult = identityStoreClient.createUser(createUserRequest);\n            System.out.println(\"Successfully sent personal data to Amazon Identity Store\");\n        } catch (Exception e) {\n            System.err.println(\"Error processing personal data: \" + e.getMessage());"
                  },
                  {
                    "sample" : "withUsername(personalData.getUsername())",
                    "lineNumber" : 15,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/identitystore.java",
                    "excerpt" : "        identityStoreClient = AWSIdentityStoreClientBuilder.defaultClient();\n    }\n\n    public void processData(PersonalData personalData) {\n        try {\n            CreateUserRequest createUserRequest = new CreateUserRequest() /* <===  */ \n                .withUserPoolId(personalData.getUserPoolId())\n                .withUsername(personalData.getUsername())\n                .withUserAttributes(personalData.getUserAttributes());\n\n            CreateUserResult createUserResult = identityStoreClient.createUser(createUserRequest);"
                  },
                  {
                    "sample" : "withUserAttributes(personalData.getUserAttributes())",
                    "lineNumber" : 15,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/identitystore.java",
                    "excerpt" : "        identityStoreClient = AWSIdentityStoreClientBuilder.defaultClient();\n    }\n\n    public void processData(PersonalData personalData) {\n        try {\n            CreateUserRequest createUserRequest = new CreateUserRequest() /* <===  */ \n                .withUserPoolId(personalData.getUserPoolId())\n                .withUsername(personalData.getUsername())\n                .withUserAttributes(personalData.getUserAttributes());\n\n            CreateUserResult createUserResult = identityStoreClient.createUser(createUserRequest);"
                  },
                  {
                    "sample" : "createUserRequest",
                    "lineNumber" : 15,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/identitystore.java",
                    "excerpt" : "        identityStoreClient = AWSIdentityStoreClientBuilder.defaultClient();\n    }\n\n    public void processData(PersonalData personalData) {\n        try {\n            CreateUserRequest createUserRequest = new CreateUserRequest() /* <=== com.amazonaws.services.identitystore.model.CreateUserRequest */ \n                .withUserPoolId(personalData.getUserPoolId())\n                .withUsername(personalData.getUsername())\n                .withUserAttributes(personalData.getUserAttributes());\n\n            CreateUserResult createUserResult = identityStoreClient.createUser(createUserRequest);"
                  },
                  {
                    "sample" : "createUser(createUserRequest)",
                    "lineNumber" : 20,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/identitystore.java",
                    "excerpt" : "            CreateUserRequest createUserRequest = new CreateUserRequest()\n                .withUserPoolId(personalData.getUserPoolId())\n                .withUsername(personalData.getUsername())\n                .withUserAttributes(personalData.getUserAttributes());\n\n            CreateUserResult createUserResult = identityStoreClient.createUser(createUserRequest); /* <=== com.amazonaws.services.identitystore.AWSIdentityStore.createUser */ \n            System.out.println(\"Successfully sent personal data to Amazon Identity Store\");\n        } catch (Exception e) {\n            System.err.println(\"Error processing personal data: \" + e.getMessage());\n        }\n    }"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.AccountData.AccountName",
        "sinks" : [
          {
            "sinkType" : "third_parties",
            "id" : "ThirdParties.SDK.Amazon.Aws",
            "name" : "Amazon Aws",
            "category" : "",
            "domains" : [
              "aws.amazon.com"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "databaseDetails" : {
              "dbName" : "",
              "dbVendor" : "",
              "dbLocation" : "",
              "dbOperation" : ""
            },
            "paths" : [
              {
                "pathId" : "3392-3394-3393-3383",
                "path" : [
                  {
                    "sample" : "java.lang.String username",
                    "lineNumber" : 30,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/identitystore.java",
                    "excerpt" : "    }\n}\n\nclass PersonalData {\n    private final String userPoolId;\n    private final String username; /* <=== 'username' is a member of 'PersonalData' class */ \n    private final List<AttributeType> userAttributes;\n\n    public PersonalData(String userPoolId, String username, List<AttributeType> userAttributes) {\n        this.userPoolId = userPoolId;\n        this.username = username;"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 16,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/identitystore.java",
                    "excerpt" : "    }\n\n    public void processData(PersonalData personalData) {\n        try {\n            CreateUserRequest createUserRequest = new CreateUserRequest()\n                .withUserPoolId(personalData.getUserPoolId()) /* <=== PersonalData */ \n                .withUsername(personalData.getUsername())\n                .withUserAttributes(personalData.getUserAttributes());\n\n            CreateUserResult createUserResult = identityStoreClient.createUser(createUserRequest);\n            System.out.println(\"Successfully sent personal data to Amazon Identity Store\");"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 17,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/identitystore.java",
                    "excerpt" : "\n    public void processData(PersonalData personalData) {\n        try {\n            CreateUserRequest createUserRequest = new CreateUserRequest()\n                .withUserPoolId(personalData.getUserPoolId())\n                .withUsername(personalData.getUsername()) /* <=== PersonalData */ \n                .withUserAttributes(personalData.getUserAttributes());\n\n            CreateUserResult createUserResult = identityStoreClient.createUser(createUserRequest);\n            System.out.println(\"Successfully sent personal data to Amazon Identity Store\");\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "personalData.getUsername()",
                    "lineNumber" : 17,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/identitystore.java",
                    "excerpt" : "\n    public void processData(PersonalData personalData) {\n        try {\n            CreateUserRequest createUserRequest = new CreateUserRequest()\n                .withUserPoolId(personalData.getUserPoolId())\n                .withUsername(personalData.getUsername()) /* <=== PersonalData.getUsername */ \n                .withUserAttributes(personalData.getUserAttributes());\n\n            CreateUserResult createUserResult = identityStoreClient.createUser(createUserRequest);\n            System.out.println(\"Successfully sent personal data to Amazon Identity Store\");\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "withUserPoolId(personalData.getUserPoolId())",
                    "lineNumber" : 15,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/identitystore.java",
                    "excerpt" : "        identityStoreClient = AWSIdentityStoreClientBuilder.defaultClient();\n    }\n\n    public void processData(PersonalData personalData) {\n        try {\n            CreateUserRequest createUserRequest = new CreateUserRequest() /* <=== com.amazonaws.services.identitystore.model.CreateUserRequest.withUserPoolId */ \n                .withUserPoolId(personalData.getUserPoolId())\n                .withUsername(personalData.getUsername())\n                .withUserAttributes(personalData.getUserAttributes());\n\n            CreateUserResult createUserResult = identityStoreClient.createUser(createUserRequest);"
                  }
                ]
              },
              {
                "pathId" : "3396-3395-3382-3381-3380-3400",
                "path" : [
                  {
                    "sample" : "java.lang.String username",
                    "lineNumber" : 30,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/identitystore.java",
                    "excerpt" : "    }\n}\n\nclass PersonalData {\n    private final String userPoolId;\n    private final String username; /* <=== 'username' is a member of 'PersonalData' class */ \n    private final List<AttributeType> userAttributes;\n\n    public PersonalData(String userPoolId, String username, List<AttributeType> userAttributes) {\n        this.userPoolId = userPoolId;\n        this.username = username;"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 18,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/identitystore.java",
                    "excerpt" : "    public void processData(PersonalData personalData) {\n        try {\n            CreateUserRequest createUserRequest = new CreateUserRequest()\n                .withUserPoolId(personalData.getUserPoolId())\n                .withUsername(personalData.getUsername())\n                .withUserAttributes(personalData.getUserAttributes()); /* <=== PersonalData */ \n\n            CreateUserResult createUserResult = identityStoreClient.createUser(createUserRequest);\n            System.out.println(\"Successfully sent personal data to Amazon Identity Store\");\n        } catch (Exception e) {\n            System.err.println(\"Error processing personal data: \" + e.getMessage());"
                  },
                  {
                    "sample" : "personalData.getUserAttributes()",
                    "lineNumber" : 18,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/identitystore.java",
                    "excerpt" : "    public void processData(PersonalData personalData) {\n        try {\n            CreateUserRequest createUserRequest = new CreateUserRequest()\n                .withUserPoolId(personalData.getUserPoolId())\n                .withUsername(personalData.getUsername())\n                .withUserAttributes(personalData.getUserAttributes()); /* <=== PersonalData.getUserAttributes */ \n\n            CreateUserResult createUserResult = identityStoreClient.createUser(createUserRequest);\n            System.out.println(\"Successfully sent personal data to Amazon Identity Store\");\n        } catch (Exception e) {\n            System.err.println(\"Error processing personal data: \" + e.getMessage());"
                  },
                  {
                    "sample" : "withUsername(personalData.getUsername())",
                    "lineNumber" : 15,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/identitystore.java",
                    "excerpt" : "        identityStoreClient = AWSIdentityStoreClientBuilder.defaultClient();\n    }\n\n    public void processData(PersonalData personalData) {\n        try {\n            CreateUserRequest createUserRequest = new CreateUserRequest() /* <===  */ \n                .withUserPoolId(personalData.getUserPoolId())\n                .withUsername(personalData.getUsername())\n                .withUserAttributes(personalData.getUserAttributes());\n\n            CreateUserResult createUserResult = identityStoreClient.createUser(createUserRequest);"
                  },
                  {
                    "sample" : "withUserAttributes(personalData.getUserAttributes())",
                    "lineNumber" : 15,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/identitystore.java",
                    "excerpt" : "        identityStoreClient = AWSIdentityStoreClientBuilder.defaultClient();\n    }\n\n    public void processData(PersonalData personalData) {\n        try {\n            CreateUserRequest createUserRequest = new CreateUserRequest() /* <===  */ \n                .withUserPoolId(personalData.getUserPoolId())\n                .withUsername(personalData.getUsername())\n                .withUserAttributes(personalData.getUserAttributes());\n\n            CreateUserResult createUserResult = identityStoreClient.createUser(createUserRequest);"
                  },
                  {
                    "sample" : "createUserRequest",
                    "lineNumber" : 15,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/identitystore.java",
                    "excerpt" : "        identityStoreClient = AWSIdentityStoreClientBuilder.defaultClient();\n    }\n\n    public void processData(PersonalData personalData) {\n        try {\n            CreateUserRequest createUserRequest = new CreateUserRequest() /* <=== com.amazonaws.services.identitystore.model.CreateUserRequest */ \n                .withUserPoolId(personalData.getUserPoolId())\n                .withUsername(personalData.getUsername())\n                .withUserAttributes(personalData.getUserAttributes());\n\n            CreateUserResult createUserResult = identityStoreClient.createUser(createUserRequest);"
                  },
                  {
                    "sample" : "createUser(createUserRequest)",
                    "lineNumber" : 20,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/identitystore.java",
                    "excerpt" : "            CreateUserRequest createUserRequest = new CreateUserRequest()\n                .withUserPoolId(personalData.getUserPoolId())\n                .withUsername(personalData.getUsername())\n                .withUserAttributes(personalData.getUserAttributes());\n\n            CreateUserResult createUserResult = identityStoreClient.createUser(createUserRequest); /* <=== com.amazonaws.services.identitystore.AWSIdentityStore.createUser */ \n            System.out.println(\"Successfully sent personal data to Amazon Identity Store\");\n        } catch (Exception e) {\n            System.err.println(\"Error processing personal data: \" + e.getMessage());\n        }\n    }"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.ContactData.EmailAddress",
        "sinks" : [
          {
            "sinkType" : "third_parties",
            "id" : "ThirdParties.SDK.Amazon.Aws",
            "name" : "Amazon Aws",
            "category" : "",
            "domains" : [
              "aws.amazon.com"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "databaseDetails" : {
              "dbName" : "",
              "dbVendor" : "",
              "dbLocation" : "",
              "dbOperation" : ""
            },
            "paths" : [
              {
                "pathId" : "6791-6790-6793-6792-6781",
                "path" : [
                  {
                    "sample" : "\"email\"",
                    "lineNumber" : 17,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Create a new account in Amazon Organizations to store the personal data\n        CreateAccountRequest createAccountRequest = new CreateAccountRequest()\n            .withEmail(personalData.get(\"email\")) /* <===  */ \n            .withAccountName(personalData.get(\"name\"))\n            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest);\n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId();\n"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 17,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Create a new account in Amazon Organizations to store the personal data\n        CreateAccountRequest createAccountRequest = new CreateAccountRequest()\n            .withEmail(personalData.get(\"email\")) /* <=== <unresolvedNamespace>.Map<String,String> */ \n            .withAccountName(personalData.get(\"name\"))\n            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest);\n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId();\n"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 18,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "\n    public void processPersonalData(Map<String,String> personalData) {\n        // Create a new account in Amazon Organizations to store the personal data\n        CreateAccountRequest createAccountRequest = new CreateAccountRequest()\n            .withEmail(personalData.get(\"email\"))\n            .withAccountName(personalData.get(\"name\")) /* <=== <unresolvedNamespace>.Map<String,String> */ \n            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest);\n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId();\n\n        // Add the personal data as tags to the created account"
                  },
                  {
                    "sample" : "get(\"name\")",
                    "lineNumber" : 18,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "\n    public void processPersonalData(Map<String,String> personalData) {\n        // Create a new account in Amazon Organizations to store the personal data\n        CreateAccountRequest createAccountRequest = new CreateAccountRequest()\n            .withEmail(personalData.get(\"email\"))\n            .withAccountName(personalData.get(\"name\")) /* <===  */ \n            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest);\n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId();\n\n        // Add the personal data as tags to the created account"
                  },
                  {
                    "sample" : "withEmail(personalData.get(\"email\"))",
                    "lineNumber" : 16,
                    "columnNumber" : 53,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "        organizationsClient = AWSOrganizationsClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Create a new account in Amazon Organizations to store the personal data\n        CreateAccountRequest createAccountRequest = new CreateAccountRequest() /* <=== com.amazonaws.services.organizations.model.CreateAccountRequest.withEmail */ \n            .withEmail(personalData.get(\"email\"))\n            .withAccountName(personalData.get(\"name\"))\n            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest);\n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId();"
                  }
                ]
              },
              {
                "pathId" : "6791-6790-6793-6792-6781-6780-6779-6778-6799",
                "path" : [
                  {
                    "sample" : "\"email\"",
                    "lineNumber" : 17,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Create a new account in Amazon Organizations to store the personal data\n        CreateAccountRequest createAccountRequest = new CreateAccountRequest()\n            .withEmail(personalData.get(\"email\")) /* <===  */ \n            .withAccountName(personalData.get(\"name\"))\n            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest);\n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId();\n"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 17,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Create a new account in Amazon Organizations to store the personal data\n        CreateAccountRequest createAccountRequest = new CreateAccountRequest()\n            .withEmail(personalData.get(\"email\")) /* <=== <unresolvedNamespace>.Map<String,String> */ \n            .withAccountName(personalData.get(\"name\"))\n            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest);\n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId();\n"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 18,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "\n    public void processPersonalData(Map<String,String> personalData) {\n        // Create a new account in Amazon Organizations to store the personal data\n        CreateAccountRequest createAccountRequest = new CreateAccountRequest()\n            .withEmail(personalData.get(\"email\"))\n            .withAccountName(personalData.get(\"name\")) /* <=== <unresolvedNamespace>.Map<String,String> */ \n            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest);\n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId();\n\n        // Add the personal data as tags to the created account"
                  },
                  {
                    "sample" : "get(\"name\")",
                    "lineNumber" : 18,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "\n    public void processPersonalData(Map<String,String> personalData) {\n        // Create a new account in Amazon Organizations to store the personal data\n        CreateAccountRequest createAccountRequest = new CreateAccountRequest()\n            .withEmail(personalData.get(\"email\"))\n            .withAccountName(personalData.get(\"name\")) /* <===  */ \n            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest);\n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId();\n\n        // Add the personal data as tags to the created account"
                  },
                  {
                    "sample" : "withEmail(personalData.get(\"email\"))",
                    "lineNumber" : 16,
                    "columnNumber" : 53,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "        organizationsClient = AWSOrganizationsClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Create a new account in Amazon Organizations to store the personal data\n        CreateAccountRequest createAccountRequest = new CreateAccountRequest() /* <=== com.amazonaws.services.organizations.model.CreateAccountRequest.withEmail */ \n            .withEmail(personalData.get(\"email\"))\n            .withAccountName(personalData.get(\"name\"))\n            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest);\n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId();"
                  },
                  {
                    "sample" : "withAccountName(personalData.get(\"name\"))",
                    "lineNumber" : 16,
                    "columnNumber" : 53,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "        organizationsClient = AWSOrganizationsClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Create a new account in Amazon Organizations to store the personal data\n        CreateAccountRequest createAccountRequest = new CreateAccountRequest() /* <===  */ \n            .withEmail(personalData.get(\"email\"))\n            .withAccountName(personalData.get(\"name\"))\n            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest);\n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId();"
                  },
                  {
                    "sample" : "withRoleName(\"PERSONAL_DATA_ROLE\")",
                    "lineNumber" : 16,
                    "columnNumber" : 53,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "        organizationsClient = AWSOrganizationsClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Create a new account in Amazon Organizations to store the personal data\n        CreateAccountRequest createAccountRequest = new CreateAccountRequest() /* <===  */ \n            .withEmail(personalData.get(\"email\"))\n            .withAccountName(personalData.get(\"name\"))\n            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest);\n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId();"
                  },
                  {
                    "sample" : "createAccountRequest",
                    "lineNumber" : 16,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "        organizationsClient = AWSOrganizationsClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Create a new account in Amazon Organizations to store the personal data\n        CreateAccountRequest createAccountRequest = new CreateAccountRequest() /* <=== com.amazonaws.services.organizations.model.CreateAccountRequest */ \n            .withEmail(personalData.get(\"email\"))\n            .withAccountName(personalData.get(\"name\"))\n            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest);\n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId();"
                  },
                  {
                    "sample" : "createAccount(createAccountRequest)",
                    "lineNumber" : 20,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "        // Create a new account in Amazon Organizations to store the personal data\n        CreateAccountRequest createAccountRequest = new CreateAccountRequest()\n            .withEmail(personalData.get(\"email\"))\n            .withAccountName(personalData.get(\"name\"))\n            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest); /* <=== com.amazonaws.services.organizations.AWSOrganizations.createAccount */ \n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId();\n\n        // Add the personal data as tags to the created account\n        TagResourceRequest tagResourceRequest = new TagResourceRequest()\n            .withResourceId(accountId)"
                  }
                ]
              },
              {
                "pathId" : "7539-7538-7537-7526-7525-7524-7523-7545-7544-7552",
                "path" : [
                  {
                    "sample" : "\"email\"",
                    "lineNumber" : 19,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "    public void processPersonalData(Map<String,String> personalData) {\n        // Send the personal data to Amazon Lex for processing\n        PostTextRequest postTextRequest = new PostTextRequest()\n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\")) /* <===  */ \n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);\n\n        // Handle the Lex response\n        if (postTextResult.getDialogState() == \"Fulfilled\") {"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 19,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "    public void processPersonalData(Map<String,String> personalData) {\n        // Send the personal data to Amazon Lex for processing\n        PostTextRequest postTextRequest = new PostTextRequest()\n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\")) /* <=== <unresolvedNamespace>.Map<String,String> */ \n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);\n\n        // Handle the Lex response\n        if (postTextResult.getDialogState() == \"Fulfilled\") {"
                  },
                  {
                    "sample" : "get(\"email\")",
                    "lineNumber" : 19,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "    public void processPersonalData(Map<String,String> personalData) {\n        // Send the personal data to Amazon Lex for processing\n        PostTextRequest postTextRequest = new PostTextRequest()\n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\")) /* <===  */ \n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);\n\n        // Handle the Lex response\n        if (postTextResult.getDialogState() == \"Fulfilled\") {"
                  },
                  {
                    "sample" : "withBotAlias(\"latest\")",
                    "lineNumber" : 16,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "        lexRuntimeClient = AmazonLexRuntimeClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Send the personal data to Amazon Lex for processing\n        PostTextRequest postTextRequest = new PostTextRequest() /* <===  */ \n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\"))\n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);"
                  },
                  {
                    "sample" : "withUserId(personalData.get(\"email\"))",
                    "lineNumber" : 16,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "        lexRuntimeClient = AmazonLexRuntimeClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Send the personal data to Amazon Lex for processing\n        PostTextRequest postTextRequest = new PostTextRequest() /* <===  */ \n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\"))\n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);"
                  },
                  {
                    "sample" : "withInputText(personalData.toString())",
                    "lineNumber" : 16,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "        lexRuntimeClient = AmazonLexRuntimeClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Send the personal data to Amazon Lex for processing\n        PostTextRequest postTextRequest = new PostTextRequest() /* <===  */ \n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\"))\n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);"
                  },
                  {
                    "sample" : "postTextRequest",
                    "lineNumber" : 16,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "        lexRuntimeClient = AmazonLexRuntimeClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Send the personal data to Amazon Lex for processing\n        PostTextRequest postTextRequest = new PostTextRequest() /* <=== com.amazonaws.services.lexruntime.model.PostTextRequest */ \n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\"))\n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);"
                  },
                  {
                    "sample" : "postText(postTextRequest)",
                    "lineNumber" : 21,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "        PostTextRequest postTextRequest = new PostTextRequest()\n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\"))\n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest); /* <=== com.amazonaws.services.lexruntime.AmazonLexRuntime.postText */ \n\n        // Handle the Lex response\n        if (postTextResult.getDialogState() == \"Fulfilled\") {\n            // The personal data was successfully processed by Lex\n            System.out.println(\"Personal data processed by Lex: \" + postTextResult.getMessage());"
                  },
                  {
                    "sample" : "postTextResult",
                    "lineNumber" : 21,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "        PostTextRequest postTextRequest = new PostTextRequest()\n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\"))\n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest); /* <=== com.amazonaws.services.lexruntime.model.PostTextResult */ \n\n        // Handle the Lex response\n        if (postTextResult.getDialogState() == \"Fulfilled\") {\n            // The personal data was successfully processed by Lex\n            System.out.println(\"Personal data processed by Lex: \" + postTextResult.getMessage());"
                  },
                  {
                    "sample" : "getDialogState()",
                    "lineNumber" : 24,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "            .withUserId(personalData.get(\"email\"))\n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);\n\n        // Handle the Lex response\n        if (postTextResult.getDialogState() == \"Fulfilled\") { /* <=== com.amazonaws.services.lexruntime.model.PostTextResult.getDialogState */ \n            // The personal data was successfully processed by Lex\n            System.out.println(\"Personal data processed by Lex: \" + postTextResult.getMessage());\n        } else {\n            // An error occurred while processing the personal data\n            System.err.println(\"Error processing personal data: \" + postTextResult.getMessage());"
                  }
                ]
              },
              {
                "pathId" : "6791-6790-6793-6792-6781-6780-6779-6778-6799-6798-6808",
                "path" : [
                  {
                    "sample" : "\"email\"",
                    "lineNumber" : 17,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Create a new account in Amazon Organizations to store the personal data\n        CreateAccountRequest createAccountRequest = new CreateAccountRequest()\n            .withEmail(personalData.get(\"email\")) /* <===  */ \n            .withAccountName(personalData.get(\"name\"))\n            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest);\n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId();\n"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 17,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Create a new account in Amazon Organizations to store the personal data\n        CreateAccountRequest createAccountRequest = new CreateAccountRequest()\n            .withEmail(personalData.get(\"email\")) /* <=== <unresolvedNamespace>.Map<String,String> */ \n            .withAccountName(personalData.get(\"name\"))\n            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest);\n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId();\n"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 18,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "\n    public void processPersonalData(Map<String,String> personalData) {\n        // Create a new account in Amazon Organizations to store the personal data\n        CreateAccountRequest createAccountRequest = new CreateAccountRequest()\n            .withEmail(personalData.get(\"email\"))\n            .withAccountName(personalData.get(\"name\")) /* <=== <unresolvedNamespace>.Map<String,String> */ \n            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest);\n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId();\n\n        // Add the personal data as tags to the created account"
                  },
                  {
                    "sample" : "get(\"name\")",
                    "lineNumber" : 18,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "\n    public void processPersonalData(Map<String,String> personalData) {\n        // Create a new account in Amazon Organizations to store the personal data\n        CreateAccountRequest createAccountRequest = new CreateAccountRequest()\n            .withEmail(personalData.get(\"email\"))\n            .withAccountName(personalData.get(\"name\")) /* <===  */ \n            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest);\n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId();\n\n        // Add the personal data as tags to the created account"
                  },
                  {
                    "sample" : "withEmail(personalData.get(\"email\"))",
                    "lineNumber" : 16,
                    "columnNumber" : 53,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "        organizationsClient = AWSOrganizationsClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Create a new account in Amazon Organizations to store the personal data\n        CreateAccountRequest createAccountRequest = new CreateAccountRequest() /* <=== com.amazonaws.services.organizations.model.CreateAccountRequest.withEmail */ \n            .withEmail(personalData.get(\"email\"))\n            .withAccountName(personalData.get(\"name\"))\n            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest);\n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId();"
                  },
                  {
                    "sample" : "withAccountName(personalData.get(\"name\"))",
                    "lineNumber" : 16,
                    "columnNumber" : 53,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "        organizationsClient = AWSOrganizationsClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Create a new account in Amazon Organizations to store the personal data\n        CreateAccountRequest createAccountRequest = new CreateAccountRequest() /* <===  */ \n            .withEmail(personalData.get(\"email\"))\n            .withAccountName(personalData.get(\"name\"))\n            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest);\n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId();"
                  },
                  {
                    "sample" : "withRoleName(\"PERSONAL_DATA_ROLE\")",
                    "lineNumber" : 16,
                    "columnNumber" : 53,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "        organizationsClient = AWSOrganizationsClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Create a new account in Amazon Organizations to store the personal data\n        CreateAccountRequest createAccountRequest = new CreateAccountRequest() /* <===  */ \n            .withEmail(personalData.get(\"email\"))\n            .withAccountName(personalData.get(\"name\"))\n            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest);\n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId();"
                  },
                  {
                    "sample" : "createAccountRequest",
                    "lineNumber" : 16,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "        organizationsClient = AWSOrganizationsClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Create a new account in Amazon Organizations to store the personal data\n        CreateAccountRequest createAccountRequest = new CreateAccountRequest() /* <=== com.amazonaws.services.organizations.model.CreateAccountRequest */ \n            .withEmail(personalData.get(\"email\"))\n            .withAccountName(personalData.get(\"name\"))\n            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest);\n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId();"
                  },
                  {
                    "sample" : "createAccount(createAccountRequest)",
                    "lineNumber" : 20,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "        // Create a new account in Amazon Organizations to store the personal data\n        CreateAccountRequest createAccountRequest = new CreateAccountRequest()\n            .withEmail(personalData.get(\"email\"))\n            .withAccountName(personalData.get(\"name\"))\n            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest); /* <=== com.amazonaws.services.organizations.AWSOrganizations.createAccount */ \n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId();\n\n        // Add the personal data as tags to the created account\n        TagResourceRequest tagResourceRequest = new TagResourceRequest()\n            .withResourceId(accountId)"
                  },
                  {
                    "sample" : "createAccountResult",
                    "lineNumber" : 20,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "        // Create a new account in Amazon Organizations to store the personal data\n        CreateAccountRequest createAccountRequest = new CreateAccountRequest()\n            .withEmail(personalData.get(\"email\"))\n            .withAccountName(personalData.get(\"name\"))\n            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest); /* <=== com.amazonaws.services.organizations.model.CreateAccountResult */ \n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId();\n\n        // Add the personal data as tags to the created account\n        TagResourceRequest tagResourceRequest = new TagResourceRequest()\n            .withResourceId(accountId)"
                  },
                  {
                    "sample" : "getCreateAccountStatus()",
                    "lineNumber" : 21,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "        CreateAccountRequest createAccountRequest = new CreateAccountRequest()\n            .withEmail(personalData.get(\"email\"))\n            .withAccountName(personalData.get(\"name\"))\n            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest);\n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId(); /* <=== com.amazonaws.services.organizations.model.CreateAccountResult.getCreateAccountStatus */ \n\n        // Add the personal data as tags to the created account\n        TagResourceRequest tagResourceRequest = new TagResourceRequest()\n            .withResourceId(accountId)\n            .withTags(personalData);"
                  }
                ]
              },
              {
                "pathId" : "7539-7538-7537-7526-7525-7524-7523-7545",
                "path" : [
                  {
                    "sample" : "\"email\"",
                    "lineNumber" : 19,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "    public void processPersonalData(Map<String,String> personalData) {\n        // Send the personal data to Amazon Lex for processing\n        PostTextRequest postTextRequest = new PostTextRequest()\n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\")) /* <===  */ \n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);\n\n        // Handle the Lex response\n        if (postTextResult.getDialogState() == \"Fulfilled\") {"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 19,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "    public void processPersonalData(Map<String,String> personalData) {\n        // Send the personal data to Amazon Lex for processing\n        PostTextRequest postTextRequest = new PostTextRequest()\n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\")) /* <=== <unresolvedNamespace>.Map<String,String> */ \n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);\n\n        // Handle the Lex response\n        if (postTextResult.getDialogState() == \"Fulfilled\") {"
                  },
                  {
                    "sample" : "get(\"email\")",
                    "lineNumber" : 19,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "    public void processPersonalData(Map<String,String> personalData) {\n        // Send the personal data to Amazon Lex for processing\n        PostTextRequest postTextRequest = new PostTextRequest()\n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\")) /* <===  */ \n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);\n\n        // Handle the Lex response\n        if (postTextResult.getDialogState() == \"Fulfilled\") {"
                  },
                  {
                    "sample" : "withBotAlias(\"latest\")",
                    "lineNumber" : 16,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "        lexRuntimeClient = AmazonLexRuntimeClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Send the personal data to Amazon Lex for processing\n        PostTextRequest postTextRequest = new PostTextRequest() /* <===  */ \n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\"))\n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);"
                  },
                  {
                    "sample" : "withUserId(personalData.get(\"email\"))",
                    "lineNumber" : 16,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "        lexRuntimeClient = AmazonLexRuntimeClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Send the personal data to Amazon Lex for processing\n        PostTextRequest postTextRequest = new PostTextRequest() /* <===  */ \n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\"))\n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);"
                  },
                  {
                    "sample" : "withInputText(personalData.toString())",
                    "lineNumber" : 16,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "        lexRuntimeClient = AmazonLexRuntimeClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Send the personal data to Amazon Lex for processing\n        PostTextRequest postTextRequest = new PostTextRequest() /* <===  */ \n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\"))\n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);"
                  },
                  {
                    "sample" : "postTextRequest",
                    "lineNumber" : 16,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "        lexRuntimeClient = AmazonLexRuntimeClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Send the personal data to Amazon Lex for processing\n        PostTextRequest postTextRequest = new PostTextRequest() /* <=== com.amazonaws.services.lexruntime.model.PostTextRequest */ \n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\"))\n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);"
                  },
                  {
                    "sample" : "postText(postTextRequest)",
                    "lineNumber" : 21,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "        PostTextRequest postTextRequest = new PostTextRequest()\n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\"))\n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest); /* <=== com.amazonaws.services.lexruntime.AmazonLexRuntime.postText */ \n\n        // Handle the Lex response\n        if (postTextResult.getDialogState() == \"Fulfilled\") {\n            // The personal data was successfully processed by Lex\n            System.out.println(\"Personal data processed by Lex: \" + postTextResult.getMessage());"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.AccountData.AccountID",
        "sinks" : [
          {
            "sinkType" : "third_parties",
            "id" : "ThirdParties.SDK.Amazon.Aws",
            "name" : "Amazon Aws",
            "category" : "",
            "domains" : [
              "aws.amazon.com"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "databaseDetails" : {
              "dbName" : "",
              "dbVendor" : "",
              "dbLocation" : "",
              "dbOperation" : ""
            },
            "paths" : [
              {
                "pathId" : "6806-6822-6814-6813-6812-6824",
                "path" : [
                  {
                    "sample" : "accountId",
                    "lineNumber" : 21,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "        CreateAccountRequest createAccountRequest = new CreateAccountRequest()\n            .withEmail(personalData.get(\"email\"))\n            .withAccountName(personalData.get(\"name\"))\n            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest);\n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId(); /* <=== java.lang.String */ \n\n        // Add the personal data as tags to the created account\n        TagResourceRequest tagResourceRequest = new TagResourceRequest()\n            .withResourceId(accountId)\n            .withTags(personalData);"
                  },
                  {
                    "sample" : "accountId",
                    "lineNumber" : 25,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest);\n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId();\n\n        // Add the personal data as tags to the created account\n        TagResourceRequest tagResourceRequest = new TagResourceRequest()\n            .withResourceId(accountId) /* <=== java.lang.String */ \n            .withTags(personalData);\n        organizationsClient.tagResource(tagResourceRequest);\n    }\n}\n"
                  },
                  {
                    "sample" : "withResourceId(accountId)",
                    "lineNumber" : 24,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest);\n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId();\n\n        // Add the personal data as tags to the created account\n        TagResourceRequest tagResourceRequest = new TagResourceRequest() /* <===  */ \n            .withResourceId(accountId)\n            .withTags(personalData);\n        organizationsClient.tagResource(tagResourceRequest);\n    }\n}"
                  },
                  {
                    "sample" : "withTags(personalData)",
                    "lineNumber" : 24,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest);\n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId();\n\n        // Add the personal data as tags to the created account\n        TagResourceRequest tagResourceRequest = new TagResourceRequest() /* <===  */ \n            .withResourceId(accountId)\n            .withTags(personalData);\n        organizationsClient.tagResource(tagResourceRequest);\n    }\n}"
                  },
                  {
                    "sample" : "tagResourceRequest",
                    "lineNumber" : 24,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest);\n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId();\n\n        // Add the personal data as tags to the created account\n        TagResourceRequest tagResourceRequest = new TagResourceRequest() /* <=== ANY */ \n            .withResourceId(accountId)\n            .withTags(personalData);\n        organizationsClient.tagResource(tagResourceRequest);\n    }\n}"
                  },
                  {
                    "sample" : "tagResource(tagResourceRequest)",
                    "lineNumber" : 27,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "\n        // Add the personal data as tags to the created account\n        TagResourceRequest tagResourceRequest = new TagResourceRequest()\n            .withResourceId(accountId)\n            .withTags(personalData);\n        organizationsClient.tagResource(tagResourceRequest); /* <=== com.amazonaws.services.organizations.AWSOrganizations.tagResource */ \n    }\n}\n"
                  }
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "collections" : [
  ],
  "violations" : [
    {
      "policyId" : "Threats.Leakage.isDataLeakingToLog",
      "policyDetails" : {
        "name" : "PII data is written to the log files",
        "policyType" : "threat",
        "description" : "Sensitive Data written to log files or file system may lead to unauthorized access or exposure to potential attack.",
        "fix" : "It is not recommended to log Sensitive Data to log files or the file system. The data must be encrypted if it is absolutely necessary to log it.",
        "action" : "",
        "tags" : {
          "CWE-359" : "https://cwe.mitre.org/data/definitions/359.html",
          "CWE-532" : "https://cwe.mitre.org/data/definitions/532.html",
          "MSTG-STORAGE-3" : "https://github.com/OWASP/owasp-mstg/blob/master/Document/0x05d-Testing-Data-Storage.md#Testing-Logs-for-Sensitive-Data-MSTG-STORAGE-3",
          "MITRE" : "Sharing.Exposure"
        }
      },
      "dataFlow" : [
        {
          "sourceId" : "Data.Sensitive.ContactData.EmailAddress",
          "sinkId" : "Leakages.Log.Console",
          "pathIds" : [
            "7539-7538-7537-7526-7525-7524-7523-7545-7544-7556",
            "7539-7538-7537-7526-7525-7524-7523-7545-7544-7566"
          ]
        }
      ],
      "processing" : null
    }
  ]
}