{
  "privadoCoreVersion" : "1.1.14",
  "privadoCLIVersion" : "v2.2.0",
  "privadoMainVersion" : "",
  "createdAt" : 1675918509311,
  "repoName" : "aws",
  "gitMetadata" : {
    "branchName" : "main",
    "commitId" : "27544f30621c81e64f6b9986be6da66f3ae76cd3",
    "remoteUrl" : "https://github.com/hiaashna/codebase.git"
  },
  "localScanPath" : "/home/bitaashna/Desktop/aws",
  "sources" : [
    {
      "sourceType" : "Data Element",
      "id" : "Data.Sensitive.AccountData.AccountID",
      "name" : "Account ID",
      "category" : "Account Data",
      "sensitivity" : "medium",
      "isSensitive" : false,
      "tags" : {
        "law" : "GDPR"
      }
    },
    {
      "sourceType" : "Data Element",
      "id" : "Data.Sensitive.PersonalIdentification.FirstName",
      "name" : "First Name",
      "category" : "Personal Identification",
      "sensitivity" : "low",
      "isSensitive" : false,
      "tags" : {
        "law" : "GDPR"
      }
    },
    {
      "sourceType" : "Data Element",
      "id" : "Data.Sensitive.AccountData.AccountPassword",
      "name" : "Account Password",
      "category" : "Account Data",
      "sensitivity" : "high",
      "isSensitive" : false,
      "tags" : {
        "law" : "GDPR"
      }
    },
    {
      "sourceType" : "Data Element",
      "id" : "Data.Sensitive.ContactData.Address",
      "name" : "Address",
      "category" : "Contact Data",
      "sensitivity" : "medium",
      "isSensitive" : false,
      "tags" : {
        "law" : "GDPR"
      }
    },
    {
      "sourceType" : "Data Element",
      "id" : "Data.Sensitive.PersonalIdentification.DateofBirth",
      "name" : "Date of Birth",
      "category" : "Personal Identification",
      "sensitivity" : "low",
      "isSensitive" : false,
      "tags" : {
        "law" : "GDPR"
      }
    },
    {
      "sourceType" : "Data Element",
      "id" : "Data.Sensitive.PersonalIdentification.LastName",
      "name" : "Last Name",
      "category" : "Personal Identification",
      "sensitivity" : "low",
      "isSensitive" : false,
      "tags" : {
        "law" : "GDPR"
      }
    },
    {
      "sourceType" : "Data Element",
      "id" : "Data.Sensitive.ContactData.EmailAddress",
      "name" : "Email Address",
      "category" : "Contact Data",
      "sensitivity" : "medium",
      "isSensitive" : false,
      "tags" : {
        "law" : "GDPR"
      }
    },
    {
      "sourceType" : "Data Element",
      "id" : "Data.Sensitive.PersonalIdentification.Age",
      "name" : "Age",
      "category" : "Personal Identification",
      "sensitivity" : "low",
      "isSensitive" : false,
      "tags" : {
        "law" : "GDPR"
      }
    },
    {
      "sourceType" : "Data Element",
      "id" : "Data.Sensitive.ContactData.PhoneNumber",
      "name" : "Phone Number",
      "category" : "Contact Data",
      "sensitivity" : "medium",
      "isSensitive" : false,
      "tags" : {
        "law" : "GDPR"
      }
    },
    {
      "sourceType" : "Data Element",
      "id" : "Data.Sensitive.AccountData.AccountName",
      "name" : "Account Name",
      "category" : "Account Data",
      "sensitivity" : "medium",
      "isSensitive" : false,
      "tags" : {
        "law" : "GDPR"
      }
    }
  ],
  "processing" : [
    {
      "sourceId" : "Data.Sensitive.AccountData.AccountPassword",
      "occurrences" : [
        {
          "sample" : "password",
          "lineNumber" : 15,
          "columnNumber" : 16,
          "fileName" : "/app/code/rds.java",
          "excerpt" : "    public static void main(String[] args) {\n        String hostname = \"sample-rds-instance.rds.amazonaws.com\";\n        int port = 5432;\n        String dbName = \"sample_db\";\n        String username = \"sample_user\";\n        String password = \"sample_password\"; /* <=== java.lang.String */ \n        String jdbcUrl = \"jdbc:postgresql://\" + hostname + \":\" + port + \"/\" + dbName;\n\n        Connection connection = null;\n        try {\n            connection = DriverManager.getConnection(jdbcUrl, username, password);"
        }
      ]
    },
    {
      "sourceId" : "Data.Sensitive.AccountData.AccountName",
      "occurrences" : [
        {
          "sample" : "personalData",
          "lineNumber" : 16,
          "columnNumber" : -1,
          "fileName" : "/app/code/gluedatabrew.java",
          "excerpt" : "    public GlueDataBrewProcessor() {\n        this.glueDataBrewClient = AWSGlueDataBrewClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(List<PersonalData> personalDataList) {\n        for (PersonalData personalData : personalDataList) { /* <=== PersonalData */ \n            CreateProfileJobRequest createProfileJobRequest = new CreateProfileJobRequest()\n                    .withDatasetName(personalData.getDatasetName())\n                    .withRecipeReference(personalData.getRecipeReference());\n\n            CreateProfileJobResult createProfileJobResult = glueDataBrewClient.createProfileJob(createProfileJobRequest);"
        },
        {
          "sample" : "this.username",
          "lineNumber" : 44,
          "columnNumber" : 16,
          "fileName" : "/app/code/identitystore.java",
          "excerpt" : "    public String getUserPoolId() {\n        return userPoolId;\n    }\n\n    public String getUsername() {\n        return username; /* <===  */ \n    }\n\n    public List<AttributeType> getUserAttributes() {\n        return userAttributes;\n    }"
        },
        {
          "sample" : "userName",
          "lineNumber" : 14,
          "columnNumber" : 68,
          "fileName" : "/app/code/iam.java",
          "excerpt" : "    public IAMProcessor() {\n        iamClient = AmazonIdentityManagementClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(String userName) {\n        GetUserRequest request = new GetUserRequest().withUserName(userName); /* <=== java.lang.String */ \n        GetUserResult result = iamClient.getUser(request);\n\n        // Perform processing on the user information obtained from the IAM service\n        // Ensure to handle any exceptions and follow best practices for secure processing of personal data\n"
        },
        {
          "sample" : "username",
          "lineNumber" : 20,
          "columnNumber" : 63,
          "fileName" : "/app/code/rds.java",
          "excerpt" : "        String password = \"sample_password\";\n        String jdbcUrl = \"jdbc:postgresql://\" + hostname + \":\" + port + \"/\" + dbName;\n\n        Connection connection = null;\n        try {\n            connection = DriverManager.getConnection(jdbcUrl, username, password); /* <=== java.lang.String */ \n            String insertSql = \"INSERT INTO personal_data (first_name, last_name, email) VALUES (?, ?, ?)\";\n            PreparedStatement insertStatement = connection.prepareStatement(insertSql);\n            insertStatement.setString(1, \"John\");\n            insertStatement.setString(2, \"Doe\");\n            insertStatement.setString(3, \"john.doe@example.com\");"
        }
      ]
    },
    {
      "sourceId" : "Data.Sensitive.PersonalIdentification.FirstName",
      "occurrences" : [
        {
          "sample" : "firstName",
          "lineNumber" : 16,
          "columnNumber" : 56,
          "fileName" : "/app/code/iotFleetwise.java",
          "excerpt" : "public AWSIoTFleetwiseUtil() {\nclient = AmazonIoTFleetwiseClientBuilder.standard().build();\n}\n\npublic void AWSIoTFleetwiseProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob); /* <=== java.lang.String */ \n\nCreateTrackerRequest createTrackerRequest = new CreateTrackerRequest()\n        .withTrackerName(firstName + \"_\" + lastName + \"_Tracker\")\n        .withAttributePayload(personalData);\n"
        },
        {
          "sample" : "\"firstName\"",
          "lineNumber" : 12,
          "columnNumber" : 22,
          "fileName" : "/app/code/chimeSdkMessaging.java",
          "excerpt" : "public class AWSChimeSDKMessagingUtil {\n  private static AmazonChimeSDKMessaging chimeSDKMessagingClient = AmazonChimeSDKMessagingClientBuilder.defaultClient();\n\n  public static void AWSChimeSDKmessagingFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = new HashMap<>();\n    personalData.put(\"firstName\", firstName); /* <===  */ \n    personalData.put(\"lastName\", lastName);\n    personalData.put(\"phoneNumber\", phoneNumber);\n    personalData.put(\"dob\", dob);\n\n    MessageRequest messageRequest = new MessageRequest();"
        },
        {
          "sample" : "\"first_name\"",
          "lineNumber" : 63,
          "columnNumber" : 53,
          "fileName" : "/app/code/redshift.java",
          "excerpt" : "\n            String sql = \"SELECT * FROM personal_data\";\n            PreparedStatement statement = conn.prepareStatement(sql);\n            ResultSet result = statement.executeQuery();\n            while (result.next()) {\n                String firstName = result.getString(\"first_name\"); /* <===  */ \n                String lastName = result.getString(\"last_name\");\n                int age = result.getInt(\"age\");\n                String address = result.getString(\"address\");\n                System.out.println(firstName + \" \" + lastName + \" \" + age + \" \" + address);\n            }"
        },
        {
          "sample" : "\"FirstName\"",
          "lineNumber" : 11,
          "columnNumber" : 25,
          "fileName" : "/app/code/devOpsGuru.java",
          "excerpt" : "    \n    public static void AWSDevOpsGuruFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        DevOpsGuruClient devOpsGuruClient = DevOpsGuruClient.builder().build();\n        Event event = new Event();\n        event.setName(\"PersonalDataEvent\");\n        event.addDetail(\"FirstName\", firstName); /* <===  */ \n        event.addDetail(\"LastName\", lastName);\n        event.addDetail(\"PhoneNumber\", phoneNumber);\n        event.addDetail(\"DOB\", DOB);\n        PutEventRequest request = new PutEventRequest().withEvent(event);\n        devOpsGuruClient.putEvent(request);"
        }
      ]
    },
    {
      "sourceId" : "Data.Sensitive.PersonalIdentification.Age",
      "occurrences" : [
        {
          "sample" : "this.age",
          "lineNumber" : 52,
          "columnNumber" : 71,
          "fileName" : "/app/code/ssm.java",
          "excerpt" : "        return age;\n    }\n\n    @Override\n    public String toString() {\n        return String.format(\"{id: %s, name: %s, age: %d}\", id, name, age); /* <===  */ \n    }\n}\n"
        },
        {
          "sample" : "personalData",
          "lineNumber" : 16,
          "columnNumber" : -1,
          "fileName" : "/app/code/gluedatabrew.java",
          "excerpt" : "    public GlueDataBrewProcessor() {\n        this.glueDataBrewClient = AWSGlueDataBrewClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(List<PersonalData> personalDataList) {\n        for (PersonalData personalData : personalDataList) { /* <=== PersonalData */ \n            CreateProfileJobRequest createProfileJobRequest = new CreateProfileJobRequest()\n                    .withDatasetName(personalData.getDatasetName())\n                    .withRecipeReference(personalData.getRecipeReference());\n\n            CreateProfileJobResult createProfileJobResult = glueDataBrewClient.createProfileJob(createProfileJobRequest);"
        },
        {
          "sample" : "\"Age\"",
          "lineNumber" : 19,
          "columnNumber" : 18,
          "fileName" : "/app/code/memoryDB.java",
          "excerpt" : "\n    public void processData(String name, String address, int age) {\n        Map<String, Object> item = new HashMap<>();\n        item.put(\"Name\", name);\n        item.put(\"Address\", address);\n        item.put(\"Age\", age); /* <===  */ \n\n        PutItemRequest request = new PutItemRequest().withTableName(\"PersonalData\").withItem(item);\n        memoryDBClient.putItem(request);\n    }\n}"
        },
        {
          "sample" : "\"age\"",
          "lineNumber" : 65,
          "columnNumber" : 41,
          "fileName" : "/app/code/redshift.java",
          "excerpt" : "            PreparedStatement statement = conn.prepareStatement(sql);\n            ResultSet result = statement.executeQuery();\n            while (result.next()) {\n                String firstName = result.getString(\"first_name\");\n                String lastName = result.getString(\"last_name\");\n                int age = result.getInt(\"age\"); /* <===  */ \n                String address = result.getString(\"address\");\n                System.out.println(firstName + \" \" + lastName + \" \" + age + \" \" + address);\n            }\n        } catch (SQLException e) {\n            System.out.println(\"Error while retrieving personal data from Redshift\");"
        }
      ]
    },
    {
      "sourceId" : "Data.Sensitive.ContactData.Address",
      "occurrences" : [
        {
          "sample" : "address",
          "lineNumber" : 18,
          "columnNumber" : 29,
          "fileName" : "/app/code/memoryDB.java",
          "excerpt" : "    }\n\n    public void processData(String name, String address, int age) {\n        Map<String, Object> item = new HashMap<>();\n        item.put(\"Name\", name);\n        item.put(\"Address\", address); /* <=== java.lang.String */ \n        item.put(\"Age\", age);\n\n        PutItemRequest request = new PutItemRequest().withTableName(\"PersonalData\").withItem(item);\n        memoryDBClient.putItem(request);\n    }"
        },
        {
          "sample" : "\"address\"",
          "lineNumber" : 66,
          "columnNumber" : 51,
          "fileName" : "/app/code/redshift.java",
          "excerpt" : "            ResultSet result = statement.executeQuery();\n            while (result.next()) {\n                String firstName = result.getString(\"first_name\");\n                String lastName = result.getString(\"last_name\");\n                int age = result.getInt(\"age\");\n                String address = result.getString(\"address\"); /* <===  */ \n                System.out.println(firstName + \" \" + lastName + \" \" + age + \" \" + address);\n            }\n        } catch (SQLException e) {\n            System.out.println(\"Error while retrieving personal data from Redshift\");\n            e.printStackTrace();"
        }
      ]
    },
    {
      "sourceId" : "Data.Sensitive.ContactData.EmailAddress",
      "occurrences" : [
        {
          "sample" : "email",
          "lineNumber" : 22,
          "columnNumber" : 31,
          "fileName" : "/app/code/amplifyBackend.java",
          "excerpt" : "    public void processPersonalData(String userId, String email, String name) {\n        // Create an identity pool for the user\n        CreateBackendAuthIdentityPoolRequest poolRequest = new CreateBackendAuthIdentityPoolRequest()\n                .withIdentityPoolName(\"UserIdentityPool\")\n                .withUserId(userId)\n                .withUsername(email) /* <=== java.lang.String */ \n                .withPassword(name);\n        CreateBackendAuthIdentityPoolResult poolResult = backendClient.createBackendAuthIdentityPool(poolRequest);\n\n        // Create the user in the backend\n        CreateBackendAuthUserRequest userRequest = new CreateBackendAuthUserRequest()"
        },
        {
          "sample" : "\"email\"",
          "lineNumber" : 19,
          "columnNumber" : 42,
          "fileName" : "/app/code/lexRuntime.java",
          "excerpt" : "    public void processPersonalData(Map<String,String> personalData) {\n        // Send the personal data to Amazon Lex for processing\n        PostTextRequest postTextRequest = new PostTextRequest()\n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\")) /* <===  */ \n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);\n\n        // Handle the Lex response\n        if (postTextResult.getDialogState() == \"Fulfilled\") {"
        },
        {
          "sample" : "processedEmail",
          "lineNumber" : 36,
          "columnNumber" : 16,
          "fileName" : "/app/code/workmailmessageflow.java",
          "excerpt" : "\n        // Process raw email\n        ProcessRawEmailResult result = client.processRawEmail(request);\n\n        // Retrieve processed email result\n        byte[] processedEmail = result.getProcessedEmail(); /* <=== byte[] */ \n    }\n\n    private static byte[] getRawMessageData() {\n        // retrieve raw message data\n        ..."
        }
      ]
    },
    {
      "sourceId" : "Data.Sensitive.PersonalIdentification.LastName",
      "occurrences" : [
        {
          "sample" : "\"LastName\"",
          "lineNumber" : 12,
          "columnNumber" : 25,
          "fileName" : "/app/code/devOpsGuru.java",
          "excerpt" : "    public static void AWSDevOpsGuruFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        DevOpsGuruClient devOpsGuruClient = DevOpsGuruClient.builder().build();\n        Event event = new Event();\n        event.setName(\"PersonalDataEvent\");\n        event.addDetail(\"FirstName\", firstName);\n        event.addDetail(\"LastName\", lastName); /* <===  */ \n        event.addDetail(\"PhoneNumber\", phoneNumber);\n        event.addDetail(\"DOB\", DOB);\n        PutEventRequest request = new PutEventRequest().withEvent(event);\n        devOpsGuruClient.putEvent(request);\n    }"
        },
        {
          "sample" : "lastName",
          "lineNumber" : 13,
          "columnNumber" : 34,
          "fileName" : "/app/code/chimeSdkMessaging.java",
          "excerpt" : "  private static AmazonChimeSDKMessaging chimeSDKMessagingClient = AmazonChimeSDKMessagingClientBuilder.defaultClient();\n\n  public static void AWSChimeSDKmessagingFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = new HashMap<>();\n    personalData.put(\"firstName\", firstName);\n    personalData.put(\"lastName\", lastName); /* <=== java.lang.String */ \n    personalData.put(\"phoneNumber\", phoneNumber);\n    personalData.put(\"dob\", dob);\n\n    MessageRequest messageRequest = new MessageRequest();\n    messageRequest.setContent(personalData.toString());"
        },
        {
          "sample" : "\"lastName\"",
          "lineNumber" : 16,
          "columnNumber" : 38,
          "fileName" : "/app/code/codePipeline.java",
          "excerpt" : "\n    public void AWSCodePipelineFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        PutJobSuccessResultRequest request = new PutJobSuccessResultRequest()\n            .withJobId(firstName)\n            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName) /* <===  */ \n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);\n\n        PutJobSuccessResultResult result = client.putJobSuccessResult(request);\n        System.out.println(\"Successfully sent personal data to CodePipeline: \" + result);"
        },
        {
          "sample" : "\"last_name\"",
          "lineNumber" : 17,
          "columnNumber" : 26,
          "fileName" : "/app/code/cloudcontrolapi.java",
          "excerpt" : "        GetRightsizingRecommendationRequest request = new GetRightsizingRecommendationRequest();\n\n        // Add personal data to the request\n        Map<String, String> personalData = new HashMap<>();\n        personalData.put(\"first_name\", \"John\");\n        personalData.put(\"last_name\", \"Doe\"); /* <===  */ \n        personalData.put(\"email\", \"johndoe@example.com\");\n        personalData.put(\"phone_number\", \"555-555-1212\");\n        request.setPersonalData(personalData);\n\n        GetRightsizingRecommendationResult result = client.getRightsizingRecommendation(request);"
        }
      ]
    },
    {
      "sourceId" : "Data.Sensitive.ContactData.PhoneNumber",
      "occurrences" : [
        {
          "sample" : "phoneNumber",
          "lineNumber" : 17,
          "columnNumber" : 24,
          "fileName" : "/app/code/oam.java",
          "excerpt" : "\n  public CreateUserResult AWSOAMFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    CreateUserRequest request = new CreateUserRequest()\n      .withFirstName(firstName)\n      .withLastName(lastName)\n      .withPhoneNumber(phoneNumber) /* <=== java.lang.String */ \n      .withDateOfBirth(dob);\n    return oamClient.createUser(request);\n  }\n}\n"
        },
        {
          "sample" : "\"phoneNumber\"",
          "lineNumber" : 14,
          "columnNumber" : 22,
          "fileName" : "/app/code/mgn.java",
          "excerpt" : "    AmazonMGNClient mgnClient = AmazonMGNClient.builder().build();\n    \n    Map<String, String> personalData = new HashMap<>();\n    personalData.put(\"firstName\", firstName);\n    personalData.put(\"lastName\", lastName);\n    personalData.put(\"phoneNumber\", phoneNumber); /* <===  */ \n    personalData.put(\"DOB\", DOB);\n    \n    IndexDocumentRequest indexDocumentRequest = new IndexDocumentRequest()\n        .withIndexName(\"personal-data\")\n        .withId(firstName + lastName)"
        },
        {
          "sample" : "\"PhoneNumber\"",
          "lineNumber" : 13,
          "columnNumber" : 25,
          "fileName" : "/app/code/devOpsGuru.java",
          "excerpt" : "        DevOpsGuruClient devOpsGuruClient = DevOpsGuruClient.builder().build();\n        Event event = new Event();\n        event.setName(\"PersonalDataEvent\");\n        event.addDetail(\"FirstName\", firstName);\n        event.addDetail(\"LastName\", lastName);\n        event.addDetail(\"PhoneNumber\", phoneNumber); /* <===  */ \n        event.addDetail(\"DOB\", DOB);\n        PutEventRequest request = new PutEventRequest().withEvent(event);\n        devOpsGuruClient.putEvent(request);\n    }\n}"
        },
        {
          "sample" : "\"phone_number\"",
          "lineNumber" : 19,
          "columnNumber" : 26,
          "fileName" : "/app/code/cloudcontrolapi.java",
          "excerpt" : "        // Add personal data to the request\n        Map<String, String> personalData = new HashMap<>();\n        personalData.put(\"first_name\", \"John\");\n        personalData.put(\"last_name\", \"Doe\");\n        personalData.put(\"email\", \"johndoe@example.com\");\n        personalData.put(\"phone_number\", \"555-555-1212\"); /* <===  */ \n        request.setPersonalData(personalData);\n\n        GetRightsizingRecommendationResult result = client.getRightsizingRecommendation(request);\n        System.out.println(\"Rightsizing recommendation: \" + result.getRecommendation());\n    }"
        }
      ]
    },
    {
      "sourceId" : "Data.Sensitive.PersonalIdentification.DateofBirth",
      "occurrences" : [
        {
          "sample" : "\"DOB\"",
          "lineNumber" : 15,
          "columnNumber" : 22,
          "fileName" : "/app/code/mgn.java",
          "excerpt" : "    \n    Map<String, String> personalData = new HashMap<>();\n    personalData.put(\"firstName\", firstName);\n    personalData.put(\"lastName\", lastName);\n    personalData.put(\"phoneNumber\", phoneNumber);\n    personalData.put(\"DOB\", DOB); /* <===  */ \n    \n    IndexDocumentRequest indexDocumentRequest = new IndexDocumentRequest()\n        .withIndexName(\"personal-data\")\n        .withId(firstName + lastName)\n        .withSource(personalData);"
        },
        {
          "sample" : "\"dob\"",
          "lineNumber" : 18,
          "columnNumber" : 38,
          "fileName" : "/app/code/codePipeline.java",
          "excerpt" : "        PutJobSuccessResultRequest request = new PutJobSuccessResultRequest()\n            .withJobId(firstName)\n            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob); /* <===  */ \n\n        PutJobSuccessResultResult result = client.putJobSuccessResult(request);\n        System.out.println(\"Successfully sent personal data to CodePipeline: \" + result);\n    }\n}"
        }
      ]
    },
    {
      "sourceId" : "Data.Sensitive.AccountData.AccountID",
      "occurrences" : [
        {
          "sample" : "userId",
          "lineNumber" : 21,
          "columnNumber" : 29,
          "fileName" : "/app/code/amplifyBackend.java",
          "excerpt" : "\n    public void processPersonalData(String userId, String email, String name) {\n        // Create an identity pool for the user\n        CreateBackendAuthIdentityPoolRequest poolRequest = new CreateBackendAuthIdentityPoolRequest()\n                .withIdentityPoolName(\"UserIdentityPool\")\n                .withUserId(userId) /* <=== java.lang.String */ \n                .withUsername(email)\n                .withPassword(name);\n        CreateBackendAuthIdentityPoolResult poolResult = backendClient.createBackendAuthIdentityPool(poolRequest);\n\n        // Create the user in the backend"
        },
        {
          "sample" : "accountId",
          "lineNumber" : 25,
          "columnNumber" : 29,
          "fileName" : "/app/code/organizations.java",
          "excerpt" : "        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest);\n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId();\n\n        // Add the personal data as tags to the created account\n        TagResourceRequest tagResourceRequest = new TagResourceRequest()\n            .withResourceId(accountId) /* <=== java.lang.String */ \n            .withTags(personalData);\n        organizationsClient.tagResource(tagResourceRequest);\n    }\n}\n"
        }
      ]
    }
  ],
  "sinks" : [
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Elasticache",
      "name" : "Amazonaws Elasticache",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.IdentityManagement",
      "name" : "Amazonaws IdentityManagement",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.LookoutMetrics",
      "name" : "Amazonaws Lookout Metrics",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Greengrass",
      "name" : "Amazonaws Greengrass",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.SecurityToken",
      "name" : "Amazonaws Security Token",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.ServiceCatalog",
      "name" : "Amazonaws Service Catalog",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.FIS",
      "name" : "Amazonaws FIS",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.AppFlow",
      "name" : "Amazonaws App Flow",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Glacier",
      "name" : "Amazonaws Glacier",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.ChimeSDKIdentity",
      "name" : "Amazonaws Chime SDK Identity",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.DocumentDB",
      "name" : "Amazonaws DocumentDB",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.MemoryDB",
      "name" : "Amazonaws MemoryDB",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.CognitoIdentity",
      "name" : "Amazonaws Cognito Identity",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Health",
      "name" : "Amazonaws Health",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.ApplicationAutoScaling",
      "name" : "Amazonaws Application Auto Scaling",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Pinpoint",
      "name" : "Amazonaws Pinpoint",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.AppConfig",
      "name" : "Amazonaws AppConfig",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.WorkMailMessageFlow",
      "name" : "Amazonaws WorkMail Message Flow",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.TranscribeStreaming",
      "name" : "Amazonaws Transcribe Streaming",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.SimpleNotificationService",
      "name" : "Amazonaws Simple Notification Service",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.ElasticKubernetesService",
      "name" : "Amazonaws Elastic Kubernetes Service",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.DisasterRecoveryService",
      "name" : "Amazonaws Disaster Recovery Service",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.EBS",
      "name" : "Amazonaws EBS",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.CleanRooms",
      "name" : "Amazonaws Clean Rooms",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.ChimeSDKVoice",
      "name" : "Amazonaws Chime SDK Voice",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.StepFunctions",
      "name" : "Amazonaws StepFunctions",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.CloudControlAPI",
      "name" : "Amazonaws CloudControl API",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.CloudWatch",
      "name" : "Amazonaws CloudWatch",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.ChimeSDKMessaging",
      "name" : "Amazonaws Chime SDK Messaging",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.LexModel",
      "name" : "Amazonaws Lex Model",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Kendra",
      "name" : "Amazonaws Kendra",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Eventbridge",
      "name" : "Amazonaws EventBridge",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.CustomerProfiles",
      "name" : "Amazonaws Customer Profiles",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Forecast",
      "name" : "Amazonaws Forecast",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.CodeArtifact",
      "name" : "Amazonaws CodeArtifact",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Account",
      "name" : "Amazonaws Account",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.IoTSecureTunneling",
      "name" : "Amazonaws IoT Secure Tunneling",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.MGN",
      "name" : "Amazonaws MGN",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Comprehend",
      "name" : "Amazonaws Comprehend",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.KafkaConnect",
      "name" : "Amazonaws Kafka Connect",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.DataPipeline",
      "name" : "Amazonaws DataPipeline",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.ElasticFileSystem",
      "name" : "Amazonaws Elastic File System",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.StorageGateway",
      "name" : "Amazonaws StorageGateway",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.DevOpsGuru",
      "name" : "Amazonaws DevOps Guru",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.QuickSight",
      "name" : "Amazonaws QuickSight",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.IoTTwinMaker",
      "name" : "Amazonaws IoTTwinMaker",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.CertificateManager",
      "name" : "Amazonaws Certificate Manager",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.SnowDeviceManagement",
      "name" : "Amazonaws Snow Device Management",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.CloudDirectory",
      "name" : "Amazonaws Cloud Directory",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.CodeBuild",
      "name" : "Amazonaws CodeBuild",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.LexRuntime",
      "name" : "Amazonaws Lex Runtime",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.MWAA",
      "name" : "Amazonaws MWAA",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.AugmentedAI",
      "name" : "Amazonaws Augmented AI",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.ComprehendMedical",
      "name" : "Amazonaws Comprehend Medical",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.ResilienceHub",
      "name" : "Amazonaws ResilienceHub",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.IoTRoboRunner",
      "name" : "Amazonaws IoT RoboRunner",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.CodeGuruReviewer",
      "name" : "Amazonaws CodeGuru Reviewer",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.OpsWorks",
      "name" : "Amazonaws OpsWorks",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.MarketplaceMetering",
      "name" : "Amazonaws Marketplace Metering",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.SSM",
      "name" : "Amazonaws SSM",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Pipes",
      "name" : "Amazonaws Pipes",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.AppSync",
      "name" : "Amazonaws AppSync",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.KMS",
      "name" : "Amazonaws KMS",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.AppRunner",
      "name" : "Amazonaws AppRunner",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.SimpleEmailService",
      "name" : "Amazonaws Simple Email Service",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.OpenSearch",
      "name" : "Amazonaws OpenSearch",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Kinesis",
      "name" : "Amazonaws Kinesis",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.DataExchange",
      "name" : "Amazonaws Data Exchange",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "storages",
      "id" : "Storages.SpringFramework.Jdbc.Write",
      "name" : "Java Database Connector(Write)",
      "domains" : [
        "oracle.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.MarketplaceCommerceAnalytics",
      "name" : "Amazonaws Marketplace Commerce Analytics",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Macie2",
      "name" : "Amazonaws Macie2",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.DirectConnect",
      "name" : "Amazonaws DirectConnect",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Translate",
      "name" : "Amazonaws Translate",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.AppIntegration",
      "name" : "Amazonaws App Integration",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.IVS",
      "name" : "Amazonaws IVS",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.GlueDataBrew",
      "name" : "Amazonaws GlueDataBrew",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.VoiceID",
      "name" : "Amazonaws VoiceID",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.MachineLearning",
      "name" : "Amazonaws MachineLearning",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.IoTFleetHub",
      "name" : "Amazonaws IoT Fleet Hub",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Transcribe",
      "name" : "Amazonaws Transcribe",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Workspacesweb",
      "name" : "Amazonaws Workspacesweb",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.GameSparks",
      "name" : "Amazonaws GameSparks",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Textract",
      "name" : "Amazonaws Textract",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.ApplicationDiscovery",
      "name" : "Amazonaws Application Discovery",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.AmplifyUIBuilder",
      "name" : "Amazonaws Amplify UI Builder",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.ElasticBeanStalk",
      "name" : "Amazonaws ElasticBeanStalk",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Redshift",
      "name" : "Amazonaws Redshift",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "storages",
      "id" : "Storages.AmazonTimestream.Write",
      "name" : "Amazon Timestream(Write)",
      "domains" : [
        "aws.amazon.com",
        "amazon.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.CloudWatchEvents",
      "name" : "Amazonaws CloudWatch Events",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Snowball",
      "name" : "Amazonaws Snowball",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Scheduler",
      "name" : "Amazonaws Scheduler",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.S3",
      "name" : "Amazonaws S3",
      "domains" : [
        "s3.amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.GroundStation",
      "name" : "Amazonaws GroundStation",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.DatabaseMigrationService",
      "name" : "Amazonaws Database Migration Service",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.XRay",
      "name" : "Amazonaws XRay",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.ManagedBlockchain",
      "name" : "Amazonaws ManagedBlockchain",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.SimpleWorkflowService",
      "name" : "Amazonaws Simple Workflow Service",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.HealthLake",
      "name" : "Amazonaws HealthLake",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.CloudFormation",
      "name" : "Amazonaws CloudFormation",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.RDSData",
      "name" : "Amazonaws RDS Data",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.IoT",
      "name" : "Amazonaws IoT",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.IoTWireless",
      "name" : "Amazonaws IoT Wireless",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.ServerMigration",
      "name" : "Amazonaws ServerMigration",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.CloudTrail",
      "name" : "Amazonaws CloudTrail",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.CognitoIDP",
      "name" : "Amazonaws CognitoIDP",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.AppRegistry",
      "name" : "Amazonaws App Registry",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Batch",
      "name" : "Amazonaws Batch",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Amplify",
      "name" : "Amazonaws Amplify",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Directory",
      "name" : "Amazonaws Directory",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.KinesisDataFirehose",
      "name" : "Amazonaws Kinesis Data Firehose",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.ApplicationCostProfiler",
      "name" : "Amazonaws Application Cost Profiler",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.PinpointSMSVoice",
      "name" : "Amazonaws Pinpoint SMS and Voice",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.ChimeSDKMediaPipelines",
      "name" : "Amazonaws Chime SDK Media Pipelines",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.SageMaker",
      "name" : "Amazonaws SageMaker",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.ElasticContainerService",
      "name" : "Amazonaws Elastic Container Service",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Workspaces",
      "name" : "Amazonaws Workspaces",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "storages",
      "id" : "Storages.SpringFramework.Jdbc.Read",
      "name" : "Java Database Connector(Read)",
      "domains" : [
        "oracle.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.EMRServerless",
      "name" : "Amazonaws EMR Serverless",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.SimpleDB",
      "name" : "Amazonaws SimpleDB",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.IoTFleetWise",
      "name" : "Amazonaws IoT FleetWise",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.ImportExport",
      "name" : "Amazonaws Import Export",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.FraudDetector",
      "name" : "Amazonaws Fraud Detector",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.AppStream",
      "name" : "Amazonaws AppStream",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.KinesisVideoWebRTCStorage",
      "name" : "Amazonaws Kinesis Video WebRTC Storage",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazon.Aws",
      "name" : "Amazon Aws",
      "domains" : [
        "aws.amazon.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.MainframeModernization",
      "name" : "Amazonaws MainframeModernization",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.ManagedGrafana",
      "name" : "Amazonaws ManagedGrafana",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.MarketplaceEntitlement",
      "name" : "Amazonaws MarketplaceEntitlement",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.IoTDeviceAdvisor",
      "name" : "Amazonaws IoT Device Advisor",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Workdocs",
      "name" : "Amazonaws Workdocs",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Finspace",
      "name" : "Amazonaws Finspace",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Lambda",
      "name" : "Amazonaws Lambda",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Omics",
      "name" : "Amazonaws Omics",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Polly",
      "name" : "Amazonaws Polly",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.CodeCommit",
      "name" : "Amazonaws CodeCommit",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Lightsail",
      "name" : "Amazonaws Lightsail",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Honeycode",
      "name" : "Amazonaws Honeycode",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.SimpleSystemsManagement",
      "name" : "Amazonaws Simple Systems Management",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.MarketplaceCatalog",
      "name" : "Amazonaws Marketplace Catalog",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Backup",
      "name" : "Amazonaws Backup",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.TranslateMedical",
      "name" : "Amazonaws Translate Medical",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "storages",
      "id" : "Storages.AmazonCognito.Write",
      "name" : "Amazon Cognito(Write)",
      "domains" : [
        "aws.amazon.com",
        "amazon.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.EC2",
      "name" : "Amazonaws EC2",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Elasticsearch",
      "name" : "Amazonaws Elasticsearch",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.APIGateway",
      "name" : "Amazonaws API Gateway",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.SQS",
      "name" : "Amazonaws SQS",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Connect",
      "name" : "Amazonaws Connect",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.CloudWatchLogs",
      "name" : "Amazonaws CloudWatch Logs",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Personalize",
      "name" : "Amazonaws Personalize",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.IdentityStore",
      "name" : "Amazonaws Identity Store",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.TranscribeMedical",
      "name" : "Amazonaws Transcribe Medical",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Devicefarm",
      "name" : "Amazonaws Devicefarm",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Organizations",
      "name" : "Amazonaws Organizations",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.LookoutForVision",
      "name" : "Amazonaws Lookout for Vision",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.ElasticMapReduce",
      "name" : "Amazonaws Elastic MapReduce",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.CodePipeline",
      "name" : "Amazonaws CodePipeline",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Timestream",
      "name" : "Amazonaws Timestream",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.AmplifyBackend",
      "name" : "Amazonaws Amplify Backend",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.ElasticContainerRegistry",
      "name" : "Amazonaws Elastic Container Registry",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.IAM",
      "name" : "Amazonaws IAM",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.RelationalDatabaseService",
      "name" : "Amazonaws Relational Database Service",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Budgets",
      "name" : "Amazonaws Budgets",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.S3Outposts",
      "name" : "Amazonaws S3 Outposts",
      "domains" : [
        "s3.amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.WAF",
      "name" : "Amazonaws WAF",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Gamelift",
      "name" : "Amazonaws Gamelift",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Shield",
      "name" : "Amazonaws Shield",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Rekognition",
      "name" : "Amazonaws Rekognition",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.SecurityLake",
      "name" : "Amazonaws SecurityLake",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Neptune",
      "name" : "Amazonaws Neptune",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.FinspaceData",
      "name" : "Amazonaws Finspace Data",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.ApplicationCatalog",
      "name" : "Amazonaws Application Catalog",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.SingleSignOn",
      "name" : "Amazonaws Single SignOn",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Config",
      "name" : "Amazonaws Config",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.Support",
      "name" : "Amazonaws Support",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.OAM",
      "name" : "Amazonaws OAM",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.FSx",
      "name" : "Amazonaws FSx",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.CostAndUsageReport",
      "name" : "Amazonaws Cost And Usage Report",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    },
    {
      "sourceType" : "Sinks",
      "sinkType" : "third_parties",
      "id" : "ThirdParties.SDK.Amazonaws.ElasticTranscoder",
      "name" : "Amazonaws Elastic Transcoder",
      "domains" : [
        "amazonaws.com"
      ],
      "apiUrl" : [
      ],
      "databaseDetails" : {
        "dbName" : "",
        "dbVendor" : "",
        "dbLocation" : "",
        "dbOperation" : ""
      }
    }
  ],
  "sinkProcessing" : [
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.OpenSearch",
      "occurrences" : [
        {
          "sample" : "withDomainName(domainName)",
          "lineNumber" : 13,
          "columnNumber" : 37,
          "fileName" : "/app/code/openSearch.java",
          "excerpt" : "\npublic static void AWSOpenSearchFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    \n    AmazonOpenSearchClient client = AmazonOpenSearchClient.builder().build();\n    \n    IndexDocumentsRequest request = new IndexDocumentsRequest() /* <=== com.amazonaws.services.opensearch.model.IndexDocumentsRequest.withDomainName */ \n        .withDomainName(domainName)\n        .withDocuments(documents);\n    \n    IndexDocumentsResult result = client.indexDocuments(request);\n    "
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.GameSparks",
      "occurrences" : [
        {
          "sample" : "getPlayer(playerRequest)",
          "lineNumber" : 17,
          "columnNumber" : 40,
          "fileName" : "/app/code/gamesparks.java",
          "excerpt" : "        this.gamesparksClient = AWSGamesparksClientBuilder.defaultClient();\n    }\n\n    public Map<String, String> processPersonalData(String playerId) {\n        GetPlayerRequest playerRequest = new GetPlayerRequest().withPlayerId(playerId);\n        GetPlayerResult playerResult = gamesparksClient.getPlayer(playerRequest); /* <=== com.amazonaws.services.gamesparks.AWSGamesparks.getPlayer */ \n\n        return playerResult.getPlayer().getData();\n    }\n}\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.ElasticKubernetesService",
      "occurrences" : [
        {
          "sample" : "withName(\"PersonalDataCluster\")",
          "lineNumber" : 16,
          "columnNumber" : 49,
          "fileName" : "/app/code/eks.java",
          "excerpt" : "}\n\npublic void processPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n    \n    CreateClusterRequest createClusterRequest = new CreateClusterRequest() /* <=== com.amazonaws.services.eks.model.CreateClusterRequest.withName */ \n            .withName(\"PersonalDataCluster\")\n            .withTags(Map.of(\"PersonalData\", personalData.toString()));\n            \n    client.createCluster(createClusterRequest);\n}"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Finspace",
      "occurrences" : [
        {
          "sample" : "listTables(request)",
          "lineNumber" : 20,
          "columnNumber" : 35,
          "fileName" : "/app/code/finspacedata.java",
          "excerpt" : "        // Create a ListTablesRequest object\n        ListTablesRequest request = new ListTablesRequest();\n        request.setDatasetName(\"myDataset\");\n\n        // Send the request and get the result\n        ListTablesResult result = client.listTables(request); /* <=== com.amazonaws.services.finspacedata.AmazonFinspaceDataClient.listTables */ \n\n        // Print the names of the tables\n        for (String tableName : result.getTableNames()) {\n            System.out.println(tableName);\n        }"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Config",
      "occurrences" : [
        {
          "sample" : "new PutConfigurationRecorderRequest()",
          "lineNumber" : 25,
          "columnNumber" : -1,
          "fileName" : "/app/code/config.java",
          "excerpt" : "\n        ConfigurationRecorder configRecorder = new ConfigurationRecorder()\n            .withName(\"PersonalDataRecorder\")\n            .withRecordingGroup(recordingGroup);\n\n        PutConfigurationRecorderRequest request = new PutConfigurationRecorderRequest() /* <=== com.amazonaws.services.config.model.PutConfigurationRecorderRequest.<init> */ \n            .withConfigurationRecorder(configRecorder);\n\n        config.putConfigurationRecorder(request);\n    }\n}"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.RDSData",
      "occurrences" : [
        {
          "sample" : "executeSql(rdsDataRequest)",
          "lineNumber" : 23,
          "columnNumber" : 42,
          "fileName" : "/app/code/rdsData.java",
          "excerpt" : "            .withAwsSecretStoreArn(\"arn:aws:secretsmanager:us-west-2:123456789012:secret:my-secret\")\n            .withDbClusterOrInstanceArn(\"arn:aws:rds:us-west-2:123456789012:cluster:my-cluster\")\n            .withSqlStatements(sql);\n        \n        // Send the RDS Data Request\n        ExecuteSqlResult rdsDataResult = rdsDataClient.executeSql(rdsDataRequest); /* <=== com.amazonaws.services.rdsdata.AWSRDSData.executeSql */ \n        \n        // Get the RDS Data Result\n        List<Field> fields = rdsDataResult.getResultSet().getRecords().get(0).getFields();\n        \n        // Print the RDS Data Result"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Backup",
      "occurrences" : [
        {
          "sample" : "new CreateBackupVaultRequest()",
          "lineNumber" : 21,
          "columnNumber" : -1,
          "fileName" : "/app/code/backup.java",
          "excerpt" : "                .withCredentials(new AWSStaticCredentialsProvider(credentials))\n                .withRegion(\"us-west-2\")\n                .build();\n\n        // Create a new Backup Vault\n        CreateBackupVaultRequest createBackupVaultRequest = new CreateBackupVaultRequest() /* <=== com.amazonaws.services.backup.model.CreateBackupVaultRequest.<init> */ \n                .withBackupVaultName(\"my-backup-vault\");\n        CreateBackupVaultResult createBackupVaultResult = backup.createBackupVault(createBackupVaultRequest);\n\n        // Get the ARN of the newly created Backup Vault\n        String backupVaultArn = createBackupVaultResult.getBackupVaultArn();"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Lambda",
      "occurrences" : [
        {
          "sample" : "new InvokeRequest()",
          "lineNumber" : 22,
          "columnNumber" : -1,
          "fileName" : "/app/code/lambda.java",
          "excerpt" : "                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8));\n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest() /* <=== com.amazonaws.services.lambda.model.InvokeRequest.<init> */ \n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content);\n        InvokeResult invokeResult = lambdaClient.invoke(invokeRequest);\n    }\n}"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.DevOpsGuru",
      "occurrences" : [
        {
          "sample" : "builder()",
          "lineNumber" : 8,
          "columnNumber" : 45,
          "fileName" : "/app/code/devOpsGuru.java",
          "excerpt" : "import com.amazonaws.services.devopsguru.DevOpsGuruClient;\n\npublic class AWSDevopsGuruUtil {\n    \n    public static void AWSDevOpsGuruFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        DevOpsGuruClient devOpsGuruClient = DevOpsGuruClient.builder().build(); /* <=== com.amazonaws.services.devopsguru.DevOpsGuruClient.builder */ \n        Event event = new Event();\n        event.setName(\"PersonalDataEvent\");\n        event.addDetail(\"FirstName\", firstName);\n        event.addDetail(\"LastName\", lastName);\n        event.addDetail(\"PhoneNumber\", phoneNumber);"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.CognitoIdentity",
      "occurrences" : [
        {
          "sample" : "getIdentityId()",
          "lineNumber" : 22,
          "columnNumber" : 29,
          "fileName" : "/app/code/cognitoIdentity.java",
          "excerpt" : "\n        // Get the ID for the authenticated user\n        GetIdRequest getIdRequest = new GetIdRequest();\n        getIdRequest.setIdentityPoolId(COGNITO_IDENTITY_POOL_ID);\n        GetIdResult getIdResult = cognitoIdentityClient.getId(getIdRequest);\n        String identityId = getIdResult.getIdentityId(); /* <=== com.amazonaws.services.cognitoidentity.model.GetIdResult.getIdentityId */ \n\n        // Get the OpenID token for the authenticated user\n        GetOpenIdTokenRequest getOpenIdTokenRequest = new GetOpenIdTokenRequest();\n        getOpenIdTokenRequest.setIdentityId(identityId);\n        GetOpenIdTokenResult getOpenIdTokenResult = cognitoIdentityClient.getOpenIdToken(getOpenIdTokenRequest);"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.SageMaker",
      "occurrences" : [
        {
          "sample" : "standard()",
          "lineNumber" : 13,
          "columnNumber" : 27,
          "fileName" : "/app/code/sagemaker.java",
          "excerpt" : "public class SageMakerSink {\n    private AmazonSageMaker sagemakerClient;\n\n    public SageMakerSink(String accessKey, String secretKey) {\n        AWSCredentials credentials = new BasicAWSCredentials(accessKey, secretKey);\n        sagemakerClient = AmazonSageMakerClientBuilder.standard() /* <=== com.amazonaws.services.sagemaker.AmazonSageMakerClientBuilder.standard */ \n                .withCredentials(new AWSStaticCredentialsProvider(credentials))\n                .withRegion(Regions.US_EAST_1)\n                .build();\n    }\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.ChimeSDKMediaPipelines",
      "occurrences" : [
        {
          "sample" : "new ChimeSDKMediaPipelinesClient(accessKey, secretKey, region)",
          "lineNumber" : 18,
          "columnNumber" : -1,
          "fileName" : "/app/code/chimesdkmediapipelines.java",
          "excerpt" : "  static String accessKey = \"ACCESS_KEY\";\n  static String secretKey = \"SECRET_KEY\";\n  static String region = \"REGION\";\n\n  public static void main(String[] args) {\n    ChimeSDKMediaPipelinesClient client = new ChimeSDKMediaPipelinesClient(accessKey, secretKey, region); /* <=== com.amazonaws.services.chimesdkmediapipelines.ChimeSDKMediaPipelinesClient.<init> */ \n    String pipelineName = \"PIPELINE_NAME\";\n    String inputBucket = \"INPUT_BUCKET\";\n    String roleArn = \"ROLE_ARN\";\n    String mediaSampleId = \"MEDIA_SAMPLE_ID\";\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Kinesis",
      "occurrences" : [
        {
          "sample" : "withStreamName(\"personal-data-stream\")",
          "lineNumber" : 12,
          "columnNumber" : 45,
          "fileName" : "/app/code/kinesisvideowebrtcstorage.java",
          "excerpt" : "    public AWSKinesisVideoWebRTCStorageUtil(AWSKinesisVideoWebRTCStorage kinesisVideoWebRTCStorageClient) {\n        this.kinesisVideoWebRTCStorageClient = kinesisVideoWebRTCStorageClient;\n    }\n\n    public void AWSKinesisVideoWebrtcStorageFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        PutRecordRequest putRecordRequest = new PutRecordRequest() /* <=== com.amazonaws.services.kinesisvideowebrtcstorage.model.PutRecordRequest.withStreamName */ \n            .withStreamName(\"personal-data-stream\")\n            .withData(String.format(\"First Name: %s, Last Name: %s, Phone Number: %s, DOB: %s\", firstName, lastName, phoneNumber, DOB).getBytes());\n\n        kinesisVideoWebRTCStorageClient.putRecord(putRecordRequest);\n    }"
        },
        {
          "sample" : "getShardId()",
          "lineNumber" : 22,
          "columnNumber" : 90,
          "fileName" : "/app/code/kinesis.java",
          "excerpt" : "        PutRecordRequest putRecordRequest = new PutRecordRequest()\n                                            .withStreamName(STREAM_NAME)\n                                            .withData(ByteBuffer.wrap(data))\n                                            .withPartitionKey(\"partition-key\");\n        PutRecordResult result = kinesisClient.putRecord(putRecordRequest);\n        System.out.println(\"Successfully added data to Kinesis stream with shard ID: \" + result.getShardId()); /* <=== com.amazonaws.services.kinesis.model.PutRecordResult.getShardId */ \n    }\n}\n"
        },
        {
          "sample" : "setS3DestinationConfiguration()",
          "lineNumber" : 13,
          "columnNumber" : 9,
          "fileName" : "/app/code/kinesisFirehose.java",
          "excerpt" : "    public static void main(String[] args) {\n        AmazonKinesisFirehose firehoseClient = AmazonKinesisFirehoseClientBuilder.defaultClient();\n\n        CreateDeliveryStreamRequest createDeliveryStreamRequest = new CreateDeliveryStreamRequest();\n        createDeliveryStreamRequest.setDeliveryStreamName(\"your-delivery-stream-name\");\n        createDeliveryStreamRequest.setS3DestinationConfiguration( /* <=== com.amazonaws.services.kinesisfirehose.model.CreateDeliveryStreamRequest.setS3DestinationConfiguration */ \n            // S3 configuration goes here\n        );\n\n        CreateDeliveryStreamResult createDeliveryStreamResult = firehoseClient.createDeliveryStream(createDeliveryStreamRequest);\n        System.out.println(\"Delivery stream created with ARN: \" + createDeliveryStreamResult.getDeliveryStreamARN());"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.ApplicationCatalog",
      "occurrences" : [
        {
          "sample" : "createApplication(request)",
          "lineNumber" : 26,
          "columnNumber" : 42,
          "fileName" : "/app/code/applicationCatalog.java",
          "excerpt" : "        // Create the application in the Amazon AWS Application Catalog\n        CreateApplicationRequest request = new CreateApplicationRequest()\n            .withName(APPLICATION_NAME)\n            .withDescription(DESCRIPTION)\n            .withDataSources(personalDataSources);\n        CreateApplicationResult result = client.createApplication(request); /* <=== com.amazonaws.services.applicationcatalog.AWSApplicationCatalog.createApplication */ \n\n        // Print the application ID\n        System.out.println(\"Application ID: \" + result.getApplicationId());\n    }\n}"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.GroundStation",
      "occurrences" : [
        {
          "sample" : "withEndpointDetails(dataflowEndpoints)",
          "lineNumber" : 23,
          "columnNumber" : 54,
          "fileName" : "/app/code/groundStation.java",
          "excerpt" : "        for (String endpoint : endpoints) {\n            DataflowEndpoint dataflowEndpoint = new DataflowEndpoint()\n                .withEndpointDetails(new EndpointDetails().withEndpoint(endpoint));\n            dataflowEndpoints.add(dataflowEndpoint);\n        }\n        CreateDataflowEndpointGroupRequest request = new CreateDataflowEndpointGroupRequest() /* <=== com.amazonaws.services.groundstation.model.CreateDataflowEndpointGroupRequest.withEndpointDetails */ \n            .withEndpointDetails(dataflowEndpoints)\n            .withName(name);\n        dataflowEndpointGroupId = client.createDataflowEndpointGroup(request).getDataflowEndpointGroupId();\n    }\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.LookoutMetrics",
      "occurrences" : [
        {
          "sample" : "standard()",
          "lineNumber" : 24,
          "columnNumber" : 53,
          "fileName" : "/app/code/lookoutmetrics.java",
          "excerpt" : "\n        // Initialize the AWS credentials\n        AWSCredentials credentials = new BasicAWSCredentials(AWS_ACCESS_KEY, AWS_SECRET_KEY);\n\n        // Initialize the Lookout for Metrics Client\n        AmazonLookoutMetrics lookoutMetricsClient = AmazonLookoutMetricsClientBuilder.standard() /* <=== com.amazonaws.services.lookoutmetrics.AmazonLookoutMetricsClientBuilder.standard */ \n                .withCredentials(new AWSStaticCredentialsProvider(credentials))\n                .withRegion(AWS_REGION)\n                .build();\n\n        // Get a list of all detector metrics"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.SimpleWorkflowService",
      "occurrences" : [
        {
          "sample" : "pollForDecisionTask(decisionTaskRequest)",
          "lineNumber" : 22,
          "columnNumber" : 41,
          "fileName" : "/app/code/simpleWorkflow.java",
          "excerpt" : "        while (true) {\n            PollForDecisionTaskRequest decisionTaskRequest = new PollForDecisionTaskRequest()\n                .withDomain(domain)\n                .withTaskList(new TaskList().withName(\"personal-data-tasks\"));\n\n            DecisionTask decisionTask = swf.pollForDecisionTask(decisionTaskRequest); /* <=== com.amazonaws.services.simpleworkflow.AmazonSimpleWorkflow.pollForDecisionTask */ \n\n            // process decision task and personal data here\n            // ...\n\n            // send task completion or failure to SWF"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.ServiceCatalog",
      "occurrences" : [
        {
          "sample" : "withDisplayName(\"TestPortfolio\")",
          "lineNumber" : 11,
          "columnNumber" : 53,
          "fileName" : "/app/code/serviceCatalog.java",
          "excerpt" : "import java.util.List;\n\npublic class ServiceCatalogSample {\n  public static void main(String[] args) {\n    // Create a Portfolio\n    CreatePortfolioRequest createPortfolioRequest = new CreatePortfolioRequest() /* <=== com.amazonaws.services.servicecatalog.model.CreatePortfolioRequest.withDisplayName */ \n        .withDisplayName(\"TestPortfolio\")\n        .withDescription(\"Test Portfolio Description\");\n\n    AWSServiceCatalogClientBuilder.defaultClient().createPortfolio(createPortfolioRequest);\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.AppSync",
      "occurrences" : [
        {
          "sample" : "listGraphqlApis(listApisRequest)",
          "lineNumber" : 13,
          "columnNumber" : 48,
          "fileName" : "/app/code/appSync.java",
          "excerpt" : "        AWSAppSync client = AWSAppSyncClientBuilder.standard()\n                .build();\n\n        // Create a new GraphQL query\n        ListGraphqlApisRequest listApisRequest = new ListGraphqlApisRequest();\n        ListGraphqlApisResult listApisResult = client.listGraphqlApis(listApisRequest); /* <=== com.amazonaws.services.appsync.AWSAppSync.listGraphqlApis */ \n\n        // Print the result\n        System.out.println(listApisResult);\n    }\n}"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.FIS",
      "occurrences" : [
        {
          "sample" : "getFinancialInformation()",
          "lineNumber" : 21,
          "columnNumber" : 80,
          "fileName" : "/app/code/fis.java",
          "excerpt" : "        List<PersonalDataRecord> personalDataRecords = new ArrayList<>();\n        for (String personalDataId : personalDataIds) {\n            GetFinancialInformationRequest request = new GetFinancialInformationRequest()\n                .withIdentifier(personalDataId);\n            GetFinancialInformationResult result = fisClient.getFinancialInformation(request);\n            PersonalDataRecord record = new PersonalDataRecord(personalDataId, result.getFinancialInformation()); /* <=== com.amazonaws.services.fis.model.GetFinancialInformationResult.getFinancialInformation */ \n            personalDataRecords.add(record);\n        }\n        return personalDataRecords;\n    }\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.TranscribeStreaming",
      "occurrences" : [
        {
          "sample" : "startStreamTranscription(request)",
          "lineNumber" : 18,
          "columnNumber" : 49,
          "fileName" : "/app/code/transcribeStreaming.java",
          "excerpt" : "            .withMediaEncoding(\"pcm\")\n            .withMediaSampleRateHertz(16000)\n            .withTranscriptionJobName(\"MyTranscriptionJob\")\n            .withMediaEventHandler(new MyAudioStreamHandler());\n\n        StartStreamTranscriptionResult result = transcribe.startStreamTranscription(request); /* <=== com.amazonaws.services.transcribestreaming.AmazonTranscribeStreaming.startStreamTranscription */ \n        System.out.println(\"Transcription started with job id: \" + result.getTranscriptionJob().getTranscriptionJobName());\n    }\n}\n\nclass MyAudioStreamHandler implements MediaEventStreamHandler {"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.DirectConnect",
      "occurrences" : [
        {
          "sample" : "new CreateConnectionRequest()",
          "lineNumber" : 18,
          "columnNumber" : -1,
          "fileName" : "/app/code/directConnect.java",
          "excerpt" : "  public void processPersonalData() {\n    // Example code to retrieve personal data from a database\n    String personalData = retrievePersonalData();\n    \n    // Example code to create a connection using Amazon Direct Connect\n    CreateConnectionRequest createConnectionRequest = new CreateConnectionRequest() /* <=== com.amazonaws.services.directconnect.model.CreateConnectionRequest.<init> */ \n        .withConnectionName(\"connection-name\")\n        .withBandwidth(\"1Gbps\")\n        .withLocation(\"location\");\n    CreateConnectionResult createConnectionResult = directConnectClient.createConnection(createConnectionRequest);\n    "
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Scheduler",
      "occurrences" : [
        {
          "sample" : "new PutEventsRequest()",
          "lineNumber" : 18,
          "columnNumber" : -1,
          "fileName" : "/app/code/scheduler.java",
          "excerpt" : "    }\n\n    public void AWSSchedulerFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\n        PutEventsRequest putEventsRequest = new PutEventsRequest() /* <=== com.amazonaws.services.scheduler.model.PutEventsRequest.<init> */ \n                .withEntries(new Event().withDetail(personalData.toString()));\n\n        client.putEvents(putEventsRequest);\n    }\n}"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.CloudFormation",
      "occurrences" : [
        {
          "sample" : "defaultClient()",
          "lineNumber" : 11,
          "columnNumber" : 26,
          "fileName" : "/app/code/cloudformation.java",
          "excerpt" : "public class CloudFormationWorker {\n\n    private AmazonCloudFormation cloudFormation;\n\n    public CloudFormationWorker() {\n        cloudFormation = AmazonCloudFormationClientBuilder.defaultClient(); /* <=== com.amazonaws.services.cloudformation.AmazonCloudFormationClientBuilder.defaultClient */ \n    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        List<Parameter> parameters = new ArrayList<>();\n        for (Map.Entry<String, String> entry : personalData.entrySet()) {"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.KafkaConnect",
      "occurrences" : [
        {
          "sample" : "new DescribeConnectorRequest()",
          "lineNumber" : 24,
          "columnNumber" : -1,
          "fileName" : "/app/code/kafkaConnect.java",
          "excerpt" : "    public void processData(Map<String, String> personalData) {\n        // Use the AWS Kafka Connect SDK to process personal data here\n        ListConnectorsResult listConnectorsResult = kafkaConnectClient.listConnectors(new ListConnectorsRequest());\n        for (String connectorName : listConnectorsResult.getConnectorList()) {\n            DescribeConnectorResult describeConnectorResult = kafkaConnectClient.describeConnector(\n                new DescribeConnectorRequest().withConnectorName(connectorName)); /* <=== com.amazonaws.services.kafkaconnect.model.DescribeConnectorRequest.<init> */ \n            System.out.println(describeConnectorResult.toString());\n        }\n\n        CreateConnectorResult createConnectorResult = kafkaConnectClient.createConnector(\n            new CreateConnectorRequest().withConnectorProfileArn(\"arn:aws:kafka-connect:us-west-2:123456789012:connector-profile/example\")"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.SSM",
      "occurrences" : [
        {
          "sample" : "defaultClient()",
          "lineNumber" : 10,
          "columnNumber" : 21,
          "fileName" : "/app/code/ssm.java",
          "excerpt" : "\npublic class PersonalDataProcessor {\n    private final AWSSimpleSystemsManagement ssmClient;\n\n    public PersonalDataProcessor() {\n        ssmClient = AWSSimpleSystemsManagementClientBuilder.defaultClient(); /* <=== com.amazonaws.services.ssm.AWSSimpleSystemsManagementClientBuilder.defaultClient */ \n    }\n\n    public void processData(PersonalData personalData) {\n        try {\n            CreateIncidentRequest incidentRequest = new CreateIncidentRequest()"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.ResilienceHub",
      "occurrences" : [
        {
          "sample" : "builder()",
          "lineNumber" : 8,
          "columnNumber" : 32,
          "fileName" : "/app/code/resiliencehub.java",
          "excerpt" : "\npublic class PersonalDataProcessor {\n  private ResilienceHubClient resilienceHubClient;\n  \n  public PersonalDataProcessor() {\n    this.resilienceHubClient = ResilienceHubClient.builder().build(); /* <=== com.amazonaws.services.resiliencehub.ResilienceHubClient.builder */ \n  }\n  \n  public void processData(String personalData) {\n    try {\n      resilienceHubClient.processData(personalData);"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.FinspaceData",
      "occurrences" : [
        {
          "sample" : "listTables(request)",
          "lineNumber" : 20,
          "columnNumber" : 35,
          "fileName" : "/app/code/finspacedata.java",
          "excerpt" : "        // Create a ListTablesRequest object\n        ListTablesRequest request = new ListTablesRequest();\n        request.setDatasetName(\"myDataset\");\n\n        // Send the request and get the result\n        ListTablesResult result = client.listTables(request); /* <=== com.amazonaws.services.finspacedata.AmazonFinspaceDataClient.listTables */ \n\n        // Print the names of the tables\n        for (String tableName : result.getTableNames()) {\n            System.out.println(tableName);\n        }"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Neptune",
      "occurrences" : [
        {
          "sample" : "standard()",
          "lineNumber" : 19,
          "columnNumber" : 39,
          "fileName" : "/app/code/neptune.java",
          "excerpt" : "        String endpoint = \"NEPTUNE_ENDPOINT\";\n        \n        // Replace with your region\n        String region = \"REGION\";\n        \n        AmazonNeptune neptuneClient = AmazonNeptuneClientBuilder.standard() /* <=== com.amazonaws.services.neptune.AmazonNeptuneClientBuilder.standard */ \n            .withCredentials(new AWSStaticCredentialsProvider(credentials))\n            .withEndpointConfiguration(new AwsClientBuilder.EndpointConfiguration(endpoint, region))\n            .build();\n    }\n}"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.MarketplaceMetering",
      "occurrences" : [
        {
          "sample" : "setUsageQuantity(dob)",
          "lineNumber" : 19,
          "columnNumber" : 5,
          "fileName" : "/app/code/marketplacemetering.java",
          "excerpt" : "    // Build the MeterUsageRequest with personal data such as first name, last name, phone number, DOB.\n    MeterUsageRequest request = new MeterUsageRequest();\n    request.setProductCode(firstName);\n    request.setTimestamp(lastName);\n    request.setUsageDimension(phoneNumber);\n    request.setUsageQuantity(dob); /* <=== com.amazonaws.services.marketplacemetering.model.MeterUsageRequest.setUsageQuantity */ \n\n    // Call the meterUsage method of the AmazonMarketplaceMeteringClient to send the data.\n    client.meterUsage(request);\n  }\n}"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.CertificateManager",
      "occurrences" : [
        {
          "sample" : "new RequestCertificateRequest()",
          "lineNumber" : 18,
          "columnNumber" : -1,
          "fileName" : "/app/code/certificateManager.java",
          "excerpt" : "        // Personal data to be used in a certificate request\n        String domainName = \"example.com\";\n        String subjectAlternativeName = \"www.example.com\";\n\n        // Request a certificate\n        RequestCertificateRequest requestCertificateRequest = new RequestCertificateRequest() /* <=== com.amazonaws.services.certificatemanager.model.RequestCertificateRequest.<init> */ \n                .withDomainName(domainName)\n                .withSubjectAlternativeNames(subjectAlternativeName);\n        RequestCertificateResult requestCertificateResult = certificateManagerClient.requestCertificate(requestCertificateRequest);\n        String certificateArn = requestCertificateResult.getCertificateArn();\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.IoTTwinMaker",
      "occurrences" : [
        {
          "sample" : "deleteThingShadow(deleteThingShadowRequest)",
          "lineNumber" : 30,
          "columnNumber" : 59,
          "fileName" : "/app/code/iotTwinMaker.java",
          "excerpt" : "            .withPayload(getThingShadowResult.getPayload());\n        UpdateThingShadowResult updateThingShadowResult = iotTwinMakerClient.updateThingShadow(updateThingShadowRequest);\n\n        // Delete the thing shadow\n        DeleteThingShadowRequest deleteThingShadowRequest = new DeleteThingShadowRequest().withThingName(thingName);\n        DeleteThingShadowResult deleteThingShadowResult = iotTwinMakerClient.deleteThingShadow(deleteThingShadowRequest); /* <=== com.amazonaws.services.iottwinmaker.AWSIoTTwinMaker.deleteThingShadow */ \n\n        // Describe the thing\n        DescribeThingRequest describeThingRequest = new DescribeThingRequest().withThingName(thingName);\n        DescribeThingResult describeThingResult = iotTwinMakerClient.describeThing(describeThingRequest);\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.MGN",
      "occurrences" : [
        {
          "sample" : "withIndexName(\"personal-data\")",
          "lineNumber" : 17,
          "columnNumber" : 49,
          "fileName" : "/app/code/mgn.java",
          "excerpt" : "    personalData.put(\"firstName\", firstName);\n    personalData.put(\"lastName\", lastName);\n    personalData.put(\"phoneNumber\", phoneNumber);\n    personalData.put(\"DOB\", DOB);\n    \n    IndexDocumentRequest indexDocumentRequest = new IndexDocumentRequest() /* <=== com.amazonaws.services.mgn.model.IndexDocumentRequest.withIndexName */ \n        .withIndexName(\"personal-data\")\n        .withId(firstName + lastName)\n        .withSource(personalData);\n    \n    mgnClient.indexDocument(indexDocumentRequest);"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Eventbridge",
      "occurrences" : [
        {
          "sample" : "withEntries(new com.amazonaws.services.eventbridge.model.PutEventsRequestEntry().withEventBusName(\"default\").withEvents(events))",
          "lineNumber" : 36,
          "columnNumber" : 36,
          "fileName" : "/app/code/eventBridge.java",
          "excerpt" : "        // Create a list of events to send\n        List<com.amazonaws.services.eventbridge.model.Event> events = new ArrayList<>();\n        events.add(event);\n\n        // Create a PutEventsRequest to send to EventBridge\n        PutEventsRequest request = new PutEventsRequest() /* <=== com.amazonaws.services.eventbridge.model.PutEventsRequest.withEntries */ \n                .withEntries(\n                        new com.amazonaws.services.eventbridge.model.PutEventsRequestEntry()\n                                .withEventBusName(\"default\")\n                                .withEvents(events)\n                );"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.ElasticTranscoder",
      "occurrences" : [
        {
          "sample" : "setOutputKey(outputKey)",
          "lineNumber" : 24,
          "columnNumber" : 5,
          "fileName" : "/app/code/elastictranscoder.java",
          "excerpt" : "    // Upload the input personal data to Amazon S3\n    // ...\n\n    CreateJobRequest createJobRequest = new CreateJobRequest();\n    createJobRequest.setInputKey(inputKey);\n    createJobRequest.setOutputKey(outputKey); /* <=== com.amazonaws.services.elastictranscoder.model.CreateJobRequest.setOutputKey */ \n    // Set other job parameters as necessary\n\n    CreateJobResult createJobResult = transcoderClient.createJob(createJobRequest);\n    System.out.println(\"Data processing result: \" + createJobResult.getJob().getId());\n  }"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.ElasticMapReduce",
      "occurrences" : [
        {
          "sample" : "defaultClient()",
          "lineNumber" : 10,
          "columnNumber" : 38,
          "fileName" : "/app/code/elasticMapReduce.java",
          "excerpt" : "\npublic class ElasticMapReduceExample {\n\n    public static void main(String[] args) {\n\n        AmazonElasticMapReduce emr = AmazonElasticMapReduceClientBuilder.defaultClient(); /* <=== com.amazonaws.services.elasticmapreduce.AmazonElasticMapReduceClientBuilder.defaultClient */ \n\n        ListClustersRequest request = new ListClustersRequest();\n        ListClustersResult result = emr.listClusters(request);\n\n        System.out.println(\"List of EMR clusters: \" + result.getClusters());"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Textract",
      "occurrences" : [
        {
          "sample" : "new AnalyzeDocumentRequest()",
          "lineNumber" : 12,
          "columnNumber" : -1,
          "fileName" : "/app/code/textract.java",
          "excerpt" : "public class TextractExample {\n\n    public static void main(String[] args) {\n        AmazonTextract textractClient = AmazonTextractClientBuilder.defaultClient();\n\n        AnalyzeDocumentRequest request = new AnalyzeDocumentRequest() /* <=== com.amazonaws.services.textract.model.AnalyzeDocumentRequest.<init> */ \n                .withDocument(new S3Object()\n                        .withBucket(\"my-bucket\")\n                        .withName(\"example.png\"))\n                .withFeatureTypes(\"TABLES\", \"FORMS\");\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.SimpleEmailService",
      "occurrences" : [
        {
          "sample" : "withDestination(new Destination().withToAddresses(\"recipient@example.com\"))",
          "lineNumber" : 12,
          "columnNumber" : 36,
          "fileName" : "/app/code/simpleemail.java",
          "excerpt" : "    public static void main(String[] args) {\n        // Set up the client\n        AmazonSimpleEmailService client = AmazonSimpleEmailServiceClientBuilder.defaultClient();\n\n        // Create the request\n        SendEmailRequest request = new SendEmailRequest() /* <=== com.amazonaws.services.simpleemail.model.SendEmailRequest.withDestination */ \n            .withDestination(\n                // Set the recipient\n                new Destination().withToAddresses(\"recipient@example.com\"))\n            .withMessage(\n                // Set the email message"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Redshift",
      "occurrences" : [
        {
          "sample" : "defaultClient()",
          "lineNumber" : 16,
          "columnNumber" : 45,
          "fileName" : "/app/code/redshift.java",
          "excerpt" : "\n    private static final String JDBC_DRIVER = \"com.amazon.redshift.jdbc.Driver\";\n    private static final String DB_URL = \"jdbc:redshift://{cluster_endpoint}:{port}/{database_name}\";\n\n    private Connection conn = null;\n    private AmazonRedshift redshiftClient = AmazonRedshiftClientBuilder.defaultClient(); /* <=== com.amazonaws.services.redshift.AmazonRedshiftClientBuilder.defaultClient */ \n\n    // Function to establish connection to Redshift\n    public void establishConnection() {\n        try {\n            Class.forName(JDBC_DRIVER);"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.CodeBuild",
      "occurrences" : [
        {
          "sample" : "defaultClient()",
          "lineNumber" : 11,
          "columnNumber" : 43,
          "fileName" : "/app/code/codebuild.java",
          "excerpt" : "public class PersonalDataProcessor {\n\n    private static final String PROJECT_NAME = \"personal-data-project\";\n\n    public static void main(String[] args) {\n        AmazonCodeBuild codeBuildClient = AmazonCodeBuildClientBuilder.defaultClient(); /* <=== com.amazonaws.services.codebuild.AmazonCodeBuildClientBuilder.defaultClient */ \n\n        StartBuildRequest startBuildRequest = new StartBuildRequest()\n                .withProjectName(PROJECT_NAME);\n\n        Build build = codeBuildClient.startBuild(startBuildRequest).getBuild();"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.MainframeModernization",
      "occurrences" : [
        {
          "sample" : "new MigrateSystemToVirtualMachineRequest()",
          "lineNumber" : 14,
          "columnNumber" : -1,
          "fileName" : "/app/code/minframeModernization.java",
          "excerpt" : "public void AWSMainframeModernizationProcessData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n    \n    AmazonMainframeModernizationClient client = AmazonMainframeModernizationClient.builder().build();\n    \n    MigrateSystemToVirtualMachineRequest request = new MigrateSystemToVirtualMachineRequest() /* <=== com.amazonaws.services.mainframemodernization.model.MigrateSystemToVirtualMachineRequest.<init> */ \n            .withInputData(personalData);\n    \n    MigrateSystemToVirtualMachineResult result = client.migrateSystemToVirtualMachine(request);\n    \n    System.out.println(\"Migration result: \" + result);"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.IoTFleetWise",
      "occurrences" : [
        {
          "sample" : "createTracker(createTrackerRequest)",
          "lineNumber" : 22,
          "columnNumber" : 30,
          "fileName" : "/app/code/iotFleetwise.java",
          "excerpt" : "\nCreateTrackerRequest createTrackerRequest = new CreateTrackerRequest()\n        .withTrackerName(firstName + \"_\" + lastName + \"_Tracker\")\n        .withAttributePayload(personalData);\n\nCreateTrackerResult result = client.createTracker(createTrackerRequest); /* <=== com.amazonaws.services.iotfleetwise.AmazonIoTFleetwise.createTracker */ \nSystem.out.println(\"Tracker created with ID: \" + result.getTrackerId());\n}\n}"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.S3Outposts",
      "occurrences" : [
        {
          "sample" : "getEndpoint()",
          "lineNumber" : 16,
          "columnNumber" : 27,
          "fileName" : "/app/code/s3Outpost.java",
          "excerpt" : "        // Create an S3 Outposts endpoint\n        CreateEndpointRequest createEndpointRequest = new CreateEndpointRequest()\n                .withOutpostId(\"op-01234567890abcdef\")\n                .withSecurityGroupIds(\"sg-01234567890abcdef\");\n        CreateEndpointResult createEndpointResult = client.createEndpoint(createEndpointRequest);\n        String endpoint = createEndpointResult.getEndpoint(); /* <=== com.amazonaws.services.s3outposts.model.CreateEndpointResult.getEndpoint */ \n\n        // Set the endpoint for the client\n        client.setEndpoint(endpoint);\n\n        // Create a PutObjectRequest to upload a file to the S3 Outposts bucket"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.XRay",
      "occurrences" : [
        {
          "sample" : "defaultClient()",
          "lineNumber" : 9,
          "columnNumber" : 30,
          "fileName" : "/app/code/xray.java",
          "excerpt" : "import com.amazonaws.services.xray.model.GetTraceSummariesResult;\n\npublic class PersonalDataProcessor {\n\n    public static void main(String[] args) {\n        AWSXRay xRayClient = AWSXRayClientBuilder.defaultClient(); /* <=== com.amazonaws.services.xray.AWSXRayClientBuilder.defaultClient */ \n\n        GetTraceSummariesRequest getTraceSummariesRequest = new GetTraceSummariesRequest();\n\n        GetTraceSummariesResult getTraceSummariesResult = xRayClient.getTraceSummaries(getTraceSummariesRequest);\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.APIGateway",
      "occurrences" : [
        {
          "sample" : "postToConnection(request)",
          "lineNumber" : 23,
          "columnNumber" : 3,
          "fileName" : "/app/code/apiGateway.java",
          "excerpt" : "  PostToConnectionRequest request = new PostToConnectionRequest()\n     .withConnectionId(\"connection-id\")\n     .withData(body.getBytes())\n     .withHeaders(headers);\n \n  client.postToConnection(request); /* <=== com.amazonaws.services.apigateway.AmazonApiGateway.postToConnection */ \n}\n}\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.IdentityManagement",
      "occurrences" : [
        {
          "sample" : "getUser(request)",
          "lineNumber" : 16,
          "columnNumber" : 32,
          "fileName" : "/app/code/identitymanagement.java",
          "excerpt" : "        iamClient = AmazonIdentityManagementClientBuilder.defaultClient();\n    }\n\n    public void processData(String userName) {\n        GetUserRequest request = new GetUserRequest().withUserName(userName);\n        GetUserResult result = iamClient.getUser(request); /* <=== com.amazonaws.services.identitymanagement.AmazonIdentityManagement.getUser */ \n\n        // Process the user data, for example, to retrieve personal information\n        String userId = result.getUser().getUserId();\n        String email = result.getUser().getEmail();\n        String arn = result.getUser().getArn();"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.LexModel",
      "occurrences" : [
        {
          "sample" : "withName(\"PersonalDataSlot\")",
          "lineNumber" : 11,
          "columnNumber" : 37,
          "fileName" : "/app/code/lexModel.java",
          "excerpt" : "\npublic class AWSLexModelsV2Util {\n\n    public static void AWSlexmodelsv2FirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AmazonLexModelBuilding client = AmazonLexModelBuildingClientBuilder.standard().build();\n        SlotTypeMetadata metadata = new SlotTypeMetadata().withName(\"PersonalDataSlot\").withDescription(\"Personal data slot\"); /* <=== com.amazonaws.services.lexmodelbuilding.model.SlotTypeMetadata.withName */ \n        SlotTypeProperties properties = new SlotTypeProperties().withEnumerationValues(\n                new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB)\n        );\n        PutSlotTypeRequest request = new PutSlotTypeRequest().withName(\"PersonalDataSlot\").withChecksum(null)\n                .withDescription(\"Personal data slot\").withEnumerationValues(properties.getEnumerationValues())"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.ApplicationCostProfiler",
      "occurrences" : [
        {
          "sample" : "defaultClient()",
          "lineNumber" : 10,
          "columnNumber" : 30,
          "fileName" : "/app/code/applicationcostprofiler.java",
          "excerpt" : "\npublic class PersonalDataProcessor {\n    private final AWSApplicationCostProfiler costProfilerClient;\n\n    public PersonalDataProcessor() {\n        costProfilerClient = AWSApplicationCostProfilerClientBuilder.defaultClient(); /* <=== com.amazonaws.services.applicationcostprofiler.AWSApplicationCostProfilerClientBuilder.defaultClient */ \n    }\n\n    public void processData(PersonalData personalData) {\n        try {\n            PutCostProfileDataRequest putCostProfileDataRequest = new PutCostProfileDataRequest()"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.IoTDeviceAdvisor",
      "occurrences" : [
        {
          "sample" : "new TestRound()",
          "lineNumber" : 18,
          "columnNumber" : -1,
          "fileName" : "/app/code/iotDeviceAdvisor.java",
          "excerpt" : "}\n\npublic void AWSIoTDeviceAdvisorProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nTestRound testRound = new TestRound().withName(firstName + \"_\" + lastName + \"_TestRound\") /* <=== com.amazonaws.services.iotdeviceadvisor.model.TestRound.<init> */ \n        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n\nTestResult result = client.createTestRound(testRound);\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.LookoutForVision",
      "occurrences" : [
        {
          "sample" : "createDataset(createDatasetRequest)",
          "lineNumber" : 25,
          "columnNumber" : 39,
          "fileName" : "/app/code/lookoutForVision.java",
          "excerpt" : "    S3DataConfig s3DataConfig = new S3DataConfig().withS3DataSource(s3DataSource);\n    CreateDatasetRequest createDatasetRequest = new CreateDatasetRequest()\n        .withDatasetName(datasetName)\n        .withDisplayName(datasetDisplayName)\n        .withDataSource(s3DataConfig);\n    DatasetMetadata datasetMetadata = client.createDataset(createDatasetRequest).getDataset(); /* <=== com.amazonaws.services.lookoutforvision.AmazonLookoutforVision.createDataset */ \n\n    // Create a model\n    String modelName = \"personal_data_model\";\n    String modelDisplayName = \"Personal Data Model\";\n    CreateModelRequest createModelRequest = new CreateModelRequest()"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.SimpleSystemsManagement",
      "occurrences" : [
        {
          "sample" : "new PutParameterRequest()",
          "lineNumber" : 13,
          "columnNumber" : -1,
          "fileName" : "/app/code/simpleSystemManagement.java",
          "excerpt" : "    String parameterName = \"/personalData/firstName\";\n    PutParameterRequest request = new PutParameterRequest().withName(parameterName).withValue(firstName).withType(\"String\");\n    ssmClient.putParameter(request);\n    \n    parameterName = \"/personalData/lastName\";\n    request = new PutParameterRequest().withName(parameterName).withValue(lastName).withType(\"String\"); /* <=== com.amazonaws.services.simplesystemsmanagement.model.PutParameterRequest.<init> */ \n    ssmClient.putParameter(request);\n    \n    parameterName = \"/personalData/phoneNumber\";\n    request = new PutParameterRequest().withName(parameterName).withValue(phoneNumber).withType(\"String\");\n    ssmClient.putParameter(request);"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.FSx",
      "occurrences" : [
        {
          "sample" : "standard()",
          "lineNumber" : 15,
          "columnNumber" : 25,
          "fileName" : "/app/code/fsx.java",
          "excerpt" : "    public static void main(String[] args) {\n        // Replace with your access key and secret key\n        AWSCredentials credentials = new BasicAWSCredentials(\"access_key\", \"secret_key\");\n\n        // Create an FSx client\n        AmazonFSx fsx = AmazonFSxClientBuilder.standard() /* <=== com.amazonaws.services.fsx.AmazonFSxClientBuilder.standard */ \n                .withCredentials(new AWSStaticCredentialsProvider(credentials))\n                .withRegion(\"us-west-2\")\n                .build();\n\n        // Create a new FSx file system"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.ServerMigration",
      "occurrences" : [
        {
          "sample" : "getReplicationJobId()",
          "lineNumber" : 28,
          "columnNumber" : 66,
          "fileName" : "/app/code/serverMigration.java",
          "excerpt" : "        // Create the replication job\n        CreateReplicationJobResult result = client.createReplicationJob(request);\n\n        // Get the replication job information\n        ReplicationJob job = result.getReplicationJob();\n        System.out.println(\"Replication job created with ID: \" + job.getReplicationJobId()); /* <=== com.amazonaws.services.servermigration.model.ReplicationJob.getReplicationJobId */ \n\n        // Process the personal data in the \"com\" package\n        // ...\n    }\n}"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.SimpleDB",
      "occurrences" : [
        {
          "sample" : "new ReplaceableAttribute(\"name\", \"value\", true)",
          "lineNumber" : 13,
          "columnNumber" : -1,
          "fileName" : "/app/code/simpleDB.java",
          "excerpt" : "public class SimpleDBSample {\n\n    public static void main(String[] args) {\n        AmazonSimpleDB simpleDB = AmazonSimpleDBClientBuilder.defaultClient();\n\n        ReplaceableAttribute attribute1 = new ReplaceableAttribute(\"name\", \"value\", true); /* <=== com.amazonaws.services.simpledb.model.ReplaceableAttribute.<init> */ \n        ReplaceableAttribute attribute2 = new ReplaceableAttribute(\"age\", \"25\", true);\n\n        PutAttributesRequest request = new PutAttributesRequest(\"mydomain\", \"itemName\", Arrays.asList(attribute1, attribute2));\n\n        simpleDB.putAttributes(request);"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.CodeArtifact",
      "occurrences" : [
        {
          "sample" : "setPackage(\"package-name\")",
          "lineNumber" : 29,
          "columnNumber" : 9,
          "fileName" : "/app/code/codeArtifact.java",
          "excerpt" : "        // Put the package to CodeArtifact repository\n        PutPackageRequest putPackageRequest = new PutPackageRequest();\n        putPackageRequest.setDomain(\"my-domain\");\n        putPackageRequest.setRepository(\"my-repository\");\n        putPackageRequest.setFormat(\"maven\");\n        putPackageRequest.setPackage(\"package-name\"); /* <=== com.amazonaws.services.codeartifact.model.PutPackageRequest.setPackage */ \n        putPackageRequest.setMetadata(packageMetadata);\n        putPackageRequest.setPackageFile(packageFile);\n\n        PutPackageResult putPackageResult = client.putPackage(putPackageRequest);\n        System.out.println(\"Package version: \" + putPackageResult.getVersion());"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.EBS",
      "occurrences" : [
        {
          "sample" : "createSnapshot(createSnapshotRequest)",
          "lineNumber" : 21,
          "columnNumber" : 5,
          "fileName" : "/app/code/ebs.java",
          "excerpt" : "    \n    CreateSnapshotRequest createSnapshotRequest = new CreateSnapshotRequest()\n            .withVolumeId(firstName + \"_\" + lastName + \"_Volume\")\n            .withTagSpecifications(new Tag().withKey(\"PersonalData\").withValue(personalData.toString()));\n    \n    client.createSnapshot(createSnapshotRequest); /* <=== com.amazonaws.services.ebs.AmazonEBS.createSnapshot */ \n}\n}"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.ElasticFileSystem",
      "occurrences" : [
        {
          "sample" : "new CreateFileSystemRequest()",
          "lineNumber" : 21,
          "columnNumber" : -1,
          "fileName" : "/app/code/elasticFileSystem.java",
          "excerpt" : "                .withCredentials(new AWSStaticCredentialsProvider(credentials))\n                .withRegion(\"us-west-2\")\n                .build();\n\n        // Create a new EFS file system\n        CreateFileSystemRequest createFileSystemRequest = new CreateFileSystemRequest() /* <=== com.amazonaws.services.elasticfilesystem.model.CreateFileSystemRequest.<init> */ \n                .withCreationToken(\"my-file-system\");\n        CreateFileSystemResult createFileSystemResult = efs.createFileSystem(createFileSystemRequest);\n\n        // Get the ID of the newly created EFS file system\n        String fileSystemId = createFileSystemResult.getFileSystemId();"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.SingleSignOn",
      "occurrences" : [
        {
          "sample" : "defaultClient()",
          "lineNumber" : 20,
          "columnNumber" : 21,
          "fileName" : "/app/code/sso.java",
          "excerpt" : "public class PersonalDataProcessor {\n    private final AmazonSSO ssoClient;\n    private final AmazonS3 s3Client;\n\n    public PersonalDataProcessor() {\n        ssoClient = AmazonSSOClientBuilder.defaultClient(); /* <=== com.amazonaws.services.sso.AmazonSSOClientBuilder.defaultClient */ \n        s3Client = AmazonS3ClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(String personalData) {\n        // 1. Obtain role credentials for the user"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.CloudDirectory",
      "occurrences" : [
        {
          "sample" : "standard()",
          "lineNumber" : 13,
          "columnNumber" : 31,
          "fileName" : "/app/code/cloudDirectory.java",
          "excerpt" : "import java.util.Arrays;\n\npublic class AWSCloudDirectoryUtil {\n\npublic static void AWSCloudDirectoryFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\nAmazonCloudDirectory client = AmazonCloudDirectoryClientBuilder.standard().build(); /* <=== com.amazonaws.services.clouddirectory.AmazonCloudDirectoryClientBuilder.standard */ \n\nscss\nCopy code\ntry {\n  CreateObjectRequest createObjectRequest = new CreateObjectRequest();"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.DatabaseMigrationService",
      "occurrences" : [
        {
          "sample" : "withType(\"PersonalData\")",
          "lineNumber" : 25,
          "columnNumber" : 40,
          "fileName" : "/app/code/databaseMigration.java",
          "excerpt" : "            .withTargetEndpointArn(\"arn:aws:dms:us-west-2:012345678901:endpoint:AKXWXYZWEXAMPLE\")\n            .withReplicationInstanceArn(\"arn:aws:dms:us-west-2:012345678901:rep:6UTDJGB043EXAMPLE\")\n            .withMigrationType(\"full-load\")\n            .withTableMappings(\"{\\\"rules\\\":[{\\\"rule-type\\\":\\\"selection\\\",\\\"rule-id\\\":\\\"1\\\",\\\"rule-name\\\":\\\"1\\\",\\\"object-locator\\\":{\\\"schema-name\\\":\\\"personal_data\\\",\\\"table-name\\\":\\\"\" + firstName + \"_\" + lastName + \"\\\"},\\\"rule-action\\\":\\\"include\\\",\\\"filters\\\":{}}]}\")\n            .withReplicationTaskSettings(\"{\\\"TargetMetadata\\\":{\\\"TargetSchema\\\":\\\"\\\",\\\"SupportLobs\\\":true,\\\"FullLobMode\\\":false,\\\"LobChunkSize\\\":64,\\\"LimitedSizeLobMode\\\":true,\\\"LobMaxSize\\\":32},\\\"FullLoadSettings\\\":{\\\"FullLoadEnabled\\\":true,\\\"ApplyChangesEnabled\\\":false,\\\"TargetTablePrepareOptions\\\":\\\"DROP_AND_CREATE\\\",\\\"CreatePkAfterFullLoad\\\":false,\\\"StopTaskCachedChangesApplied\\\":false,\\\"StopTaskCachedChangesNotApplied\\\":false,\\\"ResumeEnabled\\\":false,\\\"RangeLinearityFactor\\\":null},\\\"Logging\\\":{\\\"EnableLogging\\\":false}}\")\n            .withResourceAttributeList(new ResourceAttribute().withType(\"PersonalData\") /* <=== com.amazonaws.services.databasemigrationservice.model.ResourceAttribute.withType */ \n                    .withValue(personalData.toString()));\n\n    client.createReplicationTask(createReplicationTaskRequest);\n}\n}"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.ManagedBlockchain",
      "occurrences" : [
        {
          "sample" : "withNetworkId(\"my-network-id\")",
          "lineNumber" : 12,
          "columnNumber" : 55,
          "fileName" : "/app/code/managedBlockchain.java",
          "excerpt" : "    public static void main(String[] args) {\n        // Create an AMB client\n        AmazonManagedBlockchain client = AmazonManagedBlockchainClientBuilder.defaultClient();\n\n        // Create a proposal\n        CreateProposalRequest createProposalRequest = new CreateProposalRequest() /* <=== com.amazonaws.services.managedblockchain.model.CreateProposalRequest.withNetworkId */ \n                .withNetworkId(\"my-network-id\")\n                .withActions(new Action().withMemberId(\"my-member-id\"));\n        \n        // Submitting the proposal\n        CreateProposalResult createProposalResult = client.createProposal(createProposalRequest);"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.CloudWatch",
      "occurrences" : [
        {
          "sample" : "putMetricData(request)",
          "lineNumber" : 26,
          "columnNumber" : 9,
          "fileName" : "/app/code/cloudwatch.java",
          "excerpt" : "\n        PutMetricDataRequest request = new PutMetricDataRequest()\n            .withNamespace(\"PersonalData\")\n            .withMetricData(datum);\n\n        cloudWatch.putMetricData(request); /* <=== com.amazonaws.services.cloudwatch.AmazonCloudWatch.putMetricData */ \n    }\n}\n"
        },
        {
          "sample" : "new PutEventsRequest()",
          "lineNumber" : 30,
          "columnNumber" : -1,
          "fileName" : "/app/code/cloudwatchEvents.java",
          "excerpt" : "        // format the personal data as desired\n        entry.setDetail(personalData.toString());\n        entry.setDetailType(\"personalData\");\n        entries.add(entry);\n\n        PutEventsRequest request = new PutEventsRequest().withEntries(entries); /* <=== com.amazonaws.services.cloudwatchevents.model.PutEventsRequest.<init> */ \n\n        // Send the data to CloudWatch Events\n        PutEventsResult result = cloudWatchEventsClient.putEvents(request);\n\n        // Handle the response from CloudWatch Events"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.IoTFleetHub",
      "occurrences" : [
        {
          "sample" : "withFleetId(fleetId)",
          "lineNumber" : 25,
          "columnNumber" : 35,
          "fileName" : "/app/code/iotFleetHub.java",
          "excerpt" : "    CreateAssetResult result = fleetHubClient.createAsset(request);\n    System.out.println(\"Asset created: \" + result.getAssetId());\n  }\n\n  public void createMetric(String metricName, String assetId) {\n    CreateMetricRequest request = new CreateMetricRequest() /* <=== com.amazonaws.services.iotfleethub.model.CreateMetricRequest.withFleetId */ \n      .withFleetId(fleetId)\n      .withMetricName(metricName)\n      .withAssetId(assetId);\n    CreateMetricResult result = fleetHubClient.createMetric(request);\n    System.out.println(\"Metric created: \" + result.getMetricId());"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.EC2",
      "occurrences" : [
        {
          "sample" : "standard()",
          "lineNumber" : 14,
          "columnNumber" : 23,
          "fileName" : "/app/code/ec2.java",
          "excerpt" : "\n    private AmazonEC2 client;\n\n    public PersonalDataProcessor(String accessKey, String secretKey) {\n        BasicAWSCredentials credentials = new BasicAWSCredentials(accessKey, secretKey);\n        this.client = AmazonEC2ClientBuilder.standard() /* <=== com.amazonaws.services.ec2.AmazonEC2ClientBuilder.standard */ \n                .withCredentials(new AWSStaticCredentialsProvider(credentials))\n                .build();\n    }\n\n    public void processData(List<String> data) {"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Organizations",
      "occurrences" : [
        {
          "sample" : "createAccount(createAccountRequest)",
          "lineNumber" : 20,
          "columnNumber" : 51,
          "fileName" : "/app/code/organizations.java",
          "excerpt" : "        // Create a new account in Amazon Organizations to store the personal data\n        CreateAccountRequest createAccountRequest = new CreateAccountRequest()\n            .withEmail(personalData.get(\"email\"))\n            .withAccountName(personalData.get(\"name\"))\n            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest); /* <=== com.amazonaws.services.organizations.AWSOrganizations.createAccount */ \n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId();\n\n        // Add the personal data as tags to the created account\n        TagResourceRequest tagResourceRequest = new TagResourceRequest()\n            .withResourceId(accountId)"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.ComprehendMedical",
      "occurrences" : [
        {
          "sample" : "detectEntities(request)",
          "lineNumber" : 14,
          "columnNumber" : 39,
          "fileName" : "/app/code/comprehendMedical.java",
          "excerpt" : "        AmazonComprehendMedical comprehendMedical = AmazonComprehendMedicalClientBuilder.standard().build();\n\n        String text = \"Patient has a history of heart disease and is currently taking lisinopril and aspirin.\";\n\n        DetectEntitiesRequest request = new DetectEntitiesRequest().withText(text);\n        DetectEntitiesResult result = comprehendMedical.detectEntities(request); /* <=== com.amazonaws.services.comprehendmedical.AmazonComprehendMedical.detectEntities */ \n\n        System.out.println(\"Entities found: \" + result.getEntities());\n    }\n}"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.StepFunctions",
      "occurrences" : [
        {
          "sample" : "withStateMachineArn(STATE_MACHINE_ARN)",
          "lineNumber" : 27,
          "columnNumber" : 55,
          "fileName" : "/app/code/stepFunction.java",
          "excerpt" : "                .withRegion(Regions.US_EAST_1)\n                .build();\n\n        // Create a StartExecutionRequest object with input\n        String input = \"{\\\"example_key\\\":\\\"example_value\\\"}\";\n        StartExecutionRequest startExecutionRequest = new StartExecutionRequest() /* <=== com.amazonaws.services.stepfunctions.model.StartExecutionRequest.withStateMachineArn */ \n                .withStateMachineArn(STATE_MACHINE_ARN)\n                .withInput(input);\n\n        // Start the execution\n        StartExecutionResult startExecutionResult = stepFunctions.startExecution(startExecutionRequest);"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.PinpointSMSVoice",
      "occurrences" : [
        {
          "sample" : "new EventDestinationDefinition()",
          "lineNumber" : 14,
          "columnNumber" : -1,
          "fileName" : "/app/code/pinpointsmsvoice.java",
          "excerpt" : "        AmazonPinpointSMSVoice client = AmazonPinpointSMSVoiceClientBuilder.standard().build();\n\n        String configurationSetName = \"sample-config-set\";\n        String eventDestinationName = \"sample-event-destination\";\n\n        EventDestinationDefinition eventDestination = new EventDestinationDefinition() /* <=== com.amazonaws.services.pinpointsmsvoice.model.EventDestinationDefinition.<init> */ \n                .withSnsDestination(new SnsDestination().withTopicArn(\"arn:aws:sns:us-west-2:123456789012:sample-topic\"));\n\n        CreateConfigurationSetEventDestinationRequest request = new CreateConfigurationSetEventDestinationRequest()\n                .withConfigurationSetName(configurationSetName)\n                .withEventDestinationName(eventDestinationName)"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Account",
      "occurrences" : [
        {
          "sample" : "new AWSAccountClient()",
          "lineNumber" : 7,
          "columnNumber" : -1,
          "fileName" : "/app/code/account.java",
          "excerpt" : "\npublic class PersonalDataProcessor {\n  private final AWSAccountClient accountClient;\n\n  public PersonalDataProcessor() {\n    this.accountClient = new AWSAccountClient(); /* <=== com.amazonaws.services.account.AWSAccountClient.<init> */ \n  }\n\n  public void processData(String personalData) {\n    // Call the appropriate methods on the accountClient object to process the personal data\n    // ..."
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.WorkMailMessageFlow",
      "occurrences" : [
        {
          "sample" : "getProcessedEmail()",
          "lineNumber" : 36,
          "columnNumber" : 33,
          "fileName" : "/app/code/workmailmessageflow.java",
          "excerpt" : "\n        // Process raw email\n        ProcessRawEmailResult result = client.processRawEmail(request);\n\n        // Retrieve processed email result\n        byte[] processedEmail = result.getProcessedEmail(); /* <=== com.amazonaws.services.workmailmessageflow.model.ProcessRawEmailResult.getProcessedEmail */ \n    }\n\n    private static byte[] getRawMessageData() {\n        // retrieve raw message data\n        ..."
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.DocumentDB",
      "occurrences" : [
        {
          "sample" : "standard()",
          "lineNumber" : 15,
          "columnNumber" : 23,
          "fileName" : "/app/code/docDB.java",
          "excerpt" : "\n    private AmazonDocDB docDBClient;\n\n    public PersonalDataProcessor(String accessKey, String secretKey, String docDBEndpoint) {\n        AWSCredentials credentials = new BasicAWSCredentials(accessKey, secretKey);\n        docDBClient = AmazonDocDBClientBuilder.standard() /* <=== com.amazonaws.services.docdb.AmazonDocDBClientBuilder.standard */ \n                .withCredentials(new AWSStaticCredentialsProvider(credentials))\n                .withEndpointConfiguration(new EndpointConfiguration(docDBEndpoint, \"us-west-2\"))\n                .build();\n    }\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Workspacesweb",
      "occurrences" : [
        {
          "sample" : "createUser(request)",
          "lineNumber" : 12,
          "columnNumber" : 9,
          "fileName" : "/app/code/workspacesweb.java",
          "excerpt" : "        CreateUserRequest request = new CreateUserRequest()\n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber)\n                .withBirthDate(DOB);\n        workspacesWebClient.createUser(request); /* <=== com.amazonaws.services.workspacesweb.AWSWorkspacesWeb.createUser */ \n    }\n}\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.RelationalDatabaseService",
      "occurrences" : [
        {
          "sample" : "getDBInstanceIdentifier()",
          "lineNumber" : 43,
          "columnNumber" : 45,
          "fileName" : "/app/code/rds.java",
          "excerpt" : "\n        // Use com.amazonaws.services.rds to process personal data\n        AmazonRDSClientBuilder builder = AmazonRDSClientBuilder.standard();\n        com.amazonaws.services.rds.AmazonRDS client = builder.build();\n        DBInstance instance = client.describeDBInstances().getDBInstances().get(0);\n        System.out.println(\"DBInstance: \" + instance.getDBInstanceIdentifier()); /* <=== com.amazonaws.services.rds.model.DBInstance.getDBInstanceIdentifier */ \n\n        // Process personal data in com.amazonaws.services.rds\n        // ...\n    }\n}"
        },
        {
          "sample" : "executeSql(rdsDataRequest)",
          "lineNumber" : 23,
          "columnNumber" : 42,
          "fileName" : "/app/code/rdsData.java",
          "excerpt" : "            .withAwsSecretStoreArn(\"arn:aws:secretsmanager:us-west-2:123456789012:secret:my-secret\")\n            .withDbClusterOrInstanceArn(\"arn:aws:rds:us-west-2:123456789012:cluster:my-cluster\")\n            .withSqlStatements(sql);\n        \n        // Send the RDS Data Request\n        ExecuteSqlResult rdsDataResult = rdsDataClient.executeSql(rdsDataRequest); /* <=== com.amazonaws.services.rdsdata.AWSRDSData.executeSql */ \n        \n        // Get the RDS Data Result\n        List<Field> fields = rdsDataResult.getResultSet().getRecords().get(0).getFields();\n        \n        // Print the RDS Data Result"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.KMS",
      "occurrences" : [
        {
          "sample" : "getPlaintext()",
          "lineNumber" : 24,
          "columnNumber" : 40,
          "fileName" : "/app/code/kms.java",
          "excerpt" : "        ByteBuffer ciphertext = encryptResult.getCiphertextBlob();\n\n        // Decrypt the encrypted personal data using KMS\n        DecryptRequest decryptRequest = new DecryptRequest().withCiphertextBlob(ciphertext);\n        DecryptResult decryptResult = kmsClient.decrypt(decryptRequest);\n        byte[] decryptedPersonalData = decryptResult.getPlaintext().array(); /* <=== com.amazonaws.services.kms.model.DecryptResult.getPlaintext */ \n    }\n}\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Translate",
      "occurrences" : [
        {
          "sample" : "translateMedicalText(request)",
          "lineNumber" : 31,
          "columnNumber" : 41,
          "fileName" : "/app/code/translateMedical.java",
          "excerpt" : "            .withSourceLanguageCode(\"en\")\n            .withTargetLanguageCode(\"fr\")\n            .withText(\"I have a headache\");\n\n    // Translate the text\n    TranslateMedicalTextResult result = translateMedical.translateMedicalText(request); /* <=== com.amazonaws.services.translatemedical.AWSTranslateMedical.translateMedicalText */ \n    System.out.println(\"Translated Text: \" + result.getTranslatedText());\n}\n}"
        },
        {
          "sample" : "translateText(request)",
          "lineNumber" : 34,
          "columnNumber" : 38,
          "fileName" : "/app/code/translate.java",
          "excerpt" : "            .withText(\"Hello World\")\n            .withSourceLanguageCode(SOURCE_LANGUAGE)\n            .withTargetLanguageCode(TARGET_LANGUAGE);\n\n        // Send the request and get the result\n        TranslateTextResult result = translate.translateText(request); /* <=== com.amazonaws.services.translate.AmazonTranslate.translateText */ \n\n        // Print the translated text\n        System.out.println(result.getTranslatedText());\n    }\n}"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Directory",
      "occurrences" : [
        {
          "sample" : "standard()",
          "lineNumber" : 13,
          "columnNumber" : 50,
          "fileName" : "/app/code/directory.java",
          "excerpt" : "\n\n\npublic class AWSDirectoryUtil {\n  \n  private static AmazonDirectoryService client = AmazonDirectoryServiceClientBuilder.standard().build(); /* <=== com.amazonaws.services.directory.AmazonDirectoryServiceClientBuilder.standard */ \n  \n  public static void AWSDirectoryFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    try {\n      // Create an entry in AWS Directory\n      DirectoryAttribute firstNameAttribute = new DirectoryAttribute(\"firstName\", firstName);"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.FraudDetector",
      "occurrences" : [
        {
          "sample" : "standard()",
          "lineNumber" : 9,
          "columnNumber" : 42,
          "fileName" : "/app/code/fraudDetector.java",
          "excerpt" : "import com.amazonaws.services.frauddetector.model.CreateDetectorVersionResult;\n\npublic class FraudDetectorSink {\n    public static void main(String[] args) {\n        // Build the Fraud Detector client\n        AWSFraudDetector fraudDetector = AWSFraudDetectorClientBuilder.standard() /* <=== com.amazonaws.services.frauddetector.AWSFraudDetectorClientBuilder.standard */ \n                .withRegion(\"us-west-2\")\n                .build();\n\n        // Create a detector version\n        CreateDetectorVersionRequest request = new CreateDetectorVersionRequest()"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Gamelift",
      "occurrences" : [
        {
          "sample" : "standard()",
          "lineNumber" : 7,
          "columnNumber" : 47,
          "fileName" : "/app/code/gamelift.java",
          "excerpt" : "import com.amazonaws.services.gamelift.model.PutRecordInput;\n\npublic class AWSGameliftUtil {\n\n    public void AWSGameliftFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        AmazonGameLiftClientBuilder builder = AmazonGameLiftClientBuilder.standard(); /* <=== com.amazonaws.services.gamelift.AmazonGameLiftClientBuilder.standard */ \n        PutRecordInput putRecordInput = new PutRecordInput()\n                .withData(String.format(\"First Name: %s, Last Name: %s, Phone Number: %s, DOB: %s\",\n                        firstName, lastName, phoneNumber, dob).getBytes())\n                .withStreamName(\"AWS-Gamelift-Stream\");\n        builder.build().putRecord(putRecordInput);"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.ElasticBeanStalk",
      "occurrences" : [
        {
          "sample" : "new CreateEnvironmentRequest()",
          "lineNumber" : 25,
          "columnNumber" : -1,
          "fileName" : "/app/code/elasticbeanstalk.java",
          "excerpt" : "        // TODO: Implement processing personal data\n        // e.g. storing it in an environment variable, creating an environment, etc.\n    }\n\n    public void createEnvironment(String environmentName) {\n        CreateEnvironmentRequest createEnvironmentRequest = new CreateEnvironmentRequest(); /* <=== com.amazonaws.services.elasticbeanstalk.model.CreateEnvironmentRequest.<init> */ \n        createEnvironmentRequest.setApplicationName(environmentName);\n        createEnvironmentRequest.setEnvironmentName(environmentName);\n\n        Map<String, String> environmentVariables = new HashMap<>();\n        environmentVariables.put(\"PERSONAL_DATA\", personalData);"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.TranscribeMedical",
      "occurrences" : [
        {
          "sample" : "withLanguageCode(\"en-US\")",
          "lineNumber" : 14,
          "columnNumber" : 55,
          "fileName" : "/app/code/transcribeMedical.java",
          "excerpt" : "        AWSTranscribeMedical transcribeMedical = AWSTranscribeMedicalClientBuilder.standard()\n                .withRegion(\"us-west-2\")\n                .build();\n        \n        // Define the input and output settings for the transcription job\n        StartMedicalTranscriptionJobRequest request = new StartMedicalTranscriptionJobRequest() /* <=== com.amazonaws.services.transcribemedical.model.StartMedicalTranscriptionJobRequest.withLanguageCode */ \n                .withLanguageCode(\"en-US\")\n                .withMediaSampleRateHertz(8000)\n                .withMediaFormat(\"wav\")\n                .withTranscriptionJobName(\"my-transcription-job\")\n                .withOutputBucketName(\"my-output-bucket\")"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.GlueDataBrew",
      "occurrences" : [
        {
          "sample" : "createProfileJob(createProfileJobRequest)",
          "lineNumber" : 21,
          "columnNumber" : 61,
          "fileName" : "/app/code/gluedatabrew.java",
          "excerpt" : "        for (PersonalData personalData : personalDataList) {\n            CreateProfileJobRequest createProfileJobRequest = new CreateProfileJobRequest()\n                    .withDatasetName(personalData.getDatasetName())\n                    .withRecipeReference(personalData.getRecipeReference());\n\n            CreateProfileJobResult createProfileJobResult = glueDataBrewClient.createProfileJob(createProfileJobRequest); /* <=== com.amazonaws.services.gluedatabrew.AWSGlueDataBrew.createProfileJob */ \n\n            // You can add additional processing logic here\n        }\n    }\n}"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazon.Aws",
      "occurrences" : [
        {
          "sample" : "withGatewayARN(\"arn:aws:storagegateway:us-west-2:1234567890:gateway/sgw-12A3456B\")",
          "lineNumber" : 18,
          "columnNumber" : 50,
          "fileName" : "/app/code/storageGateway.java",
          "excerpt" : "        // Create a Storage Gateway client\n        AWSStorageGatewayClient client = new AWSStorageGatewayClient(credentials);\n        client.setEndpoint(\"https://storagegateway.us-west-2.amazonaws.com\");\n\n        // Create a new cached iSCSI volume\n        CreateCachediSCSIVolumeRequest request = new CreateCachediSCSIVolumeRequest() /* <=== com.amazonaws.services.storagegateway.model.CreateCachediSCSIVolumeRequest.withGatewayARN */ \n                .withGatewayARN(\"arn:aws:storagegateway:us-west-2:1234567890:gateway/sgw-12A3456B\")\n                .withVolumeSizeInBytes(1099511627776L)\n                .withSnapshotId(\"snap-01234567890abcdef0\")\n                .withTargetName(\"myiscsitarget\")\n                .withNetworkInterfaceId(\"eni-01234567890abcdef0\");"
        },
        {
          "sample" : "new DescribeConnectorRequest()",
          "lineNumber" : 24,
          "columnNumber" : -1,
          "fileName" : "/app/code/kafkaConnect.java",
          "excerpt" : "    public void processData(Map<String, String> personalData) {\n        // Use the AWS Kafka Connect SDK to process personal data here\n        ListConnectorsResult listConnectorsResult = kafkaConnectClient.listConnectors(new ListConnectorsRequest());\n        for (String connectorName : listConnectorsResult.getConnectorList()) {\n            DescribeConnectorResult describeConnectorResult = kafkaConnectClient.describeConnector(\n                new DescribeConnectorRequest().withConnectorName(connectorName)); /* <=== com.amazonaws.services.kafkaconnect.model.DescribeConnectorRequest.<init> */ \n            System.out.println(describeConnectorResult.toString());\n        }\n\n        CreateConnectorResult createConnectorResult = kafkaConnectClient.createConnector(\n            new CreateConnectorRequest().withConnectorProfileArn(\"arn:aws:kafka-connect:us-west-2:123456789012:connector-profile/example\")"
        },
        {
          "sample" : "defaultClient()",
          "lineNumber" : 11,
          "columnNumber" : 31,
          "fileName" : "/app/code/organizations.java",
          "excerpt" : "public class OrganizationsWorker {\n\n    private AWSOrganizations organizationsClient;\n\n    public OrganizationsWorker() {\n        organizationsClient = AWSOrganizationsClientBuilder.defaultClient(); /* <=== com.amazonaws.services.organizations.AWSOrganizationsClientBuilder.defaultClient */ \n    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Create a new account in Amazon Organizations to store the personal data\n        CreateAccountRequest createAccountRequest = new CreateAccountRequest()"
        },
        {
          "sample" : "withDestinationConnectionArn(\"arn:aws:appflow:us-west-2:123456789012:connectiondestination/example-connection\")",
          "lineNumber" : 28,
          "columnNumber" : 42,
          "fileName" : "/app/code/appflow.java",
          "excerpt" : "        // Prepare the data to send to Appflow\n        CreateFlowRequest request = new CreateFlowRequest();\n        request.setName(\"SampleFlow\");\n        request.setDescription(\"Sample flow to process personal data\");\n        request.setSourceFlowConfig(new SourceFlowConfig().withSourceConnectionArn(\"arn:aws:appflow:us-west-2:123456789012:connectionsource/example-connection\"));\n        request.setDestinationFlowConfig(new DestinationFlowConfig().withDestinationConnectionArn(\"arn:aws:appflow:us-west-2:123456789012:connectiondestination/example-connection\")); /* <=== com.amazonaws.services.appflow.model.DestinationFlowConfig.withDestinationConnectionArn */ \n        request.setTriggerConfig(new TriggerConfig().withTriggerProperties(personalData));\n\n        // Send the data to Appflow\n        CreateFlowResult result = appflowClient.createFlow(request);\n"
        },
        {
          "sample" : "postToConnection(request)",
          "lineNumber" : 23,
          "columnNumber" : 3,
          "fileName" : "/app/code/apiGateway.java",
          "excerpt" : "  PostToConnectionRequest request = new PostToConnectionRequest()\n     .withConnectionId(\"connection-id\")\n     .withData(body.getBytes())\n     .withHeaders(headers);\n \n  client.postToConnection(request); /* <=== com.amazonaws.services.apigateway.AmazonApiGateway.postToConnection */ \n}\n}\n"
        },
        {
          "sample" : "new ResourceAttribute()",
          "lineNumber" : 20,
          "columnNumber" : -1,
          "fileName" : "/app/code/migrationHub.java",
          "excerpt" : "    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\n    ImportMigrationTaskRequest importMigrationTaskRequest = new ImportMigrationTaskRequest()\n            .withMigrationTaskName(firstName + \"_\" + lastName)\n            .withProgressUpdateStream(firstName + \"_\" + lastName + \"_Stream\")\n            .withResourceAttributeList(new ResourceAttribute().withType(\"PersonalData\") /* <=== com.amazonaws.services.migrationhub.model.ResourceAttribute.<init> */ \n                    .withValue(personalData.toString()));\n\n    client.importMigrationTask(importMigrationTaskRequest);\n}\n}"
        },
        {
          "sample" : "withBucketName(\"my-outposts-bucket\")",
          "lineNumber" : 22,
          "columnNumber" : 45,
          "fileName" : "/app/code/s3Outpost.java",
          "excerpt" : "\n        // Set the endpoint for the client\n        client.setEndpoint(endpoint);\n\n        // Create a PutObjectRequest to upload a file to the S3 Outposts bucket\n        PutObjectRequest putObjectRequest = new PutObjectRequest() /* <=== com.amazonaws.services.s3outposts.model.PutObjectRequest.withBucketName */ \n                .withBucketName(\"my-outposts-bucket\")\n                .withKey(\"my-file.txt\")\n                .withFile(new File(\"path/to/my-file.txt\"));\n\n        // Upload the file to the S3 Outposts bucket"
        },
        {
          "sample" : "new PutParameterRequest()",
          "lineNumber" : 9,
          "columnNumber" : -1,
          "fileName" : "/app/code/simpleSystemManagement.java",
          "excerpt" : "\npublic class AWSSSMUtil {\n  public static void AWSSSMFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    AWSSimpleSystemsManagement ssmClient = AWSSimpleSystemsManagementClientBuilder.defaultClient();\n    String parameterName = \"/personalData/firstName\";\n    PutParameterRequest request = new PutParameterRequest().withName(parameterName).withValue(firstName).withType(\"String\"); /* <=== com.amazonaws.services.simplesystemsmanagement.model.PutParameterRequest.<init> */ \n    ssmClient.putParameter(request);\n    \n    parameterName = \"/personalData/lastName\";\n    request = new PutParameterRequest().withName(parameterName).withValue(lastName).withType(\"String\");\n    ssmClient.putParameter(request);"
        },
        {
          "sample" : "setApplicationName(environmentName)",
          "lineNumber" : 26,
          "columnNumber" : 9,
          "fileName" : "/app/code/elasticbeanstalk.java",
          "excerpt" : "        // e.g. storing it in an environment variable, creating an environment, etc.\n    }\n\n    public void createEnvironment(String environmentName) {\n        CreateEnvironmentRequest createEnvironmentRequest = new CreateEnvironmentRequest();\n        createEnvironmentRequest.setApplicationName(environmentName); /* <=== com.amazonaws.services.elasticbeanstalk.model.CreateEnvironmentRequest.setApplicationName */ \n        createEnvironmentRequest.setEnvironmentName(environmentName);\n\n        Map<String, String> environmentVariables = new HashMap<>();\n        environmentVariables.put(\"PERSONAL_DATA\", personalData);\n        createEnvironmentRequest.setEnvironmentVariables(environmentVariables);"
        },
        {
          "sample" : "createPipeline(createPipelineRequest)",
          "lineNumber" : 19,
          "columnNumber" : 53,
          "fileName" : "/app/code/dataPipeline.java",
          "excerpt" : "        // Create the pipeline\n        CreatePipelineRequest createPipelineRequest = new CreatePipelineRequest()\n                .withName(pipelineName)\n                .withDescription(pipelineDescription)\n                .withUniqueId(pipelineUniqueId);\n        CreatePipelineResult createPipelineResult = dataPipelineClient.createPipeline(createPipelineRequest); /* <=== com.amazonaws.services.datapipeline.DataPipelineClient.createPipeline */ \n        System.out.println(\"Pipeline created with ID: \" + createPipelineResult.getPipelineId());\n\n        // Add the logic to process personal data\n        // ...\n"
        },
        {
          "sample" : "new ListTablesRequest()",
          "lineNumber" : 16,
          "columnNumber" : -1,
          "fileName" : "/app/code/finspacedata.java",
          "excerpt" : "        client.setEndpoint(\"finspacedata.us-west-2.amazonaws.com\");\n        client.setRegion(Region.getRegion(Regions.US_WEST_2));\n        client.setAWSCredentials(new BasicAWSCredentials(\"accessKey\", \"secretKey\"));\n\n        // Create a ListTablesRequest object\n        ListTablesRequest request = new ListTablesRequest(); /* <=== com.amazonaws.services.finspacedata.model.ListTablesRequest.<init> */ \n        request.setDatasetName(\"myDataset\");\n\n        // Send the request and get the result\n        ListTablesResult result = client.listTables(request);\n"
        },
        {
          "sample" : "standard()",
          "lineNumber" : 12,
          "columnNumber" : 39,
          "fileName" : "/app/code/kinesis.java",
          "excerpt" : "\n    private static final String STREAM_NAME = \"your-stream-name\";\n    private static final String REGION = \"your-region\";\n\n    public static void main(String[] args) {\n        AmazonKinesis kinesisClient = AmazonKinesisClientBuilder.standard() /* <=== com.amazonaws.services.kinesis.AmazonKinesisClientBuilder.standard */ \n                                        .withRegion(REGION)\n                                        .build();\n\n        byte[] data = \"your-data\".getBytes();\n        PutRecordRequest putRecordRequest = new PutRecordRequest()"
        },
        {
          "sample" : "new DataSetEntry()",
          "lineNumber" : 33,
          "columnNumber" : -1,
          "fileName" : "/app/code/dataExchange.java",
          "excerpt" : "        // Prepare the asset\n        List<DataSetEntry> entries = new ArrayList<>();\n        entries.add(new DataSetEntry().withEntryName(\"firstName\").withContent(firstName));\n        entries.add(new DataSetEntry().withEntryName(\"lastName\").withContent(lastName));\n        entries.add(new DataSetEntry().withEntryName(\"phoneNumber\").withContent(phoneNumber));\n        entries.add(new DataSetEntry().withEntryName(\"dob\").withContent(dob)); /* <=== com.amazonaws.services.dataexchange.model.DataSetEntry.<init> */ \n\n        // Import the asset\n        ImportAssetFromSignedUrlRequest importAssetRequest = new ImportAssetFromSignedUrlRequest()\n                .withDataSetId(dataSetId)\n                .withRevisionId(revisionId)"
        },
        {
          "sample" : "putLogEvents(new PutLogEventsRequest(logGroupName, logStreamName, logEvents))",
          "lineNumber" : 35,
          "columnNumber" : 9,
          "fileName" : "/app/code/logs.java",
          "excerpt" : "                .withMessage(data)\n                .withTimestamp(System.currentTimeMillis());\n        }).collect(Collectors.toList());\n        \n        // Put the CloudWatch Logs events\n        cloudWatchLogsClient.putLogEvents(new PutLogEventsRequest(logGroupName, logStreamName, logEvents)); /* <=== com.amazonaws.services.logs.AWSLogs.putLogEvents */ \n    }\n}\n"
        },
        {
          "sample" : "new TagWorkspaceRequest()",
          "lineNumber" : 34,
          "columnNumber" : -1,
          "fileName" : "/app/code/workspaces.java",
          "excerpt" : "    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags); /* <=== com.amazonaws.services.workspaces.model.TagWorkspaceRequest.<init> */ \n    workspacesClient.tagWorkspace(tagWorkspaceRequest);\n\n    System.out.println(\"Personal data saved successfully to workspace with ID: \" + workspaceId);\n  }\n"
        },
        {
          "sample" : "withTunnelId(tunnelId)",
          "lineNumber" : 31,
          "columnNumber" : 66,
          "fileName" : "/app/code/iotsecuretunneling.java",
          "excerpt" : "        for (TunnelSummary tunnelSummary : listTunnelsResult.getTunnelSummaries()) {\n            System.out.println(tunnelSummary.getTunnelId() + \": \" + tunnelSummary.getDescription());\n        }\n\n        // Close the secure tunnel\n        CloseTunnelResult closeTunnelResult = client.closeTunnel(new CloseTunnelRequest().withTunnelId(tunnelId)); /* <=== com.amazonaws.services.iotsecuretunneling.model.CloseTunnelRequest.withTunnelId */ \n    }\n}\n"
        },
        {
          "sample" : "setDataSources(dataSources)",
          "lineNumber" : 40,
          "columnNumber" : 9,
          "fileName" : "/app/code/amplify.java",
          "excerpt" : "                .withBackendEnvironmentName(\"prod\")\n                .withApiName(AMPLIFY_BACKEND_API_NAME);\n\n        List<String> dataSources = new ArrayList<>();\n        dataSources.add(\"PERSONAL_DATA\");\n        updateBackendAPIRequest.setDataSources(dataSources); /* <=== com.amazonaws.services.amplify.model.UpdateBackendAPIRequest.setDataSources */ \n\n        try {\n            UpdateBackendAPIResponse updateBackendAPIResponse = amplifyClient.updateBackendAPI(updateBackendAPIRequest);\n            System.out.println(\"Backend API updated to process personal data.\");\n        } catch (Exception e) {"
        },
        {
          "sample" : "startExecution(startExecutionRequest)",
          "lineNumber" : 32,
          "columnNumber" : 53,
          "fileName" : "/app/code/stepFunction.java",
          "excerpt" : "        StartExecutionRequest startExecutionRequest = new StartExecutionRequest()\n                .withStateMachineArn(STATE_MACHINE_ARN)\n                .withInput(input);\n\n        // Start the execution\n        StartExecutionResult startExecutionResult = stepFunctions.startExecution(startExecutionRequest); /* <=== com.amazonaws.services.stepfunctions.AWSStepFunctions.startExecution */ \n        System.out.println(\"Execution ARN: \" + startExecutionResult.getExecutionArn());\n    }\n}\n"
        },
        {
          "sample" : "setName(\"PersonalDataEvent\")",
          "lineNumber" : 10,
          "columnNumber" : 9,
          "fileName" : "/app/code/devOpsGuru.java",
          "excerpt" : "public class AWSDevopsGuruUtil {\n    \n    public static void AWSDevOpsGuruFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        DevOpsGuruClient devOpsGuruClient = DevOpsGuruClient.builder().build();\n        Event event = new Event();\n        event.setName(\"PersonalDataEvent\"); /* <=== com.amazonaws.services.devopsguru.model.Event.setName */ \n        event.addDetail(\"FirstName\", firstName);\n        event.addDetail(\"LastName\", lastName);\n        event.addDetail(\"PhoneNumber\", phoneNumber);\n        event.addDetail(\"DOB\", DOB);\n        PutEventRequest request = new PutEventRequest().withEvent(event);"
        },
        {
          "sample" : "getDataSourceArn()",
          "lineNumber" : 47,
          "columnNumber" : 26,
          "fileName" : "/app/code/pipes.java",
          "excerpt" : "\ntry {\n  CreateDataSourceResult createDataSourceResult = client.createDataSource(new CreateDataSourceRequest()\n    .withDataSource(personalDataSource));\n\n  String dataSourceArn = createDataSourceResult.getDataSourceArn(); /* <=== com.amazonaws.services.pipes.model.CreateDataSourceResult.getDataSourceArn */ \n\n  UpdateDataSourceResult updateDataSourceResult = client.updateDataSource(new UpdateDataSourceRequest()\n    .withDataSourceArn(dataSourceArn)\n    .withDataSource(personalDataSource));\n"
        },
        {
          "sample" : "withEntries(entries)",
          "lineNumber" : 30,
          "columnNumber" : 36,
          "fileName" : "/app/code/cloudwatchEvents.java",
          "excerpt" : "        // format the personal data as desired\n        entry.setDetail(personalData.toString());\n        entry.setDetailType(\"personalData\");\n        entries.add(entry);\n\n        PutEventsRequest request = new PutEventsRequest().withEntries(entries); /* <=== com.amazonaws.services.cloudwatchevents.model.PutEventsRequest.withEntries */ \n\n        // Send the data to CloudWatch Events\n        PutEventsResult result = cloudWatchEventsClient.putEvents(request);\n\n        // Handle the response from CloudWatch Events"
        },
        {
          "sample" : "new CreateReportDefinitionRequest()",
          "lineNumber" : 14,
          "columnNumber" : -1,
          "fileName" : "/app/code/costAndUsageReport.java",
          "excerpt" : "    private static final String S3_BUCKET = \"personal-data-bucket\";\n\n    public static void main(String[] args) {\n        AWSCostAndUsageReport costAndUsageReportClient = AWSCostAndUsageReportClientBuilder.defaultClient();\n\n        CreateReportDefinitionRequest createReportDefinitionRequest = new CreateReportDefinitionRequest() /* <=== com.amazonaws.services.costandusagereport.model.CreateReportDefinitionRequest.<init> */ \n                .withReportName(REPORT_NAME)\n                .withS3Bucket(S3_BUCKET);\n\n        CreateReportDefinitionResult createReportDefinitionResult = costAndUsageReportClient.createReportDefinition(createReportDefinitionRequest);\n"
        },
        {
          "sample" : "new CreateUserRequest()",
          "lineNumber" : 7,
          "columnNumber" : -1,
          "fileName" : "/app/code/workspacesweb.java",
          "excerpt" : "import com.amazonaws.services.workspacesweb.model.CreateUserRequest;\n\npublic class AWSWorkspaceswebUtil {\n    public static void AWSWorkspaceswebFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AWSWorkspacesWeb workspacesWebClient = AWSWorkspacesWebClientBuilder.standard().build();\n        CreateUserRequest request = new CreateUserRequest() /* <=== com.amazonaws.services.workspacesweb.model.CreateUserRequest.<init> */ \n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber)\n                .withBirthDate(DOB);\n        workspacesWebClient.createUser(request);"
        },
        {
          "sample" : "new AttributeType()",
          "lineNumber" : 27,
          "columnNumber" : -1,
          "fileName" : "/app/code/cognitoIDP.java",
          "excerpt" : "        // Define the user's personal data\n        List<AttributeType> userAttributes = new ArrayList<>();\n        userAttributes.add(new AttributeType().withName(\"given_name\").withValue(firstName));\n        userAttributes.add(new AttributeType().withName(\"family_name\").withValue(lastName));\n        userAttributes.add(new AttributeType().withName(\"phone_number\").withValue(phoneNumber));\n        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob)); /* <=== com.amazonaws.services.cognitoidp.model.AttributeType.<init> */ \n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest()\n                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName)"
        },
        {
          "sample" : "new StartChangeSetRequest()",
          "lineNumber" : 17,
          "columnNumber" : -1,
          "fileName" : "/app/code/marketplacecatalog.java",
          "excerpt" : "  }\n\n  public void processPersonalData(String personalData) {\n    String changeSetName = \"personal_data_changeset\";\n\n    StartChangeSetRequest startChangeSetRequest = new StartChangeSetRequest(); /* <=== com.amazonaws.services.marketplacecatalog.model.StartChangeSetRequest.<init> */ \n    startChangeSetRequest.setChangeSetName(changeSetName);\n    startChangeSetRequest.setCatalog(personalData);\n\n    StartChangeSetResult startChangeSetResult = catalogClient.startChangeSet(startChangeSetRequest);\n    System.out.println(\"Data processing result: \" + startChangeSetResult.getChangeSetId());"
        },
        {
          "sample" : "withIndexId(\"your-index-id\")",
          "lineNumber" : 37,
          "columnNumber" : 43,
          "fileName" : "/app/code/kendra.java",
          "excerpt" : "                    .withValue(\"value2\")\n            );\n        documents.add(document);\n\n        // Create a request to index the documents\n        BatchPutDocumentRequest request = new BatchPutDocumentRequest() /* <=== com.amazonaws.services.kendra.model.BatchPutDocumentRequest.withIndexId */ \n            .withIndexId(\"your-index-id\")\n            .withRoleArn(\"your-role-arn\")\n            .withDocuments(documents);\n\n        // Send the request to index the documents"
        },
        {
          "sample" : "new PutRecordInput()",
          "lineNumber" : 8,
          "columnNumber" : -1,
          "fileName" : "/app/code/gamelift.java",
          "excerpt" : "\npublic class AWSGameliftUtil {\n\n    public void AWSGameliftFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        AmazonGameLiftClientBuilder builder = AmazonGameLiftClientBuilder.standard();\n        PutRecordInput putRecordInput = new PutRecordInput() /* <=== com.amazonaws.services.gamelift.model.PutRecordInput.<init> */ \n                .withData(String.format(\"First Name: %s, Last Name: %s, Phone Number: %s, DOB: %s\",\n                        firstName, lastName, phoneNumber, dob).getBytes())\n                .withStreamName(\"AWS-Gamelift-Stream\");\n        builder.build().putRecord(putRecordInput);\n    }"
        },
        {
          "sample" : "new PutEventsRequest()",
          "lineNumber" : 36,
          "columnNumber" : -1,
          "fileName" : "/app/code/eventBridge.java",
          "excerpt" : "        // Create a list of events to send\n        List<com.amazonaws.services.eventbridge.model.Event> events = new ArrayList<>();\n        events.add(event);\n\n        // Create a PutEventsRequest to send to EventBridge\n        PutEventsRequest request = new PutEventsRequest() /* <=== com.amazonaws.services.eventbridge.model.PutEventsRequest.<init> */ \n                .withEntries(\n                        new com.amazonaws.services.eventbridge.model.PutEventsRequestEntry()\n                                .withEventBusName(\"default\")\n                                .withEvents(events)\n                );"
        },
        {
          "sample" : "setOneTime(ClassificationTypeUpdate.OneTime.FALSE)",
          "lineNumber" : 39,
          "columnNumber" : 17,
          "fileName" : "/app/code/macie2.java",
          "excerpt" : "            if (customDataIdentifier.getName().equals(\"PersonalDataIdentifier\")) {\n                // Update the custom data identifier to process personal data\n                UpdateCustomDataIdentifierRequest updateCustomDataIdentifierRequest = new UpdateCustomDataIdentifierRequest();\n                updateCustomDataIdentifierRequest.setId(customDataIdentifier.getId());\n                ClassificationTypeUpdate classificationTypeUpdate = new ClassificationTypeUpdate();\n                classificationTypeUpdate.setOneTime(ClassificationTypeUpdate.OneTime.FALSE); /* <=== com.amazonaws.services.macie2.model.ClassificationTypeUpdate.setOneTime */ \n                updateCustomDataIdentifierRequest.setClassificationTypes(classificationTypeUpdate);\n                macie2Client.updateCustomDataIdentifier(updateCustomDataIdentifierRequest);\n                break;\n            }\n        }"
        },
        {
          "sample" : "getChannels()",
          "lineNumber" : 38,
          "columnNumber" : 36,
          "fileName" : "/app/code/ivs.java",
          "excerpt" : "        do {\n            BatchGetChannelRequest batchGetChannelRequest = new BatchGetChannelRequest();\n            batchGetChannelRequest.setArns(channelArns);\n            batchGetChannelRequest.setNextToken(nextToken);\n            BatchGetChannelResult batchGetChannelResult = ivsClient.batchGetChannel(batchGetChannelRequest);\n            for (Channel channel : batchGetChannelResult.getChannels()) { /* <=== com.amazonaws.services.ivs.model.BatchGetChannelResult.getChannels */ \n                // Check if the channel contains personal data\n                if (channel.getName().contains(\"PersonalData\")) {\n                    // Process the personal data in the channel\n                    // Add your code here to process the personal data\n                    break;"
        },
        {
          "sample" : "putObject(request)",
          "lineNumber" : 41,
          "columnNumber" : 9,
          "fileName" : "/app/code/s3.java",
          "excerpt" : "        // Create an S3 put object request\n        PutObjectRequest request = new PutObjectRequest(bucketName, \"path/in/bucket/file.txt\", file)\n                .withMetadata(metadata);\n\n        // Upload the file to S3\n        s3Client.putObject(request); /* <=== com.amazonaws.services.s3.AmazonS3.putObject */ \n    }\n}"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.IAM",
      "occurrences" : [
        {
          "sample" : "withUserName(userName)",
          "lineNumber" : 14,
          "columnNumber" : 34,
          "fileName" : "/app/code/iam.java",
          "excerpt" : "    public IAMProcessor() {\n        iamClient = AmazonIdentityManagementClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(String userName) {\n        GetUserRequest request = new GetUserRequest().withUserName(userName); /* <=== com.amazonaws.services.iam.model.GetUserRequest.withUserName */ \n        GetUserResult result = iamClient.getUser(request);\n\n        // Perform processing on the user information obtained from the IAM service\n        // Ensure to handle any exceptions and follow best practices for secure processing of personal data\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Lightsail",
      "occurrences" : [
        {
          "sample" : "defaultClient()",
          "lineNumber" : 9,
          "columnNumber" : 43,
          "fileName" : "/app/code/lightsail.java",
          "excerpt" : "import com.amazonaws.services.lightsail.model.GetInstanceResult;\n\npublic class PersonalDataProcessor {\n\n    public static void main(String[] args) {\n        AmazonLightsail lightsailClient = AmazonLightsailClientBuilder.defaultClient(); /* <=== com.amazonaws.services.lightsail.AmazonLightsailClientBuilder.defaultClient */ \n\n        GetInstanceRequest getInstanceRequest = new GetInstanceRequest()\n            .withInstanceName(\"exampleInstanceName\");\n\n        GetInstanceResult getInstanceResult = lightsailClient.getInstance(getInstanceRequest);"
        }
      ]
    },
    {
      "sinkId" : "Storages.SpringFramework.Jdbc.Read",
      "occurrences" : [
        {
          "sample" : "statement.executeQuery()",
          "lineNumber" : 61,
          "columnNumber" : 32,
          "fileName" : "/app/code/redshift.java",
          "excerpt" : "                establishConnection();\n            }\n\n            String sql = \"SELECT * FROM personal_data\";\n            PreparedStatement statement = conn.prepareStatement(sql);\n            ResultSet result = statement.executeQuery(); /* <=== java.sql.PreparedStatement.executeQuery */ \n            while (result.next()) {\n                String firstName = result.getString(\"first_name\");\n                String lastName = result.getString(\"last_name\");\n                int age = result.getInt(\"age\");\n                String address = result.getString(\"address\");"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Batch",
      "occurrences" : [
        {
          "sample" : "withJobName(JOB_NAME)",
          "lineNumber" : 14,
          "columnNumber" : 45,
          "fileName" : "/app/code/batch.java",
          "excerpt" : "    private static final String JOB_DEFINITION = \"personal-data-definition\";\n\n    public static void main(String[] args) {\n        AmazonBatch batchClient = AmazonBatchClientBuilder.defaultClient();\n\n        SubmitJobRequest submitJobRequest = new SubmitJobRequest() /* <=== com.amazonaws.services.batch.model.SubmitJobRequest.withJobName */ \n                .withJobName(JOB_NAME)\n                .withJobQueue(JOB_QUEUE)\n                .withJobDefinition(JOB_DEFINITION);\n\n        batchClient.submitJob(submitJobRequest);"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Pipes",
      "occurrences" : [
        {
          "sample" : "setDescription(\"Contains personal data of individuals\")",
          "lineNumber" : 18,
          "columnNumber" : 1,
          "fileName" : "/app/code/pipes.java",
          "excerpt" : "public static void processPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nAmazonPipe client = AmazonPipeClientBuilder.standard().build();\n\nDataSource personalDataSource = new DataSource();\npersonalDataSource.setName(\"Personal Data\");\npersonalDataSource.setDescription(\"Contains personal data of individuals\"); /* <=== com.amazonaws.services.pipes.model.DataSource.setDescription */ \n\nList<DataSource.Field> fields = new ArrayList<>();\nDataSource.Field firstNameField = new DataSource.Field();\nfirstNameField.setName(\"firstName\");\nfirstNameField.setType(\"string\");"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Kendra",
      "occurrences" : [
        {
          "sample" : "new Document()",
          "lineNumber" : 22,
          "columnNumber" : -1,
          "fileName" : "/app/code/kendra.java",
          "excerpt" : "\n        // Create a list of documents to index\n        List<Document> documents = new ArrayList<Document>();\n\n        // Add a document to the list\n        Document document = new Document() /* <=== com.amazonaws.services.kendra.model.Document.<init> */ \n            .withId(\"1\")\n            .withTitle(\"My first document\")\n            .withContent(\"This is the content of my first document.\")\n            .withAttributes(\n                new DocumentAttributeValue()"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.SecurityLake",
      "occurrences" : [
        {
          "sample" : "setData(ByteBuffer.wrap(personalData))",
          "lineNumber" : 16,
          "columnNumber" : 5,
          "fileName" : "/app/code/securitylake.java",
          "excerpt" : "    securityLakeClient = AWSSecurityLakeClientBuilder.defaultClient();\n  }\n\n  public void processPersonalData(byte[] personalData) {\n    PutDataRequest putDataRequest = new PutDataRequest();\n    putDataRequest.setData(ByteBuffer.wrap(personalData)); /* <=== com.amazonaws.services.securitylake.model.PutDataRequest.setData */ \n\n    PutDataResult putDataResult = securityLakeClient.putData(putDataRequest);\n    System.out.println(\"Data processing result: \" + putDataResult.getSucceeded());\n  }\n}"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.AugmentedAI",
      "occurrences" : [
        {
          "sample" : "invokeEndpoint(invokeEndpointRequest)",
          "lineNumber" : 21,
          "columnNumber" : 53,
          "fileName" : "/app/code/augmentedairuntime.java",
          "excerpt" : "        \n        // Create the request to invoke the endpoint\n        InvokeEndpointRequest invokeEndpointRequest = new InvokeEndpointRequest().withEndpointName(endpointArn).withBody(inputData);\n        \n        // Invoke the endpoint\n        InvokeEndpointResult invokeEndpointResult = aiRuntimeClient.invokeEndpoint(invokeEndpointRequest); /* <=== com.amazonaws.services.augmentedairuntime.AmazonAugmentedAIRuntime.invokeEndpoint */ \n        \n        // Get the response\n        String response = new String(invokeEndpointResult.getBody().array());\n        \n        // Print the response"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Timestream",
      "occurrences" : [
        {
          "sample" : "new CreateDatabaseRequest()",
          "lineNumber" : 14,
          "columnNumber" : -1,
          "fileName" : "/app/code/timestream.java",
          "excerpt" : "    public static void main(String[] args) {\n        // Build the client\n        final AmazonTimestreamWrite client = AmazonTimestreamWriteClientBuilder.defaultClient();\n        \n        // Create a database\n        CreateDatabaseRequest createDatabaseRequest = new CreateDatabaseRequest() /* <=== com.amazonaws.services.timestreamwrite.model.CreateDatabaseRequest.<init> */ \n            .withDatabaseName(\"my_database\");\n        client.createDatabase(createDatabaseRequest);\n        \n        // Create a table\n        CreateTableRequest createTableRequest = new CreateTableRequest()"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Workspaces",
      "occurrences" : [
        {
          "sample" : "withKey(\"dob\")",
          "lineNumber" : 32,
          "columnNumber" : 14,
          "fileName" : "/app/code/workspaces.java",
          "excerpt" : "\n    List<Tag> tags = new ArrayList<>();\n    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob)); /* <=== com.amazonaws.services.workspaces.model.Tag.withKey */ \n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags);\n    workspacesClient.tagWorkspace(tagWorkspaceRequest);\n\n    System.out.println(\"Personal data saved successfully to workspace with ID: \" + workspaceId);"
        },
        {
          "sample" : "createUser(request)",
          "lineNumber" : 12,
          "columnNumber" : 9,
          "fileName" : "/app/code/workspacesweb.java",
          "excerpt" : "        CreateUserRequest request = new CreateUserRequest()\n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber)\n                .withBirthDate(DOB);\n        workspacesWebClient.createUser(request); /* <=== com.amazonaws.services.workspacesweb.AWSWorkspacesWeb.createUser */ \n    }\n}\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.CloudWatchEvents",
      "occurrences" : [
        {
          "sample" : "new PutEventsRequestEntry()",
          "lineNumber" : 24,
          "columnNumber" : -1,
          "fileName" : "/app/code/cloudwatchEvents.java",
          "excerpt" : "        // Validate and sanitize the personal data\n        // ...\n\n        // Prepare the data to send to CloudWatch Events\n        ArrayList<PutEventsRequestEntry> entries = new ArrayList<>();\n        PutEventsRequestEntry entry = new PutEventsRequestEntry(); /* <=== com.amazonaws.services.cloudwatchevents.model.PutEventsRequestEntry.<init> */ \n        // format the personal data as desired\n        entry.setDetail(personalData.toString());\n        entry.setDetailType(\"personalData\");\n        entries.add(entry);\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.OpsWorks",
      "occurrences" : [
        {
          "sample" : "describeStackSummaries(describeStackSummariesRequest)",
          "lineNumber" : 13,
          "columnNumber" : 69,
          "fileName" : "/app/code/opsworks.java",
          "excerpt" : "    public static void main(String[] args) {\n        AWSOpsWorks opsWorksClient = AWSOpsWorksClientBuilder.defaultClient();\n\n        DescribeStackSummariesRequest describeStackSummariesRequest = new DescribeStackSummariesRequest();\n\n        DescribeStackSummariesResult describeStackSummariesResult = opsWorksClient.describeStackSummaries(describeStackSummariesRequest); /* <=== com.amazonaws.services.opsworks.AWSOpsWorks.describeStackSummaries */ \n\n        System.out.println(\"Number of Stacks: \" + describeStackSummariesResult.getStackSummaries().size());\n    }\n}\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.CloudTrail",
      "occurrences" : [
        {
          "sample" : "new EventSelector()",
          "lineNumber" : 20,
          "columnNumber" : -1,
          "fileName" : "/app/code/cloudtrail.java",
          "excerpt" : "    public void processPersonalData(Map<String,String> personalData) {\n        DataResource dataResource = new DataResource()\n            .withType(\"AWS::S3::Object\")\n            .withValues(Arrays.asList(\"arn:aws:s3:::personal-data-bucket/*\"));\n\n        EventSelector eventSelector = new EventSelector() /* <=== com.amazonaws.services.cloudtrail.model.EventSelector.<init> */ \n            .withReadWriteType(\"All\")\n            .withIncludeManagementEvents(false)\n            .withDataResources(Arrays.asList(dataResource));\n\n        PutEventSelectorsRequest request = new PutEventSelectorsRequest()"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.CodeGuruReviewer",
      "occurrences" : [
        {
          "sample" : "standard()",
          "lineNumber" : 13,
          "columnNumber" : 34,
          "fileName" : "/app/code/codeguruReviewer.java",
          "excerpt" : "public class CodeGuruReviewerDataProcessor {\n\n    private AmazonCodeGuruReviewer codeGuruReviewerClient;\n\n    public CodeGuruReviewerDataProcessor() {\n        codeGuruReviewerClient = AmazonCodeGuruReviewerClientBuilder.standard().build(); /* <=== com.amazonaws.services.codegurureviewer.AmazonCodeGuruReviewerClientBuilder.standard */ \n    }\n\n    public void processPersonalData(Map<String, String> personalData) {\n        // Validate and sanitize the personal data\n        // ..."
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Personalize",
      "occurrences" : [
        {
          "sample" : "withDatasetType(\"USER\")",
          "lineNumber" : 13,
          "columnNumber" : 40,
          "fileName" : "/app/code/personalize.java",
          "excerpt" : "    public static void main(String[] args) {\n        // Build the Amazon Personalize client\n        AmazonPersonalize personalize = AmazonPersonalizeClientBuilder.defaultClient();\n\n        // Create a new dataset\n        CreateDatasetRequest request = new CreateDatasetRequest() /* <=== com.amazonaws.services.personalize.model.CreateDatasetRequest.withDatasetType */ \n            .withDatasetType(\"USER\")\n            .withSchemaArn(\"arn:aws:personalize:us-west-2:123456789012:schema/MovieLens\");\n        CreateDatasetResult result = personalize.createDataset(request);\n\n        // Print the dataset ARN"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.DataPipeline",
      "occurrences" : [
        {
          "sample" : "getPipelineId()",
          "lineNumber" : 20,
          "columnNumber" : 59,
          "fileName" : "/app/code/dataPipeline.java",
          "excerpt" : "        CreatePipelineRequest createPipelineRequest = new CreatePipelineRequest()\n                .withName(pipelineName)\n                .withDescription(pipelineDescription)\n                .withUniqueId(pipelineUniqueId);\n        CreatePipelineResult createPipelineResult = dataPipelineClient.createPipeline(createPipelineRequest);\n        System.out.println(\"Pipeline created with ID: \" + createPipelineResult.getPipelineId()); /* <=== com.amazonaws.services.datapipeline.model.CreatePipelineResult.getPipelineId */ \n\n        // Add the logic to process personal data\n        // ...\n\n        // Clean up the pipeline when done"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.AppRunner",
      "occurrences" : [
        {
          "sample" : "new CreateAppRequest()",
          "lineNumber" : 14,
          "columnNumber" : -1,
          "fileName" : "/app/code/appRunner.java",
          "excerpt" : "  public PersonalDataProcessor() {\n    this.appRunner = AWSAppRunner.builder().build();\n  }\n\n  public void processData(String personalData) {\n    CreateAppRequest request = new CreateAppRequest() /* <=== com.amazonaws.services.apprunner.model.CreateAppRequest.<init> */ \n      .withName(\"PersonalDataApp\")\n      .withSourceCodeUrl(personalData);\n\n    CreateAppResult result = appRunner.createApp(request);\n    System.out.println(\"App created: \" + result.getApp().getName());"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.CognitoIDP",
      "occurrences" : [
        {
          "sample" : "adminCreateUser(createUserRequest)",
          "lineNumber" : 36,
          "columnNumber" : 50,
          "fileName" : "/app/code/cognitoIDP.java",
          "excerpt" : "                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName)\n                .withUserAttributes(userAttributes);\n\n        // Send the request to create the user\n        AdminCreateUserResult createUserResult = cognitoIdpClient.adminCreateUser(createUserRequest); /* <=== com.amazonaws.services.cognitoidp.AWSCognitoIdentityProvider.adminCreateUser */ \n\n        // Get the user's unique identifier\n        String userId = createUserResult.getUser().getUsername();\n\n        System.out.println(\"Successfully created user with ID: \" + userId);"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Elasticsearch",
      "occurrences" : [
        {
          "sample" : "new DescribeElasticsearchDomainRequest()",
          "lineNumber" : 18,
          "columnNumber" : -1,
          "fileName" : "/app/code/elasticSearch.java",
          "excerpt" : "        esClient = new AmazonElasticsearchClient(credentials);\n        esClient.setRegion(region);\n    }\n\n    public void describeElasticSearchDomain() {\n        DescribeElasticsearchDomainRequest request = new DescribeElasticsearchDomainRequest().withDomainName(domainName); /* <=== com.amazonaws.services.elasticsearch.model.DescribeElasticsearchDomainRequest.<init> */ \n        DescribeElasticsearchDomainResult result = esClient.describeElasticsearchDomain(request);\n        System.out.println(result);\n    }\n}\n"
        }
      ]
    },
    {
      "sinkId" : "Storages.AmazonTimestream.Write",
      "occurrences" : [
        {
          "sample" : "new CreateDatabaseRequest()",
          "lineNumber" : 14,
          "columnNumber" : -1,
          "fileName" : "/app/code/timestream.java",
          "excerpt" : "    public static void main(String[] args) {\n        // Build the client\n        final AmazonTimestreamWrite client = AmazonTimestreamWriteClientBuilder.defaultClient();\n        \n        // Create a database\n        CreateDatabaseRequest createDatabaseRequest = new CreateDatabaseRequest() /* <=== com.amazonaws.services.timestreamwrite.model.CreateDatabaseRequest.<init> */ \n            .withDatabaseName(\"my_database\");\n        client.createDatabase(createDatabaseRequest);\n        \n        // Create a table\n        CreateTableRequest createTableRequest = new CreateTableRequest()"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.MWAA",
      "occurrences" : [
        {
          "sample" : "defaultClient()",
          "lineNumber" : 12,
          "columnNumber" : 18,
          "fileName" : "/app/code/mwaa.java",
          "excerpt" : "public class MWAAProcessor {\n  private MWAA mwaaClient;\n  private String mwaaEnvironmentName = \"personalDataEnvironment\";\n\n  public MWAAProcessor() {\n    mwaaClient = MWAAClientBuilder.defaultClient(); /* <=== com.amazonaws.services.mwaa.MWAAClientBuilder.defaultClient */ \n  }\n\n  public void processPersonalData(List<PersonalDataRecord> personalDataRecords) {\n    List<CreateEnvironmentInput> createEnvironmentInputs = new ArrayList<>();\n    for (PersonalDataRecord personalDataRecord : personalDataRecords) {"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.MachineLearning",
      "occurrences" : [
        {
          "sample" : "standard()",
          "lineNumber" : 12,
          "columnNumber" : 54,
          "fileName" : "/app/code/ml.java",
          "excerpt" : "\n    private static final String MODEL_ID = \"MODEL_ID\";\n    private static final String ML_ENDPOINT = \"ML_ENDPOINT\";\n\n    public List<String> processPersonalData(List<String> personalData) {\n        AmazonMachineLearningClientBuilder builder = AmazonMachineLearningClientBuilder.standard(); /* <=== com.amazonaws.services.machinelearning.AmazonMachineLearningClientBuilder.standard */ \n        builder.setEndpointConfiguration(ML_ENDPOINT);\n        com.amazonaws.services.machinelearning.AmazonMachineLearning client = builder.build();\n\n        PredictRequest predictRequest = new PredictRequest()\n                .withMLModelId(MODEL_ID)"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.AppConfig",
      "occurrences" : [
        {
          "sample" : "putConfigurationProfile(putConfigProfileRequest)",
          "lineNumber" : 22,
          "columnNumber" : 64,
          "fileName" : "/app/code/appConfigData.java",
          "excerpt" : "        PutConfigurationProfileRequest putConfigProfileRequest = new PutConfigurationProfileRequest()\n                .withApplicationId(\"app_id\")\n                .withEnvironmentId(\"env_id\")\n                .withName(\"profile_name\")\n                .withContent(personalData);\n        PutConfigurationProfileResult putConfigProfileResult = appConfigClient.putConfigurationProfile(putConfigProfileRequest); /* <=== com.amazonaws.services.appconfig.AmazonAppConfig.putConfigurationProfile */ \n\n        // Get the configuration profile\n        GetConfigurationProfileRequest getConfigProfileRequest = new GetConfigurationProfileRequest()\n                .withApplicationId(\"app_id\")\n                .withEnvironmentId(\"env_id\")"
        }
      ]
    },
    {
      "sinkId" : "Storages.AmazonCognito.Write",
      "occurrences" : [
        {
          "sample" : "standard()",
          "lineNumber" : 18,
          "columnNumber" : 17,
          "fileName" : "/app/code/cognitoIDP.java",
          "excerpt" : "    private static final String REGION = \"your_region\";\n\n    public static void AWSCognitoIDPFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        // Create an instance of the Cognito Identity Provider client\n        AWSCognitoIdentityProvider cognitoIdpClient =\n                AWSCognitoIdentityProviderClientBuilder.standard() /* <=== com.amazonaws.services.cognitoidp.AWSCognitoIdentityProviderClientBuilder.standard */ \n                        .withRegion(REGION)\n                        .build();\n\n        // Define the user's personal data\n        List<AttributeType> userAttributes = new ArrayList<>();"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.ChimeSDKMessaging",
      "occurrences" : [
        {
          "sample" : "sendMessage(messageRequest)",
          "lineNumber" : 20,
          "columnNumber" : 5,
          "fileName" : "/app/code/chimeSdkMessaging.java",
          "excerpt" : "    personalData.put(\"dob\", dob);\n\n    MessageRequest messageRequest = new MessageRequest();\n    messageRequest.setContent(personalData.toString());\n\n    chimeSDKMessagingClient.sendMessage(messageRequest); /* <=== com.amazonaws.services.chimesdkmessaging.AmazonChimeSDKMessaging.sendMessage */ \n  }\n}\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.ApplicationDiscovery",
      "occurrences" : [
        {
          "sample" : "new StartDataCollectionByAgentIdsRequest()",
          "lineNumber" : 13,
          "columnNumber" : -1,
          "fileName" : "/app/code/applicationDiscovery.java",
          "excerpt" : "    public static void main(String[] args) {\n        // Initialize the Amazon AWS Application Discovery client\n        AWSApplicationDiscovery client = AWSApplicationDiscoveryClientBuilder.defaultClient();\n\n        // Start data collection for the personal data processing agent\n        StartDataCollectionByAgentIdsRequest request = new StartDataCollectionByAgentIdsRequest() /* <=== com.amazonaws.services.discovery.model.StartDataCollectionByAgentIdsRequest.<init> */ \n            .withAgentIds(AGENT_ID);\n        StartDataCollectionByAgentIdsResult result = client.startDataCollectionByAgentIds(request);\n\n        // Print the status of the data collection\n        System.out.println(\"Data Collection Status: \" + result.getAgentsConfigurationStatus().get(0).getAgentId());"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.ImportExport",
      "occurrences" : [
        {
          "sample" : "processData(processDataRequest)",
          "lineNumber" : 20,
          "columnNumber" : 45,
          "fileName" : "/app/code/importExport.java",
          "excerpt" : "      // Create a request to process the personal data\n      ProcessDataRequest processDataRequest = new ProcessDataRequest()\n        .withData(personalData);\n      \n      // Call the processData method of the Import/Export client to process the data\n      ProcessDataResult processDataResult = importExportClient.processData(processDataRequest); /* <=== com.amazonaws.services.importexport.ImportExportClient.processData */ \n      \n      System.out.println(\"Personal data processing successful\");\n    } catch (ImportExportException e) {\n      System.err.println(\"Error processing personal data: \" + e.getMessage());\n    }"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.CodePipeline",
      "occurrences" : [
        {
          "sample" : "withJobId(firstName)",
          "lineNumber" : 13,
          "columnNumber" : 46,
          "fileName" : "/app/code/codePipeline.java",
          "excerpt" : "    public AWSCodePipelineUtil(AWSCodePipeline client) {\n        this.client = client;\n    }\n\n    public void AWSCodePipelineFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        PutJobSuccessResultRequest request = new PutJobSuccessResultRequest() /* <=== com.amazonaws.services.codepipeline.model.PutJobSuccessResultRequest.withJobId */ \n            .withJobId(firstName)\n            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.SecurityToken",
      "occurrences" : [
        {
          "sample" : "defaultClient()",
          "lineNumber" : 11,
          "columnNumber" : 45,
          "fileName" : "/app/code/securitytoken.java",
          "excerpt" : "public class PersonalDataProcessor {\n    private static final String ROLE_ARN = \"arn:aws:iam::ACCOUNT_ID:role/ROLE_NAME\";\n    private static final String SESSION_NAME = \"SESSION_NAME\";\n\n    public void processData() {\n        AWSSecurityTokenService stsClient = AWSSecurityTokenServiceClientBuilder.defaultClient(); /* <=== com.amazonaws.services.securitytoken.AWSSecurityTokenServiceClientBuilder.defaultClient */ \n\n        AssumeRoleRequest assumeRoleRequest = new AssumeRoleRequest()\n                .withRoleArn(ROLE_ARN)\n                .withRoleSessionName(SESSION_NAME);\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.IoTRoboRunner",
      "occurrences" : [
        {
          "sample" : "defaultClient()",
          "lineNumber" : 11,
          "columnNumber" : 59,
          "fileName" : "/app/code/iotRoboRunner.java",
          "excerpt" : "import com.amazonaws.services.iotroborunner.model.PutThingShadowRequest;\nimport com.amazonaws.services.iotroborunner.model.PutThingShadowResult;\n\npublic class AWSIoTRoboRunnerUtil {\n\n    private static AWSIoTRoboRunner iotRoboRunnerClient = AWSIoTRoboRunnerClientBuilder.defaultClient(); /* <=== com.amazonaws.services.iotroborunner.AWSIoTRoboRunnerClientBuilder.defaultClient */ \n\n    public static void AWSIoTRoboRunnerFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        Map<String, Object> personalData = new HashMap<>();\n        personalData.put(\"firstName\", firstName);\n        personalData.put(\"lastName\", lastName);"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Macie2",
      "occurrences" : [
        {
          "sample" : "setId(customDataIdentifier.getId())",
          "lineNumber" : 37,
          "columnNumber" : 17,
          "fileName" : "/app/code/macie2.java",
          "excerpt" : "        for (CustomDataIdentifierUpdate customDataIdentifier : listCustomDataIdentifiersResult.getCustomDataIdentifiers()) {\n            // Check if the custom data identifier is for personal data\n            if (customDataIdentifier.getName().equals(\"PersonalDataIdentifier\")) {\n                // Update the custom data identifier to process personal data\n                UpdateCustomDataIdentifierRequest updateCustomDataIdentifierRequest = new UpdateCustomDataIdentifierRequest();\n                updateCustomDataIdentifierRequest.setId(customDataIdentifier.getId()); /* <=== com.amazonaws.services.macie2.model.UpdateCustomDataIdentifierRequest.setId */ \n                ClassificationTypeUpdate classificationTypeUpdate = new ClassificationTypeUpdate();\n                classificationTypeUpdate.setOneTime(ClassificationTypeUpdate.OneTime.FALSE);\n                updateCustomDataIdentifierRequest.setClassificationTypes(classificationTypeUpdate);\n                macie2Client.updateCustomDataIdentifier(updateCustomDataIdentifierRequest);\n                break;"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.SnowDeviceManagement",
      "occurrences" : [
        {
          "sample" : "defaultClient()",
          "lineNumber" : 12,
          "columnNumber" : 57,
          "fileName" : "/app/code/snowdevicemanagement.java",
          "excerpt" : "import java.util.List;\n\npublic class SnowballJobProcessor {\n    public static void main(String[] args) {\n        // Initialize the Snowball Device Management client\n        AmazonSnowballDeviceManagement snowballClient = AmazonSnowballDeviceManagementClientBuilder.defaultClient(); /* <=== com.amazonaws.services.snowdevicemanagement.AmazonSnowballDeviceManagementClientBuilder.defaultClient */ \n\n        // Define the request to list all jobs\n        ListJobsRequest listJobsRequest = new ListJobsRequest();\n\n        // Process the request and retrieve the list of Snowball jobs"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.AppRegistry",
      "occurrences" : [
        {
          "sample" : "new Attribute()",
          "lineNumber" : 28,
          "columnNumber" : -1,
          "fileName" : "/app/code/appregistry.java",
          "excerpt" : "        personalDataMap.put(\"email\", email);\n\n        // Create a list of attributes to store in the attribute group\n        Map<String, Attribute> attributes = new HashMap<>();\n        for (Map.Entry<String, String> entry : personalDataMap.entrySet()) {\n            Attribute attribute = new Attribute(); /* <=== com.amazonaws.services.appregistry.model.Attribute.<init> */ \n            attribute.setName(entry.getKey());\n            attribute.setType(\"STRING\");\n            attribute.setDescription(\"Personal data attribute: \" + entry.getKey());\n            attributes.put(entry.getKey(), attribute);\n        }"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Polly",
      "occurrences" : [
        {
          "sample" : "withText(\"Example personal data\")",
          "lineNumber" : 11,
          "columnNumber" : 59,
          "fileName" : "/app/code/polly.java",
          "excerpt" : "public class PersonalDataProcessor {\n\n    public static void main(String[] args) {\n        AmazonPolly pollyClient = AmazonPollyClientBuilder.defaultClient();\n\n        SynthesizeSpeechRequest synthesizeSpeechRequest = new SynthesizeSpeechRequest() /* <=== com.amazonaws.services.polly.model.SynthesizeSpeechRequest.withText */ \n            .withText(\"Example personal data\")\n            .withVoiceId(\"Joanna\")\n            .withOutputFormat(\"mp3\");\n\n        SynthesizeSpeechResult synthesizeSpeechResult = pollyClient.synthesizeSpeech(synthesizeSpeechRequest);"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.QuickSight",
      "occurrences" : [
        {
          "sample" : "standard()",
          "lineNumber" : 8,
          "columnNumber" : 35,
          "fileName" : "/app/code/quickSight.java",
          "excerpt" : "import com.amazonaws.services.quicksight.model.ListAnalysesRequest;\nimport com.amazonaws.services.quicksight.model.ListAnalysesResult;\n\npublic class QuickSightSample {\n    public static void main(String[] args) {\n        AmazonQuickSight client = AmazonQuickSightClientBuilder.standard().build(); /* <=== com.amazonaws.services.quicksight.AmazonQuickSightClientBuilder.standard */ \n        ListAnalysesRequest request = new ListAnalysesRequest();\n        ListAnalysesResult result = client.listAnalyses(request);\n        System.out.println(\"Analysis list: \" + result.getAnalysisSummaryList());\n    }\n}"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.ApplicationAutoScaling",
      "occurrences" : [
        {
          "sample" : "putScalingPolicy(request)",
          "lineNumber" : 22,
          "columnNumber" : 41,
          "fileName" : "/app/code/applicationAutoScaling.java",
          "excerpt" : "            .withServiceNamespace(SERVICE_NAMESPACE)\n            .withResourceId(RESOURCE_ID)\n            .withScalingPolicyName(SCALING_POLICY_NAME)\n            .withPolicyType(\"TargetTrackingScaling\")\n            .withTargetTrackingScalingPolicyConfiguration(TARGET_TRACKING_CONFIGURATION);\n        PutScalingPolicyResult result = client.putScalingPolicy(request); /* <=== com.amazonaws.services.applicationautoscaling.AmazonApplicationAutoScaling.putScalingPolicy */ \n\n        // Print the policy ARN\n        System.out.println(\"Scaling Policy ARN: \" + result.getPolicyARN());\n    }\n}"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Honeycode",
      "occurrences" : [
        {
          "sample" : "defaultClient()",
          "lineNumber" : 16,
          "columnNumber" : 27,
          "fileName" : "/app/code/honeycode.java",
          "excerpt" : "\npublic class PersonalDataProcessor {\n    private final AmazonHoneycode honeycodeClient;\n\n    public PersonalDataProcessor() {\n        honeycodeClient = AmazonHoneycodeClientBuilder.defaultClient(); /* <=== com.amazonaws.services.honeycode.AmazonHoneycodeClientBuilder.defaultClient */ \n    }\n\n    public void processPersonalData(String personalData) {\n        // 1. Prepare the personal data to be stored in the Honeycode table\n        List<Row> rows = new ArrayList<>();"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.HealthLake",
      "occurrences" : [
        {
          "sample" : "builder()",
          "lineNumber" : 10,
          "columnNumber" : 24,
          "fileName" : "/app/code/healthlake.java",
          "excerpt" : "\npublic class PersonalDataProcessor {\n  private AmazonHealthLakeClient healthLakeClient;\n  \n  public PersonalDataProcessor() {\n    healthLakeClient = AmazonHealthLakeClient.builder().build(); /* <=== com.amazonaws.services.healthlake.AmazonHealthLakeClient.builder */ \n  }\n  \n  public List<HealthLakeResponse> processPersonalData(List<HealthLakeRequest> personalDataRecords) {\n    List<HealthLakeResponse> processedData = new ArrayList<>();\n    for (HealthLakeRequest request : personalDataRecords) {"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.IoTWireless",
      "occurrences" : [
        {
          "sample" : "new SendDataToWirelessDeviceRequest()",
          "lineNumber" : 22,
          "columnNumber" : -1,
          "fileName" : "/app/code/iotwireless.java",
          "excerpt" : "        // Validate and sanitize the personal data\n        // ...\n\n        // Prepare the data to send to the AWS IoT Wireless device\n        String data = \"\"; // format the personal data as a string\n        SendDataToWirelessDeviceRequest request = new SendDataToWirelessDeviceRequest() /* <=== com.amazonaws.services.iotwireless.model.SendDataToWirelessDeviceRequest.<init> */ \n                .withPayload(data)\n                .withDeviceId(\"device-id\"); // replace with actual device ID\n\n        // Send the data to the AWS IoT Wireless device\n        SendDataToWirelessDeviceResult result = iotWirelessClient.sendDataToWirelessDevice(request);"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Devicefarm",
      "occurrences" : [
        {
          "sample" : "getUpload()",
          "lineNumber" : 17,
          "columnNumber" : 28,
          "fileName" : "/app/code/deviceFarm.java",
          "excerpt" : "            .withName(firstName + \"-\" + lastName + \"-\" + phoneNumber)\n            .withType(UploadType.ANDROID_APP)\n            .withContentType(\"application/octet-stream\");\n\n        CreateUploadResult createUploadResult = client.createUpload(createUploadRequest);\n        String uploadUrl = createUploadResult.getUpload().getUrl(); /* <=== com.amazonaws.services.devicefarm.model.CreateUploadResult.getUpload */ \n\n        // Store the personal data in a suitable format, for example in a JSON file.\n        String personalData = \"{ \\\"firstName\\\": \\\"\" + firstName + \"\\\", \" +\n                              \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +\n                              \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.IdentityStore",
      "occurrences" : [
        {
          "sample" : "new CreateUserRequest()",
          "lineNumber" : 15,
          "columnNumber" : -1,
          "fileName" : "/app/code/identitystore.java",
          "excerpt" : "        identityStoreClient = AWSIdentityStoreClientBuilder.defaultClient();\n    }\n\n    public void processData(PersonalData personalData) {\n        try {\n            CreateUserRequest createUserRequest = new CreateUserRequest() /* <=== com.amazonaws.services.identitystore.model.CreateUserRequest.<init> */ \n                .withUserPoolId(personalData.getUserPoolId())\n                .withUsername(personalData.getUsername())\n                .withUserAttributes(personalData.getUserAttributes());\n\n            CreateUserResult createUserResult = identityStoreClient.createUser(createUserRequest);"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.ElasticContainerService",
      "occurrences" : [
        {
          "sample" : "standard()",
          "lineNumber" : 17,
          "columnNumber" : 21,
          "fileName" : "/app/code/ecs.java",
          "excerpt" : "\n    private AmazonECS ecsClient;\n\n    public EcsSink() {\n        AWSCredentials credentials = new BasicAWSCredentials(ACCESS_KEY, SECRET_KEY);\n        ecsClient = AmazonECSClientBuilder.standard() /* <=== com.amazonaws.services.ecs.AmazonECSClientBuilder.standard */ \n                .withCredentials(new AWSStaticCredentialsProvider(credentials))\n                .withRegion(REGION)\n                .build();\n    }\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.MemoryDB",
      "occurrences" : [
        {
          "sample" : "new PutItemRequest()",
          "lineNumber" : 21,
          "columnNumber" : -1,
          "fileName" : "/app/code/memoryDB.java",
          "excerpt" : "        Map<String, Object> item = new HashMap<>();\n        item.put(\"Name\", name);\n        item.put(\"Address\", address);\n        item.put(\"Age\", age);\n\n        PutItemRequest request = new PutItemRequest().withTableName(\"PersonalData\").withItem(item); /* <=== com.amazonaws.services.memorydb.model.PutItemRequest.<init> */ \n        memoryDBClient.putItem(request);\n    }\n}\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Connect",
      "occurrences" : [
        {
          "sample" : "standard()",
          "lineNumber" : 6,
          "columnNumber" : 33,
          "fileName" : "/app/code/connect.java",
          "excerpt" : "import com.amazonaws.services.connect.AmazonConnect;\nimport com.amazonaws.services.connect.AmazonConnectClientBuilder;\n\npublic class ConnectSample {\n    public static void main(String[] args) {\n        AmazonConnect connect = AmazonConnectClientBuilder.standard().build(); /* <=== com.amazonaws.services.connect.AmazonConnectClientBuilder.standard */ \n        \n        // Use the connect object to interact with the Amazon Connect service.\n    }\n}\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.ChimeSDKIdentity",
      "occurrences" : [
        {
          "sample" : "withKey(\"phoneNumber\")",
          "lineNumber" : 14,
          "columnNumber" : 20,
          "fileName" : "/app/code/chimeSDKIdentity.java",
          "excerpt" : "\n  public static void AWSChimeSDKIdentityFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n    List<Attribute> attributes = new ArrayList<>();\n    attributes.add(new Attribute().withKey(\"firstName\").withValue(firstName));\n    attributes.add(new Attribute().withKey(\"lastName\").withValue(lastName));\n    attributes.add(new Attribute().withKey(\"phoneNumber\").withValue(phoneNumber)); /* <=== com.amazonaws.services.chimesdkidentity.model.Attribute.withKey */ \n    attributes.add(new Attribute().withKey(\"DOB\").withValue(DOB));\n\n    PutAttributesRequest request = new PutAttributesRequest().withAttributes(attributes);\n    CLIENT.putAttributes(request);\n  }"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.CustomerProfiles",
      "occurrences" : [
        {
          "sample" : "withProfileId(\"example-profile-id\")",
          "lineNumber" : 12,
          "columnNumber" : 36,
          "fileName" : "/app/code/customerprofiles.java",
          "excerpt" : "  public static void main(String[] args) {\n    // Set up the Amazon Customer Profiles client\n    AmazonCustomerProfiles client = AmazonCustomerProfilesClientBuilder.defaultClient();\n\n    // Create a profile request with personal data\n    CreateProfileRequest request = new CreateProfileRequest() /* <=== com.amazonaws.services.customerprofiles.model.CreateProfileRequest.withProfileId */ \n        .withProfileId(\"example-profile-id\")\n        .withDomainName(\"example-domain-name\")\n        .withProfileAttributes(\n            Map.of(\n                \"firstName\", \"John\","
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Glacier",
      "occurrences" : [
        {
          "sample" : "createVault(createVaultRequest)",
          "lineNumber" : 23,
          "columnNumber" : 47,
          "fileName" : "/app/code/glacier.java",
          "excerpt" : "                .build();\n\n        // Create a new vault\n        CreateVaultRequest createVaultRequest = new CreateVaultRequest()\n                .withVaultName(\"my-vault\");\n        CreateVaultResult createVaultResult = glacier.createVault(createVaultRequest); /* <=== com.amazonaws.services.glacier.AmazonGlacier.createVault */ \n    }\n}\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.MarketplaceCatalog",
      "occurrences" : [
        {
          "sample" : "setChangeSetName(changeSetName)",
          "lineNumber" : 18,
          "columnNumber" : 5,
          "fileName" : "/app/code/marketplacecatalog.java",
          "excerpt" : "\n  public void processPersonalData(String personalData) {\n    String changeSetName = \"personal_data_changeset\";\n\n    StartChangeSetRequest startChangeSetRequest = new StartChangeSetRequest();\n    startChangeSetRequest.setChangeSetName(changeSetName); /* <=== com.amazonaws.services.marketplacecatalog.model.StartChangeSetRequest.setChangeSetName */ \n    startChangeSetRequest.setCatalog(personalData);\n\n    StartChangeSetResult startChangeSetResult = catalogClient.startChangeSet(startChangeSetRequest);\n    System.out.println(\"Data processing result: \" + startChangeSetResult.getChangeSetId());\n  }"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.KinesisVideoWebRTCStorage",
      "occurrences" : [
        {
          "sample" : "putRecord(putRecordRequest)",
          "lineNumber" : 16,
          "columnNumber" : 9,
          "fileName" : "/app/code/kinesisvideowebrtcstorage.java",
          "excerpt" : "    public void AWSKinesisVideoWebrtcStorageFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        PutRecordRequest putRecordRequest = new PutRecordRequest()\n            .withStreamName(\"personal-data-stream\")\n            .withData(String.format(\"First Name: %s, Last Name: %s, Phone Number: %s, DOB: %s\", firstName, lastName, phoneNumber, DOB).getBytes());\n\n        kinesisVideoWebRTCStorageClient.putRecord(putRecordRequest); /* <=== com.amazonaws.services.kinesisvideowebrtcstorage.AWSKinesisVideoWebRTCStorage.putRecord */ \n    }\n}\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Forecast",
      "occurrences" : [
        {
          "sample" : "new CreateDatasetRequest()",
          "lineNumber" : 12,
          "columnNumber" : -1,
          "fileName" : "/app/code/forecast.java",
          "excerpt" : "    public static void main(String[] args) {\n        // Build the client\n        AmazonForecast forecast = AmazonForecastClientBuilder.standard().build();\n\n        // Create a dataset\n        CreateDatasetRequest createDatasetRequest = new CreateDatasetRequest() /* <=== com.amazonaws.services.forecast.model.CreateDatasetRequest.<init> */ \n                .withDatasetName(\"myDataset\")\n                .withDomain(\"RETAIL\");\n        CreateDatasetResult createDatasetResult = forecast.createDataset(createDatasetRequest);\n\n        // Print the dataset ARN"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.IoT",
      "occurrences" : [
        {
          "sample" : "createTracker(createTrackerRequest)",
          "lineNumber" : 22,
          "columnNumber" : 30,
          "fileName" : "/app/code/iotFleetwise.java",
          "excerpt" : "\nCreateTrackerRequest createTrackerRequest = new CreateTrackerRequest()\n        .withTrackerName(firstName + \"_\" + lastName + \"_Tracker\")\n        .withAttributePayload(personalData);\n\nCreateTrackerResult result = client.createTracker(createTrackerRequest); /* <=== com.amazonaws.services.iotfleetwise.AmazonIoTFleetwise.createTracker */ \nSystem.out.println(\"Tracker created with ID: \" + result.getTrackerId());\n}\n}"
        },
        {
          "sample" : "withThingName(\"PersonalData\")",
          "lineNumber" : 20,
          "columnNumber" : 41,
          "fileName" : "/app/code/iotRoboRunner.java",
          "excerpt" : "        personalData.put(\"firstName\", firstName);\n        personalData.put(\"lastName\", lastName);\n        personalData.put(\"phoneNumber\", phoneNumber);\n        personalData.put(\"dob\", dob);\n\n        PutThingShadowRequest request = new PutThingShadowRequest() /* <=== com.amazonaws.services.iotroborunner.model.PutThingShadowRequest.withThingName */ \n                .withThingName(\"PersonalData\")\n                .withPayload(personalData);\n\n        PutThingShadowResult result = iotRoboRunnerClient.putThingShadow(request);\n        System.out.println(\"Data sent to AWS IoTRoboRunner successfully\");"
        },
        {
          "sample" : "sendDataToWirelessDevice(request)",
          "lineNumber" : 27,
          "columnNumber" : 49,
          "fileName" : "/app/code/iotwireless.java",
          "excerpt" : "        SendDataToWirelessDeviceRequest request = new SendDataToWirelessDeviceRequest()\n                .withPayload(data)\n                .withDeviceId(\"device-id\"); // replace with actual device ID\n\n        // Send the data to the AWS IoT Wireless device\n        SendDataToWirelessDeviceResult result = iotWirelessClient.sendDataToWirelessDevice(request); /* <=== com.amazonaws.services.iotwireless.AWSIoTWireless.sendDataToWirelessDevice */ \n\n        // Handle the response from the AWS IoT Wireless device\n        // ...\n    }\n}"
        },
        {
          "sample" : "new ListTunnelsRequest()",
          "lineNumber" : 25,
          "columnNumber" : -1,
          "fileName" : "/app/code/iotsecuretunneling.java",
          "excerpt" : "                .withDestinationConfig(new DestinationConfig().withThingName(\"myThing\"));\n        OpenTunnelResult openTunnelResult = client.openTunnel(openTunnelRequest);\n        String tunnelId = openTunnelResult.getTunnelId();\n\n        // List the tunnels\n        ListTunnelsResult listTunnelsResult = client.listTunnels(new ListTunnelsRequest()); /* <=== com.amazonaws.services.iotsecuretunneling.model.ListTunnelsRequest.<init> */ \n        for (TunnelSummary tunnelSummary : listTunnelsResult.getTunnelSummaries()) {\n            System.out.println(tunnelSummary.getTunnelId() + \": \" + tunnelSummary.getDescription());\n        }\n\n        // Close the secure tunnel"
        },
        {
          "sample" : "describeThing(describeThingRequest)",
          "lineNumber" : 34,
          "columnNumber" : 51,
          "fileName" : "/app/code/iotTwinMaker.java",
          "excerpt" : "        DeleteThingShadowRequest deleteThingShadowRequest = new DeleteThingShadowRequest().withThingName(thingName);\n        DeleteThingShadowResult deleteThingShadowResult = iotTwinMakerClient.deleteThingShadow(deleteThingShadowRequest);\n\n        // Describe the thing\n        DescribeThingRequest describeThingRequest = new DescribeThingRequest().withThingName(thingName);\n        DescribeThingResult describeThingResult = iotTwinMakerClient.describeThing(describeThingRequest); /* <=== com.amazonaws.services.iottwinmaker.AWSIoTTwinMaker.describeThing */ \n\n        // Publish to a topic\n        PublishRequest publishRequest = new PublishRequest().withTopic(\"topic\").withPayload(describeThingResult.toString());\n        PublishResult publishResult = iotTwinMakerClient.publish(publishRequest);\n    }"
        },
        {
          "sample" : "toString()",
          "lineNumber" : 24,
          "columnNumber" : 33,
          "fileName" : "/app/code/iotDeviceAdvisor.java",
          "excerpt" : "        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n\nTestResult result = client.createTestRound(testRound);\n\nSystem.out.println(\"Result: \" + result.toString()); /* <=== com.amazonaws.services.iotdeviceadvisor.model.TestResult.toString */ \n}\n}\n"
        },
        {
          "sample" : "createMetric(request)",
          "lineNumber" : 29,
          "columnNumber" : 33,
          "fileName" : "/app/code/iotFleetHub.java",
          "excerpt" : "  public void createMetric(String metricName, String assetId) {\n    CreateMetricRequest request = new CreateMetricRequest()\n      .withFleetId(fleetId)\n      .withMetricName(metricName)\n      .withAssetId(assetId);\n    CreateMetricResult result = fleetHubClient.createMetric(request); /* <=== com.amazonaws.services.iotfleethub.AWSIoTFleetHub.createMetric */ \n    System.out.println(\"Metric created: \" + result.getMetricId());\n  }\n}\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.CostAndUsageReport",
      "occurrences" : [
        {
          "sample" : "getReportDefinitionId()",
          "lineNumber" : 20,
          "columnNumber" : 55,
          "fileName" : "/app/code/costAndUsageReport.java",
          "excerpt" : "                .withReportName(REPORT_NAME)\n                .withS3Bucket(S3_BUCKET);\n\n        CreateReportDefinitionResult createReportDefinitionResult = costAndUsageReportClient.createReportDefinition(createReportDefinitionRequest);\n\n        System.out.println(\"Report definition Id: \" + createReportDefinitionResult.getReportDefinitionId()); /* <=== com.amazonaws.services.costandusagereport.model.CreateReportDefinitionResult.getReportDefinitionId */ \n    }\n}\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.ManagedGrafana",
      "occurrences" : [
        {
          "sample" : "getDashboard(dashboardRequest)",
          "lineNumber" : 27,
          "columnNumber" : 46,
          "fileName" : "/app/code/managedGrafana.java",
          "excerpt" : "    }\n\n    private static void processData(Map<String, String> personalData) {\n        GetDashboardRequest dashboardRequest = new GetDashboardRequest()\n                .withDashboardId(personalData.get(\"dashboardId\"));\n        GetDashboardResult dashboardResult = grafanaClient.getDashboard(dashboardRequest); /* <=== com.amazonaws.services.managedgrafana.AWSManagedGrafanaClient.getDashboard */ \n\n        // Use the dashboard data to process the personal data\n        // ...\n    }\n}"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Budgets",
      "occurrences" : [
        {
          "sample" : "withNotificationType(\"FORECASTED\")",
          "lineNumber" : 34,
          "columnNumber" : 9,
          "fileName" : "/app/code/budgets.java",
          "excerpt" : "            .withNotificationType(\"ACTUAL\")\n            .withComparisonOperator(\"GREATER_THAN\")\n            .withThreshold(80.0)\n            .withThresholdType(\"PERCENTAGE\"));\n    notifications.add(\n        new Notification() /* <=== com.amazonaws.services.budgets.model.Notification.withNotificationType */ \n            .withNotificationType(\"FORECASTED\")\n            .withComparisonOperator(\"GREATER_THAN\")\n            .withThreshold(100.0)\n            .withThresholdType(\"ABSOLUTE_VALUE\"));\n    createBudgetRequest"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.VoiceID",
      "occurrences" : [
        {
          "sample" : "new CreateProfileRequest()",
          "lineNumber" : 15,
          "columnNumber" : -1,
          "fileName" : "/app/code/voiceid.java",
          "excerpt" : "        this.voiceIdClient = voiceIdClient;\n    }\n\n    public void processPersonalData(String firstName, String lastName, String phoneNumber) {\n        // Create a new profile in Voice ID\n        CreateProfileRequest createProfileRequest = new CreateProfileRequest() /* <=== com.amazonaws.services.voiceid.model.CreateProfileRequest.<init> */ \n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber);\n        CreateProfileResult createProfileResult = voiceIdClient.createProfile(createProfileRequest);\n        System.out.println(\"Profile created with ID: \" + createProfileResult.getProfileId());"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.EMRServerless",
      "occurrences" : [
        {
          "sample" : "putRecord(putRecordRequest)",
          "lineNumber" : 24,
          "columnNumber" : 5,
          "fileName" : "/app/code/emrServerless.java",
          "excerpt" : "    PutRecordRequest putRecordRequest = new PutRecordRequest()\n            .withStreamName(\"PersonalDataStream\")\n            .withData(ByteBuffer.wrap(personalData.toString().getBytes()))\n            .withPartitionKey(\"partitionKey\");\n\n    client.putRecord(putRecordRequest); /* <=== com.amazonaws.services.EMRServerless.AmazonEMRServerless.putRecord */ \n}\n}"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.AppFlow",
      "occurrences" : [
        {
          "sample" : "setSourceFlowConfig(new SourceFlowConfig().withSourceConnectionArn(\"arn:aws:appflow:us-west-2:123456789012:connectionsource/example-connection\"))",
          "lineNumber" : 27,
          "columnNumber" : 9,
          "fileName" : "/app/code/appflow.java",
          "excerpt" : "\n        // Prepare the data to send to Appflow\n        CreateFlowRequest request = new CreateFlowRequest();\n        request.setName(\"SampleFlow\");\n        request.setDescription(\"Sample flow to process personal data\");\n        request.setSourceFlowConfig(new SourceFlowConfig().withSourceConnectionArn(\"arn:aws:appflow:us-west-2:123456789012:connectionsource/example-connection\")); /* <=== com.amazonaws.services.appflow.model.CreateFlowRequest.setSourceFlowConfig */ \n        request.setDestinationFlowConfig(new DestinationFlowConfig().withDestinationConnectionArn(\"arn:aws:appflow:us-west-2:123456789012:connectiondestination/example-connection\"));\n        request.setTriggerConfig(new TriggerConfig().withTriggerProperties(personalData));\n\n        // Send the data to Appflow\n        CreateFlowResult result = appflowClient.createFlow(request);"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.CleanRooms",
      "occurrences" : [
        {
          "sample" : "cleanRoom(request)",
          "lineNumber" : 14,
          "columnNumber" : 36,
          "fileName" : "/app/code/cleanrooms.java",
          "excerpt" : "      this.dataSource = dataSource;\n   }\n\n   public void processData() {\n      CleanRoomRequest request = new CleanRoomRequest().withSourceData(dataSource);\n      CleanRoomResponse response = cleanRoomsClient.cleanRoom(request); /* <=== com.amazonaws.services.cleanrooms.AmazonCleanRoomsClient.cleanRoom */ \n      String processedData = response.getCleanedData();\n\n      // Use processed data as needed\n      // ...\n   }"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.TranslateMedical",
      "occurrences" : [
        {
          "sample" : "translateMedicalText(request)",
          "lineNumber" : 31,
          "columnNumber" : 41,
          "fileName" : "/app/code/translateMedical.java",
          "excerpt" : "            .withSourceLanguageCode(\"en\")\n            .withTargetLanguageCode(\"fr\")\n            .withText(\"I have a headache\");\n\n    // Translate the text\n    TranslateMedicalTextResult result = translateMedical.translateMedicalText(request); /* <=== com.amazonaws.services.translatemedical.AWSTranslateMedical.translateMedicalText */ \n    System.out.println(\"Translated Text: \" + result.getTranslatedText());\n}\n}"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Rekognition",
      "occurrences" : [
        {
          "sample" : "detectLabels(request)",
          "lineNumber" : 26,
          "columnNumber" : 37,
          "fileName" : "/app/code/rekognition.java",
          "excerpt" : "            .withImage(image)\n            .withMaxLabels(10)\n            .withMinConfidence(75F);\n\n        // Send the request\n        DetectLabelsResult result = rekognitionClient.detectLabels(request); /* <=== com.amazonaws.services.rekognition.AmazonRekognition.detectLabels */ \n\n        // Get the list of labels\n        List<Label> labels = result.getLabels();\n\n        // Print out the labels"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.MarketplaceEntitlement",
      "occurrences" : [
        {
          "sample" : "builder()",
          "lineNumber" : 14,
          "columnNumber" : 23,
          "fileName" : "/app/code/marketplaceEntitlement.java",
          "excerpt" : "\n    private AmazonMarketplaceEntitlementClient client;\n\n    public PersonalDataProcessor(String accessKey, String secretKey) {\n        BasicAWSCredentials credentials = new BasicAWSCredentials(accessKey, secretKey);\n        this.client = AmazonMarketplaceEntitlementClient.builder() /* <=== com.amazonaws.services.marketplaceentitlement.AmazonMarketplaceEntitlementClient.builder */ \n                .withCredentials(new AWSStaticCredentialsProvider(credentials))\n                .build();\n    }\n\n    public void processData(List<String> data, List<Entitlement> entitlements) {"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.DataExchange",
      "occurrences" : [
        {
          "sample" : "importAssetFromSignedUrl(importAssetRequest)",
          "lineNumber" : 41,
          "columnNumber" : 9,
          "fileName" : "/app/code/dataExchange.java",
          "excerpt" : "        ImportAssetFromSignedUrlRequest importAssetRequest = new ImportAssetFromSignedUrlRequest()\n                .withDataSetId(dataSetId)\n                .withRevisionId(revisionId)\n                .withAssetName(assetName)\n                .withEntries(entries);\n        dataExchangeClient.importAssetFromSignedUrl(importAssetRequest); /* <=== com.amazonaws.services.dataexchange.AmazonDataExchange.importAssetFromSignedUrl */ \n    }\n}\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Snowball",
      "occurrences" : [
        {
          "sample" : "withJobType(\"IMPORT\")",
          "lineNumber" : 21,
          "columnNumber" : 45,
          "fileName" : "/app/code/snowball.java",
          "excerpt" : "                .withCredentials(new AWSStaticCredentialsProvider(credentials))\n                .withRegion(\"us-west-2\")\n                .build();\n\n        // Create a new Snowball Job\n        CreateJobRequest createJobRequest = new CreateJobRequest() /* <=== com.amazonaws.services.snowball.model.CreateJobRequest.withJobType */ \n                .withJobType(\"IMPORT\")\n                .withResources(new JobResource()\n                    .withS3Resources(new S3Resource()\n                        .withBucketArn(\"arn:aws:s3:::my-bucket\")\n                        .withKeyRange(new S3KeyRange().withEndMarker(\"data/end\"))"
        }
      ]
    },
    {
      "sinkId" : "Storages.SpringFramework.Jdbc.Write",
      "occurrences" : [
        {
          "sample" : "statement.executeUpdate()",
          "lineNumber" : 45,
          "columnNumber" : 13,
          "fileName" : "/app/code/redshift.java",
          "excerpt" : "            PreparedStatement statement = conn.prepareStatement(sql);\n            statement.setString(1, firstName);\n            statement.setString(2, lastName);\n            statement.setInt(3, age);\n            statement.setString(4, address);\n            statement.executeUpdate(); /* <=== java.sql.PreparedStatement.executeUpdate */ \n        } catch (SQLException e) {\n            System.out.println(\"Error while inserting personal data into Redshift\");\n            e.printStackTrace();\n        }\n    }"
        },
        {
          "sample" : "insertStatement.executeUpdate()",
          "lineNumber" : 26,
          "columnNumber" : 13,
          "fileName" : "/app/code/rds.java",
          "excerpt" : "            String insertSql = \"INSERT INTO personal_data (first_name, last_name, email) VALUES (?, ?, ?)\";\n            PreparedStatement insertStatement = connection.prepareStatement(insertSql);\n            insertStatement.setString(1, \"John\");\n            insertStatement.setString(2, \"Doe\");\n            insertStatement.setString(3, \"john.doe@example.com\");\n            insertStatement.executeUpdate(); /* <=== java.sql.PreparedStatement.executeUpdate */ \n        } catch (SQLException e) {\n            System.err.println(\"Error connecting to the database: \" + e.getMessage());\n        } finally {\n            if (connection != null) {\n                try {"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Workdocs",
      "occurrences" : [
        {
          "sample" : "withParentFolderId(\"PARENT_FOLDER_ID\")",
          "lineNumber" : 16,
          "columnNumber" : 51,
          "fileName" : "/app/code/workdocs.java",
          "excerpt" : "        workDocsClient = AmazonWorkDocsClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Create a new folder in Amazon WorkDocs to store the personal data\n        CreateFolderRequest createFolderRequest = new CreateFolderRequest() /* <=== com.amazonaws.services.workdocs.model.CreateFolderRequest.withParentFolderId */ \n            .withParentFolderId(\"PARENT_FOLDER_ID\")\n            .withName(\"PersonalDataFolder\");\n        CreateFolderResult createFolderResult = workDocsClient.createFolder(createFolderRequest);\n        String personalDataFolderId = createFolderResult.getFolderId();\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.OAM",
      "occurrences" : [
        {
          "sample" : "new CreateUserRequest()",
          "lineNumber" : 14,
          "columnNumber" : -1,
          "fileName" : "/app/code/oam.java",
          "excerpt" : "  public AWSOAMUtil(AWSOAM oamClient) {\n    this.oamClient = oamClient;\n  }\n\n  public CreateUserResult AWSOAMFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    CreateUserRequest request = new CreateUserRequest() /* <=== com.amazonaws.services.oam.model.CreateUserRequest.<init> */ \n      .withFirstName(firstName)\n      .withLastName(lastName)\n      .withPhoneNumber(phoneNumber)\n      .withDateOfBirth(dob);\n    return oamClient.createUser(request);"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.WAF",
      "occurrences" : [
        {
          "sample" : "withWebAclId(\"YOUR_WEB_ACL_ID\")",
          "lineNumber" : 16,
          "columnNumber" : 61,
          "fileName" : "/app/code/waf.java",
          "excerpt" : "  }\n  \n  public void processData(String personalData) {\n    try {\n      // Create a request to inspect the personal data for malicious content\n      GetSampledRequestsRequest getSampledRequestsRequest = new GetSampledRequestsRequest() /* <=== com.amazonaws.services.waf.model.GetSampledRequestsRequest.withWebAclId */ \n        .withWebAclId(\"YOUR_WEB_ACL_ID\")\n        .withRuleId(\"YOUR_RULE_ID\")\n        .withMaxItems(1);\n      \n      // Call the getSampledRequests method of the WAF client to inspect the data"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.IVS",
      "occurrences" : [
        {
          "sample" : "setArns(channelArns)",
          "lineNumber" : 35,
          "columnNumber" : 13,
          "fileName" : "/app/code/ivs.java",
          "excerpt" : "        // Get a list of all channels\n        List<String> channelArns = new ArrayList<>();\n        String nextToken = null;\n        do {\n            BatchGetChannelRequest batchGetChannelRequest = new BatchGetChannelRequest();\n            batchGetChannelRequest.setArns(channelArns); /* <=== com.amazonaws.services.ivs.model.BatchGetChannelRequest.setArns */ \n            batchGetChannelRequest.setNextToken(nextToken);\n            BatchGetChannelResult batchGetChannelResult = ivsClient.batchGetChannel(batchGetChannelRequest);\n            for (Channel channel : batchGetChannelResult.getChannels()) {\n                // Check if the channel contains personal data\n                if (channel.getName().contains(\"PersonalData\")) {"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.CloudControlAPI",
      "occurrences" : [
        {
          "sample" : "setPersonalData(personalData)",
          "lineNumber" : 20,
          "columnNumber" : 9,
          "fileName" : "/app/code/cloudcontrolapi.java",
          "excerpt" : "        Map<String, String> personalData = new HashMap<>();\n        personalData.put(\"first_name\", \"John\");\n        personalData.put(\"last_name\", \"Doe\");\n        personalData.put(\"email\", \"johndoe@example.com\");\n        personalData.put(\"phone_number\", \"555-555-1212\");\n        request.setPersonalData(personalData); /* <=== com.amazonaws.services.cloudcontrolapi.model.GetRightsizingRecommendationRequest.setPersonalData */ \n\n        GetRightsizingRecommendationResult result = client.getRightsizingRecommendation(request);\n        System.out.println(\"Rightsizing recommendation: \" + result.getRecommendation());\n    }\n}"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.AppStream",
      "occurrences" : [
        {
          "sample" : "standard()",
          "lineNumber" : 8,
          "columnNumber" : 37,
          "fileName" : "/app/code/appStream.java",
          "excerpt" : "import com.amazonaws.services.appstream.model.CreateStackRequest;\n\npublic class AppStreamExample {\n    public static void main(String[] args) {\n        // Create a new AppStream client\n        AmazonAppStream appStream = AmazonAppStreamClientBuilder.standard().build(); /* <=== com.amazonaws.services.appstream.AmazonAppStreamClientBuilder.standard */ \n\n        // Create a new AppStream stack\n        CreateStackRequest stackRequest = new CreateStackRequest()\n            .withName(\"MyStack\")\n            .withDescription(\"This is a sample stack for processing personal data.\");"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Support",
      "occurrences" : [
        {
          "sample" : "new CreateCaseRequest()",
          "lineNumber" : 9,
          "columnNumber" : -1,
          "fileName" : "/app/code/support.java",
          "excerpt" : "\npublic class AWSSupportUtil {\n    public static void AWSSupportFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AWSSupport supportClient = AWSSupportClientBuilder.defaultClient();\n\n        CreateCaseRequest createCaseRequest = new CreateCaseRequest() /* <=== com.amazonaws.services.support.model.CreateCaseRequest.<init> */ \n            .withSubject(\"Personal Data\")\n            .withServiceCode(\"personal-data\")\n            .withCategoryCode(\"data-request\")\n            .withCommunicationBody(\"First Name: \" + firstName + \"\\nLast Name: \" + lastName + \n                                   \"\\nPhone Number: \" + phoneNumber + \"\\nDOB: \" + DOB);"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.AmplifyUIBuilder",
      "occurrences" : [
        {
          "sample" : "withFirstName(firstName)",
          "lineNumber" : 9,
          "columnNumber" : 47,
          "fileName" : "/app/code/amplifyUIBuilder.java",
          "excerpt" : "public class AWSAmplifyUIBuilderUtil {\n\n    public void AWSAmplifyUIBuilderFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AmplifyUIBuilder amplifyUIBuilder = new AmplifyUIBuilder();\n\n        CreateUserRequest createUserRequest = new CreateUserRequest() /* <=== com.amazonaws.services.amplifyuibuilder.model.CreateUserRequest.withFirstName */ \n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber)\n                .withDOB(DOB);\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.ElasticContainerRegistry",
      "occurrences" : [
        {
          "sample" : "withRepositoryName(\"my-repository\")",
          "lineNumber" : 21,
          "columnNumber" : 41,
          "fileName" : "/app/code/ecr.java",
          "excerpt" : "        AmazonECR ecr = AmazonECRClientBuilder.standard()\n                .withCredentials(new AWSStaticCredentialsProvider(credentials))\n                .withRegion(\"us-west-2\")\n                .build();\n\n        DescribeImagesRequest request = new DescribeImagesRequest().withRepositoryName(\"my-repository\"); /* <=== com.amazonaws.services.ecr.model.DescribeImagesRequest.withRepositoryName */ \n        DescribeImagesResult result = ecr.describeImages(request);\n        System.out.println(result);\n    }\n}\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.KinesisDataFirehose",
      "occurrences" : [
        {
          "sample" : "getDeliveryStreamARN()",
          "lineNumber" : 18,
          "columnNumber" : 67,
          "fileName" : "/app/code/kinesisFirehose.java",
          "excerpt" : "        createDeliveryStreamRequest.setS3DestinationConfiguration(\n            // S3 configuration goes here\n        );\n\n        CreateDeliveryStreamResult createDeliveryStreamResult = firehoseClient.createDeliveryStream(createDeliveryStreamRequest);\n        System.out.println(\"Delivery stream created with ARN: \" + createDeliveryStreamResult.getDeliveryStreamARN()); /* <=== com.amazonaws.services.kinesisfirehose.model.CreateDeliveryStreamResult.getDeliveryStreamARN */ \n    }\n}\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.IoTSecureTunneling",
      "occurrences" : [
        {
          "sample" : "new ListTunnelsRequest()",
          "lineNumber" : 25,
          "columnNumber" : -1,
          "fileName" : "/app/code/iotsecuretunneling.java",
          "excerpt" : "                .withDestinationConfig(new DestinationConfig().withThingName(\"myThing\"));\n        OpenTunnelResult openTunnelResult = client.openTunnel(openTunnelRequest);\n        String tunnelId = openTunnelResult.getTunnelId();\n\n        // List the tunnels\n        ListTunnelsResult listTunnelsResult = client.listTunnels(new ListTunnelsRequest()); /* <=== com.amazonaws.services.iotsecuretunneling.model.ListTunnelsRequest.<init> */ \n        for (TunnelSummary tunnelSummary : listTunnelsResult.getTunnelSummaries()) {\n            System.out.println(tunnelSummary.getTunnelId() + \": \" + tunnelSummary.getDescription());\n        }\n\n        // Close the secure tunnel"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.CodeCommit",
      "occurrences" : [
        {
          "sample" : "build()",
          "lineNumber" : 11,
          "columnNumber" : 39,
          "fileName" : "/app/code/codeCommit.java",
          "excerpt" : "\n    public static void AWSCodeCommitFirstNameFlow(String repositoryName, String branchName, String filePath, \n                                                   String firstName, String lastName, String phoneNumber, String dob) {\n\n        AmazonCodeCommitClientBuilder clientBuilder = AmazonCodeCommitClientBuilder.standard();\n        AmazonCodeCommit codecommit = clientBuilder.build(); /* <=== com.amazonaws.services.codecommit.AmazonCodeCommitClientBuilder.build */ \n\n        String content = \"First Name: \" + firstName + \"\\nLast Name: \" + lastName + \n                         \"\\nPhone Number: \" + phoneNumber + \"\\nDate of Birth: \" + dob;\n\n        PutFileRequest request = new PutFileRequest()"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.ChimeSDKVoice",
      "occurrences" : [
        {
          "sample" : "setFirstName(firstName)",
          "lineNumber" : 15,
          "columnNumber" : 3,
          "fileName" : "/app/code/chimeSDKVoice.java",
          "excerpt" : "\ntry {\n  CreateParticipantRequest createParticipantRequest = new CreateParticipantRequest();\n  createParticipantRequest.setMeetingId(\"<MEETING_ID>\");\n  \n  createParticipantRequest.setFirstName(firstName); /* <=== com.amazonaws.services.chimesdkvoice.model.CreateParticipantRequest.setFirstName */ \n  createParticipantRequest.setLastName(lastName);\n  createParticipantRequest.setEmail(email);\n  \n  CreateParticipantResult createParticipantResult = client.createParticipant(createParticipantRequest);\n  System.out.println(\"Successfully sent personal data to AWS Chime SDK Voice, Participant Identifier: \" + createParticipantResult.getParticipantId());"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.MarketplaceCommerceAnalytics",
      "occurrences" : [
        {
          "sample" : "new GenerateDataSetRequest()",
          "lineNumber" : 17,
          "columnNumber" : -1,
          "fileName" : "/app/code/marketplaceCommerceAnalytics.java",
          "excerpt" : "        AmazonMarketplaceCommerceAnalyticsClientBuilder builder = AmazonMarketplaceCommerceAnalyticsClientBuilder.standard();\n        builder.setRegion(\"us-west-2\");\n        AmazonMarketplaceCommerceAnalytics client = builder.build();\n\n        // Prepare the data set request\n        GenerateDataSetRequest generateDataSetRequest = new GenerateDataSetRequest(); /* <=== com.amazonaws.services.marketplacecommerceanalytics.model.GenerateDataSetRequest.<init> */ \n        generateDataSetRequest.setDataSetType(\"customer_subscriber_hourly_monthly_subscriptions\");\n        generateDataSetRequest.setDataSetPublicationDate(\"2022-12-31\");\n        generateDataSetRequest.setRoleName(\"arn:aws:iam::123456789012:role/MarketplaceCommerceAnalytics\");\n        generateDataSetRequest.setDestinationS3BucketName(\"my-bucket\");\n        generateDataSetRequest.setDestinationS3Prefix(\"customer-subscriptions\");"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.AmplifyBackend",
      "occurrences" : [
        {
          "sample" : "new CreateBackendAuthUserRequest()",
          "lineNumber" : 27,
          "columnNumber" : -1,
          "fileName" : "/app/code/amplifyBackend.java",
          "excerpt" : "                .withUsername(email)\n                .withPassword(name);\n        CreateBackendAuthIdentityPoolResult poolResult = backendClient.createBackendAuthIdentityPool(poolRequest);\n\n        // Create the user in the backend\n        CreateBackendAuthUserRequest userRequest = new CreateBackendAuthUserRequest() /* <=== com.amazonaws.services.amplifybackend.model.CreateBackendAuthUserRequest.<init> */ \n                .withUserId(userId)\n                .withUsername(email)\n                .withPassword(name);\n        CreateBackendAuthUserResult userResult = backendClient.createBackendAuthUser(userRequest);\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.StorageGateway",
      "occurrences" : [
        {
          "sample" : "withGatewayARN(\"arn:aws:storagegateway:us-west-2:1234567890:gateway/sgw-12A3456B\")",
          "lineNumber" : 18,
          "columnNumber" : 50,
          "fileName" : "/app/code/storageGateway.java",
          "excerpt" : "        // Create a Storage Gateway client\n        AWSStorageGatewayClient client = new AWSStorageGatewayClient(credentials);\n        client.setEndpoint(\"https://storagegateway.us-west-2.amazonaws.com\");\n\n        // Create a new cached iSCSI volume\n        CreateCachediSCSIVolumeRequest request = new CreateCachediSCSIVolumeRequest() /* <=== com.amazonaws.services.storagegateway.model.CreateCachediSCSIVolumeRequest.withGatewayARN */ \n                .withGatewayARN(\"arn:aws:storagegateway:us-west-2:1234567890:gateway/sgw-12A3456B\")\n                .withVolumeSizeInBytes(1099511627776L)\n                .withSnapshotId(\"snap-01234567890abcdef0\")\n                .withTargetName(\"myiscsitarget\")\n                .withNetworkInterfaceId(\"eni-01234567890abcdef0\");"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.AppIntegration",
      "occurrences" : [
        {
          "sample" : "setMetadata(metadata)",
          "lineNumber" : 23,
          "columnNumber" : 5,
          "fileName" : "/app/code/appIntegration.java",
          "excerpt" : "    CreateEventIntegrationRequest request = new CreateEventIntegrationRequest();\n\n    Map<String, String> metadata = new HashMap<>();\n    metadata.put(\"personalData\", personalData.toString());\n\n    request.setMetadata(metadata); /* <=== com.amazonaws.services.appintegration.model.CreateEventIntegrationRequest.setMetadata */ \n    CreateEventIntegrationResult result = appIntegrationClient.createEventIntegration(request);\n\n    System.out.println(\"Successfully processed personal data: \" + result.getEventIntegrationArn());\n  }\n}"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Greengrass",
      "occurrences" : [
        {
          "sample" : "getArn()",
          "lineNumber" : 18,
          "columnNumber" : 47,
          "fileName" : "/app/code/greengrass.java",
          "excerpt" : "        CreateFunctionDefinitionRequest request = new CreateFunctionDefinitionRequest()\n            .withName(FUNCTION_NAME);\n        CreateFunctionDefinitionResult result = client.createFunctionDefinition(request);\n\n        // Print the ARN of the created function\n        System.out.println(\"Function ARN: \" + result.getArn()); /* <=== com.amazonaws.services.greengrass.model.CreateFunctionDefinitionResult.getArn */ \n    }\n}\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Amplify",
      "occurrences" : [
        {
          "sample" : "withFirstName(firstName)",
          "lineNumber" : 9,
          "columnNumber" : 47,
          "fileName" : "/app/code/amplifyUIBuilder.java",
          "excerpt" : "public class AWSAmplifyUIBuilderUtil {\n\n    public void AWSAmplifyUIBuilderFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AmplifyUIBuilder amplifyUIBuilder = new AmplifyUIBuilder();\n\n        CreateUserRequest createUserRequest = new CreateUserRequest() /* <=== com.amazonaws.services.amplifyuibuilder.model.CreateUserRequest.withFirstName */ \n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber)\n                .withDOB(DOB);\n"
        },
        {
          "sample" : "defaultClient()",
          "lineNumber" : 16,
          "columnNumber" : 39,
          "fileName" : "/app/code/amplify.java",
          "excerpt" : "public class AmplifyPersonalDataProcessor {\n    private static final String AMPLIFY_APP_ID = \"your-amplify-app-id\";\n    private static final String AMPLIFY_BACKEND_API_NAME = \"your-amplify-backend-api-name\";\n\n    public static void main(String[] args) {\n        AmazonAmplify amplifyClient = AmazonAmplifyClientBuilder.defaultClient(); /* <=== com.amazonaws.services.amplify.AmazonAmplifyClientBuilder.defaultClient */ \n\n        // Create a backend API if it doesn't already exist\n        CreateBackendAPIRequest createBackendAPIRequest = new CreateBackendAPIRequest()\n                .withAppId(AMPLIFY_APP_ID)\n                .withBackendEnvironmentName(\"prod\")"
        },
        {
          "sample" : "createBackendAuthIdentityPool(poolRequest)",
          "lineNumber" : 24,
          "columnNumber" : 58,
          "fileName" : "/app/code/amplifyBackend.java",
          "excerpt" : "        CreateBackendAuthIdentityPoolRequest poolRequest = new CreateBackendAuthIdentityPoolRequest()\n                .withIdentityPoolName(\"UserIdentityPool\")\n                .withUserId(userId)\n                .withUsername(email)\n                .withPassword(name);\n        CreateBackendAuthIdentityPoolResult poolResult = backendClient.createBackendAuthIdentityPool(poolRequest); /* <=== com.amazonaws.services.amplifybackend.AmplifyBackend.createBackendAuthIdentityPool */ \n\n        // Create the user in the backend\n        CreateBackendAuthUserRequest userRequest = new CreateBackendAuthUserRequest()\n                .withUserId(userId)\n                .withUsername(email)"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Pinpoint",
      "occurrences" : [
        {
          "sample" : "new EventDestinationDefinition()",
          "lineNumber" : 14,
          "columnNumber" : -1,
          "fileName" : "/app/code/pinpointsmsvoice.java",
          "excerpt" : "        AmazonPinpointSMSVoice client = AmazonPinpointSMSVoiceClientBuilder.standard().build();\n\n        String configurationSetName = \"sample-config-set\";\n        String eventDestinationName = \"sample-event-destination\";\n\n        EventDestinationDefinition eventDestination = new EventDestinationDefinition() /* <=== com.amazonaws.services.pinpointsmsvoice.model.EventDestinationDefinition.<init> */ \n                .withSnsDestination(new SnsDestination().withTopicArn(\"arn:aws:sns:us-west-2:123456789012:sample-topic\"));\n\n        CreateConfigurationSetEventDestinationRequest request = new CreateConfigurationSetEventDestinationRequest()\n                .withConfigurationSetName(configurationSetName)\n                .withEventDestinationName(eventDestinationName)"
        },
        {
          "sample" : "withApplicationId(\"YOUR_APP_ID\")",
          "lineNumber" : 12,
          "columnNumber" : 41,
          "fileName" : "/app/code/pinpoint.java",
          "excerpt" : "    public static void main(String[] args) {\n        // Create a Pinpoint client\n        AmazonPinpoint pinpoint = AmazonPinpointClientBuilder.defaultClient();\n\n        // Create a new campaign\n        CreateCampaignRequest request = new CreateCampaignRequest() /* <=== com.amazonaws.services.pinpoint.model.CreateCampaignRequest.withApplicationId */ \n                .withApplicationId(\"YOUR_APP_ID\")\n                .withName(\"Example Campaign\")\n                .withDescription(\"This is an example campaign.\");\n        pinpoint.createCampaign(request);\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Elasticache",
      "occurrences" : [
        {
          "sample" : "withCacheClusterId(CACHE_CLUSTER_ID)",
          "lineNumber" : 26,
          "columnNumber" : 63,
          "fileName" : "/app/code/elasticCache.java",
          "excerpt" : "                .withCredentials(new AWSStaticCredentialsProvider(credentials))\n                .withRegion(REGION)\n                .build();\n\n        // Create a cache cluster\n        CreateCacheClusterRequest createCacheClusterRequest = new CreateCacheClusterRequest() /* <=== com.amazonaws.services.elasticache.model.CreateCacheClusterRequest.withCacheClusterId */ \n                .withCacheClusterId(CACHE_CLUSTER_ID)\n                .withNumCacheNodes(1);\n        elastiCache.createCacheCluster(createCacheClusterRequest);\n\n        // Describe the cache cluster"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Transcribe",
      "occurrences" : [
        {
          "sample" : "startStreamTranscription(request)",
          "lineNumber" : 18,
          "columnNumber" : 49,
          "fileName" : "/app/code/transcribeStreaming.java",
          "excerpt" : "            .withMediaEncoding(\"pcm\")\n            .withMediaSampleRateHertz(16000)\n            .withTranscriptionJobName(\"MyTranscriptionJob\")\n            .withMediaEventHandler(new MyAudioStreamHandler());\n\n        StartStreamTranscriptionResult result = transcribe.startStreamTranscription(request); /* <=== com.amazonaws.services.transcribestreaming.AmazonTranscribeStreaming.startStreamTranscription */ \n        System.out.println(\"Transcription started with job id: \" + result.getTranscriptionJob().getTranscriptionJobName());\n    }\n}\n\nclass MyAudioStreamHandler implements MediaEventStreamHandler {"
        },
        {
          "sample" : "withLanguageCode(\"en-US\")",
          "lineNumber" : 26,
          "columnNumber" : 48,
          "fileName" : "/app/code/transcribe.java",
          "excerpt" : "\n        // Replace with your file's S3 bucket and key\n        String s3Bucket = \"BUCKET_NAME\";\n        String s3Key = \"FILE_KEY\";\n\n        StartTranscriptionJobRequest request = new StartTranscriptionJobRequest() /* <=== com.amazonaws.services.transcribe.model.StartTranscriptionJobRequest.withLanguageCode */ \n                .withLanguageCode(\"en-US\")\n                .withMediaFormat(\"mp3\")\n                .withMediaSampleRateHertz(8000)\n                .withTranscriptionJobName(\"TranscriptionJobName\")\n                .withMedia(new Media().withMediaFileUri(\"s3://\" + s3Bucket + \"/\" + s3Key));"
        },
        {
          "sample" : "startMedicalTranscriptionJob(request)",
          "lineNumber" : 23,
          "columnNumber" : 53,
          "fileName" : "/app/code/transcribeMedical.java",
          "excerpt" : "                .withTranscriptionJobName(\"my-transcription-job\")\n                .withOutputBucketName(\"my-output-bucket\")\n                .withInputMediaFileUri(\"s3://my-input-bucket/audio-file.wav\");\n        \n        // Start the transcription job\n        StartMedicalTranscriptionJobResult result = transcribeMedical.startMedicalTranscriptionJob(request); /* <=== com.amazonaws.services.transcribemedical.AWSTranscribeMedical.startMedicalTranscriptionJob */ \n        \n        // Print the job status\n        System.out.println(\"Transcription job status: \" + result.getTranscriptionJob().getTranscriptionJobStatus());\n    }\n}"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.SQS",
      "occurrences" : [
        {
          "sample" : "new SendMessageRequest(QUEUE_URL, messageBody)",
          "lineNumber" : 30,
          "columnNumber" : -1,
          "fileName" : "/app/code/sqs.java",
          "excerpt" : "\n        // Create a message to send\n        String messageBody = \"Hello, SQS!\";\n\n        // Send the message\n        SendMessageRequest sendMessageRequest = new SendMessageRequest(QUEUE_URL, messageBody); /* <=== com.amazonaws.services.sqs.model.SendMessageRequest.<init> */ \n        sqs.sendMessage(sendMessageRequest);\n    }\n}\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.DisasterRecoveryService",
      "occurrences" : [
        {
          "sample" : "new CreateReplicationJobRequest()",
          "lineNumber" : 21,
          "columnNumber" : -1,
          "fileName" : "/app/code/disasterRecoveryService.java",
          "excerpt" : "                .withCredentials(new AWSStaticCredentialsProvider(credentials))\n                .withRegion(\"us-west-2\")\n                .build();\n\n        // Create a new Replication Job\n        CreateReplicationJobRequest createReplicationJobRequest = new CreateReplicationJobRequest() /* <=== com.amazonaws.services.disasterrecovery.model.CreateReplicationJobRequest.<init> */ \n                .withReplicationJobId(\"my-replication-job\")\n                .withFrequency(24)\n                .withStartTimestamp(System.currentTimeMillis());\n        CreateReplicationJobResult createReplicationJobResult = disasterRecovery.createReplicationJob(createReplicationJobRequest);\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.SimpleNotificationService",
      "occurrences" : [
        {
          "sample" : "publish(topicArn, message)",
          "lineNumber" : 22,
          "columnNumber" : 9,
          "fileName" : "/app/code/sns.java",
          "excerpt" : "                .withRegion(Regions.US_EAST_1)\n                .build();\n    }\n\n    public void sendMessage(String topicArn, String message) {\n        snsClient.publish(topicArn, message); /* <=== com.amazonaws.services.sns.AmazonSNS.publish */ \n        System.out.println(\"Sent message: \" + message);\n    }\n\n    public static void main(String[] args) {\n        SNSSink snsSink = new SNSSink();"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Omics",
      "occurrences" : [
        {
          "sample" : "standard()",
          "lineNumber" : 8,
          "columnNumber" : 41,
          "fileName" : "/app/code/omics.java",
          "excerpt" : "import com.amazonaws.services.omics.model.*;\nimport java.util.List;\n\npublic class PersonalDataProcessor {\n    public static void main(String[] args) {\n        AWSOmicsClientBuilder builder = AWSOmicsClientBuilder.standard(); /* <=== com.amazonaws.services.omics.AWSOmicsClientBuilder.standard */ \n        AWSOmics omicsClient = builder.build();\n\n        String sampleId = \"sample1\";\n        GetSampleRequest sampleRequest = new GetSampleRequest().withSampleId(sampleId);\n        GetSampleResult sampleResult = omicsClient.getSample(sampleRequest);"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.S3",
      "occurrences" : [
        {
          "sample" : "getEndpoint()",
          "lineNumber" : 16,
          "columnNumber" : 27,
          "fileName" : "/app/code/s3Outpost.java",
          "excerpt" : "        // Create an S3 Outposts endpoint\n        CreateEndpointRequest createEndpointRequest = new CreateEndpointRequest()\n                .withOutpostId(\"op-01234567890abcdef\")\n                .withSecurityGroupIds(\"sg-01234567890abcdef\");\n        CreateEndpointResult createEndpointResult = client.createEndpoint(createEndpointRequest);\n        String endpoint = createEndpointResult.getEndpoint(); /* <=== com.amazonaws.services.s3outposts.model.CreateEndpointResult.getEndpoint */ \n\n        // Set the endpoint for the client\n        client.setEndpoint(endpoint);\n\n        // Create a PutObjectRequest to upload a file to the S3 Outposts bucket"
        },
        {
          "sample" : "new PutObjectRequest(\"bucket-name\", \"personal-data.txt\", personalDataStream, null)",
          "lineNumber" : 35,
          "columnNumber" : -1,
          "fileName" : "/app/code/sso.java",
          "excerpt" : "        GetRoleCredentialsResult roleCredentialsResult = ssoClient.getRoleCredentials(roleCredentialsRequest);\n        Map<String, String> credentials = roleCredentialsResult.getRoleCredentials();\n\n        // 2. Use the obtained credentials to access personal data in S3\n        InputStream personalDataStream = new ByteArrayInputStream(personalData.getBytes(StandardCharsets.UTF_8));\n        PutObjectRequest putObjectRequest = new PutObjectRequest(\"bucket-name\", \"personal-data.txt\", personalDataStream, null); /* <=== com.amazonaws.services.s3.model.PutObjectRequest.<init> */ \n        PutObjectResult putObjectResult = s3Client.putObject(putObjectRequest);\n    }\n}\n"
        },
        {
          "sample" : "putObject(request)",
          "lineNumber" : 41,
          "columnNumber" : 9,
          "fileName" : "/app/code/s3.java",
          "excerpt" : "        // Create an S3 put object request\n        PutObjectRequest request = new PutObjectRequest(bucketName, \"path/in/bucket/file.txt\", file)\n                .withMetadata(metadata);\n\n        // Upload the file to S3\n        s3Client.putObject(request); /* <=== com.amazonaws.services.s3.AmazonS3.putObject */ \n    }\n}"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.LexRuntime",
      "occurrences" : [
        {
          "sample" : "withBotName(\"PersonalDataBot\")",
          "lineNumber" : 16,
          "columnNumber" : 43,
          "fileName" : "/app/code/lexRuntime.java",
          "excerpt" : "        lexRuntimeClient = AmazonLexRuntimeClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Send the personal data to Amazon Lex for processing\n        PostTextRequest postTextRequest = new PostTextRequest() /* <=== com.amazonaws.services.lexruntime.model.PostTextRequest.withBotName */ \n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\"))\n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Health",
      "occurrences" : [
        {
          "sample" : "storePersonalData(request)",
          "lineNumber" : 16,
          "columnNumber" : 37,
          "fileName" : "/app/code/healthlake.java",
          "excerpt" : "  }\n  \n  public List<HealthLakeResponse> processPersonalData(List<HealthLakeRequest> personalDataRecords) {\n    List<HealthLakeResponse> processedData = new ArrayList<>();\n    for (HealthLakeRequest request : personalDataRecords) {\n      HealthLakeResponse response = healthLakeClient.storePersonalData(request); /* <=== com.amazonaws.services.healthlake.AmazonHealthLakeClient.storePersonalData */ \n      processedData.add(response);\n    }\n    return processedData;\n  }\n}"
        },
        {
          "sample" : "describeEvents(describeEventsRequest)",
          "lineNumber" : 13,
          "columnNumber" : 53,
          "fileName" : "/app/code/health.java",
          "excerpt" : "    public static void main(String[] args) {\n        AWSHealth healthClient = AWSHealthClientBuilder.defaultClient();\n\n        DescribeEventsRequest describeEventsRequest = new DescribeEventsRequest();\n\n        DescribeEventsResult describeEventsResult = healthClient.describeEvents(describeEventsRequest); /* <=== com.amazonaws.services.health.AWSHealth.describeEvents */ \n\n        System.out.println(\"Total number of events: \" + describeEventsResult.getTotal());\n    }\n}\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Shield",
      "occurrences" : [
        {
          "sample" : "defaultClient()",
          "lineNumber" : 9,
          "columnNumber" : 34,
          "fileName" : "/app/code/shield.java",
          "excerpt" : "import com.amazonaws.services.shield.model.DescribeProtectionResult;\n\npublic class PersonalDataProcessor {\n\n    public static void main(String[] args) {\n        AWSShield shieldClient = AWSShieldClientBuilder.defaultClient(); /* <=== com.amazonaws.services.shield.AWSShieldClientBuilder.defaultClient */ \n\n        DescribeProtectionRequest describeProtectionRequest = new DescribeProtectionRequest();\n\n        DescribeProtectionResult describeProtectionResult = shieldClient.describeProtection(describeProtectionRequest);\n"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.Comprehend",
      "occurrences" : [
        {
          "sample" : "getSentiment()",
          "lineNumber" : 19,
          "columnNumber" : 44,
          "fileName" : "/app/code/comprehend.java",
          "excerpt" : "        DetectSentimentRequest detectSentimentRequest = new DetectSentimentRequest()\n                .withText(text)\n                .withLanguageCode(\"en\");\n\n        DetectSentimentResult detectSentimentResult = comprehendClient.detectSentiment(detectSentimentRequest);\n        System.out.println(\"Sentiment: \" + detectSentimentResult.getSentiment()); /* <=== com.amazonaws.services.comprehend.model.DetectSentimentResult.getSentiment */ \n    }\n}\n"
        },
        {
          "sample" : "detectEntities(request)",
          "lineNumber" : 14,
          "columnNumber" : 39,
          "fileName" : "/app/code/comprehendMedical.java",
          "excerpt" : "        AmazonComprehendMedical comprehendMedical = AmazonComprehendMedicalClientBuilder.standard().build();\n\n        String text = \"Patient has a history of heart disease and is currently taking lisinopril and aspirin.\";\n\n        DetectEntitiesRequest request = new DetectEntitiesRequest().withText(text);\n        DetectEntitiesResult result = comprehendMedical.detectEntities(request); /* <=== com.amazonaws.services.comprehendmedical.AmazonComprehendMedical.detectEntities */ \n\n        System.out.println(\"Entities found: \" + result.getEntities());\n    }\n}"
        }
      ]
    },
    {
      "sinkId" : "ThirdParties.SDK.Amazonaws.CloudWatchLogs",
      "occurrences" : [
        {
          "sample" : "defaultClient()",
          "lineNumber" : 13,
          "columnNumber" : 40,
          "fileName" : "/app/code/logs.java",
          "excerpt" : "import com.amazonaws.services.logs.model.PutLogEventsRequest;\n\npublic class CloudWatchLogs {\n    public static void main(String[] args) {\n        // Initialize the Amazon CloudWatch Logs client\n        AWSLogs cloudWatchLogsClient = AWSLogsClientBuilder.defaultClient(); /* <=== com.amazonaws.services.logs.AWSLogsClientBuilder.defaultClient */ \n        \n        // Define the CloudWatch Logs stream\n        String logGroupName = \"personal-data-logs\";\n        String logStreamName = \"personal-data-stream\";\n        "
        }
      ]
    }
  ],
  "probableSinks" : [
  ],
  "dataFlow" : {
    "storages" : [
      {
        "sourceId" : "Data.Sensitive.PersonalIdentification.FirstName",
        "sinks" : [
          {
            "sinkType" : "storages",
            "id" : "Storages.SpringFramework.Jdbc.Write",
            "name" : "Java Database Connector(Write)",
            "category" : "",
            "domains" : [
              "oracle.com"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "databaseDetails" : {
              "dbName" : "",
              "dbVendor" : "",
              "dbLocation" : "",
              "dbOperation" : ""
            },
            "paths" : [
              {
                "pathId" : "4541-4539-4543-4547-4551-4554",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 41,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/redshift.java",
                    "excerpt" : "                establishConnection();\n            }\n\n            String sql = \"INSERT INTO personal_data (first_name, last_name, age, address) VALUES (?, ?, ?, ?)\";\n            PreparedStatement statement = conn.prepareStatement(sql);\n            statement.setString(1, firstName); /* <=== java.lang.String */ \n            statement.setString(2, lastName);\n            statement.setInt(3, age);\n            statement.setString(4, address);\n            statement.executeUpdate();\n        } catch (SQLException e) {"
                  },
                  {
                    "sample" : "statement",
                    "lineNumber" : 41,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/redshift.java",
                    "excerpt" : "                establishConnection();\n            }\n\n            String sql = \"INSERT INTO personal_data (first_name, last_name, age, address) VALUES (?, ?, ?, ?)\";\n            PreparedStatement statement = conn.prepareStatement(sql);\n            statement.setString(1, firstName); /* <=== java.sql.PreparedStatement */ \n            statement.setString(2, lastName);\n            statement.setInt(3, age);\n            statement.setString(4, address);\n            statement.executeUpdate();\n        } catch (SQLException e) {"
                  },
                  {
                    "sample" : "statement",
                    "lineNumber" : 42,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/redshift.java",
                    "excerpt" : "            }\n\n            String sql = \"INSERT INTO personal_data (first_name, last_name, age, address) VALUES (?, ?, ?, ?)\";\n            PreparedStatement statement = conn.prepareStatement(sql);\n            statement.setString(1, firstName);\n            statement.setString(2, lastName); /* <=== java.sql.PreparedStatement */ \n            statement.setInt(3, age);\n            statement.setString(4, address);\n            statement.executeUpdate();\n        } catch (SQLException e) {\n            System.out.println(\"Error while inserting personal data into Redshift\");"
                  },
                  {
                    "sample" : "statement",
                    "lineNumber" : 43,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/redshift.java",
                    "excerpt" : "\n            String sql = \"INSERT INTO personal_data (first_name, last_name, age, address) VALUES (?, ?, ?, ?)\";\n            PreparedStatement statement = conn.prepareStatement(sql);\n            statement.setString(1, firstName);\n            statement.setString(2, lastName);\n            statement.setInt(3, age); /* <=== java.sql.PreparedStatement */ \n            statement.setString(4, address);\n            statement.executeUpdate();\n        } catch (SQLException e) {\n            System.out.println(\"Error while inserting personal data into Redshift\");\n            e.printStackTrace();"
                  },
                  {
                    "sample" : "statement",
                    "lineNumber" : 44,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/redshift.java",
                    "excerpt" : "            String sql = \"INSERT INTO personal_data (first_name, last_name, age, address) VALUES (?, ?, ?, ?)\";\n            PreparedStatement statement = conn.prepareStatement(sql);\n            statement.setString(1, firstName);\n            statement.setString(2, lastName);\n            statement.setInt(3, age);\n            statement.setString(4, address); /* <=== java.sql.PreparedStatement */ \n            statement.executeUpdate();\n        } catch (SQLException e) {\n            System.out.println(\"Error while inserting personal data into Redshift\");\n            e.printStackTrace();\n        }"
                  },
                  {
                    "sample" : "statement.executeUpdate()",
                    "lineNumber" : 45,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/redshift.java",
                    "excerpt" : "            PreparedStatement statement = conn.prepareStatement(sql);\n            statement.setString(1, firstName);\n            statement.setString(2, lastName);\n            statement.setInt(3, age);\n            statement.setString(4, address);\n            statement.executeUpdate(); /* <=== java.sql.PreparedStatement.executeUpdate */ \n        } catch (SQLException e) {\n            System.out.println(\"Error while inserting personal data into Redshift\");\n            e.printStackTrace();\n        }\n    }"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.AccountData.AccountName",
        "sinks" : [
          {
            "sinkType" : "storages",
            "id" : "Storages.SpringFramework.Jdbc.Write",
            "name" : "Java Database Connector(Write)",
            "category" : "",
            "domains" : [
              "oracle.com"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "databaseDetails" : {
              "dbName" : "",
              "dbVendor" : "",
              "dbLocation" : "",
              "dbOperation" : ""
            },
            "paths" : [
              {
                "pathId" : "7279-7310-7309-7307-7306-7320-7319-7318-7323-7327-7331-7334",
                "path" : [
                  {
                    "sample" : "username",
                    "lineNumber" : 14,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/rds.java",
                    "excerpt" : "\n    public static void main(String[] args) {\n        String hostname = \"sample-rds-instance.rds.amazonaws.com\";\n        int port = 5432;\n        String dbName = \"sample_db\";\n        String username = \"sample_user\"; /* <=== java.lang.String */ \n        String password = \"sample_password\";\n        String jdbcUrl = \"jdbc:postgresql://\" + hostname + \":\" + port + \"/\" + dbName;\n\n        Connection connection = null;\n        try {"
                  },
                  {
                    "sample" : "username",
                    "lineNumber" : 20,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/rds.java",
                    "excerpt" : "        String password = \"sample_password\";\n        String jdbcUrl = \"jdbc:postgresql://\" + hostname + \":\" + port + \"/\" + dbName;\n\n        Connection connection = null;\n        try {\n            connection = DriverManager.getConnection(jdbcUrl, username, password); /* <=== java.lang.String */ \n            String insertSql = \"INSERT INTO personal_data (first_name, last_name, email) VALUES (?, ?, ?)\";\n            PreparedStatement insertStatement = connection.prepareStatement(insertSql);\n            insertStatement.setString(1, \"John\");\n            insertStatement.setString(2, \"Doe\");\n            insertStatement.setString(3, \"john.doe@example.com\");"
                  },
                  {
                    "sample" : "jdbcUrl",
                    "lineNumber" : 20,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/rds.java",
                    "excerpt" : "        String password = \"sample_password\";\n        String jdbcUrl = \"jdbc:postgresql://\" + hostname + \":\" + port + \"/\" + dbName;\n\n        Connection connection = null;\n        try {\n            connection = DriverManager.getConnection(jdbcUrl, username, password); /* <=== java.lang.String */ \n            String insertSql = \"INSERT INTO personal_data (first_name, last_name, email) VALUES (?, ?, ?)\";\n            PreparedStatement insertStatement = connection.prepareStatement(insertSql);\n            insertStatement.setString(1, \"John\");\n            insertStatement.setString(2, \"Doe\");\n            insertStatement.setString(3, \"john.doe@example.com\");"
                  },
                  {
                    "sample" : "DriverManager.getConnection(jdbcUrl, username, password)",
                    "lineNumber" : 20,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/rds.java",
                    "excerpt" : "        String password = \"sample_password\";\n        String jdbcUrl = \"jdbc:postgresql://\" + hostname + \":\" + port + \"/\" + dbName;\n\n        Connection connection = null;\n        try {\n            connection = DriverManager.getConnection(jdbcUrl, username, password); /* <=== java.sql.DriverManager.getConnection */ \n            String insertSql = \"INSERT INTO personal_data (first_name, last_name, email) VALUES (?, ?, ?)\";\n            PreparedStatement insertStatement = connection.prepareStatement(insertSql);\n            insertStatement.setString(1, \"John\");\n            insertStatement.setString(2, \"Doe\");\n            insertStatement.setString(3, \"john.doe@example.com\");"
                  },
                  {
                    "sample" : "connection",
                    "lineNumber" : 20,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/rds.java",
                    "excerpt" : "        String password = \"sample_password\";\n        String jdbcUrl = \"jdbc:postgresql://\" + hostname + \":\" + port + \"/\" + dbName;\n\n        Connection connection = null;\n        try {\n            connection = DriverManager.getConnection(jdbcUrl, username, password); /* <=== java.sql.Connection */ \n            String insertSql = \"INSERT INTO personal_data (first_name, last_name, email) VALUES (?, ?, ?)\";\n            PreparedStatement insertStatement = connection.prepareStatement(insertSql);\n            insertStatement.setString(1, \"John\");\n            insertStatement.setString(2, \"Doe\");\n            insertStatement.setString(3, \"john.doe@example.com\");"
                  },
                  {
                    "sample" : "connection",
                    "lineNumber" : 22,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/rds.java",
                    "excerpt" : "\n        Connection connection = null;\n        try {\n            connection = DriverManager.getConnection(jdbcUrl, username, password);\n            String insertSql = \"INSERT INTO personal_data (first_name, last_name, email) VALUES (?, ?, ?)\";\n            PreparedStatement insertStatement = connection.prepareStatement(insertSql); /* <=== java.sql.Connection */ \n            insertStatement.setString(1, \"John\");\n            insertStatement.setString(2, \"Doe\");\n            insertStatement.setString(3, \"john.doe@example.com\");\n            insertStatement.executeUpdate();\n        } catch (SQLException e) {"
                  },
                  {
                    "sample" : "connection.prepareStatement(insertSql)",
                    "lineNumber" : 22,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/rds.java",
                    "excerpt" : "\n        Connection connection = null;\n        try {\n            connection = DriverManager.getConnection(jdbcUrl, username, password);\n            String insertSql = \"INSERT INTO personal_data (first_name, last_name, email) VALUES (?, ?, ?)\";\n            PreparedStatement insertStatement = connection.prepareStatement(insertSql); /* <=== java.sql.Connection.prepareStatement */ \n            insertStatement.setString(1, \"John\");\n            insertStatement.setString(2, \"Doe\");\n            insertStatement.setString(3, \"john.doe@example.com\");\n            insertStatement.executeUpdate();\n        } catch (SQLException e) {"
                  },
                  {
                    "sample" : "insertStatement",
                    "lineNumber" : 22,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/rds.java",
                    "excerpt" : "\n        Connection connection = null;\n        try {\n            connection = DriverManager.getConnection(jdbcUrl, username, password);\n            String insertSql = \"INSERT INTO personal_data (first_name, last_name, email) VALUES (?, ?, ?)\";\n            PreparedStatement insertStatement = connection.prepareStatement(insertSql); /* <=== java.sql.PreparedStatement */ \n            insertStatement.setString(1, \"John\");\n            insertStatement.setString(2, \"Doe\");\n            insertStatement.setString(3, \"john.doe@example.com\");\n            insertStatement.executeUpdate();\n        } catch (SQLException e) {"
                  },
                  {
                    "sample" : "insertStatement",
                    "lineNumber" : 23,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/rds.java",
                    "excerpt" : "        Connection connection = null;\n        try {\n            connection = DriverManager.getConnection(jdbcUrl, username, password);\n            String insertSql = \"INSERT INTO personal_data (first_name, last_name, email) VALUES (?, ?, ?)\";\n            PreparedStatement insertStatement = connection.prepareStatement(insertSql);\n            insertStatement.setString(1, \"John\"); /* <=== java.sql.PreparedStatement */ \n            insertStatement.setString(2, \"Doe\");\n            insertStatement.setString(3, \"john.doe@example.com\");\n            insertStatement.executeUpdate();\n        } catch (SQLException e) {\n            System.err.println(\"Error connecting to the database: \" + e.getMessage());"
                  },
                  {
                    "sample" : "insertStatement",
                    "lineNumber" : 24,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/rds.java",
                    "excerpt" : "        try {\n            connection = DriverManager.getConnection(jdbcUrl, username, password);\n            String insertSql = \"INSERT INTO personal_data (first_name, last_name, email) VALUES (?, ?, ?)\";\n            PreparedStatement insertStatement = connection.prepareStatement(insertSql);\n            insertStatement.setString(1, \"John\");\n            insertStatement.setString(2, \"Doe\"); /* <=== java.sql.PreparedStatement */ \n            insertStatement.setString(3, \"john.doe@example.com\");\n            insertStatement.executeUpdate();\n        } catch (SQLException e) {\n            System.err.println(\"Error connecting to the database: \" + e.getMessage());\n        } finally {"
                  },
                  {
                    "sample" : "insertStatement",
                    "lineNumber" : 25,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/rds.java",
                    "excerpt" : "            connection = DriverManager.getConnection(jdbcUrl, username, password);\n            String insertSql = \"INSERT INTO personal_data (first_name, last_name, email) VALUES (?, ?, ?)\";\n            PreparedStatement insertStatement = connection.prepareStatement(insertSql);\n            insertStatement.setString(1, \"John\");\n            insertStatement.setString(2, \"Doe\");\n            insertStatement.setString(3, \"john.doe@example.com\"); /* <=== java.sql.PreparedStatement */ \n            insertStatement.executeUpdate();\n        } catch (SQLException e) {\n            System.err.println(\"Error connecting to the database: \" + e.getMessage());\n        } finally {\n            if (connection != null) {"
                  },
                  {
                    "sample" : "insertStatement.executeUpdate()",
                    "lineNumber" : 26,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/rds.java",
                    "excerpt" : "            String insertSql = \"INSERT INTO personal_data (first_name, last_name, email) VALUES (?, ?, ?)\";\n            PreparedStatement insertStatement = connection.prepareStatement(insertSql);\n            insertStatement.setString(1, \"John\");\n            insertStatement.setString(2, \"Doe\");\n            insertStatement.setString(3, \"john.doe@example.com\");\n            insertStatement.executeUpdate(); /* <=== java.sql.PreparedStatement.executeUpdate */ \n        } catch (SQLException e) {\n            System.err.println(\"Error connecting to the database: \" + e.getMessage());\n        } finally {\n            if (connection != null) {\n                try {"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.PersonalIdentification.Age",
        "sinks" : [
          {
            "sinkType" : "storages",
            "id" : "Storages.SpringFramework.Jdbc.Write",
            "name" : "Java Database Connector(Write)",
            "category" : "",
            "domains" : [
              "oracle.com"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "databaseDetails" : {
              "dbName" : "",
              "dbVendor" : "",
              "dbLocation" : "",
              "dbOperation" : ""
            },
            "paths" : [
              {
                "pathId" : "4549-4547-4551-4554",
                "path" : [
                  {
                    "sample" : "age",
                    "lineNumber" : 43,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/redshift.java",
                    "excerpt" : "\n            String sql = \"INSERT INTO personal_data (first_name, last_name, age, address) VALUES (?, ?, ?, ?)\";\n            PreparedStatement statement = conn.prepareStatement(sql);\n            statement.setString(1, firstName);\n            statement.setString(2, lastName);\n            statement.setInt(3, age); /* <=== int */ \n            statement.setString(4, address);\n            statement.executeUpdate();\n        } catch (SQLException e) {\n            System.out.println(\"Error while inserting personal data into Redshift\");\n            e.printStackTrace();"
                  },
                  {
                    "sample" : "statement",
                    "lineNumber" : 43,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/redshift.java",
                    "excerpt" : "\n            String sql = \"INSERT INTO personal_data (first_name, last_name, age, address) VALUES (?, ?, ?, ?)\";\n            PreparedStatement statement = conn.prepareStatement(sql);\n            statement.setString(1, firstName);\n            statement.setString(2, lastName);\n            statement.setInt(3, age); /* <=== java.sql.PreparedStatement */ \n            statement.setString(4, address);\n            statement.executeUpdate();\n        } catch (SQLException e) {\n            System.out.println(\"Error while inserting personal data into Redshift\");\n            e.printStackTrace();"
                  },
                  {
                    "sample" : "statement",
                    "lineNumber" : 44,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/redshift.java",
                    "excerpt" : "            String sql = \"INSERT INTO personal_data (first_name, last_name, age, address) VALUES (?, ?, ?, ?)\";\n            PreparedStatement statement = conn.prepareStatement(sql);\n            statement.setString(1, firstName);\n            statement.setString(2, lastName);\n            statement.setInt(3, age);\n            statement.setString(4, address); /* <=== java.sql.PreparedStatement */ \n            statement.executeUpdate();\n        } catch (SQLException e) {\n            System.out.println(\"Error while inserting personal data into Redshift\");\n            e.printStackTrace();\n        }"
                  },
                  {
                    "sample" : "statement.executeUpdate()",
                    "lineNumber" : 45,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/redshift.java",
                    "excerpt" : "            PreparedStatement statement = conn.prepareStatement(sql);\n            statement.setString(1, firstName);\n            statement.setString(2, lastName);\n            statement.setInt(3, age);\n            statement.setString(4, address);\n            statement.executeUpdate(); /* <=== java.sql.PreparedStatement.executeUpdate */ \n        } catch (SQLException e) {\n            System.out.println(\"Error while inserting personal data into Redshift\");\n            e.printStackTrace();\n        }\n    }"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.ContactData.Address",
        "sinks" : [
          {
            "sinkType" : "storages",
            "id" : "Storages.SpringFramework.Jdbc.Write",
            "name" : "Java Database Connector(Write)",
            "category" : "",
            "domains" : [
              "oracle.com"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "databaseDetails" : {
              "dbName" : "",
              "dbVendor" : "",
              "dbLocation" : "",
              "dbOperation" : ""
            },
            "paths" : [
              {
                "pathId" : "4553-4551-4554",
                "path" : [
                  {
                    "sample" : "address",
                    "lineNumber" : 44,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/redshift.java",
                    "excerpt" : "            String sql = \"INSERT INTO personal_data (first_name, last_name, age, address) VALUES (?, ?, ?, ?)\";\n            PreparedStatement statement = conn.prepareStatement(sql);\n            statement.setString(1, firstName);\n            statement.setString(2, lastName);\n            statement.setInt(3, age);\n            statement.setString(4, address); /* <=== java.lang.String */ \n            statement.executeUpdate();\n        } catch (SQLException e) {\n            System.out.println(\"Error while inserting personal data into Redshift\");\n            e.printStackTrace();\n        }"
                  },
                  {
                    "sample" : "statement",
                    "lineNumber" : 44,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/redshift.java",
                    "excerpt" : "            String sql = \"INSERT INTO personal_data (first_name, last_name, age, address) VALUES (?, ?, ?, ?)\";\n            PreparedStatement statement = conn.prepareStatement(sql);\n            statement.setString(1, firstName);\n            statement.setString(2, lastName);\n            statement.setInt(3, age);\n            statement.setString(4, address); /* <=== java.sql.PreparedStatement */ \n            statement.executeUpdate();\n        } catch (SQLException e) {\n            System.out.println(\"Error while inserting personal data into Redshift\");\n            e.printStackTrace();\n        }"
                  },
                  {
                    "sample" : "statement.executeUpdate()",
                    "lineNumber" : 45,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/redshift.java",
                    "excerpt" : "            PreparedStatement statement = conn.prepareStatement(sql);\n            statement.setString(1, firstName);\n            statement.setString(2, lastName);\n            statement.setInt(3, age);\n            statement.setString(4, address);\n            statement.executeUpdate(); /* <=== java.sql.PreparedStatement.executeUpdate */ \n        } catch (SQLException e) {\n            System.out.println(\"Error while inserting personal data into Redshift\");\n            e.printStackTrace();\n        }\n    }"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.PersonalIdentification.LastName",
        "sinks" : [
          {
            "sinkType" : "storages",
            "id" : "Storages.SpringFramework.Jdbc.Write",
            "name" : "Java Database Connector(Write)",
            "category" : "",
            "domains" : [
              "oracle.com"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "databaseDetails" : {
              "dbName" : "",
              "dbVendor" : "",
              "dbLocation" : "",
              "dbOperation" : ""
            },
            "paths" : [
              {
                "pathId" : "4545-4543-4547-4551-4554",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 42,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/redshift.java",
                    "excerpt" : "            }\n\n            String sql = \"INSERT INTO personal_data (first_name, last_name, age, address) VALUES (?, ?, ?, ?)\";\n            PreparedStatement statement = conn.prepareStatement(sql);\n            statement.setString(1, firstName);\n            statement.setString(2, lastName); /* <=== java.lang.String */ \n            statement.setInt(3, age);\n            statement.setString(4, address);\n            statement.executeUpdate();\n        } catch (SQLException e) {\n            System.out.println(\"Error while inserting personal data into Redshift\");"
                  },
                  {
                    "sample" : "statement",
                    "lineNumber" : 42,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/redshift.java",
                    "excerpt" : "            }\n\n            String sql = \"INSERT INTO personal_data (first_name, last_name, age, address) VALUES (?, ?, ?, ?)\";\n            PreparedStatement statement = conn.prepareStatement(sql);\n            statement.setString(1, firstName);\n            statement.setString(2, lastName); /* <=== java.sql.PreparedStatement */ \n            statement.setInt(3, age);\n            statement.setString(4, address);\n            statement.executeUpdate();\n        } catch (SQLException e) {\n            System.out.println(\"Error while inserting personal data into Redshift\");"
                  },
                  {
                    "sample" : "statement",
                    "lineNumber" : 43,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/redshift.java",
                    "excerpt" : "\n            String sql = \"INSERT INTO personal_data (first_name, last_name, age, address) VALUES (?, ?, ?, ?)\";\n            PreparedStatement statement = conn.prepareStatement(sql);\n            statement.setString(1, firstName);\n            statement.setString(2, lastName);\n            statement.setInt(3, age); /* <=== java.sql.PreparedStatement */ \n            statement.setString(4, address);\n            statement.executeUpdate();\n        } catch (SQLException e) {\n            System.out.println(\"Error while inserting personal data into Redshift\");\n            e.printStackTrace();"
                  },
                  {
                    "sample" : "statement",
                    "lineNumber" : 44,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/redshift.java",
                    "excerpt" : "            String sql = \"INSERT INTO personal_data (first_name, last_name, age, address) VALUES (?, ?, ?, ?)\";\n            PreparedStatement statement = conn.prepareStatement(sql);\n            statement.setString(1, firstName);\n            statement.setString(2, lastName);\n            statement.setInt(3, age);\n            statement.setString(4, address); /* <=== java.sql.PreparedStatement */ \n            statement.executeUpdate();\n        } catch (SQLException e) {\n            System.out.println(\"Error while inserting personal data into Redshift\");\n            e.printStackTrace();\n        }"
                  },
                  {
                    "sample" : "statement.executeUpdate()",
                    "lineNumber" : 45,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/redshift.java",
                    "excerpt" : "            PreparedStatement statement = conn.prepareStatement(sql);\n            statement.setString(1, firstName);\n            statement.setString(2, lastName);\n            statement.setInt(3, age);\n            statement.setString(4, address);\n            statement.executeUpdate(); /* <=== java.sql.PreparedStatement.executeUpdate */ \n        } catch (SQLException e) {\n            System.out.println(\"Error while inserting personal data into Redshift\");\n            e.printStackTrace();\n        }\n    }"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.AccountData.AccountPassword",
        "sinks" : [
          {
            "sinkType" : "storages",
            "id" : "Storages.SpringFramework.Jdbc.Write",
            "name" : "Java Database Connector(Write)",
            "category" : "",
            "domains" : [
              "oracle.com"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "databaseDetails" : {
              "dbName" : "",
              "dbVendor" : "",
              "dbLocation" : "",
              "dbOperation" : ""
            },
            "paths" : [
              {
                "pathId" : "7283-7311-7310-7309-7307-7306-7320-7319-7318-7323-7327-7331-7334",
                "path" : [
                  {
                    "sample" : "password",
                    "lineNumber" : 15,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/rds.java",
                    "excerpt" : "    public static void main(String[] args) {\n        String hostname = \"sample-rds-instance.rds.amazonaws.com\";\n        int port = 5432;\n        String dbName = \"sample_db\";\n        String username = \"sample_user\";\n        String password = \"sample_password\"; /* <=== java.lang.String */ \n        String jdbcUrl = \"jdbc:postgresql://\" + hostname + \":\" + port + \"/\" + dbName;\n\n        Connection connection = null;\n        try {\n            connection = DriverManager.getConnection(jdbcUrl, username, password);"
                  },
                  {
                    "sample" : "password",
                    "lineNumber" : 20,
                    "columnNumber" : 73,
                    "fileName" : "/app/code/rds.java",
                    "excerpt" : "        String password = \"sample_password\";\n        String jdbcUrl = \"jdbc:postgresql://\" + hostname + \":\" + port + \"/\" + dbName;\n\n        Connection connection = null;\n        try {\n            connection = DriverManager.getConnection(jdbcUrl, username, password); /* <=== java.lang.String */ \n            String insertSql = \"INSERT INTO personal_data (first_name, last_name, email) VALUES (?, ?, ?)\";\n            PreparedStatement insertStatement = connection.prepareStatement(insertSql);\n            insertStatement.setString(1, \"John\");\n            insertStatement.setString(2, \"Doe\");\n            insertStatement.setString(3, \"john.doe@example.com\");"
                  },
                  {
                    "sample" : "username",
                    "lineNumber" : 20,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/rds.java",
                    "excerpt" : "        String password = \"sample_password\";\n        String jdbcUrl = \"jdbc:postgresql://\" + hostname + \":\" + port + \"/\" + dbName;\n\n        Connection connection = null;\n        try {\n            connection = DriverManager.getConnection(jdbcUrl, username, password); /* <=== java.lang.String */ \n            String insertSql = \"INSERT INTO personal_data (first_name, last_name, email) VALUES (?, ?, ?)\";\n            PreparedStatement insertStatement = connection.prepareStatement(insertSql);\n            insertStatement.setString(1, \"John\");\n            insertStatement.setString(2, \"Doe\");\n            insertStatement.setString(3, \"john.doe@example.com\");"
                  },
                  {
                    "sample" : "jdbcUrl",
                    "lineNumber" : 20,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/rds.java",
                    "excerpt" : "        String password = \"sample_password\";\n        String jdbcUrl = \"jdbc:postgresql://\" + hostname + \":\" + port + \"/\" + dbName;\n\n        Connection connection = null;\n        try {\n            connection = DriverManager.getConnection(jdbcUrl, username, password); /* <=== java.lang.String */ \n            String insertSql = \"INSERT INTO personal_data (first_name, last_name, email) VALUES (?, ?, ?)\";\n            PreparedStatement insertStatement = connection.prepareStatement(insertSql);\n            insertStatement.setString(1, \"John\");\n            insertStatement.setString(2, \"Doe\");\n            insertStatement.setString(3, \"john.doe@example.com\");"
                  },
                  {
                    "sample" : "DriverManager.getConnection(jdbcUrl, username, password)",
                    "lineNumber" : 20,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/rds.java",
                    "excerpt" : "        String password = \"sample_password\";\n        String jdbcUrl = \"jdbc:postgresql://\" + hostname + \":\" + port + \"/\" + dbName;\n\n        Connection connection = null;\n        try {\n            connection = DriverManager.getConnection(jdbcUrl, username, password); /* <=== java.sql.DriverManager.getConnection */ \n            String insertSql = \"INSERT INTO personal_data (first_name, last_name, email) VALUES (?, ?, ?)\";\n            PreparedStatement insertStatement = connection.prepareStatement(insertSql);\n            insertStatement.setString(1, \"John\");\n            insertStatement.setString(2, \"Doe\");\n            insertStatement.setString(3, \"john.doe@example.com\");"
                  },
                  {
                    "sample" : "connection",
                    "lineNumber" : 20,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/rds.java",
                    "excerpt" : "        String password = \"sample_password\";\n        String jdbcUrl = \"jdbc:postgresql://\" + hostname + \":\" + port + \"/\" + dbName;\n\n        Connection connection = null;\n        try {\n            connection = DriverManager.getConnection(jdbcUrl, username, password); /* <=== java.sql.Connection */ \n            String insertSql = \"INSERT INTO personal_data (first_name, last_name, email) VALUES (?, ?, ?)\";\n            PreparedStatement insertStatement = connection.prepareStatement(insertSql);\n            insertStatement.setString(1, \"John\");\n            insertStatement.setString(2, \"Doe\");\n            insertStatement.setString(3, \"john.doe@example.com\");"
                  },
                  {
                    "sample" : "connection",
                    "lineNumber" : 22,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/rds.java",
                    "excerpt" : "\n        Connection connection = null;\n        try {\n            connection = DriverManager.getConnection(jdbcUrl, username, password);\n            String insertSql = \"INSERT INTO personal_data (first_name, last_name, email) VALUES (?, ?, ?)\";\n            PreparedStatement insertStatement = connection.prepareStatement(insertSql); /* <=== java.sql.Connection */ \n            insertStatement.setString(1, \"John\");\n            insertStatement.setString(2, \"Doe\");\n            insertStatement.setString(3, \"john.doe@example.com\");\n            insertStatement.executeUpdate();\n        } catch (SQLException e) {"
                  },
                  {
                    "sample" : "connection.prepareStatement(insertSql)",
                    "lineNumber" : 22,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/rds.java",
                    "excerpt" : "\n        Connection connection = null;\n        try {\n            connection = DriverManager.getConnection(jdbcUrl, username, password);\n            String insertSql = \"INSERT INTO personal_data (first_name, last_name, email) VALUES (?, ?, ?)\";\n            PreparedStatement insertStatement = connection.prepareStatement(insertSql); /* <=== java.sql.Connection.prepareStatement */ \n            insertStatement.setString(1, \"John\");\n            insertStatement.setString(2, \"Doe\");\n            insertStatement.setString(3, \"john.doe@example.com\");\n            insertStatement.executeUpdate();\n        } catch (SQLException e) {"
                  },
                  {
                    "sample" : "insertStatement",
                    "lineNumber" : 22,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/rds.java",
                    "excerpt" : "\n        Connection connection = null;\n        try {\n            connection = DriverManager.getConnection(jdbcUrl, username, password);\n            String insertSql = \"INSERT INTO personal_data (first_name, last_name, email) VALUES (?, ?, ?)\";\n            PreparedStatement insertStatement = connection.prepareStatement(insertSql); /* <=== java.sql.PreparedStatement */ \n            insertStatement.setString(1, \"John\");\n            insertStatement.setString(2, \"Doe\");\n            insertStatement.setString(3, \"john.doe@example.com\");\n            insertStatement.executeUpdate();\n        } catch (SQLException e) {"
                  },
                  {
                    "sample" : "insertStatement",
                    "lineNumber" : 23,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/rds.java",
                    "excerpt" : "        Connection connection = null;\n        try {\n            connection = DriverManager.getConnection(jdbcUrl, username, password);\n            String insertSql = \"INSERT INTO personal_data (first_name, last_name, email) VALUES (?, ?, ?)\";\n            PreparedStatement insertStatement = connection.prepareStatement(insertSql);\n            insertStatement.setString(1, \"John\"); /* <=== java.sql.PreparedStatement */ \n            insertStatement.setString(2, \"Doe\");\n            insertStatement.setString(3, \"john.doe@example.com\");\n            insertStatement.executeUpdate();\n        } catch (SQLException e) {\n            System.err.println(\"Error connecting to the database: \" + e.getMessage());"
                  },
                  {
                    "sample" : "insertStatement",
                    "lineNumber" : 24,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/rds.java",
                    "excerpt" : "        try {\n            connection = DriverManager.getConnection(jdbcUrl, username, password);\n            String insertSql = \"INSERT INTO personal_data (first_name, last_name, email) VALUES (?, ?, ?)\";\n            PreparedStatement insertStatement = connection.prepareStatement(insertSql);\n            insertStatement.setString(1, \"John\");\n            insertStatement.setString(2, \"Doe\"); /* <=== java.sql.PreparedStatement */ \n            insertStatement.setString(3, \"john.doe@example.com\");\n            insertStatement.executeUpdate();\n        } catch (SQLException e) {\n            System.err.println(\"Error connecting to the database: \" + e.getMessage());\n        } finally {"
                  },
                  {
                    "sample" : "insertStatement",
                    "lineNumber" : 25,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/rds.java",
                    "excerpt" : "            connection = DriverManager.getConnection(jdbcUrl, username, password);\n            String insertSql = \"INSERT INTO personal_data (first_name, last_name, email) VALUES (?, ?, ?)\";\n            PreparedStatement insertStatement = connection.prepareStatement(insertSql);\n            insertStatement.setString(1, \"John\");\n            insertStatement.setString(2, \"Doe\");\n            insertStatement.setString(3, \"john.doe@example.com\"); /* <=== java.sql.PreparedStatement */ \n            insertStatement.executeUpdate();\n        } catch (SQLException e) {\n            System.err.println(\"Error connecting to the database: \" + e.getMessage());\n        } finally {\n            if (connection != null) {"
                  },
                  {
                    "sample" : "insertStatement.executeUpdate()",
                    "lineNumber" : 26,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/rds.java",
                    "excerpt" : "            String insertSql = \"INSERT INTO personal_data (first_name, last_name, email) VALUES (?, ?, ?)\";\n            PreparedStatement insertStatement = connection.prepareStatement(insertSql);\n            insertStatement.setString(1, \"John\");\n            insertStatement.setString(2, \"Doe\");\n            insertStatement.setString(3, \"john.doe@example.com\");\n            insertStatement.executeUpdate(); /* <=== java.sql.PreparedStatement.executeUpdate */ \n        } catch (SQLException e) {\n            System.err.println(\"Error connecting to the database: \" + e.getMessage());\n        } finally {\n            if (connection != null) {\n                try {"
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "miscellaneous" : [
    ],
    "internal_apis" : [
    ],
    "leakages" : [
      {
        "sourceId" : "Data.Sensitive.AccountData.AccountID",
        "sinks" : [
          {
            "sinkType" : "leakages",
            "id" : "Leakages.Log.Console",
            "name" : "Log Console",
            "category" : "",
            "domains" : [
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "databaseDetails" : {
              "dbName" : "",
              "dbVendor" : "",
              "dbLocation" : "",
              "dbOperation" : ""
            },
            "paths" : [
              {
                "pathId" : "16238-16248-16242",
                "path" : [
                  {
                    "sample" : "userId",
                    "lineNumber" : 39,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "\n        // Send the request to create the user\n        AdminCreateUserResult createUserResult = cognitoIdpClient.adminCreateUser(createUserRequest);\n\n        // Get the user's unique identifier\n        String userId = createUserResult.getUser().getUsername(); /* <=== java.lang.String */ \n\n        System.out.println(\"Successfully created user with ID: \" + userId);\n    }\n}\n"
                  },
                  {
                    "sample" : "userId",
                    "lineNumber" : 41,
                    "columnNumber" : 68,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "        AdminCreateUserResult createUserResult = cognitoIdpClient.adminCreateUser(createUserRequest);\n\n        // Get the user's unique identifier\n        String userId = createUserResult.getUser().getUsername();\n\n        System.out.println(\"Successfully created user with ID: \" + userId); /* <=== java.lang.String */ \n    }\n}\n"
                  },
                  {
                    "sample" : "System.out.println(\"Successfully created user with ID: \" + userId)",
                    "lineNumber" : 41,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "        AdminCreateUserResult createUserResult = cognitoIdpClient.adminCreateUser(createUserRequest);\n\n        // Get the user's unique identifier\n        String userId = createUserResult.getUser().getUsername();\n\n        System.out.println(\"Successfully created user with ID: \" + userId); /* <=== java.io.PrintStream.println */ \n    }\n}\n"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.ContactData.EmailAddress",
        "sinks" : [
          {
            "sinkType" : "leakages",
            "id" : "Leakages.Log.Console",
            "name" : "Log Console",
            "category" : "",
            "domains" : [
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "databaseDetails" : {
              "dbName" : "",
              "dbVendor" : "",
              "dbLocation" : "",
              "dbOperation" : ""
            },
            "paths" : [
              {
                "pathId" : "12678-12677-12676-12665-12664-12663-12662-12684-12683-12705",
                "path" : [
                  {
                    "sample" : "\"email\"",
                    "lineNumber" : 19,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "    public void processPersonalData(Map<String,String> personalData) {\n        // Send the personal data to Amazon Lex for processing\n        PostTextRequest postTextRequest = new PostTextRequest()\n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\")) /* <===  */ \n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);\n\n        // Handle the Lex response\n        if (postTextResult.getDialogState() == \"Fulfilled\") {"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 19,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "    public void processPersonalData(Map<String,String> personalData) {\n        // Send the personal data to Amazon Lex for processing\n        PostTextRequest postTextRequest = new PostTextRequest()\n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\")) /* <=== <unresolvedNamespace>.Map<String,String> */ \n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);\n\n        // Handle the Lex response\n        if (postTextResult.getDialogState() == \"Fulfilled\") {"
                  },
                  {
                    "sample" : "get(\"email\")",
                    "lineNumber" : 19,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "    public void processPersonalData(Map<String,String> personalData) {\n        // Send the personal data to Amazon Lex for processing\n        PostTextRequest postTextRequest = new PostTextRequest()\n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\")) /* <===  */ \n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);\n\n        // Handle the Lex response\n        if (postTextResult.getDialogState() == \"Fulfilled\") {"
                  },
                  {
                    "sample" : "withBotAlias(\"latest\")",
                    "lineNumber" : 16,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "        lexRuntimeClient = AmazonLexRuntimeClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Send the personal data to Amazon Lex for processing\n        PostTextRequest postTextRequest = new PostTextRequest() /* <===  */ \n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\"))\n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);"
                  },
                  {
                    "sample" : "withUserId(personalData.get(\"email\"))",
                    "lineNumber" : 16,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "        lexRuntimeClient = AmazonLexRuntimeClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Send the personal data to Amazon Lex for processing\n        PostTextRequest postTextRequest = new PostTextRequest() /* <===  */ \n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\"))\n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);"
                  },
                  {
                    "sample" : "withInputText(personalData.toString())",
                    "lineNumber" : 16,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "        lexRuntimeClient = AmazonLexRuntimeClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Send the personal data to Amazon Lex for processing\n        PostTextRequest postTextRequest = new PostTextRequest() /* <===  */ \n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\"))\n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);"
                  },
                  {
                    "sample" : "postTextRequest",
                    "lineNumber" : 16,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "        lexRuntimeClient = AmazonLexRuntimeClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Send the personal data to Amazon Lex for processing\n        PostTextRequest postTextRequest = new PostTextRequest() /* <=== com.amazonaws.services.lexruntime.model.PostTextRequest */ \n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\"))\n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);"
                  },
                  {
                    "sample" : "postText(postTextRequest)",
                    "lineNumber" : 21,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "        PostTextRequest postTextRequest = new PostTextRequest()\n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\"))\n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest); /* <=== com.amazonaws.services.lexruntime.AmazonLexRuntime.postText */ \n\n        // Handle the Lex response\n        if (postTextResult.getDialogState() == \"Fulfilled\") {\n            // The personal data was successfully processed by Lex\n            System.out.println(\"Personal data processed by Lex: \" + postTextResult.getMessage());"
                  },
                  {
                    "sample" : "postTextResult",
                    "lineNumber" : 21,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "        PostTextRequest postTextRequest = new PostTextRequest()\n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\"))\n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest); /* <=== com.amazonaws.services.lexruntime.model.PostTextResult */ \n\n        // Handle the Lex response\n        if (postTextResult.getDialogState() == \"Fulfilled\") {\n            // The personal data was successfully processed by Lex\n            System.out.println(\"Personal data processed by Lex: \" + postTextResult.getMessage());"
                  },
                  {
                    "sample" : "println(\"Error processing personal data: \" + postTextResult.getMessage())",
                    "lineNumber" : 29,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "        if (postTextResult.getDialogState() == \"Fulfilled\") {\n            // The personal data was successfully processed by Lex\n            System.out.println(\"Personal data processed by Lex: \" + postTextResult.getMessage());\n        } else {\n            // An error occurred while processing the personal data\n            System.err.println(\"Error processing personal data: \" + postTextResult.getMessage()); /* <=== java.io.PrintStream.println */ \n        }\n    }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "12678-12677-12676-12665-12664-12663-12662-12684-12683-12695",
                "path" : [
                  {
                    "sample" : "\"email\"",
                    "lineNumber" : 19,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "    public void processPersonalData(Map<String,String> personalData) {\n        // Send the personal data to Amazon Lex for processing\n        PostTextRequest postTextRequest = new PostTextRequest()\n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\")) /* <===  */ \n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);\n\n        // Handle the Lex response\n        if (postTextResult.getDialogState() == \"Fulfilled\") {"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 19,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "    public void processPersonalData(Map<String,String> personalData) {\n        // Send the personal data to Amazon Lex for processing\n        PostTextRequest postTextRequest = new PostTextRequest()\n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\")) /* <=== <unresolvedNamespace>.Map<String,String> */ \n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);\n\n        // Handle the Lex response\n        if (postTextResult.getDialogState() == \"Fulfilled\") {"
                  },
                  {
                    "sample" : "get(\"email\")",
                    "lineNumber" : 19,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "    public void processPersonalData(Map<String,String> personalData) {\n        // Send the personal data to Amazon Lex for processing\n        PostTextRequest postTextRequest = new PostTextRequest()\n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\")) /* <===  */ \n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);\n\n        // Handle the Lex response\n        if (postTextResult.getDialogState() == \"Fulfilled\") {"
                  },
                  {
                    "sample" : "withBotAlias(\"latest\")",
                    "lineNumber" : 16,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "        lexRuntimeClient = AmazonLexRuntimeClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Send the personal data to Amazon Lex for processing\n        PostTextRequest postTextRequest = new PostTextRequest() /* <===  */ \n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\"))\n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);"
                  },
                  {
                    "sample" : "withUserId(personalData.get(\"email\"))",
                    "lineNumber" : 16,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "        lexRuntimeClient = AmazonLexRuntimeClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Send the personal data to Amazon Lex for processing\n        PostTextRequest postTextRequest = new PostTextRequest() /* <===  */ \n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\"))\n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);"
                  },
                  {
                    "sample" : "withInputText(personalData.toString())",
                    "lineNumber" : 16,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "        lexRuntimeClient = AmazonLexRuntimeClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Send the personal data to Amazon Lex for processing\n        PostTextRequest postTextRequest = new PostTextRequest() /* <===  */ \n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\"))\n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);"
                  },
                  {
                    "sample" : "postTextRequest",
                    "lineNumber" : 16,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "        lexRuntimeClient = AmazonLexRuntimeClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Send the personal data to Amazon Lex for processing\n        PostTextRequest postTextRequest = new PostTextRequest() /* <=== com.amazonaws.services.lexruntime.model.PostTextRequest */ \n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\"))\n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);"
                  },
                  {
                    "sample" : "postText(postTextRequest)",
                    "lineNumber" : 21,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "        PostTextRequest postTextRequest = new PostTextRequest()\n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\"))\n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest); /* <=== com.amazonaws.services.lexruntime.AmazonLexRuntime.postText */ \n\n        // Handle the Lex response\n        if (postTextResult.getDialogState() == \"Fulfilled\") {\n            // The personal data was successfully processed by Lex\n            System.out.println(\"Personal data processed by Lex: \" + postTextResult.getMessage());"
                  },
                  {
                    "sample" : "postTextResult",
                    "lineNumber" : 21,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "        PostTextRequest postTextRequest = new PostTextRequest()\n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\"))\n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest); /* <=== com.amazonaws.services.lexruntime.model.PostTextResult */ \n\n        // Handle the Lex response\n        if (postTextResult.getDialogState() == \"Fulfilled\") {\n            // The personal data was successfully processed by Lex\n            System.out.println(\"Personal data processed by Lex: \" + postTextResult.getMessage());"
                  },
                  {
                    "sample" : "println(\"Personal data processed by Lex: \" + postTextResult.getMessage())",
                    "lineNumber" : 26,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);\n\n        // Handle the Lex response\n        if (postTextResult.getDialogState() == \"Fulfilled\") {\n            // The personal data was successfully processed by Lex\n            System.out.println(\"Personal data processed by Lex: \" + postTextResult.getMessage()); /* <=== java.io.PrintStream.println */ \n        } else {\n            // An error occurred while processing the personal data\n            System.err.println(\"Error processing personal data: \" + postTextResult.getMessage());\n        }\n    }"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.PersonalIdentification.DateofBirth",
        "sinks" : [
          {
            "sinkType" : "leakages",
            "id" : "Leakages.Log.Console",
            "name" : "Log Console",
            "category" : "",
            "domains" : [
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "databaseDetails" : {
              "dbName" : "",
              "dbVendor" : "",
              "dbLocation" : "",
              "dbOperation" : ""
            },
            "paths" : [
              {
                "pathId" : "1742-1743-1725-1724-1723-1747-1746-1752",
                "path" : [
                  {
                    "sample" : "\"dob\"",
                    "lineNumber" : 18,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "        PutJobSuccessResultRequest request = new PutJobSuccessResultRequest()\n            .withJobId(firstName)\n            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob); /* <===  */ \n\n        PutJobSuccessResultResult result = client.putJobSuccessResult(request);\n        System.out.println(\"Successfully sent personal data to CodePipeline: \" + result);\n    }\n}"
                  },
                  {
                    "sample" : "dob",
                    "lineNumber" : 18,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "        PutJobSuccessResultRequest request = new PutJobSuccessResultRequest()\n            .withJobId(firstName)\n            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob); /* <=== java.lang.String */ \n\n        PutJobSuccessResultResult result = client.putJobSuccessResult(request);\n        System.out.println(\"Successfully sent personal data to CodePipeline: \" + result);\n    }\n}"
                  },
                  {
                    "sample" : "addOutputVariablesEntry(\"phoneNumber\", phoneNumber)",
                    "lineNumber" : 13,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "    public AWSCodePipelineUtil(AWSCodePipeline client) {\n        this.client = client;\n    }\n\n    public void AWSCodePipelineFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        PutJobSuccessResultRequest request = new PutJobSuccessResultRequest() /* <===  */ \n            .withJobId(firstName)\n            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);"
                  },
                  {
                    "sample" : "addOutputVariablesEntry(\"dob\", dob)",
                    "lineNumber" : 13,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "    public AWSCodePipelineUtil(AWSCodePipeline client) {\n        this.client = client;\n    }\n\n    public void AWSCodePipelineFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        PutJobSuccessResultRequest request = new PutJobSuccessResultRequest() /* <===  */ \n            .withJobId(firstName)\n            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);"
                  },
                  {
                    "sample" : "request",
                    "lineNumber" : 13,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "    public AWSCodePipelineUtil(AWSCodePipeline client) {\n        this.client = client;\n    }\n\n    public void AWSCodePipelineFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        PutJobSuccessResultRequest request = new PutJobSuccessResultRequest() /* <=== com.amazonaws.services.codepipeline.model.PutJobSuccessResultRequest */ \n            .withJobId(firstName)\n            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);"
                  },
                  {
                    "sample" : "putJobSuccessResult(request)",
                    "lineNumber" : 20,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);\n\n        PutJobSuccessResultResult result = client.putJobSuccessResult(request); /* <=== com.amazonaws.services.codepipeline.AWSCodePipeline.putJobSuccessResult */ \n        System.out.println(\"Successfully sent personal data to CodePipeline: \" + result);\n    }\n}\n"
                  },
                  {
                    "sample" : "result",
                    "lineNumber" : 20,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);\n\n        PutJobSuccessResultResult result = client.putJobSuccessResult(request); /* <=== com.amazonaws.services.codepipeline.model.PutJobSuccessResultResult */ \n        System.out.println(\"Successfully sent personal data to CodePipeline: \" + result);\n    }\n}\n"
                  },
                  {
                    "sample" : "println(\"Successfully sent personal data to CodePipeline: \" + result)",
                    "lineNumber" : 21,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);\n\n        PutJobSuccessResultResult result = client.putJobSuccessResult(request);\n        System.out.println(\"Successfully sent personal data to CodePipeline: \" + result); /* <=== java.io.PrintStream.println */ \n    }\n}\n"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.AccountData.AccountName",
        "sinks" : [
          {
            "sinkType" : "leakages",
            "id" : "Leakages.Log.Console",
            "name" : "Log Console",
            "category" : "",
            "domains" : [
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "databaseDetails" : {
              "dbName" : "",
              "dbVendor" : "",
              "dbLocation" : "",
              "dbOperation" : ""
            },
            "paths" : [
              {
                "pathId" : "10445-10437-10436-10449-10448-10454",
                "path" : [
                  {
                    "sample" : "userName",
                    "lineNumber" : 14,
                    "columnNumber" : 68,
                    "fileName" : "/app/code/iam.java",
                    "excerpt" : "    public IAMProcessor() {\n        iamClient = AmazonIdentityManagementClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(String userName) {\n        GetUserRequest request = new GetUserRequest().withUserName(userName); /* <=== java.lang.String */ \n        GetUserResult result = iamClient.getUser(request);\n\n        // Perform processing on the user information obtained from the IAM service\n        // Ensure to handle any exceptions and follow best practices for secure processing of personal data\n"
                  },
                  {
                    "sample" : "withUserName(userName)",
                    "lineNumber" : 14,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/iam.java",
                    "excerpt" : "    public IAMProcessor() {\n        iamClient = AmazonIdentityManagementClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(String userName) {\n        GetUserRequest request = new GetUserRequest().withUserName(userName); /* <=== com.amazonaws.services.iam.model.GetUserRequest.withUserName */ \n        GetUserResult result = iamClient.getUser(request);\n\n        // Perform processing on the user information obtained from the IAM service\n        // Ensure to handle any exceptions and follow best practices for secure processing of personal data\n"
                  },
                  {
                    "sample" : "request",
                    "lineNumber" : 14,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/iam.java",
                    "excerpt" : "    public IAMProcessor() {\n        iamClient = AmazonIdentityManagementClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(String userName) {\n        GetUserRequest request = new GetUserRequest().withUserName(userName); /* <=== com.amazonaws.services.iam.model.GetUserRequest */ \n        GetUserResult result = iamClient.getUser(request);\n\n        // Perform processing on the user information obtained from the IAM service\n        // Ensure to handle any exceptions and follow best practices for secure processing of personal data\n"
                  },
                  {
                    "sample" : "getUser(request)",
                    "lineNumber" : 15,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/iam.java",
                    "excerpt" : "        iamClient = AmazonIdentityManagementClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(String userName) {\n        GetUserRequest request = new GetUserRequest().withUserName(userName);\n        GetUserResult result = iamClient.getUser(request); /* <=== com.amazonaws.services.iam.AmazonIdentityManagement.getUser */ \n\n        // Perform processing on the user information obtained from the IAM service\n        // Ensure to handle any exceptions and follow best practices for secure processing of personal data\n\n        // Example processing: print user information"
                  },
                  {
                    "sample" : "result",
                    "lineNumber" : 15,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/iam.java",
                    "excerpt" : "        iamClient = AmazonIdentityManagementClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(String userName) {\n        GetUserRequest request = new GetUserRequest().withUserName(userName);\n        GetUserResult result = iamClient.getUser(request); /* <=== com.amazonaws.services.iam.model.GetUserResult */ \n\n        // Perform processing on the user information obtained from the IAM service\n        // Ensure to handle any exceptions and follow best practices for secure processing of personal data\n\n        // Example processing: print user information"
                  },
                  {
                    "sample" : "println(\"User information: \" + result.getUser())",
                    "lineNumber" : 21,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/iam.java",
                    "excerpt" : "\n        // Perform processing on the user information obtained from the IAM service\n        // Ensure to handle any exceptions and follow best practices for secure processing of personal data\n\n        // Example processing: print user information\n        System.out.println(\"User information: \" + result.getUser()); /* <=== java.io.PrintStream.println */ \n    }\n}\n"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.PersonalIdentification.FirstName",
        "sinks" : [
          {
            "sinkType" : "leakages",
            "id" : "Leakages.Log.Console",
            "name" : "Log Console",
            "category" : "",
            "domains" : [
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "databaseDetails" : {
              "dbName" : "",
              "dbVendor" : "",
              "dbLocation" : "",
              "dbOperation" : ""
            },
            "paths" : [
              {
                "pathId" : "4606-4604-4603-4635-4625",
                "path" : [
                  {
                    "sample" : "\"first_name\"",
                    "lineNumber" : 63,
                    "columnNumber" : 53,
                    "fileName" : "/app/code/redshift.java",
                    "excerpt" : "\n            String sql = \"SELECT * FROM personal_data\";\n            PreparedStatement statement = conn.prepareStatement(sql);\n            ResultSet result = statement.executeQuery();\n            while (result.next()) {\n                String firstName = result.getString(\"first_name\"); /* <===  */ \n                String lastName = result.getString(\"last_name\");\n                int age = result.getInt(\"age\");\n                String address = result.getString(\"address\");\n                System.out.println(firstName + \" \" + lastName + \" \" + age + \" \" + address);\n            }"
                  },
                  {
                    "sample" : "result.getString(\"first_name\")",
                    "lineNumber" : 63,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/redshift.java",
                    "excerpt" : "\n            String sql = \"SELECT * FROM personal_data\";\n            PreparedStatement statement = conn.prepareStatement(sql);\n            ResultSet result = statement.executeQuery();\n            while (result.next()) {\n                String firstName = result.getString(\"first_name\"); /* <=== java.sql.ResultSet.getString */ \n                String lastName = result.getString(\"last_name\");\n                int age = result.getInt(\"age\");\n                String address = result.getString(\"address\");\n                System.out.println(firstName + \" \" + lastName + \" \" + age + \" \" + address);\n            }"
                  },
                  {
                    "sample" : "firstName",
                    "lineNumber" : 63,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/redshift.java",
                    "excerpt" : "\n            String sql = \"SELECT * FROM personal_data\";\n            PreparedStatement statement = conn.prepareStatement(sql);\n            ResultSet result = statement.executeQuery();\n            while (result.next()) {\n                String firstName = result.getString(\"first_name\"); /* <=== java.lang.String */ \n                String lastName = result.getString(\"last_name\");\n                int age = result.getInt(\"age\");\n                String address = result.getString(\"address\");\n                System.out.println(firstName + \" \" + lastName + \" \" + age + \" \" + address);\n            }"
                  },
                  {
                    "sample" : "firstName",
                    "lineNumber" : 67,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/redshift.java",
                    "excerpt" : "            while (result.next()) {\n                String firstName = result.getString(\"first_name\");\n                String lastName = result.getString(\"last_name\");\n                int age = result.getInt(\"age\");\n                String address = result.getString(\"address\");\n                System.out.println(firstName + \" \" + lastName + \" \" + age + \" \" + address); /* <=== java.lang.String */ \n            }\n        } catch (SQLException e) {\n            System.out.println(\"Error while retrieving personal data from Redshift\");\n            e.printStackTrace();\n        }"
                  },
                  {
                    "sample" : "System.out.println(firstName + \" \" + lastName + \" \" + age + \" \" + address)",
                    "lineNumber" : 67,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/redshift.java",
                    "excerpt" : "            while (result.next()) {\n                String firstName = result.getString(\"first_name\");\n                String lastName = result.getString(\"last_name\");\n                int age = result.getInt(\"age\");\n                String address = result.getString(\"address\");\n                System.out.println(firstName + \" \" + lastName + \" \" + age + \" \" + address); /* <=== java.io.PrintStream.println */ \n            }\n        } catch (SQLException e) {\n            System.out.println(\"Error while retrieving personal data from Redshift\");\n            e.printStackTrace();\n        }"
                  }
                ]
              },
              {
                "pathId" : "8823-8815-8814-8813-8812-8829-8828-8834",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 16,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/voiceid.java",
                    "excerpt" : "    }\n\n    public void processPersonalData(String firstName, String lastName, String phoneNumber) {\n        // Create a new profile in Voice ID\n        CreateProfileRequest createProfileRequest = new CreateProfileRequest()\n                .withFirstName(firstName) /* <=== java.lang.String */ \n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber);\n        CreateProfileResult createProfileResult = voiceIdClient.createProfile(createProfileRequest);\n        System.out.println(\"Profile created with ID: \" + createProfileResult.getProfileId());\n    }"
                  },
                  {
                    "sample" : "withFirstName(firstName)",
                    "lineNumber" : 15,
                    "columnNumber" : 53,
                    "fileName" : "/app/code/voiceid.java",
                    "excerpt" : "        this.voiceIdClient = voiceIdClient;\n    }\n\n    public void processPersonalData(String firstName, String lastName, String phoneNumber) {\n        // Create a new profile in Voice ID\n        CreateProfileRequest createProfileRequest = new CreateProfileRequest() /* <=== com.amazonaws.services.voiceid.model.CreateProfileRequest.withFirstName */ \n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber);\n        CreateProfileResult createProfileResult = voiceIdClient.createProfile(createProfileRequest);\n        System.out.println(\"Profile created with ID: \" + createProfileResult.getProfileId());"
                  },
                  {
                    "sample" : "withLastName(lastName)",
                    "lineNumber" : 15,
                    "columnNumber" : 53,
                    "fileName" : "/app/code/voiceid.java",
                    "excerpt" : "        this.voiceIdClient = voiceIdClient;\n    }\n\n    public void processPersonalData(String firstName, String lastName, String phoneNumber) {\n        // Create a new profile in Voice ID\n        CreateProfileRequest createProfileRequest = new CreateProfileRequest() /* <===  */ \n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber);\n        CreateProfileResult createProfileResult = voiceIdClient.createProfile(createProfileRequest);\n        System.out.println(\"Profile created with ID: \" + createProfileResult.getProfileId());"
                  },
                  {
                    "sample" : "withPhoneNumber(phoneNumber)",
                    "lineNumber" : 15,
                    "columnNumber" : 53,
                    "fileName" : "/app/code/voiceid.java",
                    "excerpt" : "        this.voiceIdClient = voiceIdClient;\n    }\n\n    public void processPersonalData(String firstName, String lastName, String phoneNumber) {\n        // Create a new profile in Voice ID\n        CreateProfileRequest createProfileRequest = new CreateProfileRequest() /* <===  */ \n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber);\n        CreateProfileResult createProfileResult = voiceIdClient.createProfile(createProfileRequest);\n        System.out.println(\"Profile created with ID: \" + createProfileResult.getProfileId());"
                  },
                  {
                    "sample" : "createProfileRequest",
                    "lineNumber" : 15,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/voiceid.java",
                    "excerpt" : "        this.voiceIdClient = voiceIdClient;\n    }\n\n    public void processPersonalData(String firstName, String lastName, String phoneNumber) {\n        // Create a new profile in Voice ID\n        CreateProfileRequest createProfileRequest = new CreateProfileRequest() /* <=== com.amazonaws.services.voiceid.model.CreateProfileRequest */ \n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber);\n        CreateProfileResult createProfileResult = voiceIdClient.createProfile(createProfileRequest);\n        System.out.println(\"Profile created with ID: \" + createProfileResult.getProfileId());"
                  },
                  {
                    "sample" : "createProfile(createProfileRequest)",
                    "lineNumber" : 19,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/voiceid.java",
                    "excerpt" : "        // Create a new profile in Voice ID\n        CreateProfileRequest createProfileRequest = new CreateProfileRequest()\n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber);\n        CreateProfileResult createProfileResult = voiceIdClient.createProfile(createProfileRequest); /* <=== com.amazonaws.services.voiceid.model.VoiceIdClient.createProfile */ \n        System.out.println(\"Profile created with ID: \" + createProfileResult.getProfileId());\n    }\n}\n"
                  },
                  {
                    "sample" : "createProfileResult",
                    "lineNumber" : 19,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/voiceid.java",
                    "excerpt" : "        // Create a new profile in Voice ID\n        CreateProfileRequest createProfileRequest = new CreateProfileRequest()\n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber);\n        CreateProfileResult createProfileResult = voiceIdClient.createProfile(createProfileRequest); /* <=== com.amazonaws.services.voiceid.model.CreateProfileResult */ \n        System.out.println(\"Profile created with ID: \" + createProfileResult.getProfileId());\n    }\n}\n"
                  },
                  {
                    "sample" : "println(\"Profile created with ID: \" + createProfileResult.getProfileId())",
                    "lineNumber" : 20,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/voiceid.java",
                    "excerpt" : "        CreateProfileRequest createProfileRequest = new CreateProfileRequest()\n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber);\n        CreateProfileResult createProfileResult = voiceIdClient.createProfile(createProfileRequest);\n        System.out.println(\"Profile created with ID: \" + createProfileResult.getProfileId()); /* <=== java.io.PrintStream.println */ \n    }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "13493-13482-13481-13480-13501-13500-13506",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 19,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/iotFleetwise.java",
                    "excerpt" : "\npublic void AWSIoTFleetwiseProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nCreateTrackerRequest createTrackerRequest = new CreateTrackerRequest()\n        .withTrackerName(firstName + \"_\" + lastName + \"_Tracker\") /* <=== java.lang.String */ \n        .withAttributePayload(personalData);\n\nCreateTrackerResult result = client.createTracker(createTrackerRequest);\nSystem.out.println(\"Tracker created with ID: \" + result.getTrackerId());\n}"
                  },
                  {
                    "sample" : "withTrackerName(firstName + \"_\" + lastName + \"_Tracker\")",
                    "lineNumber" : 18,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/iotFleetwise.java",
                    "excerpt" : "}\n\npublic void AWSIoTFleetwiseProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nCreateTrackerRequest createTrackerRequest = new CreateTrackerRequest() /* <=== com.amazonaws.services.iotfleetwise.model.CreateTrackerRequest.withTrackerName */ \n        .withTrackerName(firstName + \"_\" + lastName + \"_Tracker\")\n        .withAttributePayload(personalData);\n\nCreateTrackerResult result = client.createTracker(createTrackerRequest);\nSystem.out.println(\"Tracker created with ID: \" + result.getTrackerId());"
                  },
                  {
                    "sample" : "withAttributePayload(personalData)",
                    "lineNumber" : 18,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/iotFleetwise.java",
                    "excerpt" : "}\n\npublic void AWSIoTFleetwiseProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nCreateTrackerRequest createTrackerRequest = new CreateTrackerRequest() /* <===  */ \n        .withTrackerName(firstName + \"_\" + lastName + \"_Tracker\")\n        .withAttributePayload(personalData);\n\nCreateTrackerResult result = client.createTracker(createTrackerRequest);\nSystem.out.println(\"Tracker created with ID: \" + result.getTrackerId());"
                  },
                  {
                    "sample" : "createTrackerRequest",
                    "lineNumber" : 18,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/iotFleetwise.java",
                    "excerpt" : "}\n\npublic void AWSIoTFleetwiseProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nCreateTrackerRequest createTrackerRequest = new CreateTrackerRequest() /* <=== com.amazonaws.services.iotfleetwise.model.CreateTrackerRequest */ \n        .withTrackerName(firstName + \"_\" + lastName + \"_Tracker\")\n        .withAttributePayload(personalData);\n\nCreateTrackerResult result = client.createTracker(createTrackerRequest);\nSystem.out.println(\"Tracker created with ID: \" + result.getTrackerId());"
                  },
                  {
                    "sample" : "createTracker(createTrackerRequest)",
                    "lineNumber" : 22,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/iotFleetwise.java",
                    "excerpt" : "\nCreateTrackerRequest createTrackerRequest = new CreateTrackerRequest()\n        .withTrackerName(firstName + \"_\" + lastName + \"_Tracker\")\n        .withAttributePayload(personalData);\n\nCreateTrackerResult result = client.createTracker(createTrackerRequest); /* <=== com.amazonaws.services.iotfleetwise.AmazonIoTFleetwise.createTracker */ \nSystem.out.println(\"Tracker created with ID: \" + result.getTrackerId());\n}\n}"
                  },
                  {
                    "sample" : "result",
                    "lineNumber" : 22,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/iotFleetwise.java",
                    "excerpt" : "\nCreateTrackerRequest createTrackerRequest = new CreateTrackerRequest()\n        .withTrackerName(firstName + \"_\" + lastName + \"_Tracker\")\n        .withAttributePayload(personalData);\n\nCreateTrackerResult result = client.createTracker(createTrackerRequest); /* <=== com.amazonaws.services.iotfleetwise.model.CreateTrackerResult */ \nSystem.out.println(\"Tracker created with ID: \" + result.getTrackerId());\n}\n}"
                  },
                  {
                    "sample" : "println(\"Tracker created with ID: \" + result.getTrackerId())",
                    "lineNumber" : 23,
                    "columnNumber" : 1,
                    "fileName" : "/app/code/iotFleetwise.java",
                    "excerpt" : "CreateTrackerRequest createTrackerRequest = new CreateTrackerRequest()\n        .withTrackerName(firstName + \"_\" + lastName + \"_Tracker\")\n        .withAttributePayload(personalData);\n\nCreateTrackerResult result = client.createTracker(createTrackerRequest);\nSystem.out.println(\"Tracker created with ID: \" + result.getTrackerId()); /* <=== java.io.PrintStream.println */ \n}\n}"
                  }
                ]
              },
              {
                "pathId" : "1736-1728-1727-1726-1725-1724-1723-1747-1746-1752",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 14,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "        this.client = client;\n    }\n\n    public void AWSCodePipelineFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        PutJobSuccessResultRequest request = new PutJobSuccessResultRequest()\n            .withJobId(firstName) /* <=== java.lang.String */ \n            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);\n"
                  },
                  {
                    "sample" : "withJobId(firstName)",
                    "lineNumber" : 13,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "    public AWSCodePipelineUtil(AWSCodePipeline client) {\n        this.client = client;\n    }\n\n    public void AWSCodePipelineFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        PutJobSuccessResultRequest request = new PutJobSuccessResultRequest() /* <=== com.amazonaws.services.codepipeline.model.PutJobSuccessResultRequest.withJobId */ \n            .withJobId(firstName)\n            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);"
                  },
                  {
                    "sample" : "withContinuationToken(\"optional_token\")",
                    "lineNumber" : 13,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "    public AWSCodePipelineUtil(AWSCodePipeline client) {\n        this.client = client;\n    }\n\n    public void AWSCodePipelineFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        PutJobSuccessResultRequest request = new PutJobSuccessResultRequest() /* <===  */ \n            .withJobId(firstName)\n            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);"
                  },
                  {
                    "sample" : "addOutputVariablesEntry(\"lastName\", lastName)",
                    "lineNumber" : 13,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "    public AWSCodePipelineUtil(AWSCodePipeline client) {\n        this.client = client;\n    }\n\n    public void AWSCodePipelineFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        PutJobSuccessResultRequest request = new PutJobSuccessResultRequest() /* <===  */ \n            .withJobId(firstName)\n            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);"
                  },
                  {
                    "sample" : "addOutputVariablesEntry(\"phoneNumber\", phoneNumber)",
                    "lineNumber" : 13,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "    public AWSCodePipelineUtil(AWSCodePipeline client) {\n        this.client = client;\n    }\n\n    public void AWSCodePipelineFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        PutJobSuccessResultRequest request = new PutJobSuccessResultRequest() /* <===  */ \n            .withJobId(firstName)\n            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);"
                  },
                  {
                    "sample" : "addOutputVariablesEntry(\"dob\", dob)",
                    "lineNumber" : 13,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "    public AWSCodePipelineUtil(AWSCodePipeline client) {\n        this.client = client;\n    }\n\n    public void AWSCodePipelineFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        PutJobSuccessResultRequest request = new PutJobSuccessResultRequest() /* <===  */ \n            .withJobId(firstName)\n            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);"
                  },
                  {
                    "sample" : "request",
                    "lineNumber" : 13,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "    public AWSCodePipelineUtil(AWSCodePipeline client) {\n        this.client = client;\n    }\n\n    public void AWSCodePipelineFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        PutJobSuccessResultRequest request = new PutJobSuccessResultRequest() /* <=== com.amazonaws.services.codepipeline.model.PutJobSuccessResultRequest */ \n            .withJobId(firstName)\n            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);"
                  },
                  {
                    "sample" : "putJobSuccessResult(request)",
                    "lineNumber" : 20,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);\n\n        PutJobSuccessResultResult result = client.putJobSuccessResult(request); /* <=== com.amazonaws.services.codepipeline.AWSCodePipeline.putJobSuccessResult */ \n        System.out.println(\"Successfully sent personal data to CodePipeline: \" + result);\n    }\n}\n"
                  },
                  {
                    "sample" : "result",
                    "lineNumber" : 20,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);\n\n        PutJobSuccessResultResult result = client.putJobSuccessResult(request); /* <=== com.amazonaws.services.codepipeline.model.PutJobSuccessResultResult */ \n        System.out.println(\"Successfully sent personal data to CodePipeline: \" + result);\n    }\n}\n"
                  },
                  {
                    "sample" : "println(\"Successfully sent personal data to CodePipeline: \" + result)",
                    "lineNumber" : 21,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);\n\n        PutJobSuccessResultResult result = client.putJobSuccessResult(request);\n        System.out.println(\"Successfully sent personal data to CodePipeline: \" + result); /* <=== java.io.PrintStream.println */ \n    }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "13023-13048-13037-13036-13035-13034-13033-13032-13066-13065-13071",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 16,
                    "columnNumber" : 56,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "public AWSIoTDeviceAdvisorUtil() {\nclient = AmazonIoTDeviceAdvisorClientBuilder.standard().build();\n}\n\npublic void AWSIoTDeviceAdvisorProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob); /* <=== java.lang.String */ \n\nTestRound testRound = new TestRound().withName(firstName + \"_\" + lastName + \"_TestRound\")\n        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n"
                  },
                  {
                    "sample" : "firstName",
                    "lineNumber" : 18,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "}\n\npublic void AWSIoTDeviceAdvisorProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nTestRound testRound = new TestRound().withName(firstName + \"_\" + lastName + \"_TestRound\") /* <=== java.lang.String */ \n        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n\nTestResult result = client.createTestRound(testRound);\n"
                  },
                  {
                    "sample" : "withName(firstName + \"_\" + lastName + \"_TestRound\")",
                    "lineNumber" : 18,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "}\n\npublic void AWSIoTDeviceAdvisorProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nTestRound testRound = new TestRound().withName(firstName + \"_\" + lastName + \"_TestRound\") /* <=== com.amazonaws.services.iotdeviceadvisor.model.TestRound.withName */ \n        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n\nTestResult result = client.createTestRound(testRound);\n"
                  },
                  {
                    "sample" : "withTargetSelection(TargetSelection.CONTINUOUS)",
                    "lineNumber" : 18,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "}\n\npublic void AWSIoTDeviceAdvisorProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nTestRound testRound = new TestRound().withName(firstName + \"_\" + lastName + \"_TestRound\") /* <===  */ \n        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n\nTestResult result = client.createTestRound(testRound);\n"
                  },
                  {
                    "sample" : "withPayloadSelection(PayloadSelection.CONTINUOUS)",
                    "lineNumber" : 18,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "}\n\npublic void AWSIoTDeviceAdvisorProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nTestRound testRound = new TestRound().withName(firstName + \"_\" + lastName + \"_TestRound\") /* <===  */ \n        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n\nTestResult result = client.createTestRound(testRound);\n"
                  },
                  {
                    "sample" : "withPayloadSelection(PayloadSelection.PERSONAL_DATA)",
                    "lineNumber" : 18,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "}\n\npublic void AWSIoTDeviceAdvisorProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nTestRound testRound = new TestRound().withName(firstName + \"_\" + lastName + \"_TestRound\") /* <===  */ \n        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n\nTestResult result = client.createTestRound(testRound);\n"
                  },
                  {
                    "sample" : "withPayload(personalData.toString())",
                    "lineNumber" : 18,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "}\n\npublic void AWSIoTDeviceAdvisorProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nTestRound testRound = new TestRound().withName(firstName + \"_\" + lastName + \"_TestRound\") /* <===  */ \n        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n\nTestResult result = client.createTestRound(testRound);\n"
                  },
                  {
                    "sample" : "testRound",
                    "lineNumber" : 18,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "}\n\npublic void AWSIoTDeviceAdvisorProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nTestRound testRound = new TestRound().withName(firstName + \"_\" + lastName + \"_TestRound\") /* <=== com.amazonaws.services.iotdeviceadvisor.model.TestRound */ \n        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n\nTestResult result = client.createTestRound(testRound);\n"
                  },
                  {
                    "sample" : "createTestRound(testRound)",
                    "lineNumber" : 22,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "\nTestRound testRound = new TestRound().withName(firstName + \"_\" + lastName + \"_TestRound\")\n        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n\nTestResult result = client.createTestRound(testRound); /* <=== com.amazonaws.services.iotdeviceadvisor.AmazonIoTDeviceAdvisor.createTestRound */ \n\nSystem.out.println(\"Result: \" + result.toString());\n}\n}\n"
                  },
                  {
                    "sample" : "result",
                    "lineNumber" : 22,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "\nTestRound testRound = new TestRound().withName(firstName + \"_\" + lastName + \"_TestRound\")\n        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n\nTestResult result = client.createTestRound(testRound); /* <=== com.amazonaws.services.iotdeviceadvisor.model.TestResult */ \n\nSystem.out.println(\"Result: \" + result.toString());\n}\n}\n"
                  },
                  {
                    "sample" : "println(\"Result: \" + result.toString())",
                    "lineNumber" : 24,
                    "columnNumber" : 1,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n\nTestResult result = client.createTestRound(testRound);\n\nSystem.out.println(\"Result: \" + result.toString()); /* <=== java.io.PrintStream.println */ \n}\n}\n"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.ContactData.Address",
        "sinks" : [
          {
            "sinkType" : "leakages",
            "id" : "Leakages.Log.Console",
            "name" : "Log Console",
            "category" : "",
            "domains" : [
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "databaseDetails" : {
              "dbName" : "",
              "dbVendor" : "",
              "dbLocation" : "",
              "dbOperation" : ""
            },
            "paths" : [
              {
                "pathId" : "4624-4622-4621-4641-4625",
                "path" : [
                  {
                    "sample" : "\"address\"",
                    "lineNumber" : 66,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/redshift.java",
                    "excerpt" : "            ResultSet result = statement.executeQuery();\n            while (result.next()) {\n                String firstName = result.getString(\"first_name\");\n                String lastName = result.getString(\"last_name\");\n                int age = result.getInt(\"age\");\n                String address = result.getString(\"address\"); /* <===  */ \n                System.out.println(firstName + \" \" + lastName + \" \" + age + \" \" + address);\n            }\n        } catch (SQLException e) {\n            System.out.println(\"Error while retrieving personal data from Redshift\");\n            e.printStackTrace();"
                  },
                  {
                    "sample" : "result.getString(\"address\")",
                    "lineNumber" : 66,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/redshift.java",
                    "excerpt" : "            ResultSet result = statement.executeQuery();\n            while (result.next()) {\n                String firstName = result.getString(\"first_name\");\n                String lastName = result.getString(\"last_name\");\n                int age = result.getInt(\"age\");\n                String address = result.getString(\"address\"); /* <=== java.sql.ResultSet.getString */ \n                System.out.println(firstName + \" \" + lastName + \" \" + age + \" \" + address);\n            }\n        } catch (SQLException e) {\n            System.out.println(\"Error while retrieving personal data from Redshift\");\n            e.printStackTrace();"
                  },
                  {
                    "sample" : "address",
                    "lineNumber" : 66,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/redshift.java",
                    "excerpt" : "            ResultSet result = statement.executeQuery();\n            while (result.next()) {\n                String firstName = result.getString(\"first_name\");\n                String lastName = result.getString(\"last_name\");\n                int age = result.getInt(\"age\");\n                String address = result.getString(\"address\"); /* <=== java.lang.String */ \n                System.out.println(firstName + \" \" + lastName + \" \" + age + \" \" + address);\n            }\n        } catch (SQLException e) {\n            System.out.println(\"Error while retrieving personal data from Redshift\");\n            e.printStackTrace();"
                  },
                  {
                    "sample" : "address",
                    "lineNumber" : 67,
                    "columnNumber" : 83,
                    "fileName" : "/app/code/redshift.java",
                    "excerpt" : "            while (result.next()) {\n                String firstName = result.getString(\"first_name\");\n                String lastName = result.getString(\"last_name\");\n                int age = result.getInt(\"age\");\n                String address = result.getString(\"address\");\n                System.out.println(firstName + \" \" + lastName + \" \" + age + \" \" + address); /* <=== java.lang.String */ \n            }\n        } catch (SQLException e) {\n            System.out.println(\"Error while retrieving personal data from Redshift\");\n            e.printStackTrace();\n        }"
                  },
                  {
                    "sample" : "System.out.println(firstName + \" \" + lastName + \" \" + age + \" \" + address)",
                    "lineNumber" : 67,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/redshift.java",
                    "excerpt" : "            while (result.next()) {\n                String firstName = result.getString(\"first_name\");\n                String lastName = result.getString(\"last_name\");\n                int age = result.getInt(\"age\");\n                String address = result.getString(\"address\");\n                System.out.println(firstName + \" \" + lastName + \" \" + age + \" \" + address); /* <=== java.io.PrintStream.println */ \n            }\n        } catch (SQLException e) {\n            System.out.println(\"Error while retrieving personal data from Redshift\");\n            e.printStackTrace();\n        }"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.ContactData.PhoneNumber",
        "sinks" : [
          {
            "sinkType" : "leakages",
            "id" : "Leakages.Log.Console",
            "name" : "Log Console",
            "category" : "",
            "domains" : [
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "databaseDetails" : {
              "dbName" : "",
              "dbVendor" : "",
              "dbLocation" : "",
              "dbOperation" : ""
            },
            "paths" : [
              {
                "pathId" : "13475-13468-13467-13497-13482-13481-13480-13501-13500-13506",
                "path" : [
                  {
                    "sample" : "phoneNumber",
                    "lineNumber" : 16,
                    "columnNumber" : 104,
                    "fileName" : "/app/code/iotFleetwise.java",
                    "excerpt" : "public AWSIoTFleetwiseUtil() {\nclient = AmazonIoTFleetwiseClientBuilder.standard().build();\n}\n\npublic void AWSIoTFleetwiseProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob); /* <=== java.lang.String */ \n\nCreateTrackerRequest createTrackerRequest = new CreateTrackerRequest()\n        .withTrackerName(firstName + \"_\" + lastName + \"_Tracker\")\n        .withAttributePayload(personalData);\n"
                  },
                  {
                    "sample" : "Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob)",
                    "lineNumber" : 16,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/iotFleetwise.java",
                    "excerpt" : "public AWSIoTFleetwiseUtil() {\nclient = AmazonIoTFleetwiseClientBuilder.standard().build();\n}\n\npublic void AWSIoTFleetwiseProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob); /* <=== java.util.Map.of */ \n\nCreateTrackerRequest createTrackerRequest = new CreateTrackerRequest()\n        .withTrackerName(firstName + \"_\" + lastName + \"_Tracker\")\n        .withAttributePayload(personalData);\n"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 16,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/iotFleetwise.java",
                    "excerpt" : "public AWSIoTFleetwiseUtil() {\nclient = AmazonIoTFleetwiseClientBuilder.standard().build();\n}\n\npublic void AWSIoTFleetwiseProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob); /* <=== java.util.Map */ \n\nCreateTrackerRequest createTrackerRequest = new CreateTrackerRequest()\n        .withTrackerName(firstName + \"_\" + lastName + \"_Tracker\")\n        .withAttributePayload(personalData);\n"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 20,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/iotFleetwise.java",
                    "excerpt" : "public void AWSIoTFleetwiseProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nCreateTrackerRequest createTrackerRequest = new CreateTrackerRequest()\n        .withTrackerName(firstName + \"_\" + lastName + \"_Tracker\")\n        .withAttributePayload(personalData); /* <=== java.util.Map */ \n\nCreateTrackerResult result = client.createTracker(createTrackerRequest);\nSystem.out.println(\"Tracker created with ID: \" + result.getTrackerId());\n}\n}"
                  },
                  {
                    "sample" : "withTrackerName(firstName + \"_\" + lastName + \"_Tracker\")",
                    "lineNumber" : 18,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/iotFleetwise.java",
                    "excerpt" : "}\n\npublic void AWSIoTFleetwiseProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nCreateTrackerRequest createTrackerRequest = new CreateTrackerRequest() /* <=== com.amazonaws.services.iotfleetwise.model.CreateTrackerRequest.withTrackerName */ \n        .withTrackerName(firstName + \"_\" + lastName + \"_Tracker\")\n        .withAttributePayload(personalData);\n\nCreateTrackerResult result = client.createTracker(createTrackerRequest);\nSystem.out.println(\"Tracker created with ID: \" + result.getTrackerId());"
                  },
                  {
                    "sample" : "withAttributePayload(personalData)",
                    "lineNumber" : 18,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/iotFleetwise.java",
                    "excerpt" : "}\n\npublic void AWSIoTFleetwiseProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nCreateTrackerRequest createTrackerRequest = new CreateTrackerRequest() /* <===  */ \n        .withTrackerName(firstName + \"_\" + lastName + \"_Tracker\")\n        .withAttributePayload(personalData);\n\nCreateTrackerResult result = client.createTracker(createTrackerRequest);\nSystem.out.println(\"Tracker created with ID: \" + result.getTrackerId());"
                  },
                  {
                    "sample" : "createTrackerRequest",
                    "lineNumber" : 18,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/iotFleetwise.java",
                    "excerpt" : "}\n\npublic void AWSIoTFleetwiseProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nCreateTrackerRequest createTrackerRequest = new CreateTrackerRequest() /* <=== com.amazonaws.services.iotfleetwise.model.CreateTrackerRequest */ \n        .withTrackerName(firstName + \"_\" + lastName + \"_Tracker\")\n        .withAttributePayload(personalData);\n\nCreateTrackerResult result = client.createTracker(createTrackerRequest);\nSystem.out.println(\"Tracker created with ID: \" + result.getTrackerId());"
                  },
                  {
                    "sample" : "createTracker(createTrackerRequest)",
                    "lineNumber" : 22,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/iotFleetwise.java",
                    "excerpt" : "\nCreateTrackerRequest createTrackerRequest = new CreateTrackerRequest()\n        .withTrackerName(firstName + \"_\" + lastName + \"_Tracker\")\n        .withAttributePayload(personalData);\n\nCreateTrackerResult result = client.createTracker(createTrackerRequest); /* <=== com.amazonaws.services.iotfleetwise.AmazonIoTFleetwise.createTracker */ \nSystem.out.println(\"Tracker created with ID: \" + result.getTrackerId());\n}\n}"
                  },
                  {
                    "sample" : "result",
                    "lineNumber" : 22,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/iotFleetwise.java",
                    "excerpt" : "\nCreateTrackerRequest createTrackerRequest = new CreateTrackerRequest()\n        .withTrackerName(firstName + \"_\" + lastName + \"_Tracker\")\n        .withAttributePayload(personalData);\n\nCreateTrackerResult result = client.createTracker(createTrackerRequest); /* <=== com.amazonaws.services.iotfleetwise.model.CreateTrackerResult */ \nSystem.out.println(\"Tracker created with ID: \" + result.getTrackerId());\n}\n}"
                  },
                  {
                    "sample" : "println(\"Tracker created with ID: \" + result.getTrackerId())",
                    "lineNumber" : 23,
                    "columnNumber" : 1,
                    "fileName" : "/app/code/iotFleetwise.java",
                    "excerpt" : "CreateTrackerRequest createTrackerRequest = new CreateTrackerRequest()\n        .withTrackerName(firstName + \"_\" + lastName + \"_Tracker\")\n        .withAttributePayload(personalData);\n\nCreateTrackerResult result = client.createTracker(createTrackerRequest);\nSystem.out.println(\"Tracker created with ID: \" + result.getTrackerId()); /* <=== java.io.PrintStream.println */ \n}\n}"
                  }
                ]
              },
              {
                "pathId" : "1740-1741-1726-1725-1724-1723-1747-1746-1752",
                "path" : [
                  {
                    "sample" : "\"phoneNumber\"",
                    "lineNumber" : 17,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "    public void AWSCodePipelineFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        PutJobSuccessResultRequest request = new PutJobSuccessResultRequest()\n            .withJobId(firstName)\n            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber) /* <===  */ \n            .addOutputVariablesEntry(\"dob\", dob);\n\n        PutJobSuccessResultResult result = client.putJobSuccessResult(request);\n        System.out.println(\"Successfully sent personal data to CodePipeline: \" + result);\n    }"
                  },
                  {
                    "sample" : "phoneNumber",
                    "lineNumber" : 17,
                    "columnNumber" : 53,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "    public void AWSCodePipelineFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        PutJobSuccessResultRequest request = new PutJobSuccessResultRequest()\n            .withJobId(firstName)\n            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber) /* <=== java.lang.String */ \n            .addOutputVariablesEntry(\"dob\", dob);\n\n        PutJobSuccessResultResult result = client.putJobSuccessResult(request);\n        System.out.println(\"Successfully sent personal data to CodePipeline: \" + result);\n    }"
                  },
                  {
                    "sample" : "addOutputVariablesEntry(\"lastName\", lastName)",
                    "lineNumber" : 13,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "    public AWSCodePipelineUtil(AWSCodePipeline client) {\n        this.client = client;\n    }\n\n    public void AWSCodePipelineFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        PutJobSuccessResultRequest request = new PutJobSuccessResultRequest() /* <===  */ \n            .withJobId(firstName)\n            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);"
                  },
                  {
                    "sample" : "addOutputVariablesEntry(\"phoneNumber\", phoneNumber)",
                    "lineNumber" : 13,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "    public AWSCodePipelineUtil(AWSCodePipeline client) {\n        this.client = client;\n    }\n\n    public void AWSCodePipelineFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        PutJobSuccessResultRequest request = new PutJobSuccessResultRequest() /* <===  */ \n            .withJobId(firstName)\n            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);"
                  },
                  {
                    "sample" : "addOutputVariablesEntry(\"dob\", dob)",
                    "lineNumber" : 13,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "    public AWSCodePipelineUtil(AWSCodePipeline client) {\n        this.client = client;\n    }\n\n    public void AWSCodePipelineFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        PutJobSuccessResultRequest request = new PutJobSuccessResultRequest() /* <===  */ \n            .withJobId(firstName)\n            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);"
                  },
                  {
                    "sample" : "request",
                    "lineNumber" : 13,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "    public AWSCodePipelineUtil(AWSCodePipeline client) {\n        this.client = client;\n    }\n\n    public void AWSCodePipelineFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        PutJobSuccessResultRequest request = new PutJobSuccessResultRequest() /* <=== com.amazonaws.services.codepipeline.model.PutJobSuccessResultRequest */ \n            .withJobId(firstName)\n            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);"
                  },
                  {
                    "sample" : "putJobSuccessResult(request)",
                    "lineNumber" : 20,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);\n\n        PutJobSuccessResultResult result = client.putJobSuccessResult(request); /* <=== com.amazonaws.services.codepipeline.AWSCodePipeline.putJobSuccessResult */ \n        System.out.println(\"Successfully sent personal data to CodePipeline: \" + result);\n    }\n}\n"
                  },
                  {
                    "sample" : "result",
                    "lineNumber" : 20,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);\n\n        PutJobSuccessResultResult result = client.putJobSuccessResult(request); /* <=== com.amazonaws.services.codepipeline.model.PutJobSuccessResultResult */ \n        System.out.println(\"Successfully sent personal data to CodePipeline: \" + result);\n    }\n}\n"
                  },
                  {
                    "sample" : "println(\"Successfully sent personal data to CodePipeline: \" + result)",
                    "lineNumber" : 21,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);\n\n        PutJobSuccessResultResult result = client.putJobSuccessResult(request);\n        System.out.println(\"Successfully sent personal data to CodePipeline: \" + result); /* <=== java.io.PrintStream.println */ \n    }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "13027-13020-13019-13061-13034-13033-13032-13066-13065-13071",
                "path" : [
                  {
                    "sample" : "phoneNumber",
                    "lineNumber" : 16,
                    "columnNumber" : 104,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "public AWSIoTDeviceAdvisorUtil() {\nclient = AmazonIoTDeviceAdvisorClientBuilder.standard().build();\n}\n\npublic void AWSIoTDeviceAdvisorProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob); /* <=== java.lang.String */ \n\nTestRound testRound = new TestRound().withName(firstName + \"_\" + lastName + \"_TestRound\")\n        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n"
                  },
                  {
                    "sample" : "Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob)",
                    "lineNumber" : 16,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "public AWSIoTDeviceAdvisorUtil() {\nclient = AmazonIoTDeviceAdvisorClientBuilder.standard().build();\n}\n\npublic void AWSIoTDeviceAdvisorProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob); /* <=== java.util.Map.of */ \n\nTestRound testRound = new TestRound().withName(firstName + \"_\" + lastName + \"_TestRound\")\n        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 16,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "public AWSIoTDeviceAdvisorUtil() {\nclient = AmazonIoTDeviceAdvisorClientBuilder.standard().build();\n}\n\npublic void AWSIoTDeviceAdvisorProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob); /* <=== java.util.Map */ \n\nTestRound testRound = new TestRound().withName(firstName + \"_\" + lastName + \"_TestRound\")\n        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n"
                  },
                  {
                    "sample" : "personalData.toString()",
                    "lineNumber" : 20,
                    "columnNumber" : 75,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "public void AWSIoTDeviceAdvisorProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nTestRound testRound = new TestRound().withName(firstName + \"_\" + lastName + \"_TestRound\")\n        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString()); /* <=== java.util.Map.toString */ \n\nTestResult result = client.createTestRound(testRound);\n\nSystem.out.println(\"Result: \" + result.toString());\n}"
                  },
                  {
                    "sample" : "withPayloadSelection(PayloadSelection.PERSONAL_DATA)",
                    "lineNumber" : 18,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "}\n\npublic void AWSIoTDeviceAdvisorProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nTestRound testRound = new TestRound().withName(firstName + \"_\" + lastName + \"_TestRound\") /* <===  */ \n        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n\nTestResult result = client.createTestRound(testRound);\n"
                  },
                  {
                    "sample" : "withPayload(personalData.toString())",
                    "lineNumber" : 18,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "}\n\npublic void AWSIoTDeviceAdvisorProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nTestRound testRound = new TestRound().withName(firstName + \"_\" + lastName + \"_TestRound\") /* <===  */ \n        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n\nTestResult result = client.createTestRound(testRound);\n"
                  },
                  {
                    "sample" : "testRound",
                    "lineNumber" : 18,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "}\n\npublic void AWSIoTDeviceAdvisorProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nTestRound testRound = new TestRound().withName(firstName + \"_\" + lastName + \"_TestRound\") /* <=== com.amazonaws.services.iotdeviceadvisor.model.TestRound */ \n        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n\nTestResult result = client.createTestRound(testRound);\n"
                  },
                  {
                    "sample" : "createTestRound(testRound)",
                    "lineNumber" : 22,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "\nTestRound testRound = new TestRound().withName(firstName + \"_\" + lastName + \"_TestRound\")\n        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n\nTestResult result = client.createTestRound(testRound); /* <=== com.amazonaws.services.iotdeviceadvisor.AmazonIoTDeviceAdvisor.createTestRound */ \n\nSystem.out.println(\"Result: \" + result.toString());\n}\n}\n"
                  },
                  {
                    "sample" : "result",
                    "lineNumber" : 22,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "\nTestRound testRound = new TestRound().withName(firstName + \"_\" + lastName + \"_TestRound\")\n        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n\nTestResult result = client.createTestRound(testRound); /* <=== com.amazonaws.services.iotdeviceadvisor.model.TestResult */ \n\nSystem.out.println(\"Result: \" + result.toString());\n}\n}\n"
                  },
                  {
                    "sample" : "println(\"Result: \" + result.toString())",
                    "lineNumber" : 24,
                    "columnNumber" : 1,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n\nTestResult result = client.createTestRound(testRound);\n\nSystem.out.println(\"Result: \" + result.toString()); /* <=== java.io.PrintStream.println */ \n}\n}\n"
                  }
                ]
              },
              {
                "pathId" : "8825-8814-8813-8812-8829-8828-8834",
                "path" : [
                  {
                    "sample" : "phoneNumber",
                    "lineNumber" : 18,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/voiceid.java",
                    "excerpt" : "    public void processPersonalData(String firstName, String lastName, String phoneNumber) {\n        // Create a new profile in Voice ID\n        CreateProfileRequest createProfileRequest = new CreateProfileRequest()\n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber); /* <=== java.lang.String */ \n        CreateProfileResult createProfileResult = voiceIdClient.createProfile(createProfileRequest);\n        System.out.println(\"Profile created with ID: \" + createProfileResult.getProfileId());\n    }\n}\n"
                  },
                  {
                    "sample" : "withLastName(lastName)",
                    "lineNumber" : 15,
                    "columnNumber" : 53,
                    "fileName" : "/app/code/voiceid.java",
                    "excerpt" : "        this.voiceIdClient = voiceIdClient;\n    }\n\n    public void processPersonalData(String firstName, String lastName, String phoneNumber) {\n        // Create a new profile in Voice ID\n        CreateProfileRequest createProfileRequest = new CreateProfileRequest() /* <===  */ \n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber);\n        CreateProfileResult createProfileResult = voiceIdClient.createProfile(createProfileRequest);\n        System.out.println(\"Profile created with ID: \" + createProfileResult.getProfileId());"
                  },
                  {
                    "sample" : "withPhoneNumber(phoneNumber)",
                    "lineNumber" : 15,
                    "columnNumber" : 53,
                    "fileName" : "/app/code/voiceid.java",
                    "excerpt" : "        this.voiceIdClient = voiceIdClient;\n    }\n\n    public void processPersonalData(String firstName, String lastName, String phoneNumber) {\n        // Create a new profile in Voice ID\n        CreateProfileRequest createProfileRequest = new CreateProfileRequest() /* <===  */ \n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber);\n        CreateProfileResult createProfileResult = voiceIdClient.createProfile(createProfileRequest);\n        System.out.println(\"Profile created with ID: \" + createProfileResult.getProfileId());"
                  },
                  {
                    "sample" : "createProfileRequest",
                    "lineNumber" : 15,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/voiceid.java",
                    "excerpt" : "        this.voiceIdClient = voiceIdClient;\n    }\n\n    public void processPersonalData(String firstName, String lastName, String phoneNumber) {\n        // Create a new profile in Voice ID\n        CreateProfileRequest createProfileRequest = new CreateProfileRequest() /* <=== com.amazonaws.services.voiceid.model.CreateProfileRequest */ \n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber);\n        CreateProfileResult createProfileResult = voiceIdClient.createProfile(createProfileRequest);\n        System.out.println(\"Profile created with ID: \" + createProfileResult.getProfileId());"
                  },
                  {
                    "sample" : "createProfile(createProfileRequest)",
                    "lineNumber" : 19,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/voiceid.java",
                    "excerpt" : "        // Create a new profile in Voice ID\n        CreateProfileRequest createProfileRequest = new CreateProfileRequest()\n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber);\n        CreateProfileResult createProfileResult = voiceIdClient.createProfile(createProfileRequest); /* <=== com.amazonaws.services.voiceid.model.VoiceIdClient.createProfile */ \n        System.out.println(\"Profile created with ID: \" + createProfileResult.getProfileId());\n    }\n}\n"
                  },
                  {
                    "sample" : "createProfileResult",
                    "lineNumber" : 19,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/voiceid.java",
                    "excerpt" : "        // Create a new profile in Voice ID\n        CreateProfileRequest createProfileRequest = new CreateProfileRequest()\n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber);\n        CreateProfileResult createProfileResult = voiceIdClient.createProfile(createProfileRequest); /* <=== com.amazonaws.services.voiceid.model.CreateProfileResult */ \n        System.out.println(\"Profile created with ID: \" + createProfileResult.getProfileId());\n    }\n}\n"
                  },
                  {
                    "sample" : "println(\"Profile created with ID: \" + createProfileResult.getProfileId())",
                    "lineNumber" : 20,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/voiceid.java",
                    "excerpt" : "        CreateProfileRequest createProfileRequest = new CreateProfileRequest()\n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber);\n        CreateProfileResult createProfileResult = voiceIdClient.createProfile(createProfileRequest);\n        System.out.println(\"Profile created with ID: \" + createProfileResult.getProfileId()); /* <=== java.io.PrintStream.println */ \n    }\n}\n"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.PersonalIdentification.LastName",
        "sinks" : [
          {
            "sinkType" : "leakages",
            "id" : "Leakages.Log.Console",
            "name" : "Log Console",
            "category" : "",
            "domains" : [
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "databaseDetails" : {
              "dbName" : "",
              "dbVendor" : "",
              "dbLocation" : "",
              "dbOperation" : ""
            },
            "paths" : [
              {
                "pathId" : "12582-12577-12576-12596-12595-12608-12607-12611",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 10,
                    "columnNumber" : 83,
                    "fileName" : "/app/code/minframeModernization.java",
                    "excerpt" : "import java.util.Map;\n\npublic class AWSMainframeModernizationUtil {\n\npublic void AWSMainframeModernizationProcessData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob); /* <=== java.lang.String */ \n    \n    AmazonMainframeModernizationClient client = AmazonMainframeModernizationClient.builder().build();\n    \n    MigrateSystemToVirtualMachineRequest request = new MigrateSystemToVirtualMachineRequest()\n            .withInputData(personalData);"
                  },
                  {
                    "sample" : "Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob)",
                    "lineNumber" : 10,
                    "columnNumber" : 40,
                    "fileName" : "/app/code/minframeModernization.java",
                    "excerpt" : "import java.util.Map;\n\npublic class AWSMainframeModernizationUtil {\n\npublic void AWSMainframeModernizationProcessData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob); /* <=== java.util.Map.of */ \n    \n    AmazonMainframeModernizationClient client = AmazonMainframeModernizationClient.builder().build();\n    \n    MigrateSystemToVirtualMachineRequest request = new MigrateSystemToVirtualMachineRequest()\n            .withInputData(personalData);"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 10,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/minframeModernization.java",
                    "excerpt" : "import java.util.Map;\n\npublic class AWSMainframeModernizationUtil {\n\npublic void AWSMainframeModernizationProcessData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob); /* <=== java.util.Map */ \n    \n    AmazonMainframeModernizationClient client = AmazonMainframeModernizationClient.builder().build();\n    \n    MigrateSystemToVirtualMachineRequest request = new MigrateSystemToVirtualMachineRequest()\n            .withInputData(personalData);"
                  },
                  {
                    "sample" : "withInputData(personalData)",
                    "lineNumber" : 14,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/minframeModernization.java",
                    "excerpt" : "public void AWSMainframeModernizationProcessData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n    \n    AmazonMainframeModernizationClient client = AmazonMainframeModernizationClient.builder().build();\n    \n    MigrateSystemToVirtualMachineRequest request = new MigrateSystemToVirtualMachineRequest() /* <=== com.amazonaws.services.mainframemodernization.model.MigrateSystemToVirtualMachineRequest.withInputData */ \n            .withInputData(personalData);\n    \n    MigrateSystemToVirtualMachineResult result = client.migrateSystemToVirtualMachine(request);\n    \n    System.out.println(\"Migration result: \" + result);"
                  },
                  {
                    "sample" : "request",
                    "lineNumber" : 14,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/minframeModernization.java",
                    "excerpt" : "public void AWSMainframeModernizationProcessData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n    \n    AmazonMainframeModernizationClient client = AmazonMainframeModernizationClient.builder().build();\n    \n    MigrateSystemToVirtualMachineRequest request = new MigrateSystemToVirtualMachineRequest() /* <=== com.amazonaws.services.mainframemodernization.model.MigrateSystemToVirtualMachineRequest */ \n            .withInputData(personalData);\n    \n    MigrateSystemToVirtualMachineResult result = client.migrateSystemToVirtualMachine(request);\n    \n    System.out.println(\"Migration result: \" + result);"
                  },
                  {
                    "sample" : "migrateSystemToVirtualMachine(request)",
                    "lineNumber" : 17,
                    "columnNumber" : 50,
                    "fileName" : "/app/code/minframeModernization.java",
                    "excerpt" : "    AmazonMainframeModernizationClient client = AmazonMainframeModernizationClient.builder().build();\n    \n    MigrateSystemToVirtualMachineRequest request = new MigrateSystemToVirtualMachineRequest()\n            .withInputData(personalData);\n    \n    MigrateSystemToVirtualMachineResult result = client.migrateSystemToVirtualMachine(request); /* <=== com.amazonaws.services.mainframemodernization.AmazonMainframeModernizationClient.migrateSystemToVirtualMachine */ \n    \n    System.out.println(\"Migration result: \" + result);\n}\n}"
                  },
                  {
                    "sample" : "result",
                    "lineNumber" : 17,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/minframeModernization.java",
                    "excerpt" : "    AmazonMainframeModernizationClient client = AmazonMainframeModernizationClient.builder().build();\n    \n    MigrateSystemToVirtualMachineRequest request = new MigrateSystemToVirtualMachineRequest()\n            .withInputData(personalData);\n    \n    MigrateSystemToVirtualMachineResult result = client.migrateSystemToVirtualMachine(request); /* <=== com.amazonaws.services.mainframemodernization.model.MigrateSystemToVirtualMachineResult */ \n    \n    System.out.println(\"Migration result: \" + result);\n}\n}"
                  },
                  {
                    "sample" : "println(\"Migration result: \" + result)",
                    "lineNumber" : 19,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/minframeModernization.java",
                    "excerpt" : "    MigrateSystemToVirtualMachineRequest request = new MigrateSystemToVirtualMachineRequest()\n            .withInputData(personalData);\n    \n    MigrateSystemToVirtualMachineResult result = client.migrateSystemToVirtualMachine(request);\n    \n    System.out.println(\"Migration result: \" + result); /* <=== java.io.PrintStream.println */ \n}\n}"
                  }
                ]
              },
              {
                "pathId" : "4612-4610-4609-4637-4625",
                "path" : [
                  {
                    "sample" : "\"last_name\"",
                    "lineNumber" : 64,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/redshift.java",
                    "excerpt" : "            String sql = \"SELECT * FROM personal_data\";\n            PreparedStatement statement = conn.prepareStatement(sql);\n            ResultSet result = statement.executeQuery();\n            while (result.next()) {\n                String firstName = result.getString(\"first_name\");\n                String lastName = result.getString(\"last_name\"); /* <===  */ \n                int age = result.getInt(\"age\");\n                String address = result.getString(\"address\");\n                System.out.println(firstName + \" \" + lastName + \" \" + age + \" \" + address);\n            }\n        } catch (SQLException e) {"
                  },
                  {
                    "sample" : "result.getString(\"last_name\")",
                    "lineNumber" : 64,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/redshift.java",
                    "excerpt" : "            String sql = \"SELECT * FROM personal_data\";\n            PreparedStatement statement = conn.prepareStatement(sql);\n            ResultSet result = statement.executeQuery();\n            while (result.next()) {\n                String firstName = result.getString(\"first_name\");\n                String lastName = result.getString(\"last_name\"); /* <=== java.sql.ResultSet.getString */ \n                int age = result.getInt(\"age\");\n                String address = result.getString(\"address\");\n                System.out.println(firstName + \" \" + lastName + \" \" + age + \" \" + address);\n            }\n        } catch (SQLException e) {"
                  },
                  {
                    "sample" : "lastName",
                    "lineNumber" : 64,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/redshift.java",
                    "excerpt" : "            String sql = \"SELECT * FROM personal_data\";\n            PreparedStatement statement = conn.prepareStatement(sql);\n            ResultSet result = statement.executeQuery();\n            while (result.next()) {\n                String firstName = result.getString(\"first_name\");\n                String lastName = result.getString(\"last_name\"); /* <=== java.lang.String */ \n                int age = result.getInt(\"age\");\n                String address = result.getString(\"address\");\n                System.out.println(firstName + \" \" + lastName + \" \" + age + \" \" + address);\n            }\n        } catch (SQLException e) {"
                  },
                  {
                    "sample" : "lastName",
                    "lineNumber" : 67,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/redshift.java",
                    "excerpt" : "            while (result.next()) {\n                String firstName = result.getString(\"first_name\");\n                String lastName = result.getString(\"last_name\");\n                int age = result.getInt(\"age\");\n                String address = result.getString(\"address\");\n                System.out.println(firstName + \" \" + lastName + \" \" + age + \" \" + address); /* <=== java.lang.String */ \n            }\n        } catch (SQLException e) {\n            System.out.println(\"Error while retrieving personal data from Redshift\");\n            e.printStackTrace();\n        }"
                  },
                  {
                    "sample" : "System.out.println(firstName + \" \" + lastName + \" \" + age + \" \" + address)",
                    "lineNumber" : 67,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/redshift.java",
                    "excerpt" : "            while (result.next()) {\n                String firstName = result.getString(\"first_name\");\n                String lastName = result.getString(\"last_name\");\n                int age = result.getInt(\"age\");\n                String address = result.getString(\"address\");\n                System.out.println(firstName + \" \" + lastName + \" \" + age + \" \" + address); /* <=== java.io.PrintStream.println */ \n            }\n        } catch (SQLException e) {\n            System.out.println(\"Error while retrieving personal data from Redshift\");\n            e.printStackTrace();\n        }"
                  }
                ]
              },
              {
                "pathId" : "8824-8815-8814-8813-8812-8829-8828-8834",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 17,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/voiceid.java",
                    "excerpt" : "\n    public void processPersonalData(String firstName, String lastName, String phoneNumber) {\n        // Create a new profile in Voice ID\n        CreateProfileRequest createProfileRequest = new CreateProfileRequest()\n                .withFirstName(firstName)\n                .withLastName(lastName) /* <=== java.lang.String */ \n                .withPhoneNumber(phoneNumber);\n        CreateProfileResult createProfileResult = voiceIdClient.createProfile(createProfileRequest);\n        System.out.println(\"Profile created with ID: \" + createProfileResult.getProfileId());\n    }\n}"
                  },
                  {
                    "sample" : "withFirstName(firstName)",
                    "lineNumber" : 15,
                    "columnNumber" : 53,
                    "fileName" : "/app/code/voiceid.java",
                    "excerpt" : "        this.voiceIdClient = voiceIdClient;\n    }\n\n    public void processPersonalData(String firstName, String lastName, String phoneNumber) {\n        // Create a new profile in Voice ID\n        CreateProfileRequest createProfileRequest = new CreateProfileRequest() /* <=== com.amazonaws.services.voiceid.model.CreateProfileRequest.withFirstName */ \n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber);\n        CreateProfileResult createProfileResult = voiceIdClient.createProfile(createProfileRequest);\n        System.out.println(\"Profile created with ID: \" + createProfileResult.getProfileId());"
                  },
                  {
                    "sample" : "withLastName(lastName)",
                    "lineNumber" : 15,
                    "columnNumber" : 53,
                    "fileName" : "/app/code/voiceid.java",
                    "excerpt" : "        this.voiceIdClient = voiceIdClient;\n    }\n\n    public void processPersonalData(String firstName, String lastName, String phoneNumber) {\n        // Create a new profile in Voice ID\n        CreateProfileRequest createProfileRequest = new CreateProfileRequest() /* <===  */ \n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber);\n        CreateProfileResult createProfileResult = voiceIdClient.createProfile(createProfileRequest);\n        System.out.println(\"Profile created with ID: \" + createProfileResult.getProfileId());"
                  },
                  {
                    "sample" : "withPhoneNumber(phoneNumber)",
                    "lineNumber" : 15,
                    "columnNumber" : 53,
                    "fileName" : "/app/code/voiceid.java",
                    "excerpt" : "        this.voiceIdClient = voiceIdClient;\n    }\n\n    public void processPersonalData(String firstName, String lastName, String phoneNumber) {\n        // Create a new profile in Voice ID\n        CreateProfileRequest createProfileRequest = new CreateProfileRequest() /* <===  */ \n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber);\n        CreateProfileResult createProfileResult = voiceIdClient.createProfile(createProfileRequest);\n        System.out.println(\"Profile created with ID: \" + createProfileResult.getProfileId());"
                  },
                  {
                    "sample" : "createProfileRequest",
                    "lineNumber" : 15,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/voiceid.java",
                    "excerpt" : "        this.voiceIdClient = voiceIdClient;\n    }\n\n    public void processPersonalData(String firstName, String lastName, String phoneNumber) {\n        // Create a new profile in Voice ID\n        CreateProfileRequest createProfileRequest = new CreateProfileRequest() /* <=== com.amazonaws.services.voiceid.model.CreateProfileRequest */ \n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber);\n        CreateProfileResult createProfileResult = voiceIdClient.createProfile(createProfileRequest);\n        System.out.println(\"Profile created with ID: \" + createProfileResult.getProfileId());"
                  },
                  {
                    "sample" : "createProfile(createProfileRequest)",
                    "lineNumber" : 19,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/voiceid.java",
                    "excerpt" : "        // Create a new profile in Voice ID\n        CreateProfileRequest createProfileRequest = new CreateProfileRequest()\n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber);\n        CreateProfileResult createProfileResult = voiceIdClient.createProfile(createProfileRequest); /* <=== com.amazonaws.services.voiceid.model.VoiceIdClient.createProfile */ \n        System.out.println(\"Profile created with ID: \" + createProfileResult.getProfileId());\n    }\n}\n"
                  },
                  {
                    "sample" : "createProfileResult",
                    "lineNumber" : 19,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/voiceid.java",
                    "excerpt" : "        // Create a new profile in Voice ID\n        CreateProfileRequest createProfileRequest = new CreateProfileRequest()\n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber);\n        CreateProfileResult createProfileResult = voiceIdClient.createProfile(createProfileRequest); /* <=== com.amazonaws.services.voiceid.model.CreateProfileResult */ \n        System.out.println(\"Profile created with ID: \" + createProfileResult.getProfileId());\n    }\n}\n"
                  },
                  {
                    "sample" : "println(\"Profile created with ID: \" + createProfileResult.getProfileId())",
                    "lineNumber" : 20,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/voiceid.java",
                    "excerpt" : "        CreateProfileRequest createProfileRequest = new CreateProfileRequest()\n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber);\n        CreateProfileResult createProfileResult = voiceIdClient.createProfile(createProfileRequest);\n        System.out.println(\"Profile created with ID: \" + createProfileResult.getProfileId()); /* <=== java.io.PrintStream.println */ \n    }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "13495-13482-13481-13480-13501-13500-13506",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 19,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/iotFleetwise.java",
                    "excerpt" : "\npublic void AWSIoTFleetwiseProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nCreateTrackerRequest createTrackerRequest = new CreateTrackerRequest()\n        .withTrackerName(firstName + \"_\" + lastName + \"_Tracker\") /* <=== java.lang.String */ \n        .withAttributePayload(personalData);\n\nCreateTrackerResult result = client.createTracker(createTrackerRequest);\nSystem.out.println(\"Tracker created with ID: \" + result.getTrackerId());\n}"
                  },
                  {
                    "sample" : "withTrackerName(firstName + \"_\" + lastName + \"_Tracker\")",
                    "lineNumber" : 18,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/iotFleetwise.java",
                    "excerpt" : "}\n\npublic void AWSIoTFleetwiseProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nCreateTrackerRequest createTrackerRequest = new CreateTrackerRequest() /* <=== com.amazonaws.services.iotfleetwise.model.CreateTrackerRequest.withTrackerName */ \n        .withTrackerName(firstName + \"_\" + lastName + \"_Tracker\")\n        .withAttributePayload(personalData);\n\nCreateTrackerResult result = client.createTracker(createTrackerRequest);\nSystem.out.println(\"Tracker created with ID: \" + result.getTrackerId());"
                  },
                  {
                    "sample" : "withAttributePayload(personalData)",
                    "lineNumber" : 18,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/iotFleetwise.java",
                    "excerpt" : "}\n\npublic void AWSIoTFleetwiseProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nCreateTrackerRequest createTrackerRequest = new CreateTrackerRequest() /* <===  */ \n        .withTrackerName(firstName + \"_\" + lastName + \"_Tracker\")\n        .withAttributePayload(personalData);\n\nCreateTrackerResult result = client.createTracker(createTrackerRequest);\nSystem.out.println(\"Tracker created with ID: \" + result.getTrackerId());"
                  },
                  {
                    "sample" : "createTrackerRequest",
                    "lineNumber" : 18,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/iotFleetwise.java",
                    "excerpt" : "}\n\npublic void AWSIoTFleetwiseProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nCreateTrackerRequest createTrackerRequest = new CreateTrackerRequest() /* <=== com.amazonaws.services.iotfleetwise.model.CreateTrackerRequest */ \n        .withTrackerName(firstName + \"_\" + lastName + \"_Tracker\")\n        .withAttributePayload(personalData);\n\nCreateTrackerResult result = client.createTracker(createTrackerRequest);\nSystem.out.println(\"Tracker created with ID: \" + result.getTrackerId());"
                  },
                  {
                    "sample" : "createTracker(createTrackerRequest)",
                    "lineNumber" : 22,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/iotFleetwise.java",
                    "excerpt" : "\nCreateTrackerRequest createTrackerRequest = new CreateTrackerRequest()\n        .withTrackerName(firstName + \"_\" + lastName + \"_Tracker\")\n        .withAttributePayload(personalData);\n\nCreateTrackerResult result = client.createTracker(createTrackerRequest); /* <=== com.amazonaws.services.iotfleetwise.AmazonIoTFleetwise.createTracker */ \nSystem.out.println(\"Tracker created with ID: \" + result.getTrackerId());\n}\n}"
                  },
                  {
                    "sample" : "result",
                    "lineNumber" : 22,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/iotFleetwise.java",
                    "excerpt" : "\nCreateTrackerRequest createTrackerRequest = new CreateTrackerRequest()\n        .withTrackerName(firstName + \"_\" + lastName + \"_Tracker\")\n        .withAttributePayload(personalData);\n\nCreateTrackerResult result = client.createTracker(createTrackerRequest); /* <=== com.amazonaws.services.iotfleetwise.model.CreateTrackerResult */ \nSystem.out.println(\"Tracker created with ID: \" + result.getTrackerId());\n}\n}"
                  },
                  {
                    "sample" : "println(\"Tracker created with ID: \" + result.getTrackerId())",
                    "lineNumber" : 23,
                    "columnNumber" : 1,
                    "fileName" : "/app/code/iotFleetwise.java",
                    "excerpt" : "CreateTrackerRequest createTrackerRequest = new CreateTrackerRequest()\n        .withTrackerName(firstName + \"_\" + lastName + \"_Tracker\")\n        .withAttributePayload(personalData);\n\nCreateTrackerResult result = client.createTracker(createTrackerRequest);\nSystem.out.println(\"Tracker created with ID: \" + result.getTrackerId()); /* <=== java.io.PrintStream.println */ \n}\n}"
                  }
                ]
              },
              {
                "pathId" : "1738-1739-1727-1726-1725-1724-1723-1747-1746-1752",
                "path" : [
                  {
                    "sample" : "\"lastName\"",
                    "lineNumber" : 16,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "\n    public void AWSCodePipelineFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        PutJobSuccessResultRequest request = new PutJobSuccessResultRequest()\n            .withJobId(firstName)\n            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName) /* <===  */ \n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);\n\n        PutJobSuccessResultResult result = client.putJobSuccessResult(request);\n        System.out.println(\"Successfully sent personal data to CodePipeline: \" + result);"
                  },
                  {
                    "sample" : "lastName",
                    "lineNumber" : 16,
                    "columnNumber" : 50,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "\n    public void AWSCodePipelineFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        PutJobSuccessResultRequest request = new PutJobSuccessResultRequest()\n            .withJobId(firstName)\n            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName) /* <=== java.lang.String */ \n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);\n\n        PutJobSuccessResultResult result = client.putJobSuccessResult(request);\n        System.out.println(\"Successfully sent personal data to CodePipeline: \" + result);"
                  },
                  {
                    "sample" : "withContinuationToken(\"optional_token\")",
                    "lineNumber" : 13,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "    public AWSCodePipelineUtil(AWSCodePipeline client) {\n        this.client = client;\n    }\n\n    public void AWSCodePipelineFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        PutJobSuccessResultRequest request = new PutJobSuccessResultRequest() /* <===  */ \n            .withJobId(firstName)\n            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);"
                  },
                  {
                    "sample" : "addOutputVariablesEntry(\"lastName\", lastName)",
                    "lineNumber" : 13,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "    public AWSCodePipelineUtil(AWSCodePipeline client) {\n        this.client = client;\n    }\n\n    public void AWSCodePipelineFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        PutJobSuccessResultRequest request = new PutJobSuccessResultRequest() /* <===  */ \n            .withJobId(firstName)\n            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);"
                  },
                  {
                    "sample" : "addOutputVariablesEntry(\"phoneNumber\", phoneNumber)",
                    "lineNumber" : 13,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "    public AWSCodePipelineUtil(AWSCodePipeline client) {\n        this.client = client;\n    }\n\n    public void AWSCodePipelineFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        PutJobSuccessResultRequest request = new PutJobSuccessResultRequest() /* <===  */ \n            .withJobId(firstName)\n            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);"
                  },
                  {
                    "sample" : "addOutputVariablesEntry(\"dob\", dob)",
                    "lineNumber" : 13,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "    public AWSCodePipelineUtil(AWSCodePipeline client) {\n        this.client = client;\n    }\n\n    public void AWSCodePipelineFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        PutJobSuccessResultRequest request = new PutJobSuccessResultRequest() /* <===  */ \n            .withJobId(firstName)\n            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);"
                  },
                  {
                    "sample" : "request",
                    "lineNumber" : 13,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "    public AWSCodePipelineUtil(AWSCodePipeline client) {\n        this.client = client;\n    }\n\n    public void AWSCodePipelineFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        PutJobSuccessResultRequest request = new PutJobSuccessResultRequest() /* <=== com.amazonaws.services.codepipeline.model.PutJobSuccessResultRequest */ \n            .withJobId(firstName)\n            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);"
                  },
                  {
                    "sample" : "putJobSuccessResult(request)",
                    "lineNumber" : 20,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);\n\n        PutJobSuccessResultResult result = client.putJobSuccessResult(request); /* <=== com.amazonaws.services.codepipeline.AWSCodePipeline.putJobSuccessResult */ \n        System.out.println(\"Successfully sent personal data to CodePipeline: \" + result);\n    }\n}\n"
                  },
                  {
                    "sample" : "result",
                    "lineNumber" : 20,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);\n\n        PutJobSuccessResultResult result = client.putJobSuccessResult(request); /* <=== com.amazonaws.services.codepipeline.model.PutJobSuccessResultResult */ \n        System.out.println(\"Successfully sent personal data to CodePipeline: \" + result);\n    }\n}\n"
                  },
                  {
                    "sample" : "println(\"Successfully sent personal data to CodePipeline: \" + result)",
                    "lineNumber" : 21,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);\n\n        PutJobSuccessResultResult result = client.putJobSuccessResult(request);\n        System.out.println(\"Successfully sent personal data to CodePipeline: \" + result); /* <=== java.io.PrintStream.println */ \n    }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "13050-13037-13036-13035-13034-13033-13032-13066-13065-13071",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 18,
                    "columnNumber" : 66,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "}\n\npublic void AWSIoTDeviceAdvisorProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nTestRound testRound = new TestRound().withName(firstName + \"_\" + lastName + \"_TestRound\") /* <=== java.lang.String */ \n        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n\nTestResult result = client.createTestRound(testRound);\n"
                  },
                  {
                    "sample" : "withName(firstName + \"_\" + lastName + \"_TestRound\")",
                    "lineNumber" : 18,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "}\n\npublic void AWSIoTDeviceAdvisorProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nTestRound testRound = new TestRound().withName(firstName + \"_\" + lastName + \"_TestRound\") /* <=== com.amazonaws.services.iotdeviceadvisor.model.TestRound.withName */ \n        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n\nTestResult result = client.createTestRound(testRound);\n"
                  },
                  {
                    "sample" : "withTargetSelection(TargetSelection.CONTINUOUS)",
                    "lineNumber" : 18,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "}\n\npublic void AWSIoTDeviceAdvisorProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nTestRound testRound = new TestRound().withName(firstName + \"_\" + lastName + \"_TestRound\") /* <===  */ \n        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n\nTestResult result = client.createTestRound(testRound);\n"
                  },
                  {
                    "sample" : "withPayloadSelection(PayloadSelection.CONTINUOUS)",
                    "lineNumber" : 18,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "}\n\npublic void AWSIoTDeviceAdvisorProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nTestRound testRound = new TestRound().withName(firstName + \"_\" + lastName + \"_TestRound\") /* <===  */ \n        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n\nTestResult result = client.createTestRound(testRound);\n"
                  },
                  {
                    "sample" : "withPayloadSelection(PayloadSelection.PERSONAL_DATA)",
                    "lineNumber" : 18,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "}\n\npublic void AWSIoTDeviceAdvisorProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nTestRound testRound = new TestRound().withName(firstName + \"_\" + lastName + \"_TestRound\") /* <===  */ \n        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n\nTestResult result = client.createTestRound(testRound);\n"
                  },
                  {
                    "sample" : "withPayload(personalData.toString())",
                    "lineNumber" : 18,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "}\n\npublic void AWSIoTDeviceAdvisorProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nTestRound testRound = new TestRound().withName(firstName + \"_\" + lastName + \"_TestRound\") /* <===  */ \n        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n\nTestResult result = client.createTestRound(testRound);\n"
                  },
                  {
                    "sample" : "testRound",
                    "lineNumber" : 18,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "}\n\npublic void AWSIoTDeviceAdvisorProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nTestRound testRound = new TestRound().withName(firstName + \"_\" + lastName + \"_TestRound\") /* <=== com.amazonaws.services.iotdeviceadvisor.model.TestRound */ \n        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n\nTestResult result = client.createTestRound(testRound);\n"
                  },
                  {
                    "sample" : "createTestRound(testRound)",
                    "lineNumber" : 22,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "\nTestRound testRound = new TestRound().withName(firstName + \"_\" + lastName + \"_TestRound\")\n        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n\nTestResult result = client.createTestRound(testRound); /* <=== com.amazonaws.services.iotdeviceadvisor.AmazonIoTDeviceAdvisor.createTestRound */ \n\nSystem.out.println(\"Result: \" + result.toString());\n}\n}\n"
                  },
                  {
                    "sample" : "result",
                    "lineNumber" : 22,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "\nTestRound testRound = new TestRound().withName(firstName + \"_\" + lastName + \"_TestRound\")\n        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n\nTestResult result = client.createTestRound(testRound); /* <=== com.amazonaws.services.iotdeviceadvisor.model.TestResult */ \n\nSystem.out.println(\"Result: \" + result.toString());\n}\n}\n"
                  },
                  {
                    "sample" : "println(\"Result: \" + result.toString())",
                    "lineNumber" : 24,
                    "columnNumber" : 1,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n\nTestResult result = client.createTestRound(testRound);\n\nSystem.out.println(\"Result: \" + result.toString()); /* <=== java.io.PrintStream.println */ \n}\n}\n"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.PersonalIdentification.Age",
        "sinks" : [
          {
            "sinkType" : "leakages",
            "id" : "Leakages.Log.Console",
            "name" : "Log Console",
            "category" : "",
            "domains" : [
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "databaseDetails" : {
              "dbName" : "",
              "dbVendor" : "",
              "dbLocation" : "",
              "dbOperation" : ""
            },
            "paths" : [
              {
                "pathId" : "4615-4639-4625",
                "path" : [
                  {
                    "sample" : "age",
                    "lineNumber" : 65,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/redshift.java",
                    "excerpt" : "            PreparedStatement statement = conn.prepareStatement(sql);\n            ResultSet result = statement.executeQuery();\n            while (result.next()) {\n                String firstName = result.getString(\"first_name\");\n                String lastName = result.getString(\"last_name\");\n                int age = result.getInt(\"age\"); /* <=== int */ \n                String address = result.getString(\"address\");\n                System.out.println(firstName + \" \" + lastName + \" \" + age + \" \" + address);\n            }\n        } catch (SQLException e) {\n            System.out.println(\"Error while retrieving personal data from Redshift\");"
                  },
                  {
                    "sample" : "age",
                    "lineNumber" : 67,
                    "columnNumber" : 71,
                    "fileName" : "/app/code/redshift.java",
                    "excerpt" : "            while (result.next()) {\n                String firstName = result.getString(\"first_name\");\n                String lastName = result.getString(\"last_name\");\n                int age = result.getInt(\"age\");\n                String address = result.getString(\"address\");\n                System.out.println(firstName + \" \" + lastName + \" \" + age + \" \" + address); /* <=== int */ \n            }\n        } catch (SQLException e) {\n            System.out.println(\"Error while retrieving personal data from Redshift\");\n            e.printStackTrace();\n        }"
                  },
                  {
                    "sample" : "System.out.println(firstName + \" \" + lastName + \" \" + age + \" \" + address)",
                    "lineNumber" : 67,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/redshift.java",
                    "excerpt" : "            while (result.next()) {\n                String firstName = result.getString(\"first_name\");\n                String lastName = result.getString(\"last_name\");\n                int age = result.getInt(\"age\");\n                String address = result.getString(\"address\");\n                System.out.println(firstName + \" \" + lastName + \" \" + age + \" \" + address); /* <=== java.io.PrintStream.println */ \n            }\n        } catch (SQLException e) {\n            System.out.println(\"Error while retrieving personal data from Redshift\");\n            e.printStackTrace();\n        }"
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "third_parties" : [
      {
        "sourceId" : "Data.Sensitive.AccountData.AccountID",
        "sinks" : [
          {
            "sinkType" : "third_parties",
            "id" : "ThirdParties.SDK.Amazon.Aws",
            "name" : "Amazon Aws",
            "category" : "",
            "domains" : [
              "aws.amazon.com"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "databaseDetails" : {
              "dbName" : "",
              "dbVendor" : "",
              "dbLocation" : "",
              "dbOperation" : ""
            },
            "paths" : [
              {
                "pathId" : "11235-11251-11243-11242-11241-11253",
                "path" : [
                  {
                    "sample" : "accountId",
                    "lineNumber" : 21,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "        CreateAccountRequest createAccountRequest = new CreateAccountRequest()\n            .withEmail(personalData.get(\"email\"))\n            .withAccountName(personalData.get(\"name\"))\n            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest);\n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId(); /* <=== java.lang.String */ \n\n        // Add the personal data as tags to the created account\n        TagResourceRequest tagResourceRequest = new TagResourceRequest()\n            .withResourceId(accountId)\n            .withTags(personalData);"
                  },
                  {
                    "sample" : "accountId",
                    "lineNumber" : 25,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest);\n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId();\n\n        // Add the personal data as tags to the created account\n        TagResourceRequest tagResourceRequest = new TagResourceRequest()\n            .withResourceId(accountId) /* <=== java.lang.String */ \n            .withTags(personalData);\n        organizationsClient.tagResource(tagResourceRequest);\n    }\n}\n"
                  },
                  {
                    "sample" : "withResourceId(accountId)",
                    "lineNumber" : 24,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest);\n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId();\n\n        // Add the personal data as tags to the created account\n        TagResourceRequest tagResourceRequest = new TagResourceRequest() /* <===  */ \n            .withResourceId(accountId)\n            .withTags(personalData);\n        organizationsClient.tagResource(tagResourceRequest);\n    }\n}"
                  },
                  {
                    "sample" : "withTags(personalData)",
                    "lineNumber" : 24,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest);\n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId();\n\n        // Add the personal data as tags to the created account\n        TagResourceRequest tagResourceRequest = new TagResourceRequest() /* <===  */ \n            .withResourceId(accountId)\n            .withTags(personalData);\n        organizationsClient.tagResource(tagResourceRequest);\n    }\n}"
                  },
                  {
                    "sample" : "tagResourceRequest",
                    "lineNumber" : 24,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest);\n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId();\n\n        // Add the personal data as tags to the created account\n        TagResourceRequest tagResourceRequest = new TagResourceRequest() /* <=== ANY */ \n            .withResourceId(accountId)\n            .withTags(personalData);\n        organizationsClient.tagResource(tagResourceRequest);\n    }\n}"
                  },
                  {
                    "sample" : "tagResource(tagResourceRequest)",
                    "lineNumber" : 27,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "\n        // Add the personal data as tags to the created account\n        TagResourceRequest tagResourceRequest = new TagResourceRequest()\n            .withResourceId(accountId)\n            .withTags(personalData);\n        organizationsClient.tagResource(tagResourceRequest); /* <=== com.amazonaws.services.organizations.AWSOrganizations.tagResource */ \n    }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "6202-6194-6193-6192-6191-6208",
                "path" : [
                  {
                    "sample" : "userId",
                    "lineNumber" : 35,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/amplifyBackend.java",
                    "excerpt" : "                .withPassword(name);\n        CreateBackendAuthUserResult userResult = backendClient.createBackendAuthUser(userRequest);\n\n        // Update the user's personal information\n        UpdateBackendAuthUserRequest updateRequest = new UpdateBackendAuthUserRequest()\n                .withUserId(userId) /* <=== java.lang.String */ \n                .withEmail(email)\n                .withName(name);\n        UpdateBackendAuthUserResult updateResult = backendClient.updateBackendAuthUser(updateRequest);\n    }\n}"
                  },
                  {
                    "sample" : "withUserId(userId)",
                    "lineNumber" : 34,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/amplifyBackend.java",
                    "excerpt" : "                .withUsername(email)\n                .withPassword(name);\n        CreateBackendAuthUserResult userResult = backendClient.createBackendAuthUser(userRequest);\n\n        // Update the user's personal information\n        UpdateBackendAuthUserRequest updateRequest = new UpdateBackendAuthUserRequest() /* <=== com.amazonaws.services.amplifybackend.model.UpdateBackendAuthUserRequest.withUserId */ \n                .withUserId(userId)\n                .withEmail(email)\n                .withName(name);\n        UpdateBackendAuthUserResult updateResult = backendClient.updateBackendAuthUser(updateRequest);\n    }"
                  },
                  {
                    "sample" : "withEmail(email)",
                    "lineNumber" : 34,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/amplifyBackend.java",
                    "excerpt" : "                .withUsername(email)\n                .withPassword(name);\n        CreateBackendAuthUserResult userResult = backendClient.createBackendAuthUser(userRequest);\n\n        // Update the user's personal information\n        UpdateBackendAuthUserRequest updateRequest = new UpdateBackendAuthUserRequest() /* <===  */ \n                .withUserId(userId)\n                .withEmail(email)\n                .withName(name);\n        UpdateBackendAuthUserResult updateResult = backendClient.updateBackendAuthUser(updateRequest);\n    }"
                  },
                  {
                    "sample" : "withName(name)",
                    "lineNumber" : 34,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/amplifyBackend.java",
                    "excerpt" : "                .withUsername(email)\n                .withPassword(name);\n        CreateBackendAuthUserResult userResult = backendClient.createBackendAuthUser(userRequest);\n\n        // Update the user's personal information\n        UpdateBackendAuthUserRequest updateRequest = new UpdateBackendAuthUserRequest() /* <===  */ \n                .withUserId(userId)\n                .withEmail(email)\n                .withName(name);\n        UpdateBackendAuthUserResult updateResult = backendClient.updateBackendAuthUser(updateRequest);\n    }"
                  },
                  {
                    "sample" : "updateRequest",
                    "lineNumber" : 34,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/amplifyBackend.java",
                    "excerpt" : "                .withUsername(email)\n                .withPassword(name);\n        CreateBackendAuthUserResult userResult = backendClient.createBackendAuthUser(userRequest);\n\n        // Update the user's personal information\n        UpdateBackendAuthUserRequest updateRequest = new UpdateBackendAuthUserRequest() /* <=== com.amazonaws.services.amplifybackend.model.UpdateBackendAuthUserRequest */ \n                .withUserId(userId)\n                .withEmail(email)\n                .withName(name);\n        UpdateBackendAuthUserResult updateResult = backendClient.updateBackendAuthUser(updateRequest);\n    }"
                  },
                  {
                    "sample" : "updateBackendAuthUser(updateRequest)",
                    "lineNumber" : 38,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/amplifyBackend.java",
                    "excerpt" : "        // Update the user's personal information\n        UpdateBackendAuthUserRequest updateRequest = new UpdateBackendAuthUserRequest()\n                .withUserId(userId)\n                .withEmail(email)\n                .withName(name);\n        UpdateBackendAuthUserResult updateResult = backendClient.updateBackendAuthUser(updateRequest); /* <=== com.amazonaws.services.amplifybackend.AmplifyBackend.updateBackendAuthUser */ \n    }\n}\n\n"
                  }
                ]
              },
              {
                "pathId" : "6202-6194",
                "path" : [
                  {
                    "sample" : "userId",
                    "lineNumber" : 35,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/amplifyBackend.java",
                    "excerpt" : "                .withPassword(name);\n        CreateBackendAuthUserResult userResult = backendClient.createBackendAuthUser(userRequest);\n\n        // Update the user's personal information\n        UpdateBackendAuthUserRequest updateRequest = new UpdateBackendAuthUserRequest()\n                .withUserId(userId) /* <=== java.lang.String */ \n                .withEmail(email)\n                .withName(name);\n        UpdateBackendAuthUserResult updateResult = backendClient.updateBackendAuthUser(updateRequest);\n    }\n}"
                  },
                  {
                    "sample" : "withUserId(userId)",
                    "lineNumber" : 34,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/amplifyBackend.java",
                    "excerpt" : "                .withUsername(email)\n                .withPassword(name);\n        CreateBackendAuthUserResult userResult = backendClient.createBackendAuthUser(userRequest);\n\n        // Update the user's personal information\n        UpdateBackendAuthUserRequest updateRequest = new UpdateBackendAuthUserRequest() /* <=== com.amazonaws.services.amplifybackend.model.UpdateBackendAuthUserRequest.withUserId */ \n                .withUserId(userId)\n                .withEmail(email)\n                .withName(name);\n        UpdateBackendAuthUserResult updateResult = backendClient.updateBackendAuthUser(updateRequest);\n    }"
                  }
                ]
              },
              {
                "pathId" : "6154-6145",
                "path" : [
                  {
                    "sample" : "userId",
                    "lineNumber" : 21,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/amplifyBackend.java",
                    "excerpt" : "\n    public void processPersonalData(String userId, String email, String name) {\n        // Create an identity pool for the user\n        CreateBackendAuthIdentityPoolRequest poolRequest = new CreateBackendAuthIdentityPoolRequest()\n                .withIdentityPoolName(\"UserIdentityPool\")\n                .withUserId(userId) /* <=== java.lang.String */ \n                .withUsername(email)\n                .withPassword(name);\n        CreateBackendAuthIdentityPoolResult poolResult = backendClient.createBackendAuthIdentityPool(poolRequest);\n\n        // Create the user in the backend"
                  },
                  {
                    "sample" : "withIdentityPoolName(\"UserIdentityPool\")",
                    "lineNumber" : 19,
                    "columnNumber" : 60,
                    "fileName" : "/app/code/amplifyBackend.java",
                    "excerpt" : "        backendClient = new AmplifyBackendClientBuilder().build();\n    }\n\n    public void processPersonalData(String userId, String email, String name) {\n        // Create an identity pool for the user\n        CreateBackendAuthIdentityPoolRequest poolRequest = new CreateBackendAuthIdentityPoolRequest() /* <=== com.amazonaws.services.amplifybackend.model.CreateBackendAuthIdentityPoolRequest.withIdentityPoolName */ \n                .withIdentityPoolName(\"UserIdentityPool\")\n                .withUserId(userId)\n                .withUsername(email)\n                .withPassword(name);\n        CreateBackendAuthIdentityPoolResult poolResult = backendClient.createBackendAuthIdentityPool(poolRequest);"
                  }
                ]
              },
              {
                "pathId" : "6178-6170-6169-6168-6167-6184",
                "path" : [
                  {
                    "sample" : "userId",
                    "lineNumber" : 28,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/amplifyBackend.java",
                    "excerpt" : "                .withPassword(name);\n        CreateBackendAuthIdentityPoolResult poolResult = backendClient.createBackendAuthIdentityPool(poolRequest);\n\n        // Create the user in the backend\n        CreateBackendAuthUserRequest userRequest = new CreateBackendAuthUserRequest()\n                .withUserId(userId) /* <=== java.lang.String */ \n                .withUsername(email)\n                .withPassword(name);\n        CreateBackendAuthUserResult userResult = backendClient.createBackendAuthUser(userRequest);\n\n        // Update the user's personal information"
                  },
                  {
                    "sample" : "withUserId(userId)",
                    "lineNumber" : 27,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/amplifyBackend.java",
                    "excerpt" : "                .withUsername(email)\n                .withPassword(name);\n        CreateBackendAuthIdentityPoolResult poolResult = backendClient.createBackendAuthIdentityPool(poolRequest);\n\n        // Create the user in the backend\n        CreateBackendAuthUserRequest userRequest = new CreateBackendAuthUserRequest() /* <=== com.amazonaws.services.amplifybackend.model.CreateBackendAuthUserRequest.withUserId */ \n                .withUserId(userId)\n                .withUsername(email)\n                .withPassword(name);\n        CreateBackendAuthUserResult userResult = backendClient.createBackendAuthUser(userRequest);\n"
                  },
                  {
                    "sample" : "withUsername(email)",
                    "lineNumber" : 27,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/amplifyBackend.java",
                    "excerpt" : "                .withUsername(email)\n                .withPassword(name);\n        CreateBackendAuthIdentityPoolResult poolResult = backendClient.createBackendAuthIdentityPool(poolRequest);\n\n        // Create the user in the backend\n        CreateBackendAuthUserRequest userRequest = new CreateBackendAuthUserRequest() /* <===  */ \n                .withUserId(userId)\n                .withUsername(email)\n                .withPassword(name);\n        CreateBackendAuthUserResult userResult = backendClient.createBackendAuthUser(userRequest);\n"
                  },
                  {
                    "sample" : "withPassword(name)",
                    "lineNumber" : 27,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/amplifyBackend.java",
                    "excerpt" : "                .withUsername(email)\n                .withPassword(name);\n        CreateBackendAuthIdentityPoolResult poolResult = backendClient.createBackendAuthIdentityPool(poolRequest);\n\n        // Create the user in the backend\n        CreateBackendAuthUserRequest userRequest = new CreateBackendAuthUserRequest() /* <===  */ \n                .withUserId(userId)\n                .withUsername(email)\n                .withPassword(name);\n        CreateBackendAuthUserResult userResult = backendClient.createBackendAuthUser(userRequest);\n"
                  },
                  {
                    "sample" : "userRequest",
                    "lineNumber" : 27,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/amplifyBackend.java",
                    "excerpt" : "                .withUsername(email)\n                .withPassword(name);\n        CreateBackendAuthIdentityPoolResult poolResult = backendClient.createBackendAuthIdentityPool(poolRequest);\n\n        // Create the user in the backend\n        CreateBackendAuthUserRequest userRequest = new CreateBackendAuthUserRequest() /* <=== com.amazonaws.services.amplifybackend.model.CreateBackendAuthUserRequest */ \n                .withUserId(userId)\n                .withUsername(email)\n                .withPassword(name);\n        CreateBackendAuthUserResult userResult = backendClient.createBackendAuthUser(userRequest);\n"
                  },
                  {
                    "sample" : "createBackendAuthUser(userRequest)",
                    "lineNumber" : 31,
                    "columnNumber" : 50,
                    "fileName" : "/app/code/amplifyBackend.java",
                    "excerpt" : "        // Create the user in the backend\n        CreateBackendAuthUserRequest userRequest = new CreateBackendAuthUserRequest()\n                .withUserId(userId)\n                .withUsername(email)\n                .withPassword(name);\n        CreateBackendAuthUserResult userResult = backendClient.createBackendAuthUser(userRequest); /* <=== com.amazonaws.services.amplifybackend.AmplifyBackend.createBackendAuthUser */ \n\n        // Update the user's personal information\n        UpdateBackendAuthUserRequest updateRequest = new UpdateBackendAuthUserRequest()\n                .withUserId(userId)\n                .withEmail(email)"
                  }
                ]
              },
              {
                "pathId" : "6178-6170",
                "path" : [
                  {
                    "sample" : "userId",
                    "lineNumber" : 28,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/amplifyBackend.java",
                    "excerpt" : "                .withPassword(name);\n        CreateBackendAuthIdentityPoolResult poolResult = backendClient.createBackendAuthIdentityPool(poolRequest);\n\n        // Create the user in the backend\n        CreateBackendAuthUserRequest userRequest = new CreateBackendAuthUserRequest()\n                .withUserId(userId) /* <=== java.lang.String */ \n                .withUsername(email)\n                .withPassword(name);\n        CreateBackendAuthUserResult userResult = backendClient.createBackendAuthUser(userRequest);\n\n        // Update the user's personal information"
                  },
                  {
                    "sample" : "withUserId(userId)",
                    "lineNumber" : 27,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/amplifyBackend.java",
                    "excerpt" : "                .withUsername(email)\n                .withPassword(name);\n        CreateBackendAuthIdentityPoolResult poolResult = backendClient.createBackendAuthIdentityPool(poolRequest);\n\n        // Create the user in the backend\n        CreateBackendAuthUserRequest userRequest = new CreateBackendAuthUserRequest() /* <=== com.amazonaws.services.amplifybackend.model.CreateBackendAuthUserRequest.withUserId */ \n                .withUserId(userId)\n                .withUsername(email)\n                .withPassword(name);\n        CreateBackendAuthUserResult userResult = backendClient.createBackendAuthUser(userRequest);\n"
                  }
                ]
              },
              {
                "pathId" : "6154-6145-6144-6143-6142-6141-6160",
                "path" : [
                  {
                    "sample" : "userId",
                    "lineNumber" : 21,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/amplifyBackend.java",
                    "excerpt" : "\n    public void processPersonalData(String userId, String email, String name) {\n        // Create an identity pool for the user\n        CreateBackendAuthIdentityPoolRequest poolRequest = new CreateBackendAuthIdentityPoolRequest()\n                .withIdentityPoolName(\"UserIdentityPool\")\n                .withUserId(userId) /* <=== java.lang.String */ \n                .withUsername(email)\n                .withPassword(name);\n        CreateBackendAuthIdentityPoolResult poolResult = backendClient.createBackendAuthIdentityPool(poolRequest);\n\n        // Create the user in the backend"
                  },
                  {
                    "sample" : "withIdentityPoolName(\"UserIdentityPool\")",
                    "lineNumber" : 19,
                    "columnNumber" : 60,
                    "fileName" : "/app/code/amplifyBackend.java",
                    "excerpt" : "        backendClient = new AmplifyBackendClientBuilder().build();\n    }\n\n    public void processPersonalData(String userId, String email, String name) {\n        // Create an identity pool for the user\n        CreateBackendAuthIdentityPoolRequest poolRequest = new CreateBackendAuthIdentityPoolRequest() /* <=== com.amazonaws.services.amplifybackend.model.CreateBackendAuthIdentityPoolRequest.withIdentityPoolName */ \n                .withIdentityPoolName(\"UserIdentityPool\")\n                .withUserId(userId)\n                .withUsername(email)\n                .withPassword(name);\n        CreateBackendAuthIdentityPoolResult poolResult = backendClient.createBackendAuthIdentityPool(poolRequest);"
                  },
                  {
                    "sample" : "withUserId(userId)",
                    "lineNumber" : 19,
                    "columnNumber" : 60,
                    "fileName" : "/app/code/amplifyBackend.java",
                    "excerpt" : "        backendClient = new AmplifyBackendClientBuilder().build();\n    }\n\n    public void processPersonalData(String userId, String email, String name) {\n        // Create an identity pool for the user\n        CreateBackendAuthIdentityPoolRequest poolRequest = new CreateBackendAuthIdentityPoolRequest() /* <===  */ \n                .withIdentityPoolName(\"UserIdentityPool\")\n                .withUserId(userId)\n                .withUsername(email)\n                .withPassword(name);\n        CreateBackendAuthIdentityPoolResult poolResult = backendClient.createBackendAuthIdentityPool(poolRequest);"
                  },
                  {
                    "sample" : "withUsername(email)",
                    "lineNumber" : 19,
                    "columnNumber" : 60,
                    "fileName" : "/app/code/amplifyBackend.java",
                    "excerpt" : "        backendClient = new AmplifyBackendClientBuilder().build();\n    }\n\n    public void processPersonalData(String userId, String email, String name) {\n        // Create an identity pool for the user\n        CreateBackendAuthIdentityPoolRequest poolRequest = new CreateBackendAuthIdentityPoolRequest() /* <===  */ \n                .withIdentityPoolName(\"UserIdentityPool\")\n                .withUserId(userId)\n                .withUsername(email)\n                .withPassword(name);\n        CreateBackendAuthIdentityPoolResult poolResult = backendClient.createBackendAuthIdentityPool(poolRequest);"
                  },
                  {
                    "sample" : "withPassword(name)",
                    "lineNumber" : 19,
                    "columnNumber" : 60,
                    "fileName" : "/app/code/amplifyBackend.java",
                    "excerpt" : "        backendClient = new AmplifyBackendClientBuilder().build();\n    }\n\n    public void processPersonalData(String userId, String email, String name) {\n        // Create an identity pool for the user\n        CreateBackendAuthIdentityPoolRequest poolRequest = new CreateBackendAuthIdentityPoolRequest() /* <===  */ \n                .withIdentityPoolName(\"UserIdentityPool\")\n                .withUserId(userId)\n                .withUsername(email)\n                .withPassword(name);\n        CreateBackendAuthIdentityPoolResult poolResult = backendClient.createBackendAuthIdentityPool(poolRequest);"
                  },
                  {
                    "sample" : "poolRequest",
                    "lineNumber" : 19,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/amplifyBackend.java",
                    "excerpt" : "        backendClient = new AmplifyBackendClientBuilder().build();\n    }\n\n    public void processPersonalData(String userId, String email, String name) {\n        // Create an identity pool for the user\n        CreateBackendAuthIdentityPoolRequest poolRequest = new CreateBackendAuthIdentityPoolRequest() /* <=== com.amazonaws.services.amplifybackend.model.CreateBackendAuthIdentityPoolRequest */ \n                .withIdentityPoolName(\"UserIdentityPool\")\n                .withUserId(userId)\n                .withUsername(email)\n                .withPassword(name);\n        CreateBackendAuthIdentityPoolResult poolResult = backendClient.createBackendAuthIdentityPool(poolRequest);"
                  },
                  {
                    "sample" : "createBackendAuthIdentityPool(poolRequest)",
                    "lineNumber" : 24,
                    "columnNumber" : 58,
                    "fileName" : "/app/code/amplifyBackend.java",
                    "excerpt" : "        CreateBackendAuthIdentityPoolRequest poolRequest = new CreateBackendAuthIdentityPoolRequest()\n                .withIdentityPoolName(\"UserIdentityPool\")\n                .withUserId(userId)\n                .withUsername(email)\n                .withPassword(name);\n        CreateBackendAuthIdentityPoolResult poolResult = backendClient.createBackendAuthIdentityPool(poolRequest); /* <=== com.amazonaws.services.amplifybackend.AmplifyBackend.createBackendAuthIdentityPool */ \n\n        // Create the user in the backend\n        CreateBackendAuthUserRequest userRequest = new CreateBackendAuthUserRequest()\n                .withUserId(userId)\n                .withUsername(email)"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.PersonalIdentification.FirstName",
        "sinks" : [
          {
            "sinkType" : "third_parties",
            "id" : "ThirdParties.SDK.Amazon.Aws",
            "name" : "Amazon Aws",
            "category" : "",
            "domains" : [
              "aws.amazon.com"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "databaseDetails" : {
              "dbName" : "",
              "dbVendor" : "",
              "dbLocation" : "",
              "dbOperation" : ""
            },
            "paths" : [
              {
                "pathId" : "14912-14908-14899-14898-14897-14920-14918",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 10,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/gamelift.java",
                    "excerpt" : "\n    public void AWSGameliftFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        AmazonGameLiftClientBuilder builder = AmazonGameLiftClientBuilder.standard();\n        PutRecordInput putRecordInput = new PutRecordInput()\n                .withData(String.format(\"First Name: %s, Last Name: %s, Phone Number: %s, DOB: %s\",\n                        firstName, lastName, phoneNumber, dob).getBytes()) /* <=== java.lang.String */ \n                .withStreamName(\"AWS-Gamelift-Stream\");\n        builder.build().putRecord(putRecordInput);\n    }\n}\n"
                  },
                  {
                    "sample" : "String.format(\"First Name: %s, Last Name: %s, Phone Number: %s, DOB: %s\", firstName, lastName, phoneNumber, dob)",
                    "lineNumber" : 9,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/gamelift.java",
                    "excerpt" : "public class AWSGameliftUtil {\n\n    public void AWSGameliftFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        AmazonGameLiftClientBuilder builder = AmazonGameLiftClientBuilder.standard();\n        PutRecordInput putRecordInput = new PutRecordInput()\n                .withData(String.format(\"First Name: %s, Last Name: %s, Phone Number: %s, DOB: %s\", /* <=== java.lang.String.format */ \n                        firstName, lastName, phoneNumber, dob).getBytes())\n                .withStreamName(\"AWS-Gamelift-Stream\");\n        builder.build().putRecord(putRecordInput);\n    }\n}"
                  },
                  {
                    "sample" : "withData(String.format(\"First Name: %s, Last Name: %s, Phone Number: %s, DOB: %s\", firstName, lastName, phoneNumber, dob).getBytes())",
                    "lineNumber" : 8,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/gamelift.java",
                    "excerpt" : "\npublic class AWSGameliftUtil {\n\n    public void AWSGameliftFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        AmazonGameLiftClientBuilder builder = AmazonGameLiftClientBuilder.standard();\n        PutRecordInput putRecordInput = new PutRecordInput() /* <=== com.amazonaws.services.gamelift.model.PutRecordInput.withData */ \n                .withData(String.format(\"First Name: %s, Last Name: %s, Phone Number: %s, DOB: %s\",\n                        firstName, lastName, phoneNumber, dob).getBytes())\n                .withStreamName(\"AWS-Gamelift-Stream\");\n        builder.build().putRecord(putRecordInput);\n    }"
                  },
                  {
                    "sample" : "withStreamName(\"AWS-Gamelift-Stream\")",
                    "lineNumber" : 8,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/gamelift.java",
                    "excerpt" : "\npublic class AWSGameliftUtil {\n\n    public void AWSGameliftFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        AmazonGameLiftClientBuilder builder = AmazonGameLiftClientBuilder.standard();\n        PutRecordInput putRecordInput = new PutRecordInput() /* <===  */ \n                .withData(String.format(\"First Name: %s, Last Name: %s, Phone Number: %s, DOB: %s\",\n                        firstName, lastName, phoneNumber, dob).getBytes())\n                .withStreamName(\"AWS-Gamelift-Stream\");\n        builder.build().putRecord(putRecordInput);\n    }"
                  },
                  {
                    "sample" : "putRecordInput",
                    "lineNumber" : 8,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/gamelift.java",
                    "excerpt" : "\npublic class AWSGameliftUtil {\n\n    public void AWSGameliftFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        AmazonGameLiftClientBuilder builder = AmazonGameLiftClientBuilder.standard();\n        PutRecordInput putRecordInput = new PutRecordInput() /* <=== com.amazonaws.services.gamelift.model.PutRecordInput */ \n                .withData(String.format(\"First Name: %s, Last Name: %s, Phone Number: %s, DOB: %s\",\n                        firstName, lastName, phoneNumber, dob).getBytes())\n                .withStreamName(\"AWS-Gamelift-Stream\");\n        builder.build().putRecord(putRecordInput);\n    }"
                  },
                  {
                    "sample" : "putRecordInput",
                    "lineNumber" : 12,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/gamelift.java",
                    "excerpt" : "        AmazonGameLiftClientBuilder builder = AmazonGameLiftClientBuilder.standard();\n        PutRecordInput putRecordInput = new PutRecordInput()\n                .withData(String.format(\"First Name: %s, Last Name: %s, Phone Number: %s, DOB: %s\",\n                        firstName, lastName, phoneNumber, dob).getBytes())\n                .withStreamName(\"AWS-Gamelift-Stream\");\n        builder.build().putRecord(putRecordInput); /* <=== com.amazonaws.services.gamelift.model.PutRecordInput */ \n    }\n}\n"
                  },
                  {
                    "sample" : "build()",
                    "lineNumber" : 12,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/gamelift.java",
                    "excerpt" : "        AmazonGameLiftClientBuilder builder = AmazonGameLiftClientBuilder.standard();\n        PutRecordInput putRecordInput = new PutRecordInput()\n                .withData(String.format(\"First Name: %s, Last Name: %s, Phone Number: %s, DOB: %s\",\n                        firstName, lastName, phoneNumber, dob).getBytes())\n                .withStreamName(\"AWS-Gamelift-Stream\");\n        builder.build().putRecord(putRecordInput); /* <=== com.amazonaws.services.gamelift.AmazonGameLiftClientBuilder.build */ \n    }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "8823-8815-8814-8813-8812-8829",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 16,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/voiceid.java",
                    "excerpt" : "    }\n\n    public void processPersonalData(String firstName, String lastName, String phoneNumber) {\n        // Create a new profile in Voice ID\n        CreateProfileRequest createProfileRequest = new CreateProfileRequest()\n                .withFirstName(firstName) /* <=== java.lang.String */ \n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber);\n        CreateProfileResult createProfileResult = voiceIdClient.createProfile(createProfileRequest);\n        System.out.println(\"Profile created with ID: \" + createProfileResult.getProfileId());\n    }"
                  },
                  {
                    "sample" : "withFirstName(firstName)",
                    "lineNumber" : 15,
                    "columnNumber" : 53,
                    "fileName" : "/app/code/voiceid.java",
                    "excerpt" : "        this.voiceIdClient = voiceIdClient;\n    }\n\n    public void processPersonalData(String firstName, String lastName, String phoneNumber) {\n        // Create a new profile in Voice ID\n        CreateProfileRequest createProfileRequest = new CreateProfileRequest() /* <=== com.amazonaws.services.voiceid.model.CreateProfileRequest.withFirstName */ \n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber);\n        CreateProfileResult createProfileResult = voiceIdClient.createProfile(createProfileRequest);\n        System.out.println(\"Profile created with ID: \" + createProfileResult.getProfileId());"
                  },
                  {
                    "sample" : "withLastName(lastName)",
                    "lineNumber" : 15,
                    "columnNumber" : 53,
                    "fileName" : "/app/code/voiceid.java",
                    "excerpt" : "        this.voiceIdClient = voiceIdClient;\n    }\n\n    public void processPersonalData(String firstName, String lastName, String phoneNumber) {\n        // Create a new profile in Voice ID\n        CreateProfileRequest createProfileRequest = new CreateProfileRequest() /* <===  */ \n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber);\n        CreateProfileResult createProfileResult = voiceIdClient.createProfile(createProfileRequest);\n        System.out.println(\"Profile created with ID: \" + createProfileResult.getProfileId());"
                  },
                  {
                    "sample" : "withPhoneNumber(phoneNumber)",
                    "lineNumber" : 15,
                    "columnNumber" : 53,
                    "fileName" : "/app/code/voiceid.java",
                    "excerpt" : "        this.voiceIdClient = voiceIdClient;\n    }\n\n    public void processPersonalData(String firstName, String lastName, String phoneNumber) {\n        // Create a new profile in Voice ID\n        CreateProfileRequest createProfileRequest = new CreateProfileRequest() /* <===  */ \n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber);\n        CreateProfileResult createProfileResult = voiceIdClient.createProfile(createProfileRequest);\n        System.out.println(\"Profile created with ID: \" + createProfileResult.getProfileId());"
                  },
                  {
                    "sample" : "createProfileRequest",
                    "lineNumber" : 15,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/voiceid.java",
                    "excerpt" : "        this.voiceIdClient = voiceIdClient;\n    }\n\n    public void processPersonalData(String firstName, String lastName, String phoneNumber) {\n        // Create a new profile in Voice ID\n        CreateProfileRequest createProfileRequest = new CreateProfileRequest() /* <=== com.amazonaws.services.voiceid.model.CreateProfileRequest */ \n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber);\n        CreateProfileResult createProfileResult = voiceIdClient.createProfile(createProfileRequest);\n        System.out.println(\"Profile created with ID: \" + createProfileResult.getProfileId());"
                  },
                  {
                    "sample" : "createProfile(createProfileRequest)",
                    "lineNumber" : 19,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/voiceid.java",
                    "excerpt" : "        // Create a new profile in Voice ID\n        CreateProfileRequest createProfileRequest = new CreateProfileRequest()\n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber);\n        CreateProfileResult createProfileResult = voiceIdClient.createProfile(createProfileRequest); /* <=== com.amazonaws.services.voiceid.model.VoiceIdClient.createProfile */ \n        System.out.println(\"Profile created with ID: \" + createProfileResult.getProfileId());\n    }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "16314-16306",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 10,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/amplifyUIBuilder.java",
                    "excerpt" : "\n    public void AWSAmplifyUIBuilderFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AmplifyUIBuilder amplifyUIBuilder = new AmplifyUIBuilder();\n\n        CreateUserRequest createUserRequest = new CreateUserRequest()\n                .withFirstName(firstName) /* <=== java.lang.String */ \n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber)\n                .withDOB(DOB);\n\n        amplifyUIBuilder.createUser(createUserRequest);"
                  },
                  {
                    "sample" : "withFirstName(firstName)",
                    "lineNumber" : 9,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/amplifyUIBuilder.java",
                    "excerpt" : "public class AWSAmplifyUIBuilderUtil {\n\n    public void AWSAmplifyUIBuilderFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AmplifyUIBuilder amplifyUIBuilder = new AmplifyUIBuilder();\n\n        CreateUserRequest createUserRequest = new CreateUserRequest() /* <=== com.amazonaws.services.amplifyuibuilder.model.CreateUserRequest.withFirstName */ \n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber)\n                .withDOB(DOB);\n"
                  }
                ]
              },
              {
                "pathId" : "8323-8314",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 12,
                    "columnNumber" : 67,
                    "fileName" : "/app/code/chimeSDKIdentity.java",
                    "excerpt" : "public class AWSChimeSDKIdentityUtil {\n  private static final AWSChimeSDKIdentity CLIENT = AWSChimeSDKIdentityClientBuilder.defaultClient();\n\n  public static void AWSChimeSDKIdentityFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n    List<Attribute> attributes = new ArrayList<>();\n    attributes.add(new Attribute().withKey(\"firstName\").withValue(firstName)); /* <=== java.lang.String */ \n    attributes.add(new Attribute().withKey(\"lastName\").withValue(lastName));\n    attributes.add(new Attribute().withKey(\"phoneNumber\").withValue(phoneNumber));\n    attributes.add(new Attribute().withKey(\"DOB\").withValue(DOB));\n\n    PutAttributesRequest request = new PutAttributesRequest().withAttributes(attributes);"
                  },
                  {
                    "sample" : "withKey(\"firstName\")",
                    "lineNumber" : 12,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/chimeSDKIdentity.java",
                    "excerpt" : "public class AWSChimeSDKIdentityUtil {\n  private static final AWSChimeSDKIdentity CLIENT = AWSChimeSDKIdentityClientBuilder.defaultClient();\n\n  public static void AWSChimeSDKIdentityFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n    List<Attribute> attributes = new ArrayList<>();\n    attributes.add(new Attribute().withKey(\"firstName\").withValue(firstName)); /* <=== com.amazonaws.services.chimesdkidentity.model.Attribute.withKey */ \n    attributes.add(new Attribute().withKey(\"lastName\").withValue(lastName));\n    attributes.add(new Attribute().withKey(\"phoneNumber\").withValue(phoneNumber));\n    attributes.add(new Attribute().withKey(\"DOB\").withValue(DOB));\n\n    PutAttributesRequest request = new PutAttributesRequest().withAttributes(attributes);"
                  }
                ]
              },
              {
                "pathId" : "13023-13048-13037",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 16,
                    "columnNumber" : 56,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "public AWSIoTDeviceAdvisorUtil() {\nclient = AmazonIoTDeviceAdvisorClientBuilder.standard().build();\n}\n\npublic void AWSIoTDeviceAdvisorProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob); /* <=== java.lang.String */ \n\nTestRound testRound = new TestRound().withName(firstName + \"_\" + lastName + \"_TestRound\")\n        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n"
                  },
                  {
                    "sample" : "firstName",
                    "lineNumber" : 18,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "}\n\npublic void AWSIoTDeviceAdvisorProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nTestRound testRound = new TestRound().withName(firstName + \"_\" + lastName + \"_TestRound\") /* <=== java.lang.String */ \n        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n\nTestResult result = client.createTestRound(testRound);\n"
                  },
                  {
                    "sample" : "withName(firstName + \"_\" + lastName + \"_TestRound\")",
                    "lineNumber" : 18,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "}\n\npublic void AWSIoTDeviceAdvisorProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nTestRound testRound = new TestRound().withName(firstName + \"_\" + lastName + \"_TestRound\") /* <=== com.amazonaws.services.iotdeviceadvisor.model.TestRound.withName */ \n        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n\nTestResult result = client.createTestRound(testRound);\n"
                  }
                ]
              },
              {
                "pathId" : "10132-10130",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 15,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/chimeSDKVoice.java",
                    "excerpt" : "\ntry {\n  CreateParticipantRequest createParticipantRequest = new CreateParticipantRequest();\n  createParticipantRequest.setMeetingId(\"<MEETING_ID>\");\n  \n  createParticipantRequest.setFirstName(firstName); /* <=== java.lang.String */ \n  createParticipantRequest.setLastName(lastName);\n  createParticipantRequest.setEmail(email);\n  \n  CreateParticipantResult createParticipantResult = client.createParticipant(createParticipantRequest);\n  System.out.println(\"Successfully sent personal data to AWS Chime SDK Voice, Participant Identifier: \" + createParticipantResult.getParticipantId());"
                  },
                  {
                    "sample" : "setFirstName(firstName)",
                    "lineNumber" : 15,
                    "columnNumber" : 3,
                    "fileName" : "/app/code/chimeSDKVoice.java",
                    "excerpt" : "\ntry {\n  CreateParticipantRequest createParticipantRequest = new CreateParticipantRequest();\n  createParticipantRequest.setMeetingId(\"<MEETING_ID>\");\n  \n  createParticipantRequest.setFirstName(firstName); /* <=== com.amazonaws.services.chimesdkvoice.model.CreateParticipantRequest.setFirstName */ \n  createParticipantRequest.setLastName(lastName);\n  createParticipantRequest.setEmail(email);\n  \n  CreateParticipantResult createParticipantResult = client.createParticipant(createParticipantRequest);\n  System.out.println(\"Successfully sent personal data to AWS Chime SDK Voice, Participant Identifier: \" + createParticipantResult.getParticipantId());"
                  }
                ]
              },
              {
                "pathId" : "13023-13048-13037-13036-13035-13034-13033-13032-13066",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 16,
                    "columnNumber" : 56,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "public AWSIoTDeviceAdvisorUtil() {\nclient = AmazonIoTDeviceAdvisorClientBuilder.standard().build();\n}\n\npublic void AWSIoTDeviceAdvisorProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob); /* <=== java.lang.String */ \n\nTestRound testRound = new TestRound().withName(firstName + \"_\" + lastName + \"_TestRound\")\n        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n"
                  },
                  {
                    "sample" : "firstName",
                    "lineNumber" : 18,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "}\n\npublic void AWSIoTDeviceAdvisorProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nTestRound testRound = new TestRound().withName(firstName + \"_\" + lastName + \"_TestRound\") /* <=== java.lang.String */ \n        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n\nTestResult result = client.createTestRound(testRound);\n"
                  },
                  {
                    "sample" : "withName(firstName + \"_\" + lastName + \"_TestRound\")",
                    "lineNumber" : 18,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "}\n\npublic void AWSIoTDeviceAdvisorProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nTestRound testRound = new TestRound().withName(firstName + \"_\" + lastName + \"_TestRound\") /* <=== com.amazonaws.services.iotdeviceadvisor.model.TestRound.withName */ \n        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n\nTestResult result = client.createTestRound(testRound);\n"
                  },
                  {
                    "sample" : "withTargetSelection(TargetSelection.CONTINUOUS)",
                    "lineNumber" : 18,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "}\n\npublic void AWSIoTDeviceAdvisorProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nTestRound testRound = new TestRound().withName(firstName + \"_\" + lastName + \"_TestRound\") /* <===  */ \n        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n\nTestResult result = client.createTestRound(testRound);\n"
                  },
                  {
                    "sample" : "withPayloadSelection(PayloadSelection.CONTINUOUS)",
                    "lineNumber" : 18,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "}\n\npublic void AWSIoTDeviceAdvisorProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nTestRound testRound = new TestRound().withName(firstName + \"_\" + lastName + \"_TestRound\") /* <===  */ \n        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n\nTestResult result = client.createTestRound(testRound);\n"
                  },
                  {
                    "sample" : "withPayloadSelection(PayloadSelection.PERSONAL_DATA)",
                    "lineNumber" : 18,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "}\n\npublic void AWSIoTDeviceAdvisorProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nTestRound testRound = new TestRound().withName(firstName + \"_\" + lastName + \"_TestRound\") /* <===  */ \n        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n\nTestResult result = client.createTestRound(testRound);\n"
                  },
                  {
                    "sample" : "withPayload(personalData.toString())",
                    "lineNumber" : 18,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "}\n\npublic void AWSIoTDeviceAdvisorProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nTestRound testRound = new TestRound().withName(firstName + \"_\" + lastName + \"_TestRound\") /* <===  */ \n        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n\nTestResult result = client.createTestRound(testRound);\n"
                  },
                  {
                    "sample" : "testRound",
                    "lineNumber" : 18,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "}\n\npublic void AWSIoTDeviceAdvisorProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nTestRound testRound = new TestRound().withName(firstName + \"_\" + lastName + \"_TestRound\") /* <=== com.amazonaws.services.iotdeviceadvisor.model.TestRound */ \n        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n\nTestResult result = client.createTestRound(testRound);\n"
                  },
                  {
                    "sample" : "createTestRound(testRound)",
                    "lineNumber" : 22,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "\nTestRound testRound = new TestRound().withName(firstName + \"_\" + lastName + \"_TestRound\")\n        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n\nTestResult result = client.createTestRound(testRound); /* <=== com.amazonaws.services.iotdeviceadvisor.AmazonIoTDeviceAdvisor.createTestRound */ \n\nSystem.out.println(\"Result: \" + result.toString());\n}\n}\n"
                  }
                ]
              },
              {
                "pathId" : "14630-14627-14626-14652-14651-14650-14672",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 12,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "import java.util.ArrayList;\nimport java.util.List;\n\npublic class AWSDataExchangeUtil {\n    public static void AWSDataExchangeFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob, AmazonDataExchange dataExchangeClient) {\n        String dataSetName = firstName + \" \" + lastName + \" Personal Data\"; /* <=== java.lang.String */ \n        String revisionId = \"Revision1\";\n        String assetName = firstName + \" \" + lastName + \" Asset\";\n\n        // Create a new data set\n        CreateDataSetRequest createDataSetRequest = new CreateDataSetRequest()"
                  },
                  {
                    "sample" : "firstName + \" \" + lastName + \" Personal Data\"",
                    "lineNumber" : 12,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "import java.util.ArrayList;\nimport java.util.List;\n\npublic class AWSDataExchangeUtil {\n    public static void AWSDataExchangeFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob, AmazonDataExchange dataExchangeClient) {\n        String dataSetName = firstName + \" \" + lastName + \" Personal Data\"; /* <===  */ \n        String revisionId = \"Revision1\";\n        String assetName = firstName + \" \" + lastName + \" Asset\";\n\n        // Create a new data set\n        CreateDataSetRequest createDataSetRequest = new CreateDataSetRequest()"
                  },
                  {
                    "sample" : "dataSetName",
                    "lineNumber" : 12,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "import java.util.ArrayList;\nimport java.util.List;\n\npublic class AWSDataExchangeUtil {\n    public static void AWSDataExchangeFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob, AmazonDataExchange dataExchangeClient) {\n        String dataSetName = firstName + \" \" + lastName + \" Personal Data\"; /* <=== java.lang.String */ \n        String revisionId = \"Revision1\";\n        String assetName = firstName + \" \" + lastName + \" Asset\";\n\n        // Create a new data set\n        CreateDataSetRequest createDataSetRequest = new CreateDataSetRequest()"
                  },
                  {
                    "sample" : "withName(dataSetName)",
                    "lineNumber" : 17,
                    "columnNumber" : 53,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        String dataSetName = firstName + \" \" + lastName + \" Personal Data\";\n        String revisionId = \"Revision1\";\n        String assetName = firstName + \" \" + lastName + \" Asset\";\n\n        // Create a new data set\n        CreateDataSetRequest createDataSetRequest = new CreateDataSetRequest() /* <=== com.amazonaws.services.dataexchange.model.CreateDataSetRequest.withName */ \n                .withName(dataSetName)\n                .withDescription(\"Personal data of \" + firstName + \" \" + lastName);\n        String dataSetId = dataExchangeClient.createDataSet(createDataSetRequest).getId();\n\n        // Create a revision for the data set"
                  },
                  {
                    "sample" : "withDescription(\"Personal data of \" + firstName + \" \" + lastName)",
                    "lineNumber" : 17,
                    "columnNumber" : 53,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        String dataSetName = firstName + \" \" + lastName + \" Personal Data\";\n        String revisionId = \"Revision1\";\n        String assetName = firstName + \" \" + lastName + \" Asset\";\n\n        // Create a new data set\n        CreateDataSetRequest createDataSetRequest = new CreateDataSetRequest() /* <===  */ \n                .withName(dataSetName)\n                .withDescription(\"Personal data of \" + firstName + \" \" + lastName);\n        String dataSetId = dataExchangeClient.createDataSet(createDataSetRequest).getId();\n\n        // Create a revision for the data set"
                  },
                  {
                    "sample" : "createDataSetRequest",
                    "lineNumber" : 17,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        String dataSetName = firstName + \" \" + lastName + \" Personal Data\";\n        String revisionId = \"Revision1\";\n        String assetName = firstName + \" \" + lastName + \" Asset\";\n\n        // Create a new data set\n        CreateDataSetRequest createDataSetRequest = new CreateDataSetRequest() /* <=== com.amazonaws.services.dataexchange.model.CreateDataSetRequest */ \n                .withName(dataSetName)\n                .withDescription(\"Personal data of \" + firstName + \" \" + lastName);\n        String dataSetId = dataExchangeClient.createDataSet(createDataSetRequest).getId();\n\n        // Create a revision for the data set"
                  },
                  {
                    "sample" : "createDataSet(createDataSetRequest)",
                    "lineNumber" : 20,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "\n        // Create a new data set\n        CreateDataSetRequest createDataSetRequest = new CreateDataSetRequest()\n                .withName(dataSetName)\n                .withDescription(\"Personal data of \" + firstName + \" \" + lastName);\n        String dataSetId = dataExchangeClient.createDataSet(createDataSetRequest).getId(); /* <=== com.amazonaws.services.dataexchange.AmazonDataExchange.createDataSet */ \n\n        // Create a revision for the data set\n        CreateRevisionRequest createRevisionRequest = new CreateRevisionRequest()\n                .withDataSetId(dataSetId)\n                .withComment(\"First revision for \" + firstName + \" \" + lastName + \" data\");"
                  }
                ]
              },
              {
                "pathId" : "3258-3259-3257-3261-3265-3269-3285-3276",
                "path" : [
                  {
                    "sample" : "\"firstName\"",
                    "lineNumber" : 15,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "\n    private static AWSIoTRoboRunner iotRoboRunnerClient = AWSIoTRoboRunnerClientBuilder.defaultClient();\n\n    public static void AWSIoTRoboRunnerFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        Map<String, Object> personalData = new HashMap<>();\n        personalData.put(\"firstName\", firstName); /* <===  */ \n        personalData.put(\"lastName\", lastName);\n        personalData.put(\"phoneNumber\", phoneNumber);\n        personalData.put(\"dob\", dob);\n\n        PutThingShadowRequest request = new PutThingShadowRequest()"
                  },
                  {
                    "sample" : "firstName",
                    "lineNumber" : 15,
                    "columnNumber" : 39,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "\n    private static AWSIoTRoboRunner iotRoboRunnerClient = AWSIoTRoboRunnerClientBuilder.defaultClient();\n\n    public static void AWSIoTRoboRunnerFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        Map<String, Object> personalData = new HashMap<>();\n        personalData.put(\"firstName\", firstName); /* <=== java.lang.String */ \n        personalData.put(\"lastName\", lastName);\n        personalData.put(\"phoneNumber\", phoneNumber);\n        personalData.put(\"dob\", dob);\n\n        PutThingShadowRequest request = new PutThingShadowRequest()"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 15,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "\n    private static AWSIoTRoboRunner iotRoboRunnerClient = AWSIoTRoboRunnerClientBuilder.defaultClient();\n\n    public static void AWSIoTRoboRunnerFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        Map<String, Object> personalData = new HashMap<>();\n        personalData.put(\"firstName\", firstName); /* <=== java.util.Map */ \n        personalData.put(\"lastName\", lastName);\n        personalData.put(\"phoneNumber\", phoneNumber);\n        personalData.put(\"dob\", dob);\n\n        PutThingShadowRequest request = new PutThingShadowRequest()"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 16,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "    private static AWSIoTRoboRunner iotRoboRunnerClient = AWSIoTRoboRunnerClientBuilder.defaultClient();\n\n    public static void AWSIoTRoboRunnerFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        Map<String, Object> personalData = new HashMap<>();\n        personalData.put(\"firstName\", firstName);\n        personalData.put(\"lastName\", lastName); /* <=== java.util.Map */ \n        personalData.put(\"phoneNumber\", phoneNumber);\n        personalData.put(\"dob\", dob);\n\n        PutThingShadowRequest request = new PutThingShadowRequest()\n                .withThingName(\"PersonalData\")"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 17,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "\n    public static void AWSIoTRoboRunnerFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        Map<String, Object> personalData = new HashMap<>();\n        personalData.put(\"firstName\", firstName);\n        personalData.put(\"lastName\", lastName);\n        personalData.put(\"phoneNumber\", phoneNumber); /* <=== java.util.Map */ \n        personalData.put(\"dob\", dob);\n\n        PutThingShadowRequest request = new PutThingShadowRequest()\n                .withThingName(\"PersonalData\")\n                .withPayload(personalData);"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 18,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "    public static void AWSIoTRoboRunnerFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        Map<String, Object> personalData = new HashMap<>();\n        personalData.put(\"firstName\", firstName);\n        personalData.put(\"lastName\", lastName);\n        personalData.put(\"phoneNumber\", phoneNumber);\n        personalData.put(\"dob\", dob); /* <=== java.util.Map */ \n\n        PutThingShadowRequest request = new PutThingShadowRequest()\n                .withThingName(\"PersonalData\")\n                .withPayload(personalData);\n"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 22,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "        personalData.put(\"phoneNumber\", phoneNumber);\n        personalData.put(\"dob\", dob);\n\n        PutThingShadowRequest request = new PutThingShadowRequest()\n                .withThingName(\"PersonalData\")\n                .withPayload(personalData); /* <=== java.util.Map */ \n\n        PutThingShadowResult result = iotRoboRunnerClient.putThingShadow(request);\n        System.out.println(\"Data sent to AWS IoTRoboRunner successfully\");\n    }\n}"
                  },
                  {
                    "sample" : "withThingName(\"PersonalData\")",
                    "lineNumber" : 20,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "        personalData.put(\"firstName\", firstName);\n        personalData.put(\"lastName\", lastName);\n        personalData.put(\"phoneNumber\", phoneNumber);\n        personalData.put(\"dob\", dob);\n\n        PutThingShadowRequest request = new PutThingShadowRequest() /* <=== com.amazonaws.services.iotroborunner.model.PutThingShadowRequest.withThingName */ \n                .withThingName(\"PersonalData\")\n                .withPayload(personalData);\n\n        PutThingShadowResult result = iotRoboRunnerClient.putThingShadow(request);\n        System.out.println(\"Data sent to AWS IoTRoboRunner successfully\");"
                  }
                ]
              },
              {
                "pathId" : "8571-8599-8588",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 15,
                    "columnNumber" : 60,
                    "fileName" : "/app/code/databaseMigration.java",
                    "excerpt" : "public AWSDatabaseMigrationServiceUtil() {\n    client = AmazonDatabaseMigrationServiceClientBuilder.standard().build();\n}\n\npublic void AWSDatabaseMigrationServiceProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob); /* <=== java.lang.String */ \n\n    CreateReplicationTaskRequest createReplicationTaskRequest = new CreateReplicationTaskRequest()\n            .withReplicationTaskIdentifier(firstName + \"_\" + lastName + \"_Task\")\n            .withSourceEndpointArn(\"arn:aws:dms:us-west-2:012345678901:endpoint:ASXWXYZWEXAMPLE\")\n            .withTargetEndpointArn(\"arn:aws:dms:us-west-2:012345678901:endpoint:AKXWXYZWEXAMPLE\")"
                  },
                  {
                    "sample" : "firstName",
                    "lineNumber" : 18,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/databaseMigration.java",
                    "excerpt" : "\npublic void AWSDatabaseMigrationServiceProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\n    CreateReplicationTaskRequest createReplicationTaskRequest = new CreateReplicationTaskRequest()\n            .withReplicationTaskIdentifier(firstName + \"_\" + lastName + \"_Task\") /* <=== java.lang.String */ \n            .withSourceEndpointArn(\"arn:aws:dms:us-west-2:012345678901:endpoint:ASXWXYZWEXAMPLE\")\n            .withTargetEndpointArn(\"arn:aws:dms:us-west-2:012345678901:endpoint:AKXWXYZWEXAMPLE\")\n            .withReplicationInstanceArn(\"arn:aws:dms:us-west-2:012345678901:rep:6UTDJGB043EXAMPLE\")\n            .withMigrationType(\"full-load\")\n            .withTableMappings(\"{\\\"rules\\\":[{\\\"rule-type\\\":\\\"selection\\\",\\\"rule-id\\\":\\\"1\\\",\\\"rule-name\\\":\\\"1\\\",\\\"object-locator\\\":{\\\"schema-name\\\":\\\"personal_data\\\",\\\"table-name\\\":\\\"\" + firstName + \"_\" + lastName + \"\\\"},\\\"rule-action\\\":\\\"include\\\",\\\"filters\\\":{}}]}\")"
                  },
                  {
                    "sample" : "withReplicationTaskIdentifier(firstName + \"_\" + lastName + \"_Task\")",
                    "lineNumber" : 17,
                    "columnNumber" : 65,
                    "fileName" : "/app/code/databaseMigration.java",
                    "excerpt" : "}\n\npublic void AWSDatabaseMigrationServiceProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\n    CreateReplicationTaskRequest createReplicationTaskRequest = new CreateReplicationTaskRequest() /* <=== com.amazonaws.services.databasemigrationservice.model.CreateReplicationTaskRequest.withReplicationTaskIdentifier */ \n            .withReplicationTaskIdentifier(firstName + \"_\" + lastName + \"_Task\")\n            .withSourceEndpointArn(\"arn:aws:dms:us-west-2:012345678901:endpoint:ASXWXYZWEXAMPLE\")\n            .withTargetEndpointArn(\"arn:aws:dms:us-west-2:012345678901:endpoint:AKXWXYZWEXAMPLE\")\n            .withReplicationInstanceArn(\"arn:aws:dms:us-west-2:012345678901:rep:6UTDJGB043EXAMPLE\")\n            .withMigrationType(\"full-load\")"
                  }
                ]
              },
              {
                "pathId" : "7466-7472-7469-7456-7455-7454-7453-7488",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 18,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/migrationHub.java",
                    "excerpt" : "\npublic void AWSMigrationHubProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\n    ImportMigrationTaskRequest importMigrationTaskRequest = new ImportMigrationTaskRequest()\n            .withMigrationTaskName(firstName + \"_\" + lastName) /* <=== java.lang.String */ \n            .withProgressUpdateStream(firstName + \"_\" + lastName + \"_Stream\")\n            .withResourceAttributeList(new ResourceAttribute().withType(\"PersonalData\")\n                    .withValue(personalData.toString()));\n\n    client.importMigrationTask(importMigrationTaskRequest);"
                  },
                  {
                    "sample" : "firstName",
                    "lineNumber" : 19,
                    "columnNumber" : 39,
                    "fileName" : "/app/code/migrationHub.java",
                    "excerpt" : "public void AWSMigrationHubProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\n    ImportMigrationTaskRequest importMigrationTaskRequest = new ImportMigrationTaskRequest()\n            .withMigrationTaskName(firstName + \"_\" + lastName)\n            .withProgressUpdateStream(firstName + \"_\" + lastName + \"_Stream\") /* <=== java.lang.String */ \n            .withResourceAttributeList(new ResourceAttribute().withType(\"PersonalData\")\n                    .withValue(personalData.toString()));\n\n    client.importMigrationTask(importMigrationTaskRequest);\n}"
                  },
                  {
                    "sample" : "firstName + \"_\" + lastName + \"_Stream\"",
                    "lineNumber" : 19,
                    "columnNumber" : 39,
                    "fileName" : "/app/code/migrationHub.java",
                    "excerpt" : "public void AWSMigrationHubProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\n    ImportMigrationTaskRequest importMigrationTaskRequest = new ImportMigrationTaskRequest()\n            .withMigrationTaskName(firstName + \"_\" + lastName)\n            .withProgressUpdateStream(firstName + \"_\" + lastName + \"_Stream\") /* <===  */ \n            .withResourceAttributeList(new ResourceAttribute().withType(\"PersonalData\")\n                    .withValue(personalData.toString()));\n\n    client.importMigrationTask(importMigrationTaskRequest);\n}"
                  },
                  {
                    "sample" : "withMigrationTaskName(firstName + \"_\" + lastName)",
                    "lineNumber" : 17,
                    "columnNumber" : 61,
                    "fileName" : "/app/code/migrationHub.java",
                    "excerpt" : "}\n\npublic void AWSMigrationHubProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\n    ImportMigrationTaskRequest importMigrationTaskRequest = new ImportMigrationTaskRequest() /* <=== com.amazonaws.services.migrationhub.model.ImportMigrationTaskRequest.withMigrationTaskName */ \n            .withMigrationTaskName(firstName + \"_\" + lastName)\n            .withProgressUpdateStream(firstName + \"_\" + lastName + \"_Stream\")\n            .withResourceAttributeList(new ResourceAttribute().withType(\"PersonalData\")\n                    .withValue(personalData.toString()));\n"
                  },
                  {
                    "sample" : "withProgressUpdateStream(firstName + \"_\" + lastName + \"_Stream\")",
                    "lineNumber" : 17,
                    "columnNumber" : 61,
                    "fileName" : "/app/code/migrationHub.java",
                    "excerpt" : "}\n\npublic void AWSMigrationHubProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\n    ImportMigrationTaskRequest importMigrationTaskRequest = new ImportMigrationTaskRequest() /* <===  */ \n            .withMigrationTaskName(firstName + \"_\" + lastName)\n            .withProgressUpdateStream(firstName + \"_\" + lastName + \"_Stream\")\n            .withResourceAttributeList(new ResourceAttribute().withType(\"PersonalData\")\n                    .withValue(personalData.toString()));\n"
                  },
                  {
                    "sample" : "withResourceAttributeList(new ResourceAttribute().withType(\"PersonalData\").withValue(personalData.toString()))",
                    "lineNumber" : 17,
                    "columnNumber" : 61,
                    "fileName" : "/app/code/migrationHub.java",
                    "excerpt" : "}\n\npublic void AWSMigrationHubProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\n    ImportMigrationTaskRequest importMigrationTaskRequest = new ImportMigrationTaskRequest() /* <===  */ \n            .withMigrationTaskName(firstName + \"_\" + lastName)\n            .withProgressUpdateStream(firstName + \"_\" + lastName + \"_Stream\")\n            .withResourceAttributeList(new ResourceAttribute().withType(\"PersonalData\")\n                    .withValue(personalData.toString()));\n"
                  },
                  {
                    "sample" : "importMigrationTaskRequest",
                    "lineNumber" : 17,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/migrationHub.java",
                    "excerpt" : "}\n\npublic void AWSMigrationHubProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\n    ImportMigrationTaskRequest importMigrationTaskRequest = new ImportMigrationTaskRequest() /* <=== com.amazonaws.services.migrationhub.model.ImportMigrationTaskRequest */ \n            .withMigrationTaskName(firstName + \"_\" + lastName)\n            .withProgressUpdateStream(firstName + \"_\" + lastName + \"_Stream\")\n            .withResourceAttributeList(new ResourceAttribute().withType(\"PersonalData\")\n                    .withValue(personalData.toString()));\n"
                  },
                  {
                    "sample" : "importMigrationTask(importMigrationTaskRequest)",
                    "lineNumber" : 23,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/migrationHub.java",
                    "excerpt" : "            .withMigrationTaskName(firstName + \"_\" + lastName)\n            .withProgressUpdateStream(firstName + \"_\" + lastName + \"_Stream\")\n            .withResourceAttributeList(new ResourceAttribute().withType(\"PersonalData\")\n                    .withValue(personalData.toString()));\n\n    client.importMigrationTask(importMigrationTaskRequest); /* <=== com.amazonaws.services.migrationhub.AmazonMigrationHub.importMigrationTask */ \n}\n}"
                  }
                ]
              },
              {
                "pathId" : "8323-8314-8313-8312-8325-8338-8351-8366",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 12,
                    "columnNumber" : 67,
                    "fileName" : "/app/code/chimeSDKIdentity.java",
                    "excerpt" : "public class AWSChimeSDKIdentityUtil {\n  private static final AWSChimeSDKIdentity CLIENT = AWSChimeSDKIdentityClientBuilder.defaultClient();\n\n  public static void AWSChimeSDKIdentityFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n    List<Attribute> attributes = new ArrayList<>();\n    attributes.add(new Attribute().withKey(\"firstName\").withValue(firstName)); /* <=== java.lang.String */ \n    attributes.add(new Attribute().withKey(\"lastName\").withValue(lastName));\n    attributes.add(new Attribute().withKey(\"phoneNumber\").withValue(phoneNumber));\n    attributes.add(new Attribute().withKey(\"DOB\").withValue(DOB));\n\n    PutAttributesRequest request = new PutAttributesRequest().withAttributes(attributes);"
                  },
                  {
                    "sample" : "withKey(\"firstName\")",
                    "lineNumber" : 12,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/chimeSDKIdentity.java",
                    "excerpt" : "public class AWSChimeSDKIdentityUtil {\n  private static final AWSChimeSDKIdentity CLIENT = AWSChimeSDKIdentityClientBuilder.defaultClient();\n\n  public static void AWSChimeSDKIdentityFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n    List<Attribute> attributes = new ArrayList<>();\n    attributes.add(new Attribute().withKey(\"firstName\").withValue(firstName)); /* <=== com.amazonaws.services.chimesdkidentity.model.Attribute.withKey */ \n    attributes.add(new Attribute().withKey(\"lastName\").withValue(lastName));\n    attributes.add(new Attribute().withKey(\"phoneNumber\").withValue(phoneNumber));\n    attributes.add(new Attribute().withKey(\"DOB\").withValue(DOB));\n\n    PutAttributesRequest request = new PutAttributesRequest().withAttributes(attributes);"
                  },
                  {
                    "sample" : "withValue(firstName)",
                    "lineNumber" : 12,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/chimeSDKIdentity.java",
                    "excerpt" : "public class AWSChimeSDKIdentityUtil {\n  private static final AWSChimeSDKIdentity CLIENT = AWSChimeSDKIdentityClientBuilder.defaultClient();\n\n  public static void AWSChimeSDKIdentityFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n    List<Attribute> attributes = new ArrayList<>();\n    attributes.add(new Attribute().withKey(\"firstName\").withValue(firstName)); /* <===  */ \n    attributes.add(new Attribute().withKey(\"lastName\").withValue(lastName));\n    attributes.add(new Attribute().withKey(\"phoneNumber\").withValue(phoneNumber));\n    attributes.add(new Attribute().withKey(\"DOB\").withValue(DOB));\n\n    PutAttributesRequest request = new PutAttributesRequest().withAttributes(attributes);"
                  },
                  {
                    "sample" : "attributes",
                    "lineNumber" : 12,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/chimeSDKIdentity.java",
                    "excerpt" : "public class AWSChimeSDKIdentityUtil {\n  private static final AWSChimeSDKIdentity CLIENT = AWSChimeSDKIdentityClientBuilder.defaultClient();\n\n  public static void AWSChimeSDKIdentityFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n    List<Attribute> attributes = new ArrayList<>();\n    attributes.add(new Attribute().withKey(\"firstName\").withValue(firstName)); /* <=== ANY */ \n    attributes.add(new Attribute().withKey(\"lastName\").withValue(lastName));\n    attributes.add(new Attribute().withKey(\"phoneNumber\").withValue(phoneNumber));\n    attributes.add(new Attribute().withKey(\"DOB\").withValue(DOB));\n\n    PutAttributesRequest request = new PutAttributesRequest().withAttributes(attributes);"
                  },
                  {
                    "sample" : "attributes",
                    "lineNumber" : 13,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/chimeSDKIdentity.java",
                    "excerpt" : "  private static final AWSChimeSDKIdentity CLIENT = AWSChimeSDKIdentityClientBuilder.defaultClient();\n\n  public static void AWSChimeSDKIdentityFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n    List<Attribute> attributes = new ArrayList<>();\n    attributes.add(new Attribute().withKey(\"firstName\").withValue(firstName));\n    attributes.add(new Attribute().withKey(\"lastName\").withValue(lastName)); /* <=== ANY */ \n    attributes.add(new Attribute().withKey(\"phoneNumber\").withValue(phoneNumber));\n    attributes.add(new Attribute().withKey(\"DOB\").withValue(DOB));\n\n    PutAttributesRequest request = new PutAttributesRequest().withAttributes(attributes);\n    CLIENT.putAttributes(request);"
                  },
                  {
                    "sample" : "attributes",
                    "lineNumber" : 14,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/chimeSDKIdentity.java",
                    "excerpt" : "\n  public static void AWSChimeSDKIdentityFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n    List<Attribute> attributes = new ArrayList<>();\n    attributes.add(new Attribute().withKey(\"firstName\").withValue(firstName));\n    attributes.add(new Attribute().withKey(\"lastName\").withValue(lastName));\n    attributes.add(new Attribute().withKey(\"phoneNumber\").withValue(phoneNumber)); /* <=== ANY */ \n    attributes.add(new Attribute().withKey(\"DOB\").withValue(DOB));\n\n    PutAttributesRequest request = new PutAttributesRequest().withAttributes(attributes);\n    CLIENT.putAttributes(request);\n  }"
                  },
                  {
                    "sample" : "attributes",
                    "lineNumber" : 15,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/chimeSDKIdentity.java",
                    "excerpt" : "  public static void AWSChimeSDKIdentityFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n    List<Attribute> attributes = new ArrayList<>();\n    attributes.add(new Attribute().withKey(\"firstName\").withValue(firstName));\n    attributes.add(new Attribute().withKey(\"lastName\").withValue(lastName));\n    attributes.add(new Attribute().withKey(\"phoneNumber\").withValue(phoneNumber));\n    attributes.add(new Attribute().withKey(\"DOB\").withValue(DOB)); /* <=== ANY */ \n\n    PutAttributesRequest request = new PutAttributesRequest().withAttributes(attributes);\n    CLIENT.putAttributes(request);\n  }\n}"
                  },
                  {
                    "sample" : "withAttributes(attributes)",
                    "lineNumber" : 17,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/chimeSDKIdentity.java",
                    "excerpt" : "    attributes.add(new Attribute().withKey(\"firstName\").withValue(firstName));\n    attributes.add(new Attribute().withKey(\"lastName\").withValue(lastName));\n    attributes.add(new Attribute().withKey(\"phoneNumber\").withValue(phoneNumber));\n    attributes.add(new Attribute().withKey(\"DOB\").withValue(DOB));\n\n    PutAttributesRequest request = new PutAttributesRequest().withAttributes(attributes); /* <=== com.amazonaws.services.chimesdkidentity.model.PutAttributesRequest.withAttributes */ \n    CLIENT.putAttributes(request);\n  }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "1736-1728-1727-1726-1725-1724-1723-1747",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 14,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "        this.client = client;\n    }\n\n    public void AWSCodePipelineFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        PutJobSuccessResultRequest request = new PutJobSuccessResultRequest()\n            .withJobId(firstName) /* <=== java.lang.String */ \n            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);\n"
                  },
                  {
                    "sample" : "withJobId(firstName)",
                    "lineNumber" : 13,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "    public AWSCodePipelineUtil(AWSCodePipeline client) {\n        this.client = client;\n    }\n\n    public void AWSCodePipelineFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        PutJobSuccessResultRequest request = new PutJobSuccessResultRequest() /* <=== com.amazonaws.services.codepipeline.model.PutJobSuccessResultRequest.withJobId */ \n            .withJobId(firstName)\n            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);"
                  },
                  {
                    "sample" : "withContinuationToken(\"optional_token\")",
                    "lineNumber" : 13,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "    public AWSCodePipelineUtil(AWSCodePipeline client) {\n        this.client = client;\n    }\n\n    public void AWSCodePipelineFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        PutJobSuccessResultRequest request = new PutJobSuccessResultRequest() /* <===  */ \n            .withJobId(firstName)\n            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);"
                  },
                  {
                    "sample" : "addOutputVariablesEntry(\"lastName\", lastName)",
                    "lineNumber" : 13,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "    public AWSCodePipelineUtil(AWSCodePipeline client) {\n        this.client = client;\n    }\n\n    public void AWSCodePipelineFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        PutJobSuccessResultRequest request = new PutJobSuccessResultRequest() /* <===  */ \n            .withJobId(firstName)\n            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);"
                  },
                  {
                    "sample" : "addOutputVariablesEntry(\"phoneNumber\", phoneNumber)",
                    "lineNumber" : 13,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "    public AWSCodePipelineUtil(AWSCodePipeline client) {\n        this.client = client;\n    }\n\n    public void AWSCodePipelineFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        PutJobSuccessResultRequest request = new PutJobSuccessResultRequest() /* <===  */ \n            .withJobId(firstName)\n            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);"
                  },
                  {
                    "sample" : "addOutputVariablesEntry(\"dob\", dob)",
                    "lineNumber" : 13,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "    public AWSCodePipelineUtil(AWSCodePipeline client) {\n        this.client = client;\n    }\n\n    public void AWSCodePipelineFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        PutJobSuccessResultRequest request = new PutJobSuccessResultRequest() /* <===  */ \n            .withJobId(firstName)\n            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);"
                  },
                  {
                    "sample" : "request",
                    "lineNumber" : 13,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "    public AWSCodePipelineUtil(AWSCodePipeline client) {\n        this.client = client;\n    }\n\n    public void AWSCodePipelineFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        PutJobSuccessResultRequest request = new PutJobSuccessResultRequest() /* <=== com.amazonaws.services.codepipeline.model.PutJobSuccessResultRequest */ \n            .withJobId(firstName)\n            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);"
                  },
                  {
                    "sample" : "putJobSuccessResult(request)",
                    "lineNumber" : 20,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);\n\n        PutJobSuccessResultResult result = client.putJobSuccessResult(request); /* <=== com.amazonaws.services.codepipeline.AWSCodePipeline.putJobSuccessResult */ \n        System.out.println(\"Successfully sent personal data to CodePipeline: \" + result);\n    }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "1736-1728",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 14,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "        this.client = client;\n    }\n\n    public void AWSCodePipelineFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        PutJobSuccessResultRequest request = new PutJobSuccessResultRequest()\n            .withJobId(firstName) /* <=== java.lang.String */ \n            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);\n"
                  },
                  {
                    "sample" : "withJobId(firstName)",
                    "lineNumber" : 13,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "    public AWSCodePipelineUtil(AWSCodePipeline client) {\n        this.client = client;\n    }\n\n    public void AWSCodePipelineFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        PutJobSuccessResultRequest request = new PutJobSuccessResultRequest() /* <=== com.amazonaws.services.codepipeline.model.PutJobSuccessResultRequest.withJobId */ \n            .withJobId(firstName)\n            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);"
                  }
                ]
              },
              {
                "pathId" : "16227-16226-16215-16214-16213-16212-16233-16232-16240",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 32,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob));\n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest()\n                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName) /* <=== java.lang.String */ \n                .withUserAttributes(userAttributes);\n\n        // Send the request to create the user\n        AdminCreateUserResult createUserResult = cognitoIdpClient.adminCreateUser(createUserRequest);\n"
                  },
                  {
                    "sample" : "firstName + lastName",
                    "lineNumber" : 32,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob));\n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest()\n                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName) /* <===  */ \n                .withUserAttributes(userAttributes);\n\n        // Send the request to create the user\n        AdminCreateUserResult createUserResult = cognitoIdpClient.adminCreateUser(createUserRequest);\n"
                  },
                  {
                    "sample" : "withUserPoolId(USER_POOL_ID)",
                    "lineNumber" : 30,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "        userAttributes.add(new AttributeType().withName(\"family_name\").withValue(lastName));\n        userAttributes.add(new AttributeType().withName(\"phone_number\").withValue(phoneNumber));\n        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob));\n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest() /* <=== com.amazonaws.services.cognitoidp.model.AdminCreateUserRequest.withUserPoolId */ \n                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName)\n                .withUserAttributes(userAttributes);\n\n        // Send the request to create the user"
                  },
                  {
                    "sample" : "withUsername(firstName + lastName)",
                    "lineNumber" : 30,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "        userAttributes.add(new AttributeType().withName(\"family_name\").withValue(lastName));\n        userAttributes.add(new AttributeType().withName(\"phone_number\").withValue(phoneNumber));\n        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob));\n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest() /* <===  */ \n                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName)\n                .withUserAttributes(userAttributes);\n\n        // Send the request to create the user"
                  },
                  {
                    "sample" : "withUserAttributes(userAttributes)",
                    "lineNumber" : 30,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "        userAttributes.add(new AttributeType().withName(\"family_name\").withValue(lastName));\n        userAttributes.add(new AttributeType().withName(\"phone_number\").withValue(phoneNumber));\n        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob));\n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest() /* <===  */ \n                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName)\n                .withUserAttributes(userAttributes);\n\n        // Send the request to create the user"
                  },
                  {
                    "sample" : "createUserRequest",
                    "lineNumber" : 30,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "        userAttributes.add(new AttributeType().withName(\"family_name\").withValue(lastName));\n        userAttributes.add(new AttributeType().withName(\"phone_number\").withValue(phoneNumber));\n        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob));\n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest() /* <=== com.amazonaws.services.cognitoidp.model.AdminCreateUserRequest */ \n                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName)\n                .withUserAttributes(userAttributes);\n\n        // Send the request to create the user"
                  },
                  {
                    "sample" : "adminCreateUser(createUserRequest)",
                    "lineNumber" : 36,
                    "columnNumber" : 50,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName)\n                .withUserAttributes(userAttributes);\n\n        // Send the request to create the user\n        AdminCreateUserResult createUserResult = cognitoIdpClient.adminCreateUser(createUserRequest); /* <=== com.amazonaws.services.cognitoidp.AWSCognitoIdentityProvider.adminCreateUser */ \n\n        // Get the user's unique identifier\n        String userId = createUserResult.getUser().getUsername();\n\n        System.out.println(\"Successfully created user with ID: \" + userId);"
                  },
                  {
                    "sample" : "createUserResult",
                    "lineNumber" : 36,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName)\n                .withUserAttributes(userAttributes);\n\n        // Send the request to create the user\n        AdminCreateUserResult createUserResult = cognitoIdpClient.adminCreateUser(createUserRequest); /* <=== com.amazonaws.services.cognitoidp.model.AdminCreateUserResult */ \n\n        // Get the user's unique identifier\n        String userId = createUserResult.getUser().getUsername();\n\n        System.out.println(\"Successfully created user with ID: \" + userId);"
                  },
                  {
                    "sample" : "getUser()",
                    "lineNumber" : 39,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "\n        // Send the request to create the user\n        AdminCreateUserResult createUserResult = cognitoIdpClient.adminCreateUser(createUserRequest);\n\n        // Get the user's unique identifier\n        String userId = createUserResult.getUser().getUsername(); /* <=== com.amazonaws.services.cognitoidp.model.AdminCreateUserResult.getUser */ \n\n        System.out.println(\"Successfully created user with ID: \" + userId);\n    }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "16170-16227-16226-16215",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 24,
                    "columnNumber" : 81,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "                        .withRegion(REGION)\n                        .build();\n\n        // Define the user's personal data\n        List<AttributeType> userAttributes = new ArrayList<>();\n        userAttributes.add(new AttributeType().withName(\"given_name\").withValue(firstName)); /* <=== java.lang.String */ \n        userAttributes.add(new AttributeType().withName(\"family_name\").withValue(lastName));\n        userAttributes.add(new AttributeType().withName(\"phone_number\").withValue(phoneNumber));\n        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob));\n\n        // Create the request to create the user"
                  },
                  {
                    "sample" : "firstName",
                    "lineNumber" : 32,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob));\n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest()\n                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName) /* <=== java.lang.String */ \n                .withUserAttributes(userAttributes);\n\n        // Send the request to create the user\n        AdminCreateUserResult createUserResult = cognitoIdpClient.adminCreateUser(createUserRequest);\n"
                  },
                  {
                    "sample" : "firstName + lastName",
                    "lineNumber" : 32,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob));\n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest()\n                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName) /* <===  */ \n                .withUserAttributes(userAttributes);\n\n        // Send the request to create the user\n        AdminCreateUserResult createUserResult = cognitoIdpClient.adminCreateUser(createUserRequest);\n"
                  },
                  {
                    "sample" : "withUserPoolId(USER_POOL_ID)",
                    "lineNumber" : 30,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "        userAttributes.add(new AttributeType().withName(\"family_name\").withValue(lastName));\n        userAttributes.add(new AttributeType().withName(\"phone_number\").withValue(phoneNumber));\n        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob));\n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest() /* <=== com.amazonaws.services.cognitoidp.model.AdminCreateUserRequest.withUserPoolId */ \n                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName)\n                .withUserAttributes(userAttributes);\n\n        // Send the request to create the user"
                  }
                ]
              },
              {
                "pathId" : "14693-14720-14711-14710-14709-14722-14735-14748-14777-14764-14763-14762-14778",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 25,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        String dataSetId = dataExchangeClient.createDataSet(createDataSetRequest).getId();\n\n        // Create a revision for the data set\n        CreateRevisionRequest createRevisionRequest = new CreateRevisionRequest()\n                .withDataSetId(dataSetId)\n                .withComment(\"First revision for \" + firstName + \" \" + lastName + \" data\"); /* <=== java.lang.String */ \n        String revisionArn = dataExchangeClient.createRevision(createRevisionRequest).getArn();\n\n        // Prepare the asset\n        List<DataSetEntry> entries = new ArrayList<>();\n        entries.add(new DataSetEntry().withEntryName(\"firstName\").withContent(firstName));"
                  },
                  {
                    "sample" : "firstName",
                    "lineNumber" : 30,
                    "columnNumber" : 79,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "                .withComment(\"First revision for \" + firstName + \" \" + lastName + \" data\");\n        String revisionArn = dataExchangeClient.createRevision(createRevisionRequest).getArn();\n\n        // Prepare the asset\n        List<DataSetEntry> entries = new ArrayList<>();\n        entries.add(new DataSetEntry().withEntryName(\"firstName\").withContent(firstName)); /* <=== java.lang.String */ \n        entries.add(new DataSetEntry().withEntryName(\"lastName\").withContent(lastName));\n        entries.add(new DataSetEntry().withEntryName(\"phoneNumber\").withContent(phoneNumber));\n        entries.add(new DataSetEntry().withEntryName(\"dob\").withContent(dob));\n\n        // Import the asset"
                  },
                  {
                    "sample" : "withEntryName(\"firstName\")",
                    "lineNumber" : 30,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "                .withComment(\"First revision for \" + firstName + \" \" + lastName + \" data\");\n        String revisionArn = dataExchangeClient.createRevision(createRevisionRequest).getArn();\n\n        // Prepare the asset\n        List<DataSetEntry> entries = new ArrayList<>();\n        entries.add(new DataSetEntry().withEntryName(\"firstName\").withContent(firstName)); /* <=== com.amazonaws.services.dataexchange.model.DataSetEntry.withEntryName */ \n        entries.add(new DataSetEntry().withEntryName(\"lastName\").withContent(lastName));\n        entries.add(new DataSetEntry().withEntryName(\"phoneNumber\").withContent(phoneNumber));\n        entries.add(new DataSetEntry().withEntryName(\"dob\").withContent(dob));\n\n        // Import the asset"
                  },
                  {
                    "sample" : "withContent(firstName)",
                    "lineNumber" : 30,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "                .withComment(\"First revision for \" + firstName + \" \" + lastName + \" data\");\n        String revisionArn = dataExchangeClient.createRevision(createRevisionRequest).getArn();\n\n        // Prepare the asset\n        List<DataSetEntry> entries = new ArrayList<>();\n        entries.add(new DataSetEntry().withEntryName(\"firstName\").withContent(firstName)); /* <===  */ \n        entries.add(new DataSetEntry().withEntryName(\"lastName\").withContent(lastName));\n        entries.add(new DataSetEntry().withEntryName(\"phoneNumber\").withContent(phoneNumber));\n        entries.add(new DataSetEntry().withEntryName(\"dob\").withContent(dob));\n\n        // Import the asset"
                  },
                  {
                    "sample" : "entries",
                    "lineNumber" : 30,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "                .withComment(\"First revision for \" + firstName + \" \" + lastName + \" data\");\n        String revisionArn = dataExchangeClient.createRevision(createRevisionRequest).getArn();\n\n        // Prepare the asset\n        List<DataSetEntry> entries = new ArrayList<>();\n        entries.add(new DataSetEntry().withEntryName(\"firstName\").withContent(firstName)); /* <=== ANY */ \n        entries.add(new DataSetEntry().withEntryName(\"lastName\").withContent(lastName));\n        entries.add(new DataSetEntry().withEntryName(\"phoneNumber\").withContent(phoneNumber));\n        entries.add(new DataSetEntry().withEntryName(\"dob\").withContent(dob));\n\n        // Import the asset"
                  },
                  {
                    "sample" : "entries",
                    "lineNumber" : 31,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        String revisionArn = dataExchangeClient.createRevision(createRevisionRequest).getArn();\n\n        // Prepare the asset\n        List<DataSetEntry> entries = new ArrayList<>();\n        entries.add(new DataSetEntry().withEntryName(\"firstName\").withContent(firstName));\n        entries.add(new DataSetEntry().withEntryName(\"lastName\").withContent(lastName)); /* <=== ANY */ \n        entries.add(new DataSetEntry().withEntryName(\"phoneNumber\").withContent(phoneNumber));\n        entries.add(new DataSetEntry().withEntryName(\"dob\").withContent(dob));\n\n        // Import the asset\n        ImportAssetFromSignedUrlRequest importAssetRequest = new ImportAssetFromSignedUrlRequest()"
                  },
                  {
                    "sample" : "entries",
                    "lineNumber" : 32,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "\n        // Prepare the asset\n        List<DataSetEntry> entries = new ArrayList<>();\n        entries.add(new DataSetEntry().withEntryName(\"firstName\").withContent(firstName));\n        entries.add(new DataSetEntry().withEntryName(\"lastName\").withContent(lastName));\n        entries.add(new DataSetEntry().withEntryName(\"phoneNumber\").withContent(phoneNumber)); /* <=== ANY */ \n        entries.add(new DataSetEntry().withEntryName(\"dob\").withContent(dob));\n\n        // Import the asset\n        ImportAssetFromSignedUrlRequest importAssetRequest = new ImportAssetFromSignedUrlRequest()\n                .withDataSetId(dataSetId)"
                  },
                  {
                    "sample" : "entries",
                    "lineNumber" : 33,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        // Prepare the asset\n        List<DataSetEntry> entries = new ArrayList<>();\n        entries.add(new DataSetEntry().withEntryName(\"firstName\").withContent(firstName));\n        entries.add(new DataSetEntry().withEntryName(\"lastName\").withContent(lastName));\n        entries.add(new DataSetEntry().withEntryName(\"phoneNumber\").withContent(phoneNumber));\n        entries.add(new DataSetEntry().withEntryName(\"dob\").withContent(dob)); /* <=== ANY */ \n\n        // Import the asset\n        ImportAssetFromSignedUrlRequest importAssetRequest = new ImportAssetFromSignedUrlRequest()\n                .withDataSetId(dataSetId)\n                .withRevisionId(revisionId)"
                  },
                  {
                    "sample" : "entries",
                    "lineNumber" : 40,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        // Import the asset\n        ImportAssetFromSignedUrlRequest importAssetRequest = new ImportAssetFromSignedUrlRequest()\n                .withDataSetId(dataSetId)\n                .withRevisionId(revisionId)\n                .withAssetName(assetName)\n                .withEntries(entries); /* <=== ANY */ \n        dataExchangeClient.importAssetFromSignedUrl(importAssetRequest);\n    }\n}\n"
                  },
                  {
                    "sample" : "withAssetName(assetName)",
                    "lineNumber" : 36,
                    "columnNumber" : 62,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        entries.add(new DataSetEntry().withEntryName(\"lastName\").withContent(lastName));\n        entries.add(new DataSetEntry().withEntryName(\"phoneNumber\").withContent(phoneNumber));\n        entries.add(new DataSetEntry().withEntryName(\"dob\").withContent(dob));\n\n        // Import the asset\n        ImportAssetFromSignedUrlRequest importAssetRequest = new ImportAssetFromSignedUrlRequest() /* <===  */ \n                .withDataSetId(dataSetId)\n                .withRevisionId(revisionId)\n                .withAssetName(assetName)\n                .withEntries(entries);\n        dataExchangeClient.importAssetFromSignedUrl(importAssetRequest);"
                  },
                  {
                    "sample" : "withEntries(entries)",
                    "lineNumber" : 36,
                    "columnNumber" : 62,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        entries.add(new DataSetEntry().withEntryName(\"lastName\").withContent(lastName));\n        entries.add(new DataSetEntry().withEntryName(\"phoneNumber\").withContent(phoneNumber));\n        entries.add(new DataSetEntry().withEntryName(\"dob\").withContent(dob));\n\n        // Import the asset\n        ImportAssetFromSignedUrlRequest importAssetRequest = new ImportAssetFromSignedUrlRequest() /* <===  */ \n                .withDataSetId(dataSetId)\n                .withRevisionId(revisionId)\n                .withAssetName(assetName)\n                .withEntries(entries);\n        dataExchangeClient.importAssetFromSignedUrl(importAssetRequest);"
                  },
                  {
                    "sample" : "importAssetRequest",
                    "lineNumber" : 36,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        entries.add(new DataSetEntry().withEntryName(\"lastName\").withContent(lastName));\n        entries.add(new DataSetEntry().withEntryName(\"phoneNumber\").withContent(phoneNumber));\n        entries.add(new DataSetEntry().withEntryName(\"dob\").withContent(dob));\n\n        // Import the asset\n        ImportAssetFromSignedUrlRequest importAssetRequest = new ImportAssetFromSignedUrlRequest() /* <=== com.amazonaws.services.dataexchange.model.ImportAssetFromSignedUrlRequest */ \n                .withDataSetId(dataSetId)\n                .withRevisionId(revisionId)\n                .withAssetName(assetName)\n                .withEntries(entries);\n        dataExchangeClient.importAssetFromSignedUrl(importAssetRequest);"
                  },
                  {
                    "sample" : "importAssetFromSignedUrl(importAssetRequest)",
                    "lineNumber" : 41,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        ImportAssetFromSignedUrlRequest importAssetRequest = new ImportAssetFromSignedUrlRequest()\n                .withDataSetId(dataSetId)\n                .withRevisionId(revisionId)\n                .withAssetName(assetName)\n                .withEntries(entries);\n        dataExchangeClient.importAssetFromSignedUrl(importAssetRequest); /* <=== com.amazonaws.services.dataexchange.AmazonDataExchange.importAssetFromSignedUrl */ \n    }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "7755-7744",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 18,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/ebs.java",
                    "excerpt" : "\npublic void AWSEBSProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n    \n    CreateSnapshotRequest createSnapshotRequest = new CreateSnapshotRequest()\n            .withVolumeId(firstName + \"_\" + lastName + \"_Volume\") /* <=== java.lang.String */ \n            .withTagSpecifications(new Tag().withKey(\"PersonalData\").withValue(personalData.toString()));\n    \n    client.createSnapshot(createSnapshotRequest);\n}\n}"
                  },
                  {
                    "sample" : "withVolumeId(firstName + \"_\" + lastName + \"_Volume\")",
                    "lineNumber" : 17,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/ebs.java",
                    "excerpt" : "}\n\npublic void AWSEBSProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n    \n    CreateSnapshotRequest createSnapshotRequest = new CreateSnapshotRequest() /* <=== com.amazonaws.services.ebs.model.CreateSnapshotRequest.withVolumeId */ \n            .withVolumeId(firstName + \"_\" + lastName + \"_Volume\")\n            .withTagSpecifications(new Tag().withKey(\"PersonalData\").withValue(personalData.toString()));\n    \n    client.createSnapshot(createSnapshotRequest);\n}"
                  }
                ]
              },
              {
                "pathId" : "9858-9855",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 11,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/devOpsGuru.java",
                    "excerpt" : "    \n    public static void AWSDevOpsGuruFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        DevOpsGuruClient devOpsGuruClient = DevOpsGuruClient.builder().build();\n        Event event = new Event();\n        event.setName(\"PersonalDataEvent\");\n        event.addDetail(\"FirstName\", firstName); /* <=== java.lang.String */ \n        event.addDetail(\"LastName\", lastName);\n        event.addDetail(\"PhoneNumber\", phoneNumber);\n        event.addDetail(\"DOB\", DOB);\n        PutEventRequest request = new PutEventRequest().withEvent(event);\n        devOpsGuruClient.putEvent(request);"
                  },
                  {
                    "sample" : "addDetail(\"FirstName\", firstName)",
                    "lineNumber" : 11,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/devOpsGuru.java",
                    "excerpt" : "    \n    public static void AWSDevOpsGuruFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        DevOpsGuruClient devOpsGuruClient = DevOpsGuruClient.builder().build();\n        Event event = new Event();\n        event.setName(\"PersonalDataEvent\");\n        event.addDetail(\"FirstName\", firstName); /* <=== com.amazonaws.services.devopsguru.model.Event.addDetail */ \n        event.addDetail(\"LastName\", lastName);\n        event.addDetail(\"PhoneNumber\", phoneNumber);\n        event.addDetail(\"DOB\", DOB);\n        PutEventRequest request = new PutEventRequest().withEvent(event);\n        devOpsGuruClient.putEvent(request);"
                  }
                ]
              },
              {
                "pathId" : "14830-14829-14820-14819-14818-14835",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 15,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/route53.java",
                    "excerpt" : "  public static void processData(String firstName, String lastName, String phoneNumber, String dob) {\n    try {\n      // Create a new hosted zone in Route 53\n      CreateHostedZoneRequest createHostedZoneRequest = new CreateHostedZoneRequest()\n        .withName(\"example.com\")\n        .withCallerReference(firstName + lastName); /* <=== java.lang.String */ \n      CreateHostedZoneResult createHostedZoneResult = client.createHostedZone(createHostedZoneRequest);\n      \n      // Use the hosted zone to process personal data\n      // ...\n    } catch (Exception e) {"
                  },
                  {
                    "sample" : "firstName + lastName",
                    "lineNumber" : 15,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/route53.java",
                    "excerpt" : "  public static void processData(String firstName, String lastName, String phoneNumber, String dob) {\n    try {\n      // Create a new hosted zone in Route 53\n      CreateHostedZoneRequest createHostedZoneRequest = new CreateHostedZoneRequest()\n        .withName(\"example.com\")\n        .withCallerReference(firstName + lastName); /* <===  */ \n      CreateHostedZoneResult createHostedZoneResult = client.createHostedZone(createHostedZoneRequest);\n      \n      // Use the hosted zone to process personal data\n      // ...\n    } catch (Exception e) {"
                  },
                  {
                    "sample" : "withName(\"example.com\")",
                    "lineNumber" : 13,
                    "columnNumber" : 57,
                    "fileName" : "/app/code/route53.java",
                    "excerpt" : "  private static AmazonRoute53 client = AmazonRoute53ClientBuilder.defaultClient();\n  \n  public static void processData(String firstName, String lastName, String phoneNumber, String dob) {\n    try {\n      // Create a new hosted zone in Route 53\n      CreateHostedZoneRequest createHostedZoneRequest = new CreateHostedZoneRequest() /* <=== com.amazonaws.services.route53.model.CreateHostedZoneRequest.withName */ \n        .withName(\"example.com\")\n        .withCallerReference(firstName + lastName);\n      CreateHostedZoneResult createHostedZoneResult = client.createHostedZone(createHostedZoneRequest);\n      \n      // Use the hosted zone to process personal data"
                  },
                  {
                    "sample" : "withCallerReference(firstName + lastName)",
                    "lineNumber" : 13,
                    "columnNumber" : 57,
                    "fileName" : "/app/code/route53.java",
                    "excerpt" : "  private static AmazonRoute53 client = AmazonRoute53ClientBuilder.defaultClient();\n  \n  public static void processData(String firstName, String lastName, String phoneNumber, String dob) {\n    try {\n      // Create a new hosted zone in Route 53\n      CreateHostedZoneRequest createHostedZoneRequest = new CreateHostedZoneRequest() /* <===  */ \n        .withName(\"example.com\")\n        .withCallerReference(firstName + lastName);\n      CreateHostedZoneResult createHostedZoneResult = client.createHostedZone(createHostedZoneRequest);\n      \n      // Use the hosted zone to process personal data"
                  },
                  {
                    "sample" : "createHostedZoneRequest",
                    "lineNumber" : 13,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/route53.java",
                    "excerpt" : "  private static AmazonRoute53 client = AmazonRoute53ClientBuilder.defaultClient();\n  \n  public static void processData(String firstName, String lastName, String phoneNumber, String dob) {\n    try {\n      // Create a new hosted zone in Route 53\n      CreateHostedZoneRequest createHostedZoneRequest = new CreateHostedZoneRequest() /* <=== com.amazonaws.services.route53.model.CreateHostedZoneRequest */ \n        .withName(\"example.com\")\n        .withCallerReference(firstName + lastName);\n      CreateHostedZoneResult createHostedZoneResult = client.createHostedZone(createHostedZoneRequest);\n      \n      // Use the hosted zone to process personal data"
                  },
                  {
                    "sample" : "createHostedZone(createHostedZoneRequest)",
                    "lineNumber" : 16,
                    "columnNumber" : 55,
                    "fileName" : "/app/code/route53.java",
                    "excerpt" : "    try {\n      // Create a new hosted zone in Route 53\n      CreateHostedZoneRequest createHostedZoneRequest = new CreateHostedZoneRequest()\n        .withName(\"example.com\")\n        .withCallerReference(firstName + lastName);\n      CreateHostedZoneResult createHostedZoneResult = client.createHostedZone(createHostedZoneRequest); /* <=== com.amazonaws.services.route53.AmazonRoute53.createHostedZone */ \n      \n      // Use the hosted zone to process personal data\n      // ...\n    } catch (Exception e) {\n      System.err.println(\"Error processing personal data: \" + e.getMessage());"
                  }
                ]
              },
              {
                "pathId" : "3361-3357-3348-3347-3346-3345-3344-3375-3374-3373-3372-3380",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 12,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/deviceFarm.java",
                    "excerpt" : "    public static void AWSDevicefarmFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        com.amazonaws.services.devicefarm.AWSDeviceFarm client = AWSDeviceFarmClientBuilder.defaultClient();\n\n        CreateUploadRequest createUploadRequest = new CreateUploadRequest()\n            .withProjectArn(\"<ProjectARN>\")\n            .withName(firstName + \"-\" + lastName + \"-\" + phoneNumber) /* <=== java.lang.String */ \n            .withType(UploadType.ANDROID_APP)\n            .withContentType(\"application/octet-stream\");\n\n        CreateUploadResult createUploadResult = client.createUpload(createUploadRequest);\n        String uploadUrl = createUploadResult.getUpload().getUrl();"
                  },
                  {
                    "sample" : "firstName + \"-\" + lastName + \"-\" + phoneNumber",
                    "lineNumber" : 12,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/deviceFarm.java",
                    "excerpt" : "    public static void AWSDevicefarmFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        com.amazonaws.services.devicefarm.AWSDeviceFarm client = AWSDeviceFarmClientBuilder.defaultClient();\n\n        CreateUploadRequest createUploadRequest = new CreateUploadRequest()\n            .withProjectArn(\"<ProjectARN>\")\n            .withName(firstName + \"-\" + lastName + \"-\" + phoneNumber) /* <===  */ \n            .withType(UploadType.ANDROID_APP)\n            .withContentType(\"application/octet-stream\");\n\n        CreateUploadResult createUploadResult = client.createUpload(createUploadRequest);\n        String uploadUrl = createUploadResult.getUpload().getUrl();"
                  },
                  {
                    "sample" : "withProjectArn(\"<ProjectARN>\")",
                    "lineNumber" : 10,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/deviceFarm.java",
                    "excerpt" : "\npublic class AWSDevicefarmUtil {\n    public static void AWSDevicefarmFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        com.amazonaws.services.devicefarm.AWSDeviceFarm client = AWSDeviceFarmClientBuilder.defaultClient();\n\n        CreateUploadRequest createUploadRequest = new CreateUploadRequest() /* <=== com.amazonaws.services.devicefarm.model.CreateUploadRequest.withProjectArn */ \n            .withProjectArn(\"<ProjectARN>\")\n            .withName(firstName + \"-\" + lastName + \"-\" + phoneNumber)\n            .withType(UploadType.ANDROID_APP)\n            .withContentType(\"application/octet-stream\");\n"
                  },
                  {
                    "sample" : "withName(firstName + \"-\" + lastName + \"-\" + phoneNumber)",
                    "lineNumber" : 10,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/deviceFarm.java",
                    "excerpt" : "\npublic class AWSDevicefarmUtil {\n    public static void AWSDevicefarmFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        com.amazonaws.services.devicefarm.AWSDeviceFarm client = AWSDeviceFarmClientBuilder.defaultClient();\n\n        CreateUploadRequest createUploadRequest = new CreateUploadRequest() /* <===  */ \n            .withProjectArn(\"<ProjectARN>\")\n            .withName(firstName + \"-\" + lastName + \"-\" + phoneNumber)\n            .withType(UploadType.ANDROID_APP)\n            .withContentType(\"application/octet-stream\");\n"
                  },
                  {
                    "sample" : "withType(UploadType.ANDROID_APP)",
                    "lineNumber" : 10,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/deviceFarm.java",
                    "excerpt" : "\npublic class AWSDevicefarmUtil {\n    public static void AWSDevicefarmFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        com.amazonaws.services.devicefarm.AWSDeviceFarm client = AWSDeviceFarmClientBuilder.defaultClient();\n\n        CreateUploadRequest createUploadRequest = new CreateUploadRequest() /* <===  */ \n            .withProjectArn(\"<ProjectARN>\")\n            .withName(firstName + \"-\" + lastName + \"-\" + phoneNumber)\n            .withType(UploadType.ANDROID_APP)\n            .withContentType(\"application/octet-stream\");\n"
                  },
                  {
                    "sample" : "withContentType(\"application/octet-stream\")",
                    "lineNumber" : 10,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/deviceFarm.java",
                    "excerpt" : "\npublic class AWSDevicefarmUtil {\n    public static void AWSDevicefarmFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        com.amazonaws.services.devicefarm.AWSDeviceFarm client = AWSDeviceFarmClientBuilder.defaultClient();\n\n        CreateUploadRequest createUploadRequest = new CreateUploadRequest() /* <===  */ \n            .withProjectArn(\"<ProjectARN>\")\n            .withName(firstName + \"-\" + lastName + \"-\" + phoneNumber)\n            .withType(UploadType.ANDROID_APP)\n            .withContentType(\"application/octet-stream\");\n"
                  },
                  {
                    "sample" : "createUploadRequest",
                    "lineNumber" : 10,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/deviceFarm.java",
                    "excerpt" : "\npublic class AWSDevicefarmUtil {\n    public static void AWSDevicefarmFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        com.amazonaws.services.devicefarm.AWSDeviceFarm client = AWSDeviceFarmClientBuilder.defaultClient();\n\n        CreateUploadRequest createUploadRequest = new CreateUploadRequest() /* <=== com.amazonaws.services.devicefarm.model.CreateUploadRequest */ \n            .withProjectArn(\"<ProjectARN>\")\n            .withName(firstName + \"-\" + lastName + \"-\" + phoneNumber)\n            .withType(UploadType.ANDROID_APP)\n            .withContentType(\"application/octet-stream\");\n"
                  },
                  {
                    "sample" : "createUploadRequest",
                    "lineNumber" : 16,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/deviceFarm.java",
                    "excerpt" : "            .withProjectArn(\"<ProjectARN>\")\n            .withName(firstName + \"-\" + lastName + \"-\" + phoneNumber)\n            .withType(UploadType.ANDROID_APP)\n            .withContentType(\"application/octet-stream\");\n\n        CreateUploadResult createUploadResult = client.createUpload(createUploadRequest); /* <=== com.amazonaws.services.devicefarm.model.CreateUploadRequest */ \n        String uploadUrl = createUploadResult.getUpload().getUrl();\n\n        // Store the personal data in a suitable format, for example in a JSON file.\n        String personalData = \"{ \\\"firstName\\\": \\\"\" + firstName + \"\\\", \" +\n                              \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +"
                  },
                  {
                    "sample" : "client",
                    "lineNumber" : 16,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/deviceFarm.java",
                    "excerpt" : "            .withProjectArn(\"<ProjectARN>\")\n            .withName(firstName + \"-\" + lastName + \"-\" + phoneNumber)\n            .withType(UploadType.ANDROID_APP)\n            .withContentType(\"application/octet-stream\");\n\n        CreateUploadResult createUploadResult = client.createUpload(createUploadRequest); /* <=== ANY */ \n        String uploadUrl = createUploadResult.getUpload().getUrl();\n\n        // Store the personal data in a suitable format, for example in a JSON file.\n        String personalData = \"{ \\\"firstName\\\": \\\"\" + firstName + \"\\\", \" +\n                              \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +"
                  },
                  {
                    "sample" : "createUpload(createUploadRequest)",
                    "lineNumber" : 16,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/deviceFarm.java",
                    "excerpt" : "            .withProjectArn(\"<ProjectARN>\")\n            .withName(firstName + \"-\" + lastName + \"-\" + phoneNumber)\n            .withType(UploadType.ANDROID_APP)\n            .withContentType(\"application/octet-stream\");\n\n        CreateUploadResult createUploadResult = client.createUpload(createUploadRequest); /* <=== ANY.createUpload */ \n        String uploadUrl = createUploadResult.getUpload().getUrl();\n\n        // Store the personal data in a suitable format, for example in a JSON file.\n        String personalData = \"{ \\\"firstName\\\": \\\"\" + firstName + \"\\\", \" +\n                              \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +"
                  },
                  {
                    "sample" : "createUploadResult",
                    "lineNumber" : 16,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/deviceFarm.java",
                    "excerpt" : "            .withProjectArn(\"<ProjectARN>\")\n            .withName(firstName + \"-\" + lastName + \"-\" + phoneNumber)\n            .withType(UploadType.ANDROID_APP)\n            .withContentType(\"application/octet-stream\");\n\n        CreateUploadResult createUploadResult = client.createUpload(createUploadRequest); /* <=== com.amazonaws.services.devicefarm.model.CreateUploadResult */ \n        String uploadUrl = createUploadResult.getUpload().getUrl();\n\n        // Store the personal data in a suitable format, for example in a JSON file.\n        String personalData = \"{ \\\"firstName\\\": \\\"\" + firstName + \"\\\", \" +\n                              \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +"
                  },
                  {
                    "sample" : "getUpload()",
                    "lineNumber" : 17,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/deviceFarm.java",
                    "excerpt" : "            .withName(firstName + \"-\" + lastName + \"-\" + phoneNumber)\n            .withType(UploadType.ANDROID_APP)\n            .withContentType(\"application/octet-stream\");\n\n        CreateUploadResult createUploadResult = client.createUpload(createUploadRequest);\n        String uploadUrl = createUploadResult.getUpload().getUrl(); /* <=== com.amazonaws.services.devicefarm.model.CreateUploadResult.getUpload */ \n\n        // Store the personal data in a suitable format, for example in a JSON file.\n        String personalData = \"{ \\\"firstName\\\": \\\"\" + firstName + \"\\\", \" +\n                              \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +\n                              \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +"
                  }
                ]
              },
              {
                "pathId" : "6436-6430-6429-6416-6415-6462",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 13,
                    "columnNumber" : 84,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : "\n    public static void AWSlexmodelsv2FirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AmazonLexModelBuilding client = AmazonLexModelBuildingClientBuilder.standard().build();\n        SlotTypeMetadata metadata = new SlotTypeMetadata().withName(\"PersonalDataSlot\").withDescription(\"Personal data slot\");\n        SlotTypeProperties properties = new SlotTypeProperties().withEnumerationValues(\n                new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB) /* <=== java.lang.String */ \n        );\n        PutSlotTypeRequest request = new PutSlotTypeRequest().withName(\"PersonalDataSlot\").withChecksum(null)\n                .withDescription(\"Personal data slot\").withEnumerationValues(properties.getEnumerationValues())\n                .withSlotTypeMetadata(metadata);\n        client.putSlotType(request);"
                  },
                  {
                    "sample" : "firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB",
                    "lineNumber" : 13,
                    "columnNumber" : 84,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : "\n    public static void AWSlexmodelsv2FirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AmazonLexModelBuilding client = AmazonLexModelBuildingClientBuilder.standard().build();\n        SlotTypeMetadata metadata = new SlotTypeMetadata().withName(\"PersonalDataSlot\").withDescription(\"Personal data slot\");\n        SlotTypeProperties properties = new SlotTypeProperties().withEnumerationValues(\n                new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB) /* <===  */ \n        );\n        PutSlotTypeRequest request = new PutSlotTypeRequest().withName(\"PersonalDataSlot\").withChecksum(null)\n                .withDescription(\"Personal data slot\").withEnumerationValues(properties.getEnumerationValues())\n                .withSlotTypeMetadata(metadata);\n        client.putSlotType(request);"
                  },
                  {
                    "sample" : "$obj1",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "withEnumerationValues(new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB))",
                    "lineNumber" : 12,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : "public class AWSLexModelsV2Util {\n\n    public static void AWSlexmodelsv2FirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AmazonLexModelBuilding client = AmazonLexModelBuildingClientBuilder.standard().build();\n        SlotTypeMetadata metadata = new SlotTypeMetadata().withName(\"PersonalDataSlot\").withDescription(\"Personal data slot\");\n        SlotTypeProperties properties = new SlotTypeProperties().withEnumerationValues( /* <=== com.amazonaws.services.lexmodelbuilding.model.SlotTypeProperties.withEnumerationValues */ \n                new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB)\n        );\n        PutSlotTypeRequest request = new PutSlotTypeRequest().withName(\"PersonalDataSlot\").withChecksum(null)\n                .withDescription(\"Personal data slot\").withEnumerationValues(properties.getEnumerationValues())\n                .withSlotTypeMetadata(metadata);"
                  },
                  {
                    "sample" : "properties",
                    "lineNumber" : 12,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : "public class AWSLexModelsV2Util {\n\n    public static void AWSlexmodelsv2FirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AmazonLexModelBuilding client = AmazonLexModelBuildingClientBuilder.standard().build();\n        SlotTypeMetadata metadata = new SlotTypeMetadata().withName(\"PersonalDataSlot\").withDescription(\"Personal data slot\");\n        SlotTypeProperties properties = new SlotTypeProperties().withEnumerationValues( /* <=== com.amazonaws.services.lexmodelbuilding.model.SlotTypeProperties */ \n                new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB)\n        );\n        PutSlotTypeRequest request = new PutSlotTypeRequest().withName(\"PersonalDataSlot\").withChecksum(null)\n                .withDescription(\"Personal data slot\").withEnumerationValues(properties.getEnumerationValues())\n                .withSlotTypeMetadata(metadata);"
                  },
                  {
                    "sample" : "getEnumerationValues()",
                    "lineNumber" : 16,
                    "columnNumber" : 78,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : "        SlotTypeMetadata metadata = new SlotTypeMetadata().withName(\"PersonalDataSlot\").withDescription(\"Personal data slot\");\n        SlotTypeProperties properties = new SlotTypeProperties().withEnumerationValues(\n                new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB)\n        );\n        PutSlotTypeRequest request = new PutSlotTypeRequest().withName(\"PersonalDataSlot\").withChecksum(null)\n                .withDescription(\"Personal data slot\").withEnumerationValues(properties.getEnumerationValues()) /* <=== com.amazonaws.services.lexmodelbuilding.model.SlotTypeProperties.getEnumerationValues */ \n                .withSlotTypeMetadata(metadata);\n        client.putSlotType(request);\n    }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "16314-16306-16305-16304-16303-16302-16318",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 10,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/amplifyUIBuilder.java",
                    "excerpt" : "\n    public void AWSAmplifyUIBuilderFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AmplifyUIBuilder amplifyUIBuilder = new AmplifyUIBuilder();\n\n        CreateUserRequest createUserRequest = new CreateUserRequest()\n                .withFirstName(firstName) /* <=== java.lang.String */ \n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber)\n                .withDOB(DOB);\n\n        amplifyUIBuilder.createUser(createUserRequest);"
                  },
                  {
                    "sample" : "withFirstName(firstName)",
                    "lineNumber" : 9,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/amplifyUIBuilder.java",
                    "excerpt" : "public class AWSAmplifyUIBuilderUtil {\n\n    public void AWSAmplifyUIBuilderFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AmplifyUIBuilder amplifyUIBuilder = new AmplifyUIBuilder();\n\n        CreateUserRequest createUserRequest = new CreateUserRequest() /* <=== com.amazonaws.services.amplifyuibuilder.model.CreateUserRequest.withFirstName */ \n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber)\n                .withDOB(DOB);\n"
                  },
                  {
                    "sample" : "withLastName(lastName)",
                    "lineNumber" : 9,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/amplifyUIBuilder.java",
                    "excerpt" : "public class AWSAmplifyUIBuilderUtil {\n\n    public void AWSAmplifyUIBuilderFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AmplifyUIBuilder amplifyUIBuilder = new AmplifyUIBuilder();\n\n        CreateUserRequest createUserRequest = new CreateUserRequest() /* <===  */ \n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber)\n                .withDOB(DOB);\n"
                  },
                  {
                    "sample" : "withPhoneNumber(phoneNumber)",
                    "lineNumber" : 9,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/amplifyUIBuilder.java",
                    "excerpt" : "public class AWSAmplifyUIBuilderUtil {\n\n    public void AWSAmplifyUIBuilderFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AmplifyUIBuilder amplifyUIBuilder = new AmplifyUIBuilder();\n\n        CreateUserRequest createUserRequest = new CreateUserRequest() /* <===  */ \n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber)\n                .withDOB(DOB);\n"
                  },
                  {
                    "sample" : "withDOB(DOB)",
                    "lineNumber" : 9,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/amplifyUIBuilder.java",
                    "excerpt" : "public class AWSAmplifyUIBuilderUtil {\n\n    public void AWSAmplifyUIBuilderFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AmplifyUIBuilder amplifyUIBuilder = new AmplifyUIBuilder();\n\n        CreateUserRequest createUserRequest = new CreateUserRequest() /* <===  */ \n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber)\n                .withDOB(DOB);\n"
                  },
                  {
                    "sample" : "createUserRequest",
                    "lineNumber" : 9,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/amplifyUIBuilder.java",
                    "excerpt" : "public class AWSAmplifyUIBuilderUtil {\n\n    public void AWSAmplifyUIBuilderFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AmplifyUIBuilder amplifyUIBuilder = new AmplifyUIBuilder();\n\n        CreateUserRequest createUserRequest = new CreateUserRequest() /* <=== com.amazonaws.services.amplifyuibuilder.model.CreateUserRequest */ \n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber)\n                .withDOB(DOB);\n"
                  },
                  {
                    "sample" : "createUser(createUserRequest)",
                    "lineNumber" : 15,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/amplifyUIBuilder.java",
                    "excerpt" : "                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber)\n                .withDOB(DOB);\n\n        amplifyUIBuilder.createUser(createUserRequest); /* <=== com.amazonaws.services.amplifyuibuilder.AmplifyUIBuilder.createUser */ \n    }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "11721-11749-11748-11739-11738-11737-11736-11752",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 12,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/mgn.java",
                    "excerpt" : "\n  public static void AWSMGNFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n    AmazonMGNClient mgnClient = AmazonMGNClient.builder().build();\n    \n    Map<String, String> personalData = new HashMap<>();\n    personalData.put(\"firstName\", firstName); /* <=== java.lang.String */ \n    personalData.put(\"lastName\", lastName);\n    personalData.put(\"phoneNumber\", phoneNumber);\n    personalData.put(\"DOB\", DOB);\n    \n    IndexDocumentRequest indexDocumentRequest = new IndexDocumentRequest()"
                  },
                  {
                    "sample" : "firstName",
                    "lineNumber" : 19,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/mgn.java",
                    "excerpt" : "    personalData.put(\"phoneNumber\", phoneNumber);\n    personalData.put(\"DOB\", DOB);\n    \n    IndexDocumentRequest indexDocumentRequest = new IndexDocumentRequest()\n        .withIndexName(\"personal-data\")\n        .withId(firstName + lastName) /* <=== java.lang.String */ \n        .withSource(personalData);\n    \n    mgnClient.indexDocument(indexDocumentRequest);\n  }\n}"
                  },
                  {
                    "sample" : "firstName + lastName",
                    "lineNumber" : 19,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/mgn.java",
                    "excerpt" : "    personalData.put(\"phoneNumber\", phoneNumber);\n    personalData.put(\"DOB\", DOB);\n    \n    IndexDocumentRequest indexDocumentRequest = new IndexDocumentRequest()\n        .withIndexName(\"personal-data\")\n        .withId(firstName + lastName) /* <===  */ \n        .withSource(personalData);\n    \n    mgnClient.indexDocument(indexDocumentRequest);\n  }\n}"
                  },
                  {
                    "sample" : "withIndexName(\"personal-data\")",
                    "lineNumber" : 17,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/mgn.java",
                    "excerpt" : "    personalData.put(\"firstName\", firstName);\n    personalData.put(\"lastName\", lastName);\n    personalData.put(\"phoneNumber\", phoneNumber);\n    personalData.put(\"DOB\", DOB);\n    \n    IndexDocumentRequest indexDocumentRequest = new IndexDocumentRequest() /* <=== com.amazonaws.services.mgn.model.IndexDocumentRequest.withIndexName */ \n        .withIndexName(\"personal-data\")\n        .withId(firstName + lastName)\n        .withSource(personalData);\n    \n    mgnClient.indexDocument(indexDocumentRequest);"
                  },
                  {
                    "sample" : "withId(firstName + lastName)",
                    "lineNumber" : 17,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/mgn.java",
                    "excerpt" : "    personalData.put(\"firstName\", firstName);\n    personalData.put(\"lastName\", lastName);\n    personalData.put(\"phoneNumber\", phoneNumber);\n    personalData.put(\"DOB\", DOB);\n    \n    IndexDocumentRequest indexDocumentRequest = new IndexDocumentRequest() /* <===  */ \n        .withIndexName(\"personal-data\")\n        .withId(firstName + lastName)\n        .withSource(personalData);\n    \n    mgnClient.indexDocument(indexDocumentRequest);"
                  },
                  {
                    "sample" : "withSource(personalData)",
                    "lineNumber" : 17,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/mgn.java",
                    "excerpt" : "    personalData.put(\"firstName\", firstName);\n    personalData.put(\"lastName\", lastName);\n    personalData.put(\"phoneNumber\", phoneNumber);\n    personalData.put(\"DOB\", DOB);\n    \n    IndexDocumentRequest indexDocumentRequest = new IndexDocumentRequest() /* <===  */ \n        .withIndexName(\"personal-data\")\n        .withId(firstName + lastName)\n        .withSource(personalData);\n    \n    mgnClient.indexDocument(indexDocumentRequest);"
                  },
                  {
                    "sample" : "indexDocumentRequest",
                    "lineNumber" : 17,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/mgn.java",
                    "excerpt" : "    personalData.put(\"firstName\", firstName);\n    personalData.put(\"lastName\", lastName);\n    personalData.put(\"phoneNumber\", phoneNumber);\n    personalData.put(\"DOB\", DOB);\n    \n    IndexDocumentRequest indexDocumentRequest = new IndexDocumentRequest() /* <=== com.amazonaws.services.mgn.model.IndexDocumentRequest */ \n        .withIndexName(\"personal-data\")\n        .withId(firstName + lastName)\n        .withSource(personalData);\n    \n    mgnClient.indexDocument(indexDocumentRequest);"
                  },
                  {
                    "sample" : "indexDocument(indexDocumentRequest)",
                    "lineNumber" : 22,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/mgn.java",
                    "excerpt" : "    IndexDocumentRequest indexDocumentRequest = new IndexDocumentRequest()\n        .withIndexName(\"personal-data\")\n        .withId(firstName + lastName)\n        .withSource(personalData);\n    \n    mgnClient.indexDocument(indexDocumentRequest); /* <=== com.amazonaws.services.mgn.AmazonMGNClient.indexDocument */ \n  }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "13493-13482",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 19,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/iotFleetwise.java",
                    "excerpt" : "\npublic void AWSIoTFleetwiseProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nCreateTrackerRequest createTrackerRequest = new CreateTrackerRequest()\n        .withTrackerName(firstName + \"_\" + lastName + \"_Tracker\") /* <=== java.lang.String */ \n        .withAttributePayload(personalData);\n\nCreateTrackerResult result = client.createTracker(createTrackerRequest);\nSystem.out.println(\"Tracker created with ID: \" + result.getTrackerId());\n}"
                  },
                  {
                    "sample" : "withTrackerName(firstName + \"_\" + lastName + \"_Tracker\")",
                    "lineNumber" : 18,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/iotFleetwise.java",
                    "excerpt" : "}\n\npublic void AWSIoTFleetwiseProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nCreateTrackerRequest createTrackerRequest = new CreateTrackerRequest() /* <=== com.amazonaws.services.iotfleetwise.model.CreateTrackerRequest.withTrackerName */ \n        .withTrackerName(firstName + \"_\" + lastName + \"_Tracker\")\n        .withAttributePayload(personalData);\n\nCreateTrackerResult result = client.createTracker(createTrackerRequest);\nSystem.out.println(\"Tracker created with ID: \" + result.getTrackerId());"
                  }
                ]
              },
              {
                "pathId" : "11814-11806",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 15,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/oam.java",
                    "excerpt" : "    this.oamClient = oamClient;\n  }\n\n  public CreateUserResult AWSOAMFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    CreateUserRequest request = new CreateUserRequest()\n      .withFirstName(firstName) /* <=== java.lang.String */ \n      .withLastName(lastName)\n      .withPhoneNumber(phoneNumber)\n      .withDateOfBirth(dob);\n    return oamClient.createUser(request);\n  }"
                  },
                  {
                    "sample" : "withFirstName(firstName)",
                    "lineNumber" : 14,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/oam.java",
                    "excerpt" : "  public AWSOAMUtil(AWSOAM oamClient) {\n    this.oamClient = oamClient;\n  }\n\n  public CreateUserResult AWSOAMFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    CreateUserRequest request = new CreateUserRequest() /* <=== com.amazonaws.services.oam.model.CreateUserRequest.withFirstName */ \n      .withFirstName(firstName)\n      .withLastName(lastName)\n      .withPhoneNumber(phoneNumber)\n      .withDateOfBirth(dob);\n    return oamClient.createUser(request);"
                  }
                ]
              },
              {
                "pathId" : "13840-13831",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 9,
                    "columnNumber" : 95,
                    "fileName" : "/app/code/simpleSystemManagement.java",
                    "excerpt" : "\npublic class AWSSSMUtil {\n  public static void AWSSSMFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    AWSSimpleSystemsManagement ssmClient = AWSSimpleSystemsManagementClientBuilder.defaultClient();\n    String parameterName = \"/personalData/firstName\";\n    PutParameterRequest request = new PutParameterRequest().withName(parameterName).withValue(firstName).withType(\"String\"); /* <=== java.lang.String */ \n    ssmClient.putParameter(request);\n    \n    parameterName = \"/personalData/lastName\";\n    request = new PutParameterRequest().withName(parameterName).withValue(lastName).withType(\"String\");\n    ssmClient.putParameter(request);"
                  },
                  {
                    "sample" : "withName(parameterName)",
                    "lineNumber" : 9,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/simpleSystemManagement.java",
                    "excerpt" : "\npublic class AWSSSMUtil {\n  public static void AWSSSMFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    AWSSimpleSystemsManagement ssmClient = AWSSimpleSystemsManagementClientBuilder.defaultClient();\n    String parameterName = \"/personalData/firstName\";\n    PutParameterRequest request = new PutParameterRequest().withName(parameterName).withValue(firstName).withType(\"String\"); /* <=== com.amazonaws.services.simplesystemsmanagement.model.PutParameterRequest.withName */ \n    ssmClient.putParameter(request);\n    \n    parameterName = \"/personalData/lastName\";\n    request = new PutParameterRequest().withName(parameterName).withValue(lastName).withType(\"String\");\n    ssmClient.putParameter(request);"
                  }
                ]
              },
              {
                "pathId" : "12011-12002-12001-12034-12033-12024-12023-12022-12021-12036",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 16,
                    "columnNumber" : 40,
                    "fileName" : "/app/code/apiGateway.java",
                    "excerpt" : "swift\nCopy code\n  Map<String, String> headers = new HashMap<>();\n  headers.put(\"Content-Type\", \"application/json\");\n  \n  String body = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \\\"lastName\\\": \\\"\" + lastName + \"\\\", \\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \\\"DOB\\\": \\\"\" + DOB + \"\\\"}\"; /* <=== java.lang.String */ \n \n  PostToConnectionRequest request = new PostToConnectionRequest()\n     .withConnectionId(\"connection-id\")\n     .withData(body.getBytes())\n     .withHeaders(headers);"
                  },
                  {
                    "sample" : "\"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \\\"lastName\\\": \\\"\" + lastName + \"\\\", \\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \\\"DOB\\\": \\\"\" + DOB + \"\\\"}\"",
                    "lineNumber" : 16,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/apiGateway.java",
                    "excerpt" : "swift\nCopy code\n  Map<String, String> headers = new HashMap<>();\n  headers.put(\"Content-Type\", \"application/json\");\n  \n  String body = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \\\"lastName\\\": \\\"\" + lastName + \"\\\", \\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \\\"DOB\\\": \\\"\" + DOB + \"\\\"}\"; /* <===  */ \n \n  PostToConnectionRequest request = new PostToConnectionRequest()\n     .withConnectionId(\"connection-id\")\n     .withData(body.getBytes())\n     .withHeaders(headers);"
                  },
                  {
                    "sample" : "body",
                    "lineNumber" : 16,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/apiGateway.java",
                    "excerpt" : "swift\nCopy code\n  Map<String, String> headers = new HashMap<>();\n  headers.put(\"Content-Type\", \"application/json\");\n  \n  String body = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \\\"lastName\\\": \\\"\" + lastName + \"\\\", \\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \\\"DOB\\\": \\\"\" + DOB + \"\\\"}\"; /* <=== java.lang.String */ \n \n  PostToConnectionRequest request = new PostToConnectionRequest()\n     .withConnectionId(\"connection-id\")\n     .withData(body.getBytes())\n     .withHeaders(headers);"
                  },
                  {
                    "sample" : "body",
                    "lineNumber" : 20,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/apiGateway.java",
                    "excerpt" : "  \n  String body = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \\\"lastName\\\": \\\"\" + lastName + \"\\\", \\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \\\"DOB\\\": \\\"\" + DOB + \"\\\"}\";\n \n  PostToConnectionRequest request = new PostToConnectionRequest()\n     .withConnectionId(\"connection-id\")\n     .withData(body.getBytes()) /* <=== java.lang.String */ \n     .withHeaders(headers);\n \n  client.postToConnection(request);\n}\n}"
                  },
                  {
                    "sample" : "body.getBytes()",
                    "lineNumber" : 20,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/apiGateway.java",
                    "excerpt" : "  \n  String body = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \\\"lastName\\\": \\\"\" + lastName + \"\\\", \\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \\\"DOB\\\": \\\"\" + DOB + \"\\\"}\";\n \n  PostToConnectionRequest request = new PostToConnectionRequest()\n     .withConnectionId(\"connection-id\")\n     .withData(body.getBytes()) /* <=== java.lang.String.getBytes */ \n     .withHeaders(headers);\n \n  client.postToConnection(request);\n}\n}"
                  },
                  {
                    "sample" : "withConnectionId(\"connection-id\")",
                    "lineNumber" : 18,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/apiGateway.java",
                    "excerpt" : "  Map<String, String> headers = new HashMap<>();\n  headers.put(\"Content-Type\", \"application/json\");\n  \n  String body = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \\\"lastName\\\": \\\"\" + lastName + \"\\\", \\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \\\"DOB\\\": \\\"\" + DOB + \"\\\"}\";\n \n  PostToConnectionRequest request = new PostToConnectionRequest() /* <=== com.amazonaws.services.apigateway.model.PostToConnectionRequest.withConnectionId */ \n     .withConnectionId(\"connection-id\")\n     .withData(body.getBytes())\n     .withHeaders(headers);\n \n  client.postToConnection(request);"
                  },
                  {
                    "sample" : "withData(body.getBytes())",
                    "lineNumber" : 18,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/apiGateway.java",
                    "excerpt" : "  Map<String, String> headers = new HashMap<>();\n  headers.put(\"Content-Type\", \"application/json\");\n  \n  String body = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \\\"lastName\\\": \\\"\" + lastName + \"\\\", \\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \\\"DOB\\\": \\\"\" + DOB + \"\\\"}\";\n \n  PostToConnectionRequest request = new PostToConnectionRequest() /* <===  */ \n     .withConnectionId(\"connection-id\")\n     .withData(body.getBytes())\n     .withHeaders(headers);\n \n  client.postToConnection(request);"
                  },
                  {
                    "sample" : "withHeaders(headers)",
                    "lineNumber" : 18,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/apiGateway.java",
                    "excerpt" : "  Map<String, String> headers = new HashMap<>();\n  headers.put(\"Content-Type\", \"application/json\");\n  \n  String body = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \\\"lastName\\\": \\\"\" + lastName + \"\\\", \\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \\\"DOB\\\": \\\"\" + DOB + \"\\\"}\";\n \n  PostToConnectionRequest request = new PostToConnectionRequest() /* <===  */ \n     .withConnectionId(\"connection-id\")\n     .withData(body.getBytes())\n     .withHeaders(headers);\n \n  client.postToConnection(request);"
                  },
                  {
                    "sample" : "request",
                    "lineNumber" : 18,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/apiGateway.java",
                    "excerpt" : "  Map<String, String> headers = new HashMap<>();\n  headers.put(\"Content-Type\", \"application/json\");\n  \n  String body = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \\\"lastName\\\": \\\"\" + lastName + \"\\\", \\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \\\"DOB\\\": \\\"\" + DOB + \"\\\"}\";\n \n  PostToConnectionRequest request = new PostToConnectionRequest() /* <=== com.amazonaws.services.apigateway.model.PostToConnectionRequest */ \n     .withConnectionId(\"connection-id\")\n     .withData(body.getBytes())\n     .withHeaders(headers);\n \n  client.postToConnection(request);"
                  },
                  {
                    "sample" : "postToConnection(request)",
                    "lineNumber" : 23,
                    "columnNumber" : 3,
                    "fileName" : "/app/code/apiGateway.java",
                    "excerpt" : "  PostToConnectionRequest request = new PostToConnectionRequest()\n     .withConnectionId(\"connection-id\")\n     .withData(body.getBytes())\n     .withHeaders(headers);\n \n  client.postToConnection(request); /* <=== com.amazonaws.services.apigateway.AmazonApiGateway.postToConnection */ \n}\n}\n"
                  }
                ]
              },
              {
                "pathId" : "11524-11515-11514-11513-11526-11539-11552-11577-11568-11567-11566-11578",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 29,
                    "columnNumber" : 55,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "\n    Workspace workspace = workspaces.get(0);\n    String workspaceId = workspace.getWorkspaceId();\n\n    List<Tag> tags = new ArrayList<>();\n    tags.add(new Tag().withKey(\"firstName\").withValue(firstName)); /* <=== java.lang.String */ \n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags);"
                  },
                  {
                    "sample" : "withKey(\"firstName\")",
                    "lineNumber" : 29,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "\n    Workspace workspace = workspaces.get(0);\n    String workspaceId = workspace.getWorkspaceId();\n\n    List<Tag> tags = new ArrayList<>();\n    tags.add(new Tag().withKey(\"firstName\").withValue(firstName)); /* <=== com.amazonaws.services.workspaces.model.Tag.withKey */ \n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags);"
                  },
                  {
                    "sample" : "withValue(firstName)",
                    "lineNumber" : 29,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "\n    Workspace workspace = workspaces.get(0);\n    String workspaceId = workspace.getWorkspaceId();\n\n    List<Tag> tags = new ArrayList<>();\n    tags.add(new Tag().withKey(\"firstName\").withValue(firstName)); /* <===  */ \n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags);"
                  },
                  {
                    "sample" : "tags",
                    "lineNumber" : 29,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "\n    Workspace workspace = workspaces.get(0);\n    String workspaceId = workspace.getWorkspaceId();\n\n    List<Tag> tags = new ArrayList<>();\n    tags.add(new Tag().withKey(\"firstName\").withValue(firstName)); /* <=== ANY */ \n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags);"
                  },
                  {
                    "sample" : "tags",
                    "lineNumber" : 30,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "    Workspace workspace = workspaces.get(0);\n    String workspaceId = workspace.getWorkspaceId();\n\n    List<Tag> tags = new ArrayList<>();\n    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName)); /* <=== ANY */ \n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags);\n    workspacesClient.tagWorkspace(tagWorkspaceRequest);"
                  },
                  {
                    "sample" : "tags",
                    "lineNumber" : 31,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "    String workspaceId = workspace.getWorkspaceId();\n\n    List<Tag> tags = new ArrayList<>();\n    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber)); /* <=== ANY */ \n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags);\n    workspacesClient.tagWorkspace(tagWorkspaceRequest);\n"
                  },
                  {
                    "sample" : "tags",
                    "lineNumber" : 32,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "\n    List<Tag> tags = new ArrayList<>();\n    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob)); /* <=== ANY */ \n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags);\n    workspacesClient.tagWorkspace(tagWorkspaceRequest);\n\n    System.out.println(\"Personal data saved successfully to workspace with ID: \" + workspaceId);"
                  },
                  {
                    "sample" : "tags",
                    "lineNumber" : 34,
                    "columnNumber" : 110,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags); /* <=== ANY */ \n    workspacesClient.tagWorkspace(tagWorkspaceRequest);\n\n    System.out.println(\"Personal data saved successfully to workspace with ID: \" + workspaceId);\n  }\n"
                  },
                  {
                    "sample" : "withResourceId(workspaceId)",
                    "lineNumber" : 34,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags); /* <=== com.amazonaws.services.workspaces.model.TagWorkspaceRequest.withResourceId */ \n    workspacesClient.tagWorkspace(tagWorkspaceRequest);\n\n    System.out.println(\"Personal data saved successfully to workspace with ID: \" + workspaceId);\n  }\n"
                  },
                  {
                    "sample" : "withTags(tags)",
                    "lineNumber" : 34,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags); /* <===  */ \n    workspacesClient.tagWorkspace(tagWorkspaceRequest);\n\n    System.out.println(\"Personal data saved successfully to workspace with ID: \" + workspaceId);\n  }\n"
                  },
                  {
                    "sample" : "tagWorkspaceRequest",
                    "lineNumber" : 34,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags); /* <=== com.amazonaws.services.workspaces.model.TagWorkspaceRequest */ \n    workspacesClient.tagWorkspace(tagWorkspaceRequest);\n\n    System.out.println(\"Personal data saved successfully to workspace with ID: \" + workspaceId);\n  }\n"
                  },
                  {
                    "sample" : "tagWorkspace(tagWorkspaceRequest)",
                    "lineNumber" : 35,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags);\n    workspacesClient.tagWorkspace(tagWorkspaceRequest); /* <=== com.amazonaws.services.workspaces.AmazonWorkspaces.tagWorkspace */ \n\n    System.out.println(\"Personal data saved successfully to workspace with ID: \" + workspaceId);\n  }\n\n}"
                  }
                ]
              },
              {
                "pathId" : "11524-11515-11514-11513-11526-11539-11552-11577-11568",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 29,
                    "columnNumber" : 55,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "\n    Workspace workspace = workspaces.get(0);\n    String workspaceId = workspace.getWorkspaceId();\n\n    List<Tag> tags = new ArrayList<>();\n    tags.add(new Tag().withKey(\"firstName\").withValue(firstName)); /* <=== java.lang.String */ \n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags);"
                  },
                  {
                    "sample" : "withKey(\"firstName\")",
                    "lineNumber" : 29,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "\n    Workspace workspace = workspaces.get(0);\n    String workspaceId = workspace.getWorkspaceId();\n\n    List<Tag> tags = new ArrayList<>();\n    tags.add(new Tag().withKey(\"firstName\").withValue(firstName)); /* <=== com.amazonaws.services.workspaces.model.Tag.withKey */ \n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags);"
                  },
                  {
                    "sample" : "withValue(firstName)",
                    "lineNumber" : 29,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "\n    Workspace workspace = workspaces.get(0);\n    String workspaceId = workspace.getWorkspaceId();\n\n    List<Tag> tags = new ArrayList<>();\n    tags.add(new Tag().withKey(\"firstName\").withValue(firstName)); /* <===  */ \n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags);"
                  },
                  {
                    "sample" : "tags",
                    "lineNumber" : 29,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "\n    Workspace workspace = workspaces.get(0);\n    String workspaceId = workspace.getWorkspaceId();\n\n    List<Tag> tags = new ArrayList<>();\n    tags.add(new Tag().withKey(\"firstName\").withValue(firstName)); /* <=== ANY */ \n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags);"
                  },
                  {
                    "sample" : "tags",
                    "lineNumber" : 30,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "    Workspace workspace = workspaces.get(0);\n    String workspaceId = workspace.getWorkspaceId();\n\n    List<Tag> tags = new ArrayList<>();\n    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName)); /* <=== ANY */ \n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags);\n    workspacesClient.tagWorkspace(tagWorkspaceRequest);"
                  },
                  {
                    "sample" : "tags",
                    "lineNumber" : 31,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "    String workspaceId = workspace.getWorkspaceId();\n\n    List<Tag> tags = new ArrayList<>();\n    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber)); /* <=== ANY */ \n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags);\n    workspacesClient.tagWorkspace(tagWorkspaceRequest);\n"
                  },
                  {
                    "sample" : "tags",
                    "lineNumber" : 32,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "\n    List<Tag> tags = new ArrayList<>();\n    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob)); /* <=== ANY */ \n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags);\n    workspacesClient.tagWorkspace(tagWorkspaceRequest);\n\n    System.out.println(\"Personal data saved successfully to workspace with ID: \" + workspaceId);"
                  },
                  {
                    "sample" : "tags",
                    "lineNumber" : 34,
                    "columnNumber" : 110,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags); /* <=== ANY */ \n    workspacesClient.tagWorkspace(tagWorkspaceRequest);\n\n    System.out.println(\"Personal data saved successfully to workspace with ID: \" + workspaceId);\n  }\n"
                  },
                  {
                    "sample" : "withResourceId(workspaceId)",
                    "lineNumber" : 34,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags); /* <=== com.amazonaws.services.workspaces.model.TagWorkspaceRequest.withResourceId */ \n    workspacesClient.tagWorkspace(tagWorkspaceRequest);\n\n    System.out.println(\"Personal data saved successfully to workspace with ID: \" + workspaceId);\n  }\n"
                  }
                ]
              },
              {
                "pathId" : "12755-12753",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 18,
                    "columnNumber" : 83,
                    "fileName" : "/app/code/directory.java",
                    "excerpt" : "  private static AmazonDirectoryService client = AmazonDirectoryServiceClientBuilder.standard().build();\n  \n  public static void AWSDirectoryFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    try {\n      // Create an entry in AWS Directory\n      DirectoryAttribute firstNameAttribute = new DirectoryAttribute(\"firstName\", firstName); /* <=== java.lang.String */ \n      DirectoryAttribute lastNameAttribute = new DirectoryAttribute(\"lastName\", lastName);\n      DirectoryAttribute phoneNumberAttribute = new DirectoryAttribute(\"phoneNumber\", phoneNumber);\n      DirectoryAttribute dobAttribute = new DirectoryAttribute(\"dob\", dob);\n      List<DirectoryAttribute> attributes = Arrays.asList(firstNameAttribute, lastNameAttribute, phoneNumberAttribute, dobAttribute);\n      AddUserToGroupRequest request = new AddUserToGroupRequest().withDirectoryId(\"your-directory-id\").withUserName(\"user-name\").withGroupName(\"group-name\").withAttributes(attributes);"
                  },
                  {
                    "sample" : "new DirectoryAttribute(\"firstName\", firstName)",
                    "lineNumber" : 18,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/directory.java",
                    "excerpt" : "  private static AmazonDirectoryService client = AmazonDirectoryServiceClientBuilder.standard().build();\n  \n  public static void AWSDirectoryFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    try {\n      // Create an entry in AWS Directory\n      DirectoryAttribute firstNameAttribute = new DirectoryAttribute(\"firstName\", firstName); /* <=== com.amazonaws.services.directory.model.DirectoryAttribute.<init> */ \n      DirectoryAttribute lastNameAttribute = new DirectoryAttribute(\"lastName\", lastName);\n      DirectoryAttribute phoneNumberAttribute = new DirectoryAttribute(\"phoneNumber\", phoneNumber);\n      DirectoryAttribute dobAttribute = new DirectoryAttribute(\"dob\", dob);\n      List<DirectoryAttribute> attributes = Arrays.asList(firstNameAttribute, lastNameAttribute, phoneNumberAttribute, dobAttribute);\n      AddUserToGroupRequest request = new AddUserToGroupRequest().withDirectoryId(\"your-directory-id\").withUserName(\"user-name\").withGroupName(\"group-name\").withAttributes(attributes);"
                  }
                ]
              },
              {
                "pathId" : "15472-15464-15451-15450-15449-15479",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 13,
                    "columnNumber" : 53,
                    "fileName" : "/app/code/support.java",
                    "excerpt" : "\n        CreateCaseRequest createCaseRequest = new CreateCaseRequest()\n            .withSubject(\"Personal Data\")\n            .withServiceCode(\"personal-data\")\n            .withCategoryCode(\"data-request\")\n            .withCommunicationBody(\"First Name: \" + firstName + \"\\nLast Name: \" + lastName +  /* <=== java.lang.String */ \n                                   \"\\nPhone Number: \" + phoneNumber + \"\\nDOB: \" + DOB);\n\n        supportClient.createCase(createCaseRequest);\n    }\n}"
                  },
                  {
                    "sample" : "\"First Name: \" + firstName + \"\\nLast Name: \" + lastName + \"\\nPhone Number: \" + phoneNumber + \"\\nDOB: \" + DOB",
                    "lineNumber" : 13,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/support.java",
                    "excerpt" : "\n        CreateCaseRequest createCaseRequest = new CreateCaseRequest()\n            .withSubject(\"Personal Data\")\n            .withServiceCode(\"personal-data\")\n            .withCategoryCode(\"data-request\")\n            .withCommunicationBody(\"First Name: \" + firstName + \"\\nLast Name: \" + lastName +  /* <===  */ \n                                   \"\\nPhone Number: \" + phoneNumber + \"\\nDOB: \" + DOB);\n\n        supportClient.createCase(createCaseRequest);\n    }\n}"
                  },
                  {
                    "sample" : "withCategoryCode(\"data-request\")",
                    "lineNumber" : 9,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/support.java",
                    "excerpt" : "\npublic class AWSSupportUtil {\n    public static void AWSSupportFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AWSSupport supportClient = AWSSupportClientBuilder.defaultClient();\n\n        CreateCaseRequest createCaseRequest = new CreateCaseRequest() /* <===  */ \n            .withSubject(\"Personal Data\")\n            .withServiceCode(\"personal-data\")\n            .withCategoryCode(\"data-request\")\n            .withCommunicationBody(\"First Name: \" + firstName + \"\\nLast Name: \" + lastName + \n                                   \"\\nPhone Number: \" + phoneNumber + \"\\nDOB: \" + DOB);"
                  },
                  {
                    "sample" : "withCommunicationBody(\"First Name: \" + firstName + \"\\nLast Name: \" + lastName + \"\\nPhone Number: \" + phoneNumber + \"\\nDOB: \" + DOB)",
                    "lineNumber" : 9,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/support.java",
                    "excerpt" : "\npublic class AWSSupportUtil {\n    public static void AWSSupportFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AWSSupport supportClient = AWSSupportClientBuilder.defaultClient();\n\n        CreateCaseRequest createCaseRequest = new CreateCaseRequest() /* <===  */ \n            .withSubject(\"Personal Data\")\n            .withServiceCode(\"personal-data\")\n            .withCategoryCode(\"data-request\")\n            .withCommunicationBody(\"First Name: \" + firstName + \"\\nLast Name: \" + lastName + \n                                   \"\\nPhone Number: \" + phoneNumber + \"\\nDOB: \" + DOB);"
                  },
                  {
                    "sample" : "createCaseRequest",
                    "lineNumber" : 9,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/support.java",
                    "excerpt" : "\npublic class AWSSupportUtil {\n    public static void AWSSupportFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AWSSupport supportClient = AWSSupportClientBuilder.defaultClient();\n\n        CreateCaseRequest createCaseRequest = new CreateCaseRequest() /* <=== com.amazonaws.services.support.model.CreateCaseRequest */ \n            .withSubject(\"Personal Data\")\n            .withServiceCode(\"personal-data\")\n            .withCategoryCode(\"data-request\")\n            .withCommunicationBody(\"First Name: \" + firstName + \"\\nLast Name: \" + lastName + \n                                   \"\\nPhone Number: \" + phoneNumber + \"\\nDOB: \" + DOB);"
                  },
                  {
                    "sample" : "createCase(createCaseRequest)",
                    "lineNumber" : 16,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/support.java",
                    "excerpt" : "            .withServiceCode(\"personal-data\")\n            .withCategoryCode(\"data-request\")\n            .withCommunicationBody(\"First Name: \" + firstName + \"\\nLast Name: \" + lastName + \n                                   \"\\nPhone Number: \" + phoneNumber + \"\\nDOB: \" + DOB);\n\n        supportClient.createCase(createCaseRequest); /* <=== com.amazonaws.services.support.AWSSupport.createCase */ \n    }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "14912-14908-14899",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 10,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/gamelift.java",
                    "excerpt" : "\n    public void AWSGameliftFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        AmazonGameLiftClientBuilder builder = AmazonGameLiftClientBuilder.standard();\n        PutRecordInput putRecordInput = new PutRecordInput()\n                .withData(String.format(\"First Name: %s, Last Name: %s, Phone Number: %s, DOB: %s\",\n                        firstName, lastName, phoneNumber, dob).getBytes()) /* <=== java.lang.String */ \n                .withStreamName(\"AWS-Gamelift-Stream\");\n        builder.build().putRecord(putRecordInput);\n    }\n}\n"
                  },
                  {
                    "sample" : "String.format(\"First Name: %s, Last Name: %s, Phone Number: %s, DOB: %s\", firstName, lastName, phoneNumber, dob)",
                    "lineNumber" : 9,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/gamelift.java",
                    "excerpt" : "public class AWSGameliftUtil {\n\n    public void AWSGameliftFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        AmazonGameLiftClientBuilder builder = AmazonGameLiftClientBuilder.standard();\n        PutRecordInput putRecordInput = new PutRecordInput()\n                .withData(String.format(\"First Name: %s, Last Name: %s, Phone Number: %s, DOB: %s\", /* <=== java.lang.String.format */ \n                        firstName, lastName, phoneNumber, dob).getBytes())\n                .withStreamName(\"AWS-Gamelift-Stream\");\n        builder.build().putRecord(putRecordInput);\n    }\n}"
                  },
                  {
                    "sample" : "withData(String.format(\"First Name: %s, Last Name: %s, Phone Number: %s, DOB: %s\", firstName, lastName, phoneNumber, dob).getBytes())",
                    "lineNumber" : 8,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/gamelift.java",
                    "excerpt" : "\npublic class AWSGameliftUtil {\n\n    public void AWSGameliftFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        AmazonGameLiftClientBuilder builder = AmazonGameLiftClientBuilder.standard();\n        PutRecordInput putRecordInput = new PutRecordInput() /* <=== com.amazonaws.services.gamelift.model.PutRecordInput.withData */ \n                .withData(String.format(\"First Name: %s, Last Name: %s, Phone Number: %s, DOB: %s\",\n                        firstName, lastName, phoneNumber, dob).getBytes())\n                .withStreamName(\"AWS-Gamelift-Stream\");\n        builder.build().putRecord(putRecordInput);\n    }"
                  }
                ]
              },
              {
                "pathId" : "11721-11749-11748-11739",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 12,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/mgn.java",
                    "excerpt" : "\n  public static void AWSMGNFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n    AmazonMGNClient mgnClient = AmazonMGNClient.builder().build();\n    \n    Map<String, String> personalData = new HashMap<>();\n    personalData.put(\"firstName\", firstName); /* <=== java.lang.String */ \n    personalData.put(\"lastName\", lastName);\n    personalData.put(\"phoneNumber\", phoneNumber);\n    personalData.put(\"DOB\", DOB);\n    \n    IndexDocumentRequest indexDocumentRequest = new IndexDocumentRequest()"
                  },
                  {
                    "sample" : "firstName",
                    "lineNumber" : 19,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/mgn.java",
                    "excerpt" : "    personalData.put(\"phoneNumber\", phoneNumber);\n    personalData.put(\"DOB\", DOB);\n    \n    IndexDocumentRequest indexDocumentRequest = new IndexDocumentRequest()\n        .withIndexName(\"personal-data\")\n        .withId(firstName + lastName) /* <=== java.lang.String */ \n        .withSource(personalData);\n    \n    mgnClient.indexDocument(indexDocumentRequest);\n  }\n}"
                  },
                  {
                    "sample" : "firstName + lastName",
                    "lineNumber" : 19,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/mgn.java",
                    "excerpt" : "    personalData.put(\"phoneNumber\", phoneNumber);\n    personalData.put(\"DOB\", DOB);\n    \n    IndexDocumentRequest indexDocumentRequest = new IndexDocumentRequest()\n        .withIndexName(\"personal-data\")\n        .withId(firstName + lastName) /* <===  */ \n        .withSource(personalData);\n    \n    mgnClient.indexDocument(indexDocumentRequest);\n  }\n}"
                  },
                  {
                    "sample" : "withIndexName(\"personal-data\")",
                    "lineNumber" : 17,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/mgn.java",
                    "excerpt" : "    personalData.put(\"firstName\", firstName);\n    personalData.put(\"lastName\", lastName);\n    personalData.put(\"phoneNumber\", phoneNumber);\n    personalData.put(\"DOB\", DOB);\n    \n    IndexDocumentRequest indexDocumentRequest = new IndexDocumentRequest() /* <=== com.amazonaws.services.mgn.model.IndexDocumentRequest.withIndexName */ \n        .withIndexName(\"personal-data\")\n        .withId(firstName + lastName)\n        .withSource(personalData);\n    \n    mgnClient.indexDocument(indexDocumentRequest);"
                  }
                ]
              },
              {
                "pathId" : "8823-8815",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 16,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/voiceid.java",
                    "excerpt" : "    }\n\n    public void processPersonalData(String firstName, String lastName, String phoneNumber) {\n        // Create a new profile in Voice ID\n        CreateProfileRequest createProfileRequest = new CreateProfileRequest()\n                .withFirstName(firstName) /* <=== java.lang.String */ \n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber);\n        CreateProfileResult createProfileResult = voiceIdClient.createProfile(createProfileRequest);\n        System.out.println(\"Profile created with ID: \" + createProfileResult.getProfileId());\n    }"
                  },
                  {
                    "sample" : "withFirstName(firstName)",
                    "lineNumber" : 15,
                    "columnNumber" : 53,
                    "fileName" : "/app/code/voiceid.java",
                    "excerpt" : "        this.voiceIdClient = voiceIdClient;\n    }\n\n    public void processPersonalData(String firstName, String lastName, String phoneNumber) {\n        // Create a new profile in Voice ID\n        CreateProfileRequest createProfileRequest = new CreateProfileRequest() /* <=== com.amazonaws.services.voiceid.model.CreateProfileRequest.withFirstName */ \n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber);\n        CreateProfileResult createProfileResult = voiceIdClient.createProfile(createProfileRequest);\n        System.out.println(\"Profile created with ID: \" + createProfileResult.getProfileId());"
                  }
                ]
              },
              {
                "pathId" : "11524-11515",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 29,
                    "columnNumber" : 55,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "\n    Workspace workspace = workspaces.get(0);\n    String workspaceId = workspace.getWorkspaceId();\n\n    List<Tag> tags = new ArrayList<>();\n    tags.add(new Tag().withKey(\"firstName\").withValue(firstName)); /* <=== java.lang.String */ \n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags);"
                  },
                  {
                    "sample" : "withKey(\"firstName\")",
                    "lineNumber" : 29,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "\n    Workspace workspace = workspaces.get(0);\n    String workspaceId = workspace.getWorkspaceId();\n\n    List<Tag> tags = new ArrayList<>();\n    tags.add(new Tag().withKey(\"firstName\").withValue(firstName)); /* <=== com.amazonaws.services.workspaces.model.Tag.withKey */ \n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags);"
                  }
                ]
              },
              {
                "pathId" : "15711-15703",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 8,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/workspacesweb.java",
                    "excerpt" : "\npublic class AWSWorkspaceswebUtil {\n    public static void AWSWorkspaceswebFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AWSWorkspacesWeb workspacesWebClient = AWSWorkspacesWebClientBuilder.standard().build();\n        CreateUserRequest request = new CreateUserRequest()\n                .withFirstName(firstName) /* <=== java.lang.String */ \n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber)\n                .withBirthDate(DOB);\n        workspacesWebClient.createUser(request);\n    }"
                  },
                  {
                    "sample" : "withFirstName(firstName)",
                    "lineNumber" : 7,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/workspacesweb.java",
                    "excerpt" : "import com.amazonaws.services.workspacesweb.model.CreateUserRequest;\n\npublic class AWSWorkspaceswebUtil {\n    public static void AWSWorkspaceswebFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AWSWorkspacesWeb workspacesWebClient = AWSWorkspacesWebClientBuilder.standard().build();\n        CreateUserRequest request = new CreateUserRequest() /* <=== com.amazonaws.services.workspacesweb.model.CreateUserRequest.withFirstName */ \n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber)\n                .withBirthDate(DOB);\n        workspacesWebClient.createUser(request);"
                  }
                ]
              },
              {
                "pathId" : "14693-14688-14679-14678-14677-14701",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 25,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        String dataSetId = dataExchangeClient.createDataSet(createDataSetRequest).getId();\n\n        // Create a revision for the data set\n        CreateRevisionRequest createRevisionRequest = new CreateRevisionRequest()\n                .withDataSetId(dataSetId)\n                .withComment(\"First revision for \" + firstName + \" \" + lastName + \" data\"); /* <=== java.lang.String */ \n        String revisionArn = dataExchangeClient.createRevision(createRevisionRequest).getArn();\n\n        // Prepare the asset\n        List<DataSetEntry> entries = new ArrayList<>();\n        entries.add(new DataSetEntry().withEntryName(\"firstName\").withContent(firstName));"
                  },
                  {
                    "sample" : "\"First revision for \" + firstName + \" \" + lastName + \" data\"",
                    "lineNumber" : 25,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        String dataSetId = dataExchangeClient.createDataSet(createDataSetRequest).getId();\n\n        // Create a revision for the data set\n        CreateRevisionRequest createRevisionRequest = new CreateRevisionRequest()\n                .withDataSetId(dataSetId)\n                .withComment(\"First revision for \" + firstName + \" \" + lastName + \" data\"); /* <===  */ \n        String revisionArn = dataExchangeClient.createRevision(createRevisionRequest).getArn();\n\n        // Prepare the asset\n        List<DataSetEntry> entries = new ArrayList<>();\n        entries.add(new DataSetEntry().withEntryName(\"firstName\").withContent(firstName));"
                  },
                  {
                    "sample" : "withDataSetId(dataSetId)",
                    "lineNumber" : 23,
                    "columnNumber" : 55,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "                .withName(dataSetName)\n                .withDescription(\"Personal data of \" + firstName + \" \" + lastName);\n        String dataSetId = dataExchangeClient.createDataSet(createDataSetRequest).getId();\n\n        // Create a revision for the data set\n        CreateRevisionRequest createRevisionRequest = new CreateRevisionRequest() /* <=== com.amazonaws.services.dataexchange.model.CreateRevisionRequest.withDataSetId */ \n                .withDataSetId(dataSetId)\n                .withComment(\"First revision for \" + firstName + \" \" + lastName + \" data\");\n        String revisionArn = dataExchangeClient.createRevision(createRevisionRequest).getArn();\n\n        // Prepare the asset"
                  },
                  {
                    "sample" : "withComment(\"First revision for \" + firstName + \" \" + lastName + \" data\")",
                    "lineNumber" : 23,
                    "columnNumber" : 55,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "                .withName(dataSetName)\n                .withDescription(\"Personal data of \" + firstName + \" \" + lastName);\n        String dataSetId = dataExchangeClient.createDataSet(createDataSetRequest).getId();\n\n        // Create a revision for the data set\n        CreateRevisionRequest createRevisionRequest = new CreateRevisionRequest() /* <===  */ \n                .withDataSetId(dataSetId)\n                .withComment(\"First revision for \" + firstName + \" \" + lastName + \" data\");\n        String revisionArn = dataExchangeClient.createRevision(createRevisionRequest).getArn();\n\n        // Prepare the asset"
                  },
                  {
                    "sample" : "createRevisionRequest",
                    "lineNumber" : 23,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "                .withName(dataSetName)\n                .withDescription(\"Personal data of \" + firstName + \" \" + lastName);\n        String dataSetId = dataExchangeClient.createDataSet(createDataSetRequest).getId();\n\n        // Create a revision for the data set\n        CreateRevisionRequest createRevisionRequest = new CreateRevisionRequest() /* <=== com.amazonaws.services.dataexchange.model.CreateRevisionRequest */ \n                .withDataSetId(dataSetId)\n                .withComment(\"First revision for \" + firstName + \" \" + lastName + \" data\");\n        String revisionArn = dataExchangeClient.createRevision(createRevisionRequest).getArn();\n\n        // Prepare the asset"
                  },
                  {
                    "sample" : "createRevision(createRevisionRequest)",
                    "lineNumber" : 26,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "\n        // Create a revision for the data set\n        CreateRevisionRequest createRevisionRequest = new CreateRevisionRequest()\n                .withDataSetId(dataSetId)\n                .withComment(\"First revision for \" + firstName + \" \" + lastName + \" data\");\n        String revisionArn = dataExchangeClient.createRevision(createRevisionRequest).getArn(); /* <=== com.amazonaws.services.dataexchange.AmazonDataExchange.createRevision */ \n\n        // Prepare the asset\n        List<DataSetEntry> entries = new ArrayList<>();\n        entries.add(new DataSetEntry().withEntryName(\"firstName\").withContent(firstName));\n        entries.add(new DataSetEntry().withEntryName(\"lastName\").withContent(lastName));"
                  }
                ]
              },
              {
                "pathId" : "3361-3357-3348",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 12,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/deviceFarm.java",
                    "excerpt" : "    public static void AWSDevicefarmFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        com.amazonaws.services.devicefarm.AWSDeviceFarm client = AWSDeviceFarmClientBuilder.defaultClient();\n\n        CreateUploadRequest createUploadRequest = new CreateUploadRequest()\n            .withProjectArn(\"<ProjectARN>\")\n            .withName(firstName + \"-\" + lastName + \"-\" + phoneNumber) /* <=== java.lang.String */ \n            .withType(UploadType.ANDROID_APP)\n            .withContentType(\"application/octet-stream\");\n\n        CreateUploadResult createUploadResult = client.createUpload(createUploadRequest);\n        String uploadUrl = createUploadResult.getUpload().getUrl();"
                  },
                  {
                    "sample" : "firstName + \"-\" + lastName + \"-\" + phoneNumber",
                    "lineNumber" : 12,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/deviceFarm.java",
                    "excerpt" : "    public static void AWSDevicefarmFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        com.amazonaws.services.devicefarm.AWSDeviceFarm client = AWSDeviceFarmClientBuilder.defaultClient();\n\n        CreateUploadRequest createUploadRequest = new CreateUploadRequest()\n            .withProjectArn(\"<ProjectARN>\")\n            .withName(firstName + \"-\" + lastName + \"-\" + phoneNumber) /* <===  */ \n            .withType(UploadType.ANDROID_APP)\n            .withContentType(\"application/octet-stream\");\n\n        CreateUploadResult createUploadResult = client.createUpload(createUploadRequest);\n        String uploadUrl = createUploadResult.getUpload().getUrl();"
                  },
                  {
                    "sample" : "withProjectArn(\"<ProjectARN>\")",
                    "lineNumber" : 10,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/deviceFarm.java",
                    "excerpt" : "\npublic class AWSDevicefarmUtil {\n    public static void AWSDevicefarmFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        com.amazonaws.services.devicefarm.AWSDeviceFarm client = AWSDeviceFarmClientBuilder.defaultClient();\n\n        CreateUploadRequest createUploadRequest = new CreateUploadRequest() /* <=== com.amazonaws.services.devicefarm.model.CreateUploadRequest.withProjectArn */ \n            .withProjectArn(\"<ProjectARN>\")\n            .withName(firstName + \"-\" + lastName + \"-\" + phoneNumber)\n            .withType(UploadType.ANDROID_APP)\n            .withContentType(\"application/octet-stream\");\n"
                  }
                ]
              },
              {
                "pathId" : "15711-15703-15702-15701-15700-15699-15715",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 8,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/workspacesweb.java",
                    "excerpt" : "\npublic class AWSWorkspaceswebUtil {\n    public static void AWSWorkspaceswebFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AWSWorkspacesWeb workspacesWebClient = AWSWorkspacesWebClientBuilder.standard().build();\n        CreateUserRequest request = new CreateUserRequest()\n                .withFirstName(firstName) /* <=== java.lang.String */ \n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber)\n                .withBirthDate(DOB);\n        workspacesWebClient.createUser(request);\n    }"
                  },
                  {
                    "sample" : "withFirstName(firstName)",
                    "lineNumber" : 7,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/workspacesweb.java",
                    "excerpt" : "import com.amazonaws.services.workspacesweb.model.CreateUserRequest;\n\npublic class AWSWorkspaceswebUtil {\n    public static void AWSWorkspaceswebFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AWSWorkspacesWeb workspacesWebClient = AWSWorkspacesWebClientBuilder.standard().build();\n        CreateUserRequest request = new CreateUserRequest() /* <=== com.amazonaws.services.workspacesweb.model.CreateUserRequest.withFirstName */ \n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber)\n                .withBirthDate(DOB);\n        workspacesWebClient.createUser(request);"
                  },
                  {
                    "sample" : "withLastName(lastName)",
                    "lineNumber" : 7,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/workspacesweb.java",
                    "excerpt" : "import com.amazonaws.services.workspacesweb.model.CreateUserRequest;\n\npublic class AWSWorkspaceswebUtil {\n    public static void AWSWorkspaceswebFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AWSWorkspacesWeb workspacesWebClient = AWSWorkspacesWebClientBuilder.standard().build();\n        CreateUserRequest request = new CreateUserRequest() /* <===  */ \n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber)\n                .withBirthDate(DOB);\n        workspacesWebClient.createUser(request);"
                  },
                  {
                    "sample" : "withPhoneNumber(phoneNumber)",
                    "lineNumber" : 7,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/workspacesweb.java",
                    "excerpt" : "import com.amazonaws.services.workspacesweb.model.CreateUserRequest;\n\npublic class AWSWorkspaceswebUtil {\n    public static void AWSWorkspaceswebFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AWSWorkspacesWeb workspacesWebClient = AWSWorkspacesWebClientBuilder.standard().build();\n        CreateUserRequest request = new CreateUserRequest() /* <===  */ \n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber)\n                .withBirthDate(DOB);\n        workspacesWebClient.createUser(request);"
                  },
                  {
                    "sample" : "withBirthDate(DOB)",
                    "lineNumber" : 7,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/workspacesweb.java",
                    "excerpt" : "import com.amazonaws.services.workspacesweb.model.CreateUserRequest;\n\npublic class AWSWorkspaceswebUtil {\n    public static void AWSWorkspaceswebFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AWSWorkspacesWeb workspacesWebClient = AWSWorkspacesWebClientBuilder.standard().build();\n        CreateUserRequest request = new CreateUserRequest() /* <===  */ \n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber)\n                .withBirthDate(DOB);\n        workspacesWebClient.createUser(request);"
                  },
                  {
                    "sample" : "request",
                    "lineNumber" : 7,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/workspacesweb.java",
                    "excerpt" : "import com.amazonaws.services.workspacesweb.model.CreateUserRequest;\n\npublic class AWSWorkspaceswebUtil {\n    public static void AWSWorkspaceswebFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AWSWorkspacesWeb workspacesWebClient = AWSWorkspacesWebClientBuilder.standard().build();\n        CreateUserRequest request = new CreateUserRequest() /* <=== com.amazonaws.services.workspacesweb.model.CreateUserRequest */ \n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber)\n                .withBirthDate(DOB);\n        workspacesWebClient.createUser(request);"
                  },
                  {
                    "sample" : "createUser(request)",
                    "lineNumber" : 12,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/workspacesweb.java",
                    "excerpt" : "        CreateUserRequest request = new CreateUserRequest()\n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber)\n                .withBirthDate(DOB);\n        workspacesWebClient.createUser(request); /* <=== com.amazonaws.services.workspacesweb.AWSWorkspacesWeb.createUser */ \n    }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "6436-6430-6429-6416",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 13,
                    "columnNumber" : 84,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : "\n    public static void AWSlexmodelsv2FirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AmazonLexModelBuilding client = AmazonLexModelBuildingClientBuilder.standard().build();\n        SlotTypeMetadata metadata = new SlotTypeMetadata().withName(\"PersonalDataSlot\").withDescription(\"Personal data slot\");\n        SlotTypeProperties properties = new SlotTypeProperties().withEnumerationValues(\n                new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB) /* <=== java.lang.String */ \n        );\n        PutSlotTypeRequest request = new PutSlotTypeRequest().withName(\"PersonalDataSlot\").withChecksum(null)\n                .withDescription(\"Personal data slot\").withEnumerationValues(properties.getEnumerationValues())\n                .withSlotTypeMetadata(metadata);\n        client.putSlotType(request);"
                  },
                  {
                    "sample" : "firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB",
                    "lineNumber" : 13,
                    "columnNumber" : 84,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : "\n    public static void AWSlexmodelsv2FirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AmazonLexModelBuilding client = AmazonLexModelBuildingClientBuilder.standard().build();\n        SlotTypeMetadata metadata = new SlotTypeMetadata().withName(\"PersonalDataSlot\").withDescription(\"Personal data slot\");\n        SlotTypeProperties properties = new SlotTypeProperties().withEnumerationValues(\n                new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB) /* <===  */ \n        );\n        PutSlotTypeRequest request = new PutSlotTypeRequest().withName(\"PersonalDataSlot\").withChecksum(null)\n                .withDescription(\"Personal data slot\").withEnumerationValues(properties.getEnumerationValues())\n                .withSlotTypeMetadata(metadata);\n        client.putSlotType(request);"
                  },
                  {
                    "sample" : "$obj1",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "withEnumerationValues(new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB))",
                    "lineNumber" : 12,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : "public class AWSLexModelsV2Util {\n\n    public static void AWSlexmodelsv2FirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AmazonLexModelBuilding client = AmazonLexModelBuildingClientBuilder.standard().build();\n        SlotTypeMetadata metadata = new SlotTypeMetadata().withName(\"PersonalDataSlot\").withDescription(\"Personal data slot\");\n        SlotTypeProperties properties = new SlotTypeProperties().withEnumerationValues( /* <=== com.amazonaws.services.lexmodelbuilding.model.SlotTypeProperties.withEnumerationValues */ \n                new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB)\n        );\n        PutSlotTypeRequest request = new PutSlotTypeRequest().withName(\"PersonalDataSlot\").withChecksum(null)\n                .withDescription(\"Personal data slot\").withEnumerationValues(properties.getEnumerationValues())\n                .withSlotTypeMetadata(metadata);"
                  }
                ]
              },
              {
                "pathId" : "3258-3259-3257-3261-3265-3269-3285-3276-3275-3274-3289",
                "path" : [
                  {
                    "sample" : "\"firstName\"",
                    "lineNumber" : 15,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "\n    private static AWSIoTRoboRunner iotRoboRunnerClient = AWSIoTRoboRunnerClientBuilder.defaultClient();\n\n    public static void AWSIoTRoboRunnerFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        Map<String, Object> personalData = new HashMap<>();\n        personalData.put(\"firstName\", firstName); /* <===  */ \n        personalData.put(\"lastName\", lastName);\n        personalData.put(\"phoneNumber\", phoneNumber);\n        personalData.put(\"dob\", dob);\n\n        PutThingShadowRequest request = new PutThingShadowRequest()"
                  },
                  {
                    "sample" : "firstName",
                    "lineNumber" : 15,
                    "columnNumber" : 39,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "\n    private static AWSIoTRoboRunner iotRoboRunnerClient = AWSIoTRoboRunnerClientBuilder.defaultClient();\n\n    public static void AWSIoTRoboRunnerFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        Map<String, Object> personalData = new HashMap<>();\n        personalData.put(\"firstName\", firstName); /* <=== java.lang.String */ \n        personalData.put(\"lastName\", lastName);\n        personalData.put(\"phoneNumber\", phoneNumber);\n        personalData.put(\"dob\", dob);\n\n        PutThingShadowRequest request = new PutThingShadowRequest()"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 15,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "\n    private static AWSIoTRoboRunner iotRoboRunnerClient = AWSIoTRoboRunnerClientBuilder.defaultClient();\n\n    public static void AWSIoTRoboRunnerFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        Map<String, Object> personalData = new HashMap<>();\n        personalData.put(\"firstName\", firstName); /* <=== java.util.Map */ \n        personalData.put(\"lastName\", lastName);\n        personalData.put(\"phoneNumber\", phoneNumber);\n        personalData.put(\"dob\", dob);\n\n        PutThingShadowRequest request = new PutThingShadowRequest()"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 16,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "    private static AWSIoTRoboRunner iotRoboRunnerClient = AWSIoTRoboRunnerClientBuilder.defaultClient();\n\n    public static void AWSIoTRoboRunnerFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        Map<String, Object> personalData = new HashMap<>();\n        personalData.put(\"firstName\", firstName);\n        personalData.put(\"lastName\", lastName); /* <=== java.util.Map */ \n        personalData.put(\"phoneNumber\", phoneNumber);\n        personalData.put(\"dob\", dob);\n\n        PutThingShadowRequest request = new PutThingShadowRequest()\n                .withThingName(\"PersonalData\")"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 17,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "\n    public static void AWSIoTRoboRunnerFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        Map<String, Object> personalData = new HashMap<>();\n        personalData.put(\"firstName\", firstName);\n        personalData.put(\"lastName\", lastName);\n        personalData.put(\"phoneNumber\", phoneNumber); /* <=== java.util.Map */ \n        personalData.put(\"dob\", dob);\n\n        PutThingShadowRequest request = new PutThingShadowRequest()\n                .withThingName(\"PersonalData\")\n                .withPayload(personalData);"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 18,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "    public static void AWSIoTRoboRunnerFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        Map<String, Object> personalData = new HashMap<>();\n        personalData.put(\"firstName\", firstName);\n        personalData.put(\"lastName\", lastName);\n        personalData.put(\"phoneNumber\", phoneNumber);\n        personalData.put(\"dob\", dob); /* <=== java.util.Map */ \n\n        PutThingShadowRequest request = new PutThingShadowRequest()\n                .withThingName(\"PersonalData\")\n                .withPayload(personalData);\n"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 22,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "        personalData.put(\"phoneNumber\", phoneNumber);\n        personalData.put(\"dob\", dob);\n\n        PutThingShadowRequest request = new PutThingShadowRequest()\n                .withThingName(\"PersonalData\")\n                .withPayload(personalData); /* <=== java.util.Map */ \n\n        PutThingShadowResult result = iotRoboRunnerClient.putThingShadow(request);\n        System.out.println(\"Data sent to AWS IoTRoboRunner successfully\");\n    }\n}"
                  },
                  {
                    "sample" : "withThingName(\"PersonalData\")",
                    "lineNumber" : 20,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "        personalData.put(\"firstName\", firstName);\n        personalData.put(\"lastName\", lastName);\n        personalData.put(\"phoneNumber\", phoneNumber);\n        personalData.put(\"dob\", dob);\n\n        PutThingShadowRequest request = new PutThingShadowRequest() /* <=== com.amazonaws.services.iotroborunner.model.PutThingShadowRequest.withThingName */ \n                .withThingName(\"PersonalData\")\n                .withPayload(personalData);\n\n        PutThingShadowResult result = iotRoboRunnerClient.putThingShadow(request);\n        System.out.println(\"Data sent to AWS IoTRoboRunner successfully\");"
                  },
                  {
                    "sample" : "withPayload(personalData)",
                    "lineNumber" : 20,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "        personalData.put(\"firstName\", firstName);\n        personalData.put(\"lastName\", lastName);\n        personalData.put(\"phoneNumber\", phoneNumber);\n        personalData.put(\"dob\", dob);\n\n        PutThingShadowRequest request = new PutThingShadowRequest() /* <===  */ \n                .withThingName(\"PersonalData\")\n                .withPayload(personalData);\n\n        PutThingShadowResult result = iotRoboRunnerClient.putThingShadow(request);\n        System.out.println(\"Data sent to AWS IoTRoboRunner successfully\");"
                  },
                  {
                    "sample" : "request",
                    "lineNumber" : 20,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "        personalData.put(\"firstName\", firstName);\n        personalData.put(\"lastName\", lastName);\n        personalData.put(\"phoneNumber\", phoneNumber);\n        personalData.put(\"dob\", dob);\n\n        PutThingShadowRequest request = new PutThingShadowRequest() /* <=== com.amazonaws.services.iotroborunner.model.PutThingShadowRequest */ \n                .withThingName(\"PersonalData\")\n                .withPayload(personalData);\n\n        PutThingShadowResult result = iotRoboRunnerClient.putThingShadow(request);\n        System.out.println(\"Data sent to AWS IoTRoboRunner successfully\");"
                  },
                  {
                    "sample" : "putThingShadow(request)",
                    "lineNumber" : 24,
                    "columnNumber" : 39,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "\n        PutThingShadowRequest request = new PutThingShadowRequest()\n                .withThingName(\"PersonalData\")\n                .withPayload(personalData);\n\n        PutThingShadowResult result = iotRoboRunnerClient.putThingShadow(request); /* <=== com.amazonaws.services.iotroborunner.AWSIoTRoboRunner.putThingShadow */ \n        System.out.println(\"Data sent to AWS IoTRoboRunner successfully\");\n    }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "14830-14829-14820",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 15,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/route53.java",
                    "excerpt" : "  public static void processData(String firstName, String lastName, String phoneNumber, String dob) {\n    try {\n      // Create a new hosted zone in Route 53\n      CreateHostedZoneRequest createHostedZoneRequest = new CreateHostedZoneRequest()\n        .withName(\"example.com\")\n        .withCallerReference(firstName + lastName); /* <=== java.lang.String */ \n      CreateHostedZoneResult createHostedZoneResult = client.createHostedZone(createHostedZoneRequest);\n      \n      // Use the hosted zone to process personal data\n      // ...\n    } catch (Exception e) {"
                  },
                  {
                    "sample" : "firstName + lastName",
                    "lineNumber" : 15,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/route53.java",
                    "excerpt" : "  public static void processData(String firstName, String lastName, String phoneNumber, String dob) {\n    try {\n      // Create a new hosted zone in Route 53\n      CreateHostedZoneRequest createHostedZoneRequest = new CreateHostedZoneRequest()\n        .withName(\"example.com\")\n        .withCallerReference(firstName + lastName); /* <===  */ \n      CreateHostedZoneResult createHostedZoneResult = client.createHostedZone(createHostedZoneRequest);\n      \n      // Use the hosted zone to process personal data\n      // ...\n    } catch (Exception e) {"
                  },
                  {
                    "sample" : "withName(\"example.com\")",
                    "lineNumber" : 13,
                    "columnNumber" : 57,
                    "fileName" : "/app/code/route53.java",
                    "excerpt" : "  private static AmazonRoute53 client = AmazonRoute53ClientBuilder.defaultClient();\n  \n  public static void processData(String firstName, String lastName, String phoneNumber, String dob) {\n    try {\n      // Create a new hosted zone in Route 53\n      CreateHostedZoneRequest createHostedZoneRequest = new CreateHostedZoneRequest() /* <=== com.amazonaws.services.route53.model.CreateHostedZoneRequest.withName */ \n        .withName(\"example.com\")\n        .withCallerReference(firstName + lastName);\n      CreateHostedZoneResult createHostedZoneResult = client.createHostedZone(createHostedZoneRequest);\n      \n      // Use the hosted zone to process personal data"
                  }
                ]
              },
              {
                "pathId" : "8612-8607-8584-8583-8582-8581-8580-8629",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 23,
                    "columnNumber" : 187,
                    "fileName" : "/app/code/databaseMigration.java",
                    "excerpt" : "            .withReplicationTaskIdentifier(firstName + \"_\" + lastName + \"_Task\")\n            .withSourceEndpointArn(\"arn:aws:dms:us-west-2:012345678901:endpoint:ASXWXYZWEXAMPLE\")\n            .withTargetEndpointArn(\"arn:aws:dms:us-west-2:012345678901:endpoint:AKXWXYZWEXAMPLE\")\n            .withReplicationInstanceArn(\"arn:aws:dms:us-west-2:012345678901:rep:6UTDJGB043EXAMPLE\")\n            .withMigrationType(\"full-load\")\n            .withTableMappings(\"{\\\"rules\\\":[{\\\"rule-type\\\":\\\"selection\\\",\\\"rule-id\\\":\\\"1\\\",\\\"rule-name\\\":\\\"1\\\",\\\"object-locator\\\":{\\\"schema-name\\\":\\\"personal_data\\\",\\\"table-name\\\":\\\"\" + firstName + \"_\" + lastName + \"\\\"},\\\"rule-action\\\":\\\"include\\\",\\\"filters\\\":{}}]}\") /* <=== java.lang.String */ \n            .withReplicationTaskSettings(\"{\\\"TargetMetadata\\\":{\\\"TargetSchema\\\":\\\"\\\",\\\"SupportLobs\\\":true,\\\"FullLobMode\\\":false,\\\"LobChunkSize\\\":64,\\\"LimitedSizeLobMode\\\":true,\\\"LobMaxSize\\\":32},\\\"FullLoadSettings\\\":{\\\"FullLoadEnabled\\\":true,\\\"ApplyChangesEnabled\\\":false,\\\"TargetTablePrepareOptions\\\":\\\"DROP_AND_CREATE\\\",\\\"CreatePkAfterFullLoad\\\":false,\\\"StopTaskCachedChangesApplied\\\":false,\\\"StopTaskCachedChangesNotApplied\\\":false,\\\"ResumeEnabled\\\":false,\\\"RangeLinearityFactor\\\":null},\\\"Logging\\\":{\\\"EnableLogging\\\":false}}\")\n            .withResourceAttributeList(new ResourceAttribute().withType(\"PersonalData\")\n                    .withValue(personalData.toString()));\n\n    client.createReplicationTask(createReplicationTaskRequest);"
                  },
                  {
                    "sample" : "\"{\\\"rules\\\":[{\\\"rule-type\\\":\\\"selection\\\",\\\"rule-id\\\":\\\"1\\\",\\\"rule-name\\\":\\\"1\\\",\\\"object-locator\\\":{\\\"schema-name\\\":\\\"personal_data\\\",\\\"table-name\\\":\\\"\" + firstName + \"_\" + lastName + \"\\\"},\\\"rule-action\\\":\\\"include\\\",\\\"filters\\\":{}}]}\"",
                    "lineNumber" : 23,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/databaseMigration.java",
                    "excerpt" : "            .withReplicationTaskIdentifier(firstName + \"_\" + lastName + \"_Task\")\n            .withSourceEndpointArn(\"arn:aws:dms:us-west-2:012345678901:endpoint:ASXWXYZWEXAMPLE\")\n            .withTargetEndpointArn(\"arn:aws:dms:us-west-2:012345678901:endpoint:AKXWXYZWEXAMPLE\")\n            .withReplicationInstanceArn(\"arn:aws:dms:us-west-2:012345678901:rep:6UTDJGB043EXAMPLE\")\n            .withMigrationType(\"full-load\")\n            .withTableMappings(\"{\\\"rules\\\":[{\\\"rule-type\\\":\\\"selection\\\",\\\"rule-id\\\":\\\"1\\\",\\\"rule-name\\\":\\\"1\\\",\\\"object-locator\\\":{\\\"schema-name\\\":\\\"personal_data\\\",\\\"table-name\\\":\\\"\" + firstName + \"_\" + lastName + \"\\\"},\\\"rule-action\\\":\\\"include\\\",\\\"filters\\\":{}}]}\") /* <===  */ \n            .withReplicationTaskSettings(\"{\\\"TargetMetadata\\\":{\\\"TargetSchema\\\":\\\"\\\",\\\"SupportLobs\\\":true,\\\"FullLobMode\\\":false,\\\"LobChunkSize\\\":64,\\\"LimitedSizeLobMode\\\":true,\\\"LobMaxSize\\\":32},\\\"FullLoadSettings\\\":{\\\"FullLoadEnabled\\\":true,\\\"ApplyChangesEnabled\\\":false,\\\"TargetTablePrepareOptions\\\":\\\"DROP_AND_CREATE\\\",\\\"CreatePkAfterFullLoad\\\":false,\\\"StopTaskCachedChangesApplied\\\":false,\\\"StopTaskCachedChangesNotApplied\\\":false,\\\"ResumeEnabled\\\":false,\\\"RangeLinearityFactor\\\":null},\\\"Logging\\\":{\\\"EnableLogging\\\":false}}\")\n            .withResourceAttributeList(new ResourceAttribute().withType(\"PersonalData\")\n                    .withValue(personalData.toString()));\n\n    client.createReplicationTask(createReplicationTaskRequest);"
                  },
                  {
                    "sample" : "withMigrationType(\"full-load\")",
                    "lineNumber" : 17,
                    "columnNumber" : 65,
                    "fileName" : "/app/code/databaseMigration.java",
                    "excerpt" : "}\n\npublic void AWSDatabaseMigrationServiceProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\n    CreateReplicationTaskRequest createReplicationTaskRequest = new CreateReplicationTaskRequest() /* <===  */ \n            .withReplicationTaskIdentifier(firstName + \"_\" + lastName + \"_Task\")\n            .withSourceEndpointArn(\"arn:aws:dms:us-west-2:012345678901:endpoint:ASXWXYZWEXAMPLE\")\n            .withTargetEndpointArn(\"arn:aws:dms:us-west-2:012345678901:endpoint:AKXWXYZWEXAMPLE\")\n            .withReplicationInstanceArn(\"arn:aws:dms:us-west-2:012345678901:rep:6UTDJGB043EXAMPLE\")\n            .withMigrationType(\"full-load\")"
                  },
                  {
                    "sample" : "withTableMappings(\"{\\\"rules\\\":[{\\\"rule-type\\\":\\\"selection\\\",\\\"rule-id\\\":\\\"1\\\",\\\"rule-name\\\":\\\"1\\\",\\\"object-locator\\\":{\\\"schema-name\\\":\\\"personal_data\\\",\\\"table-name\\\":\\\"\" + firstName + \"_\" + lastName + \"\\\"},\\\"rule-action\\\":\\\"include\\\",\\\"filters\\\":{}}]}\")",
                    "lineNumber" : 17,
                    "columnNumber" : 65,
                    "fileName" : "/app/code/databaseMigration.java",
                    "excerpt" : "}\n\npublic void AWSDatabaseMigrationServiceProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\n    CreateReplicationTaskRequest createReplicationTaskRequest = new CreateReplicationTaskRequest() /* <===  */ \n            .withReplicationTaskIdentifier(firstName + \"_\" + lastName + \"_Task\")\n            .withSourceEndpointArn(\"arn:aws:dms:us-west-2:012345678901:endpoint:ASXWXYZWEXAMPLE\")\n            .withTargetEndpointArn(\"arn:aws:dms:us-west-2:012345678901:endpoint:AKXWXYZWEXAMPLE\")\n            .withReplicationInstanceArn(\"arn:aws:dms:us-west-2:012345678901:rep:6UTDJGB043EXAMPLE\")\n            .withMigrationType(\"full-load\")"
                  },
                  {
                    "sample" : "withReplicationTaskSettings(\"{\\\"TargetMetadata\\\":{\\\"TargetSchema\\\":\\\"\\\",\\\"SupportLobs\\\":true,\\\"FullLobMode\\\":false,\\\"LobChunkSize\\\":64,\\\"LimitedSizeLobMode\\\":true,\\\"LobMaxSize\\\":32},\\\"FullLoadSettings\\\":{\\\"FullLoadEnabled\\\":true,\\\"ApplyChangesEnabled\\\":false,\\\"TargetTablePrepareOptions\\\":\\\"DROP_AND_CREATE\\\",\\\"CreatePkAfterFullLoad\\\":false,\\\"StopTaskCachedChangesApplied\\\":false,\\\"StopTaskCachedChangesNotApplied\\\":false,\\\"ResumeEnabled\\\":false,\\\"RangeLinearityFactor\\\":null},\\\"Logging\\\":{\\\"EnableLogging\\\":false}}\")",
                    "lineNumber" : 17,
                    "columnNumber" : 65,
                    "fileName" : "/app/code/databaseMigration.java",
                    "excerpt" : "}\n\npublic void AWSDatabaseMigrationServiceProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\n    CreateReplicationTaskRequest createReplicationTaskRequest = new CreateReplicationTaskRequest() /* <===  */ \n            .withReplicationTaskIdentifier(firstName + \"_\" + lastName + \"_Task\")\n            .withSourceEndpointArn(\"arn:aws:dms:us-west-2:012345678901:endpoint:ASXWXYZWEXAMPLE\")\n            .withTargetEndpointArn(\"arn:aws:dms:us-west-2:012345678901:endpoint:AKXWXYZWEXAMPLE\")\n            .withReplicationInstanceArn(\"arn:aws:dms:us-west-2:012345678901:rep:6UTDJGB043EXAMPLE\")\n            .withMigrationType(\"full-load\")"
                  },
                  {
                    "sample" : "withResourceAttributeList(new ResourceAttribute().withType(\"PersonalData\").withValue(personalData.toString()))",
                    "lineNumber" : 17,
                    "columnNumber" : 65,
                    "fileName" : "/app/code/databaseMigration.java",
                    "excerpt" : "}\n\npublic void AWSDatabaseMigrationServiceProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\n    CreateReplicationTaskRequest createReplicationTaskRequest = new CreateReplicationTaskRequest() /* <===  */ \n            .withReplicationTaskIdentifier(firstName + \"_\" + lastName + \"_Task\")\n            .withSourceEndpointArn(\"arn:aws:dms:us-west-2:012345678901:endpoint:ASXWXYZWEXAMPLE\")\n            .withTargetEndpointArn(\"arn:aws:dms:us-west-2:012345678901:endpoint:AKXWXYZWEXAMPLE\")\n            .withReplicationInstanceArn(\"arn:aws:dms:us-west-2:012345678901:rep:6UTDJGB043EXAMPLE\")\n            .withMigrationType(\"full-load\")"
                  },
                  {
                    "sample" : "createReplicationTaskRequest",
                    "lineNumber" : 17,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/databaseMigration.java",
                    "excerpt" : "}\n\npublic void AWSDatabaseMigrationServiceProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\n    CreateReplicationTaskRequest createReplicationTaskRequest = new CreateReplicationTaskRequest() /* <=== com.amazonaws.services.databasemigrationservice.model.CreateReplicationTaskRequest */ \n            .withReplicationTaskIdentifier(firstName + \"_\" + lastName + \"_Task\")\n            .withSourceEndpointArn(\"arn:aws:dms:us-west-2:012345678901:endpoint:ASXWXYZWEXAMPLE\")\n            .withTargetEndpointArn(\"arn:aws:dms:us-west-2:012345678901:endpoint:AKXWXYZWEXAMPLE\")\n            .withReplicationInstanceArn(\"arn:aws:dms:us-west-2:012345678901:rep:6UTDJGB043EXAMPLE\")\n            .withMigrationType(\"full-load\")"
                  },
                  {
                    "sample" : "createReplicationTask(createReplicationTaskRequest)",
                    "lineNumber" : 28,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/databaseMigration.java",
                    "excerpt" : "            .withTableMappings(\"{\\\"rules\\\":[{\\\"rule-type\\\":\\\"selection\\\",\\\"rule-id\\\":\\\"1\\\",\\\"rule-name\\\":\\\"1\\\",\\\"object-locator\\\":{\\\"schema-name\\\":\\\"personal_data\\\",\\\"table-name\\\":\\\"\" + firstName + \"_\" + lastName + \"\\\"},\\\"rule-action\\\":\\\"include\\\",\\\"filters\\\":{}}]}\")\n            .withReplicationTaskSettings(\"{\\\"TargetMetadata\\\":{\\\"TargetSchema\\\":\\\"\\\",\\\"SupportLobs\\\":true,\\\"FullLobMode\\\":false,\\\"LobChunkSize\\\":64,\\\"LimitedSizeLobMode\\\":true,\\\"LobMaxSize\\\":32},\\\"FullLoadSettings\\\":{\\\"FullLoadEnabled\\\":true,\\\"ApplyChangesEnabled\\\":false,\\\"TargetTablePrepareOptions\\\":\\\"DROP_AND_CREATE\\\",\\\"CreatePkAfterFullLoad\\\":false,\\\"StopTaskCachedChangesApplied\\\":false,\\\"StopTaskCachedChangesNotApplied\\\":false,\\\"ResumeEnabled\\\":false,\\\"RangeLinearityFactor\\\":null},\\\"Logging\\\":{\\\"EnableLogging\\\":false}}\")\n            .withResourceAttributeList(new ResourceAttribute().withType(\"PersonalData\")\n                    .withValue(personalData.toString()));\n\n    client.createReplicationTask(createReplicationTaskRequest); /* <=== com.amazonaws.services.databasemigrationservice.AmazonDatabaseMigrationService.createReplicationTask */ \n}\n}"
                  }
                ]
              },
              {
                "pathId" : "7755-7744-7743-7742-7771",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 18,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/ebs.java",
                    "excerpt" : "\npublic void AWSEBSProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n    \n    CreateSnapshotRequest createSnapshotRequest = new CreateSnapshotRequest()\n            .withVolumeId(firstName + \"_\" + lastName + \"_Volume\") /* <=== java.lang.String */ \n            .withTagSpecifications(new Tag().withKey(\"PersonalData\").withValue(personalData.toString()));\n    \n    client.createSnapshot(createSnapshotRequest);\n}\n}"
                  },
                  {
                    "sample" : "withVolumeId(firstName + \"_\" + lastName + \"_Volume\")",
                    "lineNumber" : 17,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/ebs.java",
                    "excerpt" : "}\n\npublic void AWSEBSProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n    \n    CreateSnapshotRequest createSnapshotRequest = new CreateSnapshotRequest() /* <=== com.amazonaws.services.ebs.model.CreateSnapshotRequest.withVolumeId */ \n            .withVolumeId(firstName + \"_\" + lastName + \"_Volume\")\n            .withTagSpecifications(new Tag().withKey(\"PersonalData\").withValue(personalData.toString()));\n    \n    client.createSnapshot(createSnapshotRequest);\n}"
                  },
                  {
                    "sample" : "withTagSpecifications(new Tag().withKey(\"PersonalData\").withValue(personalData.toString()))",
                    "lineNumber" : 17,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/ebs.java",
                    "excerpt" : "}\n\npublic void AWSEBSProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n    \n    CreateSnapshotRequest createSnapshotRequest = new CreateSnapshotRequest() /* <===  */ \n            .withVolumeId(firstName + \"_\" + lastName + \"_Volume\")\n            .withTagSpecifications(new Tag().withKey(\"PersonalData\").withValue(personalData.toString()));\n    \n    client.createSnapshot(createSnapshotRequest);\n}"
                  },
                  {
                    "sample" : "createSnapshotRequest",
                    "lineNumber" : 17,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/ebs.java",
                    "excerpt" : "}\n\npublic void AWSEBSProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n    \n    CreateSnapshotRequest createSnapshotRequest = new CreateSnapshotRequest() /* <=== com.amazonaws.services.ebs.model.CreateSnapshotRequest */ \n            .withVolumeId(firstName + \"_\" + lastName + \"_Volume\")\n            .withTagSpecifications(new Tag().withKey(\"PersonalData\").withValue(personalData.toString()));\n    \n    client.createSnapshot(createSnapshotRequest);\n}"
                  },
                  {
                    "sample" : "createSnapshot(createSnapshotRequest)",
                    "lineNumber" : 21,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/ebs.java",
                    "excerpt" : "    \n    CreateSnapshotRequest createSnapshotRequest = new CreateSnapshotRequest()\n            .withVolumeId(firstName + \"_\" + lastName + \"_Volume\")\n            .withTagSpecifications(new Tag().withKey(\"PersonalData\").withValue(personalData.toString()));\n    \n    client.createSnapshot(createSnapshotRequest); /* <=== com.amazonaws.services.ebs.AmazonEBS.createSnapshot */ \n}\n}"
                  }
                ]
              },
              {
                "pathId" : "14630-14644-14665-14693-14720-14711",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 12,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "import java.util.ArrayList;\nimport java.util.List;\n\npublic class AWSDataExchangeUtil {\n    public static void AWSDataExchangeFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob, AmazonDataExchange dataExchangeClient) {\n        String dataSetName = firstName + \" \" + lastName + \" Personal Data\"; /* <=== java.lang.String */ \n        String revisionId = \"Revision1\";\n        String assetName = firstName + \" \" + lastName + \" Asset\";\n\n        // Create a new data set\n        CreateDataSetRequest createDataSetRequest = new CreateDataSetRequest()"
                  },
                  {
                    "sample" : "firstName",
                    "lineNumber" : 14,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "\npublic class AWSDataExchangeUtil {\n    public static void AWSDataExchangeFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob, AmazonDataExchange dataExchangeClient) {\n        String dataSetName = firstName + \" \" + lastName + \" Personal Data\";\n        String revisionId = \"Revision1\";\n        String assetName = firstName + \" \" + lastName + \" Asset\"; /* <=== java.lang.String */ \n\n        // Create a new data set\n        CreateDataSetRequest createDataSetRequest = new CreateDataSetRequest()\n                .withName(dataSetName)\n                .withDescription(\"Personal data of \" + firstName + \" \" + lastName);"
                  },
                  {
                    "sample" : "firstName",
                    "lineNumber" : 19,
                    "columnNumber" : 56,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        String assetName = firstName + \" \" + lastName + \" Asset\";\n\n        // Create a new data set\n        CreateDataSetRequest createDataSetRequest = new CreateDataSetRequest()\n                .withName(dataSetName)\n                .withDescription(\"Personal data of \" + firstName + \" \" + lastName); /* <=== java.lang.String */ \n        String dataSetId = dataExchangeClient.createDataSet(createDataSetRequest).getId();\n\n        // Create a revision for the data set\n        CreateRevisionRequest createRevisionRequest = new CreateRevisionRequest()\n                .withDataSetId(dataSetId)"
                  },
                  {
                    "sample" : "firstName",
                    "lineNumber" : 25,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        String dataSetId = dataExchangeClient.createDataSet(createDataSetRequest).getId();\n\n        // Create a revision for the data set\n        CreateRevisionRequest createRevisionRequest = new CreateRevisionRequest()\n                .withDataSetId(dataSetId)\n                .withComment(\"First revision for \" + firstName + \" \" + lastName + \" data\"); /* <=== java.lang.String */ \n        String revisionArn = dataExchangeClient.createRevision(createRevisionRequest).getArn();\n\n        // Prepare the asset\n        List<DataSetEntry> entries = new ArrayList<>();\n        entries.add(new DataSetEntry().withEntryName(\"firstName\").withContent(firstName));"
                  },
                  {
                    "sample" : "firstName",
                    "lineNumber" : 30,
                    "columnNumber" : 79,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "                .withComment(\"First revision for \" + firstName + \" \" + lastName + \" data\");\n        String revisionArn = dataExchangeClient.createRevision(createRevisionRequest).getArn();\n\n        // Prepare the asset\n        List<DataSetEntry> entries = new ArrayList<>();\n        entries.add(new DataSetEntry().withEntryName(\"firstName\").withContent(firstName)); /* <=== java.lang.String */ \n        entries.add(new DataSetEntry().withEntryName(\"lastName\").withContent(lastName));\n        entries.add(new DataSetEntry().withEntryName(\"phoneNumber\").withContent(phoneNumber));\n        entries.add(new DataSetEntry().withEntryName(\"dob\").withContent(dob));\n\n        // Import the asset"
                  },
                  {
                    "sample" : "withEntryName(\"firstName\")",
                    "lineNumber" : 30,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "                .withComment(\"First revision for \" + firstName + \" \" + lastName + \" data\");\n        String revisionArn = dataExchangeClient.createRevision(createRevisionRequest).getArn();\n\n        // Prepare the asset\n        List<DataSetEntry> entries = new ArrayList<>();\n        entries.add(new DataSetEntry().withEntryName(\"firstName\").withContent(firstName)); /* <=== com.amazonaws.services.dataexchange.model.DataSetEntry.withEntryName */ \n        entries.add(new DataSetEntry().withEntryName(\"lastName\").withContent(lastName));\n        entries.add(new DataSetEntry().withEntryName(\"phoneNumber\").withContent(phoneNumber));\n        entries.add(new DataSetEntry().withEntryName(\"dob\").withContent(dob));\n\n        // Import the asset"
                  }
                ]
              },
              {
                "pathId" : "13493-13482-13481-13480-13501",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 19,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/iotFleetwise.java",
                    "excerpt" : "\npublic void AWSIoTFleetwiseProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nCreateTrackerRequest createTrackerRequest = new CreateTrackerRequest()\n        .withTrackerName(firstName + \"_\" + lastName + \"_Tracker\") /* <=== java.lang.String */ \n        .withAttributePayload(personalData);\n\nCreateTrackerResult result = client.createTracker(createTrackerRequest);\nSystem.out.println(\"Tracker created with ID: \" + result.getTrackerId());\n}"
                  },
                  {
                    "sample" : "withTrackerName(firstName + \"_\" + lastName + \"_Tracker\")",
                    "lineNumber" : 18,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/iotFleetwise.java",
                    "excerpt" : "}\n\npublic void AWSIoTFleetwiseProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nCreateTrackerRequest createTrackerRequest = new CreateTrackerRequest() /* <=== com.amazonaws.services.iotfleetwise.model.CreateTrackerRequest.withTrackerName */ \n        .withTrackerName(firstName + \"_\" + lastName + \"_Tracker\")\n        .withAttributePayload(personalData);\n\nCreateTrackerResult result = client.createTracker(createTrackerRequest);\nSystem.out.println(\"Tracker created with ID: \" + result.getTrackerId());"
                  },
                  {
                    "sample" : "withAttributePayload(personalData)",
                    "lineNumber" : 18,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/iotFleetwise.java",
                    "excerpt" : "}\n\npublic void AWSIoTFleetwiseProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nCreateTrackerRequest createTrackerRequest = new CreateTrackerRequest() /* <===  */ \n        .withTrackerName(firstName + \"_\" + lastName + \"_Tracker\")\n        .withAttributePayload(personalData);\n\nCreateTrackerResult result = client.createTracker(createTrackerRequest);\nSystem.out.println(\"Tracker created with ID: \" + result.getTrackerId());"
                  },
                  {
                    "sample" : "createTrackerRequest",
                    "lineNumber" : 18,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/iotFleetwise.java",
                    "excerpt" : "}\n\npublic void AWSIoTFleetwiseProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nCreateTrackerRequest createTrackerRequest = new CreateTrackerRequest() /* <=== com.amazonaws.services.iotfleetwise.model.CreateTrackerRequest */ \n        .withTrackerName(firstName + \"_\" + lastName + \"_Tracker\")\n        .withAttributePayload(personalData);\n\nCreateTrackerResult result = client.createTracker(createTrackerRequest);\nSystem.out.println(\"Tracker created with ID: \" + result.getTrackerId());"
                  },
                  {
                    "sample" : "createTracker(createTrackerRequest)",
                    "lineNumber" : 22,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/iotFleetwise.java",
                    "excerpt" : "\nCreateTrackerRequest createTrackerRequest = new CreateTrackerRequest()\n        .withTrackerName(firstName + \"_\" + lastName + \"_Tracker\")\n        .withAttributePayload(personalData);\n\nCreateTrackerResult result = client.createTracker(createTrackerRequest); /* <=== com.amazonaws.services.iotfleetwise.AmazonIoTFleetwise.createTracker */ \nSystem.out.println(\"Tracker created with ID: \" + result.getTrackerId());\n}\n}"
                  }
                ]
              },
              {
                "pathId" : "3182-3183-3181-3185-3189-3193-3200",
                "path" : [
                  {
                    "sample" : "\"firstName\"",
                    "lineNumber" : 12,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/chimeSdkMessaging.java",
                    "excerpt" : "public class AWSChimeSDKMessagingUtil {\n  private static AmazonChimeSDKMessaging chimeSDKMessagingClient = AmazonChimeSDKMessagingClientBuilder.defaultClient();\n\n  public static void AWSChimeSDKmessagingFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = new HashMap<>();\n    personalData.put(\"firstName\", firstName); /* <===  */ \n    personalData.put(\"lastName\", lastName);\n    personalData.put(\"phoneNumber\", phoneNumber);\n    personalData.put(\"dob\", dob);\n\n    MessageRequest messageRequest = new MessageRequest();"
                  },
                  {
                    "sample" : "firstName",
                    "lineNumber" : 12,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/chimeSdkMessaging.java",
                    "excerpt" : "public class AWSChimeSDKMessagingUtil {\n  private static AmazonChimeSDKMessaging chimeSDKMessagingClient = AmazonChimeSDKMessagingClientBuilder.defaultClient();\n\n  public static void AWSChimeSDKmessagingFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = new HashMap<>();\n    personalData.put(\"firstName\", firstName); /* <=== java.lang.String */ \n    personalData.put(\"lastName\", lastName);\n    personalData.put(\"phoneNumber\", phoneNumber);\n    personalData.put(\"dob\", dob);\n\n    MessageRequest messageRequest = new MessageRequest();"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 12,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/chimeSdkMessaging.java",
                    "excerpt" : "public class AWSChimeSDKMessagingUtil {\n  private static AmazonChimeSDKMessaging chimeSDKMessagingClient = AmazonChimeSDKMessagingClientBuilder.defaultClient();\n\n  public static void AWSChimeSDKmessagingFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = new HashMap<>();\n    personalData.put(\"firstName\", firstName); /* <=== java.util.Map */ \n    personalData.put(\"lastName\", lastName);\n    personalData.put(\"phoneNumber\", phoneNumber);\n    personalData.put(\"dob\", dob);\n\n    MessageRequest messageRequest = new MessageRequest();"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 13,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/chimeSdkMessaging.java",
                    "excerpt" : "  private static AmazonChimeSDKMessaging chimeSDKMessagingClient = AmazonChimeSDKMessagingClientBuilder.defaultClient();\n\n  public static void AWSChimeSDKmessagingFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = new HashMap<>();\n    personalData.put(\"firstName\", firstName);\n    personalData.put(\"lastName\", lastName); /* <=== java.util.Map */ \n    personalData.put(\"phoneNumber\", phoneNumber);\n    personalData.put(\"dob\", dob);\n\n    MessageRequest messageRequest = new MessageRequest();\n    messageRequest.setContent(personalData.toString());"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 14,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/chimeSdkMessaging.java",
                    "excerpt" : "\n  public static void AWSChimeSDKmessagingFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = new HashMap<>();\n    personalData.put(\"firstName\", firstName);\n    personalData.put(\"lastName\", lastName);\n    personalData.put(\"phoneNumber\", phoneNumber); /* <=== java.util.Map */ \n    personalData.put(\"dob\", dob);\n\n    MessageRequest messageRequest = new MessageRequest();\n    messageRequest.setContent(personalData.toString());\n"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 15,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/chimeSdkMessaging.java",
                    "excerpt" : "  public static void AWSChimeSDKmessagingFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = new HashMap<>();\n    personalData.put(\"firstName\", firstName);\n    personalData.put(\"lastName\", lastName);\n    personalData.put(\"phoneNumber\", phoneNumber);\n    personalData.put(\"dob\", dob); /* <=== java.util.Map */ \n\n    MessageRequest messageRequest = new MessageRequest();\n    messageRequest.setContent(personalData.toString());\n\n    chimeSDKMessagingClient.sendMessage(messageRequest);"
                  },
                  {
                    "sample" : "setContent(personalData.toString())",
                    "lineNumber" : 18,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/chimeSdkMessaging.java",
                    "excerpt" : "    personalData.put(\"lastName\", lastName);\n    personalData.put(\"phoneNumber\", phoneNumber);\n    personalData.put(\"dob\", dob);\n\n    MessageRequest messageRequest = new MessageRequest();\n    messageRequest.setContent(personalData.toString()); /* <=== com.amazonaws.services.chimesdkmessaging.model.MessageRequest.setContent */ \n\n    chimeSDKMessagingClient.sendMessage(messageRequest);\n  }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "16170-16161",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 24,
                    "columnNumber" : 81,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "                        .withRegion(REGION)\n                        .build();\n\n        // Define the user's personal data\n        List<AttributeType> userAttributes = new ArrayList<>();\n        userAttributes.add(new AttributeType().withName(\"given_name\").withValue(firstName)); /* <=== java.lang.String */ \n        userAttributes.add(new AttributeType().withName(\"family_name\").withValue(lastName));\n        userAttributes.add(new AttributeType().withName(\"phone_number\").withValue(phoneNumber));\n        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob));\n\n        // Create the request to create the user"
                  },
                  {
                    "sample" : "withName(\"given_name\")",
                    "lineNumber" : 24,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "                        .withRegion(REGION)\n                        .build();\n\n        // Define the user's personal data\n        List<AttributeType> userAttributes = new ArrayList<>();\n        userAttributes.add(new AttributeType().withName(\"given_name\").withValue(firstName)); /* <=== com.amazonaws.services.cognitoidp.model.AttributeType.withName */ \n        userAttributes.add(new AttributeType().withName(\"family_name\").withValue(lastName));\n        userAttributes.add(new AttributeType().withName(\"phone_number\").withValue(phoneNumber));\n        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob));\n\n        // Create the request to create the user"
                  }
                ]
              },
              {
                "pathId" : "11814-11806-11805-11804-11803-11802-11819",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 15,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/oam.java",
                    "excerpt" : "    this.oamClient = oamClient;\n  }\n\n  public CreateUserResult AWSOAMFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    CreateUserRequest request = new CreateUserRequest()\n      .withFirstName(firstName) /* <=== java.lang.String */ \n      .withLastName(lastName)\n      .withPhoneNumber(phoneNumber)\n      .withDateOfBirth(dob);\n    return oamClient.createUser(request);\n  }"
                  },
                  {
                    "sample" : "withFirstName(firstName)",
                    "lineNumber" : 14,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/oam.java",
                    "excerpt" : "  public AWSOAMUtil(AWSOAM oamClient) {\n    this.oamClient = oamClient;\n  }\n\n  public CreateUserResult AWSOAMFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    CreateUserRequest request = new CreateUserRequest() /* <=== com.amazonaws.services.oam.model.CreateUserRequest.withFirstName */ \n      .withFirstName(firstName)\n      .withLastName(lastName)\n      .withPhoneNumber(phoneNumber)\n      .withDateOfBirth(dob);\n    return oamClient.createUser(request);"
                  },
                  {
                    "sample" : "withLastName(lastName)",
                    "lineNumber" : 14,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/oam.java",
                    "excerpt" : "  public AWSOAMUtil(AWSOAM oamClient) {\n    this.oamClient = oamClient;\n  }\n\n  public CreateUserResult AWSOAMFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    CreateUserRequest request = new CreateUserRequest() /* <===  */ \n      .withFirstName(firstName)\n      .withLastName(lastName)\n      .withPhoneNumber(phoneNumber)\n      .withDateOfBirth(dob);\n    return oamClient.createUser(request);"
                  },
                  {
                    "sample" : "withPhoneNumber(phoneNumber)",
                    "lineNumber" : 14,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/oam.java",
                    "excerpt" : "  public AWSOAMUtil(AWSOAM oamClient) {\n    this.oamClient = oamClient;\n  }\n\n  public CreateUserResult AWSOAMFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    CreateUserRequest request = new CreateUserRequest() /* <===  */ \n      .withFirstName(firstName)\n      .withLastName(lastName)\n      .withPhoneNumber(phoneNumber)\n      .withDateOfBirth(dob);\n    return oamClient.createUser(request);"
                  },
                  {
                    "sample" : "withDateOfBirth(dob)",
                    "lineNumber" : 14,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/oam.java",
                    "excerpt" : "  public AWSOAMUtil(AWSOAM oamClient) {\n    this.oamClient = oamClient;\n  }\n\n  public CreateUserResult AWSOAMFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    CreateUserRequest request = new CreateUserRequest() /* <===  */ \n      .withFirstName(firstName)\n      .withLastName(lastName)\n      .withPhoneNumber(phoneNumber)\n      .withDateOfBirth(dob);\n    return oamClient.createUser(request);"
                  },
                  {
                    "sample" : "request",
                    "lineNumber" : 14,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/oam.java",
                    "excerpt" : "  public AWSOAMUtil(AWSOAM oamClient) {\n    this.oamClient = oamClient;\n  }\n\n  public CreateUserResult AWSOAMFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    CreateUserRequest request = new CreateUserRequest() /* <=== com.amazonaws.services.oam.model.CreateUserRequest */ \n      .withFirstName(firstName)\n      .withLastName(lastName)\n      .withPhoneNumber(phoneNumber)\n      .withDateOfBirth(dob);\n    return oamClient.createUser(request);"
                  },
                  {
                    "sample" : "createUser(request)",
                    "lineNumber" : 19,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/oam.java",
                    "excerpt" : "    CreateUserRequest request = new CreateUserRequest()\n      .withFirstName(firstName)\n      .withLastName(lastName)\n      .withPhoneNumber(phoneNumber)\n      .withDateOfBirth(dob);\n    return oamClient.createUser(request); /* <=== com.amazonaws.services.oam.AWSOAM.createUser */ \n  }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "8323-8314-8313-8312-8325-8338-8351-8366-8365-8375",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 12,
                    "columnNumber" : 67,
                    "fileName" : "/app/code/chimeSDKIdentity.java",
                    "excerpt" : "public class AWSChimeSDKIdentityUtil {\n  private static final AWSChimeSDKIdentity CLIENT = AWSChimeSDKIdentityClientBuilder.defaultClient();\n\n  public static void AWSChimeSDKIdentityFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n    List<Attribute> attributes = new ArrayList<>();\n    attributes.add(new Attribute().withKey(\"firstName\").withValue(firstName)); /* <=== java.lang.String */ \n    attributes.add(new Attribute().withKey(\"lastName\").withValue(lastName));\n    attributes.add(new Attribute().withKey(\"phoneNumber\").withValue(phoneNumber));\n    attributes.add(new Attribute().withKey(\"DOB\").withValue(DOB));\n\n    PutAttributesRequest request = new PutAttributesRequest().withAttributes(attributes);"
                  },
                  {
                    "sample" : "withKey(\"firstName\")",
                    "lineNumber" : 12,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/chimeSDKIdentity.java",
                    "excerpt" : "public class AWSChimeSDKIdentityUtil {\n  private static final AWSChimeSDKIdentity CLIENT = AWSChimeSDKIdentityClientBuilder.defaultClient();\n\n  public static void AWSChimeSDKIdentityFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n    List<Attribute> attributes = new ArrayList<>();\n    attributes.add(new Attribute().withKey(\"firstName\").withValue(firstName)); /* <=== com.amazonaws.services.chimesdkidentity.model.Attribute.withKey */ \n    attributes.add(new Attribute().withKey(\"lastName\").withValue(lastName));\n    attributes.add(new Attribute().withKey(\"phoneNumber\").withValue(phoneNumber));\n    attributes.add(new Attribute().withKey(\"DOB\").withValue(DOB));\n\n    PutAttributesRequest request = new PutAttributesRequest().withAttributes(attributes);"
                  },
                  {
                    "sample" : "withValue(firstName)",
                    "lineNumber" : 12,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/chimeSDKIdentity.java",
                    "excerpt" : "public class AWSChimeSDKIdentityUtil {\n  private static final AWSChimeSDKIdentity CLIENT = AWSChimeSDKIdentityClientBuilder.defaultClient();\n\n  public static void AWSChimeSDKIdentityFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n    List<Attribute> attributes = new ArrayList<>();\n    attributes.add(new Attribute().withKey(\"firstName\").withValue(firstName)); /* <===  */ \n    attributes.add(new Attribute().withKey(\"lastName\").withValue(lastName));\n    attributes.add(new Attribute().withKey(\"phoneNumber\").withValue(phoneNumber));\n    attributes.add(new Attribute().withKey(\"DOB\").withValue(DOB));\n\n    PutAttributesRequest request = new PutAttributesRequest().withAttributes(attributes);"
                  },
                  {
                    "sample" : "attributes",
                    "lineNumber" : 12,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/chimeSDKIdentity.java",
                    "excerpt" : "public class AWSChimeSDKIdentityUtil {\n  private static final AWSChimeSDKIdentity CLIENT = AWSChimeSDKIdentityClientBuilder.defaultClient();\n\n  public static void AWSChimeSDKIdentityFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n    List<Attribute> attributes = new ArrayList<>();\n    attributes.add(new Attribute().withKey(\"firstName\").withValue(firstName)); /* <=== ANY */ \n    attributes.add(new Attribute().withKey(\"lastName\").withValue(lastName));\n    attributes.add(new Attribute().withKey(\"phoneNumber\").withValue(phoneNumber));\n    attributes.add(new Attribute().withKey(\"DOB\").withValue(DOB));\n\n    PutAttributesRequest request = new PutAttributesRequest().withAttributes(attributes);"
                  },
                  {
                    "sample" : "attributes",
                    "lineNumber" : 13,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/chimeSDKIdentity.java",
                    "excerpt" : "  private static final AWSChimeSDKIdentity CLIENT = AWSChimeSDKIdentityClientBuilder.defaultClient();\n\n  public static void AWSChimeSDKIdentityFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n    List<Attribute> attributes = new ArrayList<>();\n    attributes.add(new Attribute().withKey(\"firstName\").withValue(firstName));\n    attributes.add(new Attribute().withKey(\"lastName\").withValue(lastName)); /* <=== ANY */ \n    attributes.add(new Attribute().withKey(\"phoneNumber\").withValue(phoneNumber));\n    attributes.add(new Attribute().withKey(\"DOB\").withValue(DOB));\n\n    PutAttributesRequest request = new PutAttributesRequest().withAttributes(attributes);\n    CLIENT.putAttributes(request);"
                  },
                  {
                    "sample" : "attributes",
                    "lineNumber" : 14,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/chimeSDKIdentity.java",
                    "excerpt" : "\n  public static void AWSChimeSDKIdentityFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n    List<Attribute> attributes = new ArrayList<>();\n    attributes.add(new Attribute().withKey(\"firstName\").withValue(firstName));\n    attributes.add(new Attribute().withKey(\"lastName\").withValue(lastName));\n    attributes.add(new Attribute().withKey(\"phoneNumber\").withValue(phoneNumber)); /* <=== ANY */ \n    attributes.add(new Attribute().withKey(\"DOB\").withValue(DOB));\n\n    PutAttributesRequest request = new PutAttributesRequest().withAttributes(attributes);\n    CLIENT.putAttributes(request);\n  }"
                  },
                  {
                    "sample" : "attributes",
                    "lineNumber" : 15,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/chimeSDKIdentity.java",
                    "excerpt" : "  public static void AWSChimeSDKIdentityFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n    List<Attribute> attributes = new ArrayList<>();\n    attributes.add(new Attribute().withKey(\"firstName\").withValue(firstName));\n    attributes.add(new Attribute().withKey(\"lastName\").withValue(lastName));\n    attributes.add(new Attribute().withKey(\"phoneNumber\").withValue(phoneNumber));\n    attributes.add(new Attribute().withKey(\"DOB\").withValue(DOB)); /* <=== ANY */ \n\n    PutAttributesRequest request = new PutAttributesRequest().withAttributes(attributes);\n    CLIENT.putAttributes(request);\n  }\n}"
                  },
                  {
                    "sample" : "withAttributes(attributes)",
                    "lineNumber" : 17,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/chimeSDKIdentity.java",
                    "excerpt" : "    attributes.add(new Attribute().withKey(\"firstName\").withValue(firstName));\n    attributes.add(new Attribute().withKey(\"lastName\").withValue(lastName));\n    attributes.add(new Attribute().withKey(\"phoneNumber\").withValue(phoneNumber));\n    attributes.add(new Attribute().withKey(\"DOB\").withValue(DOB));\n\n    PutAttributesRequest request = new PutAttributesRequest().withAttributes(attributes); /* <=== com.amazonaws.services.chimesdkidentity.model.PutAttributesRequest.withAttributes */ \n    CLIENT.putAttributes(request);\n  }\n}\n"
                  },
                  {
                    "sample" : "request",
                    "lineNumber" : 17,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/chimeSDKIdentity.java",
                    "excerpt" : "    attributes.add(new Attribute().withKey(\"firstName\").withValue(firstName));\n    attributes.add(new Attribute().withKey(\"lastName\").withValue(lastName));\n    attributes.add(new Attribute().withKey(\"phoneNumber\").withValue(phoneNumber));\n    attributes.add(new Attribute().withKey(\"DOB\").withValue(DOB));\n\n    PutAttributesRequest request = new PutAttributesRequest().withAttributes(attributes); /* <=== com.amazonaws.services.chimesdkidentity.model.PutAttributesRequest */ \n    CLIENT.putAttributes(request);\n  }\n}\n"
                  },
                  {
                    "sample" : "putAttributes(request)",
                    "lineNumber" : 18,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/chimeSDKIdentity.java",
                    "excerpt" : "    attributes.add(new Attribute().withKey(\"lastName\").withValue(lastName));\n    attributes.add(new Attribute().withKey(\"phoneNumber\").withValue(phoneNumber));\n    attributes.add(new Attribute().withKey(\"DOB\").withValue(DOB));\n\n    PutAttributesRequest request = new PutAttributesRequest().withAttributes(attributes);\n    CLIENT.putAttributes(request); /* <=== com.amazonaws.services.chimesdkidentity.AWSChimeSDKIdentity.putAttributes */ \n  }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "14693-14688-14679",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 25,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        String dataSetId = dataExchangeClient.createDataSet(createDataSetRequest).getId();\n\n        // Create a revision for the data set\n        CreateRevisionRequest createRevisionRequest = new CreateRevisionRequest()\n                .withDataSetId(dataSetId)\n                .withComment(\"First revision for \" + firstName + \" \" + lastName + \" data\"); /* <=== java.lang.String */ \n        String revisionArn = dataExchangeClient.createRevision(createRevisionRequest).getArn();\n\n        // Prepare the asset\n        List<DataSetEntry> entries = new ArrayList<>();\n        entries.add(new DataSetEntry().withEntryName(\"firstName\").withContent(firstName));"
                  },
                  {
                    "sample" : "\"First revision for \" + firstName + \" \" + lastName + \" data\"",
                    "lineNumber" : 25,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        String dataSetId = dataExchangeClient.createDataSet(createDataSetRequest).getId();\n\n        // Create a revision for the data set\n        CreateRevisionRequest createRevisionRequest = new CreateRevisionRequest()\n                .withDataSetId(dataSetId)\n                .withComment(\"First revision for \" + firstName + \" \" + lastName + \" data\"); /* <===  */ \n        String revisionArn = dataExchangeClient.createRevision(createRevisionRequest).getArn();\n\n        // Prepare the asset\n        List<DataSetEntry> entries = new ArrayList<>();\n        entries.add(new DataSetEntry().withEntryName(\"firstName\").withContent(firstName));"
                  },
                  {
                    "sample" : "withDataSetId(dataSetId)",
                    "lineNumber" : 23,
                    "columnNumber" : 55,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "                .withName(dataSetName)\n                .withDescription(\"Personal data of \" + firstName + \" \" + lastName);\n        String dataSetId = dataExchangeClient.createDataSet(createDataSetRequest).getId();\n\n        // Create a revision for the data set\n        CreateRevisionRequest createRevisionRequest = new CreateRevisionRequest() /* <=== com.amazonaws.services.dataexchange.model.CreateRevisionRequest.withDataSetId */ \n                .withDataSetId(dataSetId)\n                .withComment(\"First revision for \" + firstName + \" \" + lastName + \" data\");\n        String revisionArn = dataExchangeClient.createRevision(createRevisionRequest).getArn();\n\n        // Prepare the asset"
                  }
                ]
              },
              {
                "pathId" : "5048-5044-5043-5034-5033-5032-5052",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 14,
                    "columnNumber" : 97,
                    "fileName" : "/app/code/kinesisvideowebrtcstorage.java",
                    "excerpt" : "    }\n\n    public void AWSKinesisVideoWebrtcStorageFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        PutRecordRequest putRecordRequest = new PutRecordRequest()\n            .withStreamName(\"personal-data-stream\")\n            .withData(String.format(\"First Name: %s, Last Name: %s, Phone Number: %s, DOB: %s\", firstName, lastName, phoneNumber, DOB).getBytes()); /* <=== java.lang.String */ \n\n        kinesisVideoWebRTCStorageClient.putRecord(putRecordRequest);\n    }\n}\n"
                  },
                  {
                    "sample" : "String.format(\"First Name: %s, Last Name: %s, Phone Number: %s, DOB: %s\", firstName, lastName, phoneNumber, DOB)",
                    "lineNumber" : 14,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/kinesisvideowebrtcstorage.java",
                    "excerpt" : "    }\n\n    public void AWSKinesisVideoWebrtcStorageFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        PutRecordRequest putRecordRequest = new PutRecordRequest()\n            .withStreamName(\"personal-data-stream\")\n            .withData(String.format(\"First Name: %s, Last Name: %s, Phone Number: %s, DOB: %s\", firstName, lastName, phoneNumber, DOB).getBytes()); /* <=== java.lang.String.format */ \n\n        kinesisVideoWebRTCStorageClient.putRecord(putRecordRequest);\n    }\n}\n"
                  },
                  {
                    "sample" : "String.format(\"First Name: %s, Last Name: %s, Phone Number: %s, DOB: %s\", firstName, lastName, phoneNumber, DOB).getBytes()",
                    "lineNumber" : 14,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/kinesisvideowebrtcstorage.java",
                    "excerpt" : "    }\n\n    public void AWSKinesisVideoWebrtcStorageFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        PutRecordRequest putRecordRequest = new PutRecordRequest()\n            .withStreamName(\"personal-data-stream\")\n            .withData(String.format(\"First Name: %s, Last Name: %s, Phone Number: %s, DOB: %s\", firstName, lastName, phoneNumber, DOB).getBytes()); /* <=== java.lang.String.getBytes */ \n\n        kinesisVideoWebRTCStorageClient.putRecord(putRecordRequest);\n    }\n}\n"
                  },
                  {
                    "sample" : "withStreamName(\"personal-data-stream\")",
                    "lineNumber" : 12,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/kinesisvideowebrtcstorage.java",
                    "excerpt" : "    public AWSKinesisVideoWebRTCStorageUtil(AWSKinesisVideoWebRTCStorage kinesisVideoWebRTCStorageClient) {\n        this.kinesisVideoWebRTCStorageClient = kinesisVideoWebRTCStorageClient;\n    }\n\n    public void AWSKinesisVideoWebrtcStorageFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        PutRecordRequest putRecordRequest = new PutRecordRequest() /* <=== com.amazonaws.services.kinesisvideowebrtcstorage.model.PutRecordRequest.withStreamName */ \n            .withStreamName(\"personal-data-stream\")\n            .withData(String.format(\"First Name: %s, Last Name: %s, Phone Number: %s, DOB: %s\", firstName, lastName, phoneNumber, DOB).getBytes());\n\n        kinesisVideoWebRTCStorageClient.putRecord(putRecordRequest);\n    }"
                  },
                  {
                    "sample" : "withData(String.format(\"First Name: %s, Last Name: %s, Phone Number: %s, DOB: %s\", firstName, lastName, phoneNumber, DOB).getBytes())",
                    "lineNumber" : 12,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/kinesisvideowebrtcstorage.java",
                    "excerpt" : "    public AWSKinesisVideoWebRTCStorageUtil(AWSKinesisVideoWebRTCStorage kinesisVideoWebRTCStorageClient) {\n        this.kinesisVideoWebRTCStorageClient = kinesisVideoWebRTCStorageClient;\n    }\n\n    public void AWSKinesisVideoWebrtcStorageFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        PutRecordRequest putRecordRequest = new PutRecordRequest() /* <===  */ \n            .withStreamName(\"personal-data-stream\")\n            .withData(String.format(\"First Name: %s, Last Name: %s, Phone Number: %s, DOB: %s\", firstName, lastName, phoneNumber, DOB).getBytes());\n\n        kinesisVideoWebRTCStorageClient.putRecord(putRecordRequest);\n    }"
                  },
                  {
                    "sample" : "putRecordRequest",
                    "lineNumber" : 12,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/kinesisvideowebrtcstorage.java",
                    "excerpt" : "    public AWSKinesisVideoWebRTCStorageUtil(AWSKinesisVideoWebRTCStorage kinesisVideoWebRTCStorageClient) {\n        this.kinesisVideoWebRTCStorageClient = kinesisVideoWebRTCStorageClient;\n    }\n\n    public void AWSKinesisVideoWebrtcStorageFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        PutRecordRequest putRecordRequest = new PutRecordRequest() /* <=== com.amazonaws.services.kinesisvideowebrtcstorage.model.PutRecordRequest */ \n            .withStreamName(\"personal-data-stream\")\n            .withData(String.format(\"First Name: %s, Last Name: %s, Phone Number: %s, DOB: %s\", firstName, lastName, phoneNumber, DOB).getBytes());\n\n        kinesisVideoWebRTCStorageClient.putRecord(putRecordRequest);\n    }"
                  },
                  {
                    "sample" : "putRecord(putRecordRequest)",
                    "lineNumber" : 16,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/kinesisvideowebrtcstorage.java",
                    "excerpt" : "    public void AWSKinesisVideoWebrtcStorageFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        PutRecordRequest putRecordRequest = new PutRecordRequest()\n            .withStreamName(\"personal-data-stream\")\n            .withData(String.format(\"First Name: %s, Last Name: %s, Phone Number: %s, DOB: %s\", firstName, lastName, phoneNumber, DOB).getBytes());\n\n        kinesisVideoWebRTCStorageClient.putRecord(putRecordRequest); /* <=== com.amazonaws.services.kinesisvideowebrtcstorage.AWSKinesisVideoWebRTCStorage.putRecord */ \n    }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "14188-14176-14175-14205-14204-14202-14201-14222-14213-14212-14211-14226",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 15,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "    public static void AWSLambdaFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        // Build the AWS Lambda client\n        AWSLambda lambdaClient = AWSLambdaClientBuilder.defaultClient();\n\n        // Encode the personal data as a JSON string\n        String payload = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" + /* <=== java.lang.String */ \n                         \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +\n                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8));\n"
                  },
                  {
                    "sample" : "\"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" + \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" + \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" + \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\"",
                    "lineNumber" : 15,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "    public static void AWSLambdaFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        // Build the AWS Lambda client\n        AWSLambda lambdaClient = AWSLambdaClientBuilder.defaultClient();\n\n        // Encode the personal data as a JSON string\n        String payload = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" + /* <===  */ \n                         \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +\n                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8));\n"
                  },
                  {
                    "sample" : "payload",
                    "lineNumber" : 15,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "    public static void AWSLambdaFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        // Build the AWS Lambda client\n        AWSLambda lambdaClient = AWSLambdaClientBuilder.defaultClient();\n\n        // Encode the personal data as a JSON string\n        String payload = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" + /* <=== java.lang.String */ \n                         \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +\n                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8));\n"
                  },
                  {
                    "sample" : "payload",
                    "lineNumber" : 19,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "        // Encode the personal data as a JSON string\n        String payload = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" +\n                         \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +\n                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8)); /* <=== java.lang.String */ \n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest()\n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content);"
                  },
                  {
                    "sample" : "payload.getBytes(StandardCharsets.UTF_8)",
                    "lineNumber" : 19,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "        // Encode the personal data as a JSON string\n        String payload = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" +\n                         \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +\n                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8)); /* <=== java.lang.String.getBytes */ \n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest()\n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content);"
                  },
                  {
                    "sample" : "ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8))",
                    "lineNumber" : 19,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "        // Encode the personal data as a JSON string\n        String payload = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" +\n                         \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +\n                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8)); /* <=== java.nio.ByteBuffer.wrap */ \n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest()\n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content);"
                  },
                  {
                    "sample" : "content",
                    "lineNumber" : 19,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "        // Encode the personal data as a JSON string\n        String payload = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" +\n                         \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +\n                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8)); /* <=== java.nio.ByteBuffer */ \n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest()\n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content);"
                  },
                  {
                    "sample" : "content",
                    "lineNumber" : 24,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8));\n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest()\n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content); /* <=== java.nio.ByteBuffer */ \n        InvokeResult invokeResult = lambdaClient.invoke(invokeRequest);\n    }\n}\n"
                  },
                  {
                    "sample" : "withFunctionName(\"myLambdaFunction\")",
                    "lineNumber" : 22,
                    "columnNumber" : 39,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8));\n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest() /* <=== com.amazonaws.services.lambda.model.InvokeRequest.withFunctionName */ \n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content);\n        InvokeResult invokeResult = lambdaClient.invoke(invokeRequest);\n    }\n}"
                  },
                  {
                    "sample" : "withPayload(content)",
                    "lineNumber" : 22,
                    "columnNumber" : 39,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8));\n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest() /* <===  */ \n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content);\n        InvokeResult invokeResult = lambdaClient.invoke(invokeRequest);\n    }\n}"
                  },
                  {
                    "sample" : "invokeRequest",
                    "lineNumber" : 22,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8));\n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest() /* <=== com.amazonaws.services.lambda.model.InvokeRequest */ \n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content);\n        InvokeResult invokeResult = lambdaClient.invoke(invokeRequest);\n    }\n}"
                  },
                  {
                    "sample" : "invoke(invokeRequest)",
                    "lineNumber" : 25,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest()\n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content);\n        InvokeResult invokeResult = lambdaClient.invoke(invokeRequest); /* <=== com.amazonaws.services.lambda.AWSLambda.invoke */ \n    }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "14644-14665-14661-14652",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 14,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "\npublic class AWSDataExchangeUtil {\n    public static void AWSDataExchangeFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob, AmazonDataExchange dataExchangeClient) {\n        String dataSetName = firstName + \" \" + lastName + \" Personal Data\";\n        String revisionId = \"Revision1\";\n        String assetName = firstName + \" \" + lastName + \" Asset\"; /* <=== java.lang.String */ \n\n        // Create a new data set\n        CreateDataSetRequest createDataSetRequest = new CreateDataSetRequest()\n                .withName(dataSetName)\n                .withDescription(\"Personal data of \" + firstName + \" \" + lastName);"
                  },
                  {
                    "sample" : "firstName",
                    "lineNumber" : 19,
                    "columnNumber" : 56,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        String assetName = firstName + \" \" + lastName + \" Asset\";\n\n        // Create a new data set\n        CreateDataSetRequest createDataSetRequest = new CreateDataSetRequest()\n                .withName(dataSetName)\n                .withDescription(\"Personal data of \" + firstName + \" \" + lastName); /* <=== java.lang.String */ \n        String dataSetId = dataExchangeClient.createDataSet(createDataSetRequest).getId();\n\n        // Create a revision for the data set\n        CreateRevisionRequest createRevisionRequest = new CreateRevisionRequest()\n                .withDataSetId(dataSetId)"
                  },
                  {
                    "sample" : "\"Personal data of \" + firstName + \" \" + lastName",
                    "lineNumber" : 19,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        String assetName = firstName + \" \" + lastName + \" Asset\";\n\n        // Create a new data set\n        CreateDataSetRequest createDataSetRequest = new CreateDataSetRequest()\n                .withName(dataSetName)\n                .withDescription(\"Personal data of \" + firstName + \" \" + lastName); /* <===  */ \n        String dataSetId = dataExchangeClient.createDataSet(createDataSetRequest).getId();\n\n        // Create a revision for the data set\n        CreateRevisionRequest createRevisionRequest = new CreateRevisionRequest()\n                .withDataSetId(dataSetId)"
                  },
                  {
                    "sample" : "withName(dataSetName)",
                    "lineNumber" : 17,
                    "columnNumber" : 53,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        String dataSetName = firstName + \" \" + lastName + \" Personal Data\";\n        String revisionId = \"Revision1\";\n        String assetName = firstName + \" \" + lastName + \" Asset\";\n\n        // Create a new data set\n        CreateDataSetRequest createDataSetRequest = new CreateDataSetRequest() /* <=== com.amazonaws.services.dataexchange.model.CreateDataSetRequest.withName */ \n                .withName(dataSetName)\n                .withDescription(\"Personal data of \" + firstName + \" \" + lastName);\n        String dataSetId = dataExchangeClient.createDataSet(createDataSetRequest).getId();\n\n        // Create a revision for the data set"
                  }
                ]
              },
              {
                "pathId" : "13840-13831-13830-13829-13828-13842",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 9,
                    "columnNumber" : 95,
                    "fileName" : "/app/code/simpleSystemManagement.java",
                    "excerpt" : "\npublic class AWSSSMUtil {\n  public static void AWSSSMFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    AWSSimpleSystemsManagement ssmClient = AWSSimpleSystemsManagementClientBuilder.defaultClient();\n    String parameterName = \"/personalData/firstName\";\n    PutParameterRequest request = new PutParameterRequest().withName(parameterName).withValue(firstName).withType(\"String\"); /* <=== java.lang.String */ \n    ssmClient.putParameter(request);\n    \n    parameterName = \"/personalData/lastName\";\n    request = new PutParameterRequest().withName(parameterName).withValue(lastName).withType(\"String\");\n    ssmClient.putParameter(request);"
                  },
                  {
                    "sample" : "withName(parameterName)",
                    "lineNumber" : 9,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/simpleSystemManagement.java",
                    "excerpt" : "\npublic class AWSSSMUtil {\n  public static void AWSSSMFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    AWSSimpleSystemsManagement ssmClient = AWSSimpleSystemsManagementClientBuilder.defaultClient();\n    String parameterName = \"/personalData/firstName\";\n    PutParameterRequest request = new PutParameterRequest().withName(parameterName).withValue(firstName).withType(\"String\"); /* <=== com.amazonaws.services.simplesystemsmanagement.model.PutParameterRequest.withName */ \n    ssmClient.putParameter(request);\n    \n    parameterName = \"/personalData/lastName\";\n    request = new PutParameterRequest().withName(parameterName).withValue(lastName).withType(\"String\");\n    ssmClient.putParameter(request);"
                  },
                  {
                    "sample" : "withValue(firstName)",
                    "lineNumber" : 9,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/simpleSystemManagement.java",
                    "excerpt" : "\npublic class AWSSSMUtil {\n  public static void AWSSSMFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    AWSSimpleSystemsManagement ssmClient = AWSSimpleSystemsManagementClientBuilder.defaultClient();\n    String parameterName = \"/personalData/firstName\";\n    PutParameterRequest request = new PutParameterRequest().withName(parameterName).withValue(firstName).withType(\"String\"); /* <===  */ \n    ssmClient.putParameter(request);\n    \n    parameterName = \"/personalData/lastName\";\n    request = new PutParameterRequest().withName(parameterName).withValue(lastName).withType(\"String\");\n    ssmClient.putParameter(request);"
                  },
                  {
                    "sample" : "withType(\"String\")",
                    "lineNumber" : 9,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/simpleSystemManagement.java",
                    "excerpt" : "\npublic class AWSSSMUtil {\n  public static void AWSSSMFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    AWSSimpleSystemsManagement ssmClient = AWSSimpleSystemsManagementClientBuilder.defaultClient();\n    String parameterName = \"/personalData/firstName\";\n    PutParameterRequest request = new PutParameterRequest().withName(parameterName).withValue(firstName).withType(\"String\"); /* <===  */ \n    ssmClient.putParameter(request);\n    \n    parameterName = \"/personalData/lastName\";\n    request = new PutParameterRequest().withName(parameterName).withValue(lastName).withType(\"String\");\n    ssmClient.putParameter(request);"
                  },
                  {
                    "sample" : "request",
                    "lineNumber" : 9,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/simpleSystemManagement.java",
                    "excerpt" : "\npublic class AWSSSMUtil {\n  public static void AWSSSMFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    AWSSimpleSystemsManagement ssmClient = AWSSimpleSystemsManagementClientBuilder.defaultClient();\n    String parameterName = \"/personalData/firstName\";\n    PutParameterRequest request = new PutParameterRequest().withName(parameterName).withValue(firstName).withType(\"String\"); /* <=== com.amazonaws.services.simplesystemsmanagement.model.PutParameterRequest */ \n    ssmClient.putParameter(request);\n    \n    parameterName = \"/personalData/lastName\";\n    request = new PutParameterRequest().withName(parameterName).withValue(lastName).withType(\"String\");\n    ssmClient.putParameter(request);"
                  },
                  {
                    "sample" : "putParameter(request)",
                    "lineNumber" : 10,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/simpleSystemManagement.java",
                    "excerpt" : "public class AWSSSMUtil {\n  public static void AWSSSMFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    AWSSimpleSystemsManagement ssmClient = AWSSimpleSystemsManagementClientBuilder.defaultClient();\n    String parameterName = \"/personalData/firstName\";\n    PutParameterRequest request = new PutParameterRequest().withName(parameterName).withValue(firstName).withType(\"String\");\n    ssmClient.putParameter(request); /* <=== com.amazonaws.services.simplesystemsmanagement.AWSSimpleSystemsManagement.putParameter */ \n    \n    parameterName = \"/personalData/lastName\";\n    request = new PutParameterRequest().withName(parameterName).withValue(lastName).withType(\"String\");\n    ssmClient.putParameter(request);\n    "
                  }
                ]
              },
              {
                "pathId" : "16227-16226-16215-16214-16213-16212-16233",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 32,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob));\n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest()\n                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName) /* <=== java.lang.String */ \n                .withUserAttributes(userAttributes);\n\n        // Send the request to create the user\n        AdminCreateUserResult createUserResult = cognitoIdpClient.adminCreateUser(createUserRequest);\n"
                  },
                  {
                    "sample" : "firstName + lastName",
                    "lineNumber" : 32,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob));\n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest()\n                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName) /* <===  */ \n                .withUserAttributes(userAttributes);\n\n        // Send the request to create the user\n        AdminCreateUserResult createUserResult = cognitoIdpClient.adminCreateUser(createUserRequest);\n"
                  },
                  {
                    "sample" : "withUserPoolId(USER_POOL_ID)",
                    "lineNumber" : 30,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "        userAttributes.add(new AttributeType().withName(\"family_name\").withValue(lastName));\n        userAttributes.add(new AttributeType().withName(\"phone_number\").withValue(phoneNumber));\n        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob));\n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest() /* <=== com.amazonaws.services.cognitoidp.model.AdminCreateUserRequest.withUserPoolId */ \n                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName)\n                .withUserAttributes(userAttributes);\n\n        // Send the request to create the user"
                  },
                  {
                    "sample" : "withUsername(firstName + lastName)",
                    "lineNumber" : 30,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "        userAttributes.add(new AttributeType().withName(\"family_name\").withValue(lastName));\n        userAttributes.add(new AttributeType().withName(\"phone_number\").withValue(phoneNumber));\n        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob));\n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest() /* <===  */ \n                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName)\n                .withUserAttributes(userAttributes);\n\n        // Send the request to create the user"
                  },
                  {
                    "sample" : "withUserAttributes(userAttributes)",
                    "lineNumber" : 30,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "        userAttributes.add(new AttributeType().withName(\"family_name\").withValue(lastName));\n        userAttributes.add(new AttributeType().withName(\"phone_number\").withValue(phoneNumber));\n        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob));\n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest() /* <===  */ \n                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName)\n                .withUserAttributes(userAttributes);\n\n        // Send the request to create the user"
                  },
                  {
                    "sample" : "createUserRequest",
                    "lineNumber" : 30,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "        userAttributes.add(new AttributeType().withName(\"family_name\").withValue(lastName));\n        userAttributes.add(new AttributeType().withName(\"phone_number\").withValue(phoneNumber));\n        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob));\n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest() /* <=== com.amazonaws.services.cognitoidp.model.AdminCreateUserRequest */ \n                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName)\n                .withUserAttributes(userAttributes);\n\n        // Send the request to create the user"
                  },
                  {
                    "sample" : "adminCreateUser(createUserRequest)",
                    "lineNumber" : 36,
                    "columnNumber" : 50,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName)\n                .withUserAttributes(userAttributes);\n\n        // Send the request to create the user\n        AdminCreateUserResult createUserResult = cognitoIdpClient.adminCreateUser(createUserRequest); /* <=== com.amazonaws.services.cognitoidp.AWSCognitoIdentityProvider.adminCreateUser */ \n\n        // Get the user's unique identifier\n        String userId = createUserResult.getUser().getUsername();\n\n        System.out.println(\"Successfully created user with ID: \" + userId);"
                  }
                ]
              },
              {
                "pathId" : "5048-5044-5043-5034",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 14,
                    "columnNumber" : 97,
                    "fileName" : "/app/code/kinesisvideowebrtcstorage.java",
                    "excerpt" : "    }\n\n    public void AWSKinesisVideoWebrtcStorageFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        PutRecordRequest putRecordRequest = new PutRecordRequest()\n            .withStreamName(\"personal-data-stream\")\n            .withData(String.format(\"First Name: %s, Last Name: %s, Phone Number: %s, DOB: %s\", firstName, lastName, phoneNumber, DOB).getBytes()); /* <=== java.lang.String */ \n\n        kinesisVideoWebRTCStorageClient.putRecord(putRecordRequest);\n    }\n}\n"
                  },
                  {
                    "sample" : "String.format(\"First Name: %s, Last Name: %s, Phone Number: %s, DOB: %s\", firstName, lastName, phoneNumber, DOB)",
                    "lineNumber" : 14,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/kinesisvideowebrtcstorage.java",
                    "excerpt" : "    }\n\n    public void AWSKinesisVideoWebrtcStorageFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        PutRecordRequest putRecordRequest = new PutRecordRequest()\n            .withStreamName(\"personal-data-stream\")\n            .withData(String.format(\"First Name: %s, Last Name: %s, Phone Number: %s, DOB: %s\", firstName, lastName, phoneNumber, DOB).getBytes()); /* <=== java.lang.String.format */ \n\n        kinesisVideoWebRTCStorageClient.putRecord(putRecordRequest);\n    }\n}\n"
                  },
                  {
                    "sample" : "String.format(\"First Name: %s, Last Name: %s, Phone Number: %s, DOB: %s\", firstName, lastName, phoneNumber, DOB).getBytes()",
                    "lineNumber" : 14,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/kinesisvideowebrtcstorage.java",
                    "excerpt" : "    }\n\n    public void AWSKinesisVideoWebrtcStorageFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        PutRecordRequest putRecordRequest = new PutRecordRequest()\n            .withStreamName(\"personal-data-stream\")\n            .withData(String.format(\"First Name: %s, Last Name: %s, Phone Number: %s, DOB: %s\", firstName, lastName, phoneNumber, DOB).getBytes()); /* <=== java.lang.String.getBytes */ \n\n        kinesisVideoWebRTCStorageClient.putRecord(putRecordRequest);\n    }\n}\n"
                  },
                  {
                    "sample" : "withStreamName(\"personal-data-stream\")",
                    "lineNumber" : 12,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/kinesisvideowebrtcstorage.java",
                    "excerpt" : "    public AWSKinesisVideoWebRTCStorageUtil(AWSKinesisVideoWebRTCStorage kinesisVideoWebRTCStorageClient) {\n        this.kinesisVideoWebRTCStorageClient = kinesisVideoWebRTCStorageClient;\n    }\n\n    public void AWSKinesisVideoWebrtcStorageFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        PutRecordRequest putRecordRequest = new PutRecordRequest() /* <=== com.amazonaws.services.kinesisvideowebrtcstorage.model.PutRecordRequest.withStreamName */ \n            .withStreamName(\"personal-data-stream\")\n            .withData(String.format(\"First Name: %s, Last Name: %s, Phone Number: %s, DOB: %s\", firstName, lastName, phoneNumber, DOB).getBytes());\n\n        kinesisVideoWebRTCStorageClient.putRecord(putRecordRequest);\n    }"
                  }
                ]
              },
              {
                "pathId" : "6436-6430-6429-6416-6415-6462-6449-6448-6447-6446-6465",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 13,
                    "columnNumber" : 84,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : "\n    public static void AWSlexmodelsv2FirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AmazonLexModelBuilding client = AmazonLexModelBuildingClientBuilder.standard().build();\n        SlotTypeMetadata metadata = new SlotTypeMetadata().withName(\"PersonalDataSlot\").withDescription(\"Personal data slot\");\n        SlotTypeProperties properties = new SlotTypeProperties().withEnumerationValues(\n                new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB) /* <=== java.lang.String */ \n        );\n        PutSlotTypeRequest request = new PutSlotTypeRequest().withName(\"PersonalDataSlot\").withChecksum(null)\n                .withDescription(\"Personal data slot\").withEnumerationValues(properties.getEnumerationValues())\n                .withSlotTypeMetadata(metadata);\n        client.putSlotType(request);"
                  },
                  {
                    "sample" : "firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB",
                    "lineNumber" : 13,
                    "columnNumber" : 84,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : "\n    public static void AWSlexmodelsv2FirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AmazonLexModelBuilding client = AmazonLexModelBuildingClientBuilder.standard().build();\n        SlotTypeMetadata metadata = new SlotTypeMetadata().withName(\"PersonalDataSlot\").withDescription(\"Personal data slot\");\n        SlotTypeProperties properties = new SlotTypeProperties().withEnumerationValues(\n                new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB) /* <===  */ \n        );\n        PutSlotTypeRequest request = new PutSlotTypeRequest().withName(\"PersonalDataSlot\").withChecksum(null)\n                .withDescription(\"Personal data slot\").withEnumerationValues(properties.getEnumerationValues())\n                .withSlotTypeMetadata(metadata);\n        client.putSlotType(request);"
                  },
                  {
                    "sample" : "$obj1",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "withEnumerationValues(new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB))",
                    "lineNumber" : 12,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : "public class AWSLexModelsV2Util {\n\n    public static void AWSlexmodelsv2FirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AmazonLexModelBuilding client = AmazonLexModelBuildingClientBuilder.standard().build();\n        SlotTypeMetadata metadata = new SlotTypeMetadata().withName(\"PersonalDataSlot\").withDescription(\"Personal data slot\");\n        SlotTypeProperties properties = new SlotTypeProperties().withEnumerationValues( /* <=== com.amazonaws.services.lexmodelbuilding.model.SlotTypeProperties.withEnumerationValues */ \n                new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB)\n        );\n        PutSlotTypeRequest request = new PutSlotTypeRequest().withName(\"PersonalDataSlot\").withChecksum(null)\n                .withDescription(\"Personal data slot\").withEnumerationValues(properties.getEnumerationValues())\n                .withSlotTypeMetadata(metadata);"
                  },
                  {
                    "sample" : "properties",
                    "lineNumber" : 12,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : "public class AWSLexModelsV2Util {\n\n    public static void AWSlexmodelsv2FirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AmazonLexModelBuilding client = AmazonLexModelBuildingClientBuilder.standard().build();\n        SlotTypeMetadata metadata = new SlotTypeMetadata().withName(\"PersonalDataSlot\").withDescription(\"Personal data slot\");\n        SlotTypeProperties properties = new SlotTypeProperties().withEnumerationValues( /* <=== com.amazonaws.services.lexmodelbuilding.model.SlotTypeProperties */ \n                new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB)\n        );\n        PutSlotTypeRequest request = new PutSlotTypeRequest().withName(\"PersonalDataSlot\").withChecksum(null)\n                .withDescription(\"Personal data slot\").withEnumerationValues(properties.getEnumerationValues())\n                .withSlotTypeMetadata(metadata);"
                  },
                  {
                    "sample" : "getEnumerationValues()",
                    "lineNumber" : 16,
                    "columnNumber" : 78,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : "        SlotTypeMetadata metadata = new SlotTypeMetadata().withName(\"PersonalDataSlot\").withDescription(\"Personal data slot\");\n        SlotTypeProperties properties = new SlotTypeProperties().withEnumerationValues(\n                new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB)\n        );\n        PutSlotTypeRequest request = new PutSlotTypeRequest().withName(\"PersonalDataSlot\").withChecksum(null)\n                .withDescription(\"Personal data slot\").withEnumerationValues(properties.getEnumerationValues()) /* <=== com.amazonaws.services.lexmodelbuilding.model.SlotTypeProperties.getEnumerationValues */ \n                .withSlotTypeMetadata(metadata);\n        client.putSlotType(request);\n    }\n}\n"
                  },
                  {
                    "sample" : "withDescription(\"Personal data slot\")",
                    "lineNumber" : 15,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : "        AmazonLexModelBuilding client = AmazonLexModelBuildingClientBuilder.standard().build();\n        SlotTypeMetadata metadata = new SlotTypeMetadata().withName(\"PersonalDataSlot\").withDescription(\"Personal data slot\");\n        SlotTypeProperties properties = new SlotTypeProperties().withEnumerationValues(\n                new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB)\n        );\n        PutSlotTypeRequest request = new PutSlotTypeRequest().withName(\"PersonalDataSlot\").withChecksum(null) /* <===  */ \n                .withDescription(\"Personal data slot\").withEnumerationValues(properties.getEnumerationValues())\n                .withSlotTypeMetadata(metadata);\n        client.putSlotType(request);\n    }\n}"
                  },
                  {
                    "sample" : "withEnumerationValues(properties.getEnumerationValues())",
                    "lineNumber" : 15,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : "        AmazonLexModelBuilding client = AmazonLexModelBuildingClientBuilder.standard().build();\n        SlotTypeMetadata metadata = new SlotTypeMetadata().withName(\"PersonalDataSlot\").withDescription(\"Personal data slot\");\n        SlotTypeProperties properties = new SlotTypeProperties().withEnumerationValues(\n                new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB)\n        );\n        PutSlotTypeRequest request = new PutSlotTypeRequest().withName(\"PersonalDataSlot\").withChecksum(null) /* <===  */ \n                .withDescription(\"Personal data slot\").withEnumerationValues(properties.getEnumerationValues())\n                .withSlotTypeMetadata(metadata);\n        client.putSlotType(request);\n    }\n}"
                  },
                  {
                    "sample" : "withSlotTypeMetadata(metadata)",
                    "lineNumber" : 15,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : "        AmazonLexModelBuilding client = AmazonLexModelBuildingClientBuilder.standard().build();\n        SlotTypeMetadata metadata = new SlotTypeMetadata().withName(\"PersonalDataSlot\").withDescription(\"Personal data slot\");\n        SlotTypeProperties properties = new SlotTypeProperties().withEnumerationValues(\n                new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB)\n        );\n        PutSlotTypeRequest request = new PutSlotTypeRequest().withName(\"PersonalDataSlot\").withChecksum(null) /* <===  */ \n                .withDescription(\"Personal data slot\").withEnumerationValues(properties.getEnumerationValues())\n                .withSlotTypeMetadata(metadata);\n        client.putSlotType(request);\n    }\n}"
                  },
                  {
                    "sample" : "request",
                    "lineNumber" : 15,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : "        AmazonLexModelBuilding client = AmazonLexModelBuildingClientBuilder.standard().build();\n        SlotTypeMetadata metadata = new SlotTypeMetadata().withName(\"PersonalDataSlot\").withDescription(\"Personal data slot\");\n        SlotTypeProperties properties = new SlotTypeProperties().withEnumerationValues(\n                new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB)\n        );\n        PutSlotTypeRequest request = new PutSlotTypeRequest().withName(\"PersonalDataSlot\").withChecksum(null) /* <=== com.amazonaws.services.lexmodelbuilding.model.PutSlotTypeRequest */ \n                .withDescription(\"Personal data slot\").withEnumerationValues(properties.getEnumerationValues())\n                .withSlotTypeMetadata(metadata);\n        client.putSlotType(request);\n    }\n}"
                  },
                  {
                    "sample" : "putSlotType(request)",
                    "lineNumber" : 18,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : "                new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB)\n        );\n        PutSlotTypeRequest request = new PutSlotTypeRequest().withName(\"PersonalDataSlot\").withChecksum(null)\n                .withDescription(\"Personal data slot\").withEnumerationValues(properties.getEnumerationValues())\n                .withSlotTypeMetadata(metadata);\n        client.putSlotType(request); /* <=== com.amazonaws.services.lexmodelbuilding.AmazonLexModelBuilding.putSlotType */ \n    }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "14188-14176-14175-14205-14204-14202-14201-14222-14213",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 15,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "    public static void AWSLambdaFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        // Build the AWS Lambda client\n        AWSLambda lambdaClient = AWSLambdaClientBuilder.defaultClient();\n\n        // Encode the personal data as a JSON string\n        String payload = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" + /* <=== java.lang.String */ \n                         \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +\n                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8));\n"
                  },
                  {
                    "sample" : "\"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" + \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" + \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" + \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\"",
                    "lineNumber" : 15,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "    public static void AWSLambdaFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        // Build the AWS Lambda client\n        AWSLambda lambdaClient = AWSLambdaClientBuilder.defaultClient();\n\n        // Encode the personal data as a JSON string\n        String payload = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" + /* <===  */ \n                         \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +\n                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8));\n"
                  },
                  {
                    "sample" : "payload",
                    "lineNumber" : 15,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "    public static void AWSLambdaFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        // Build the AWS Lambda client\n        AWSLambda lambdaClient = AWSLambdaClientBuilder.defaultClient();\n\n        // Encode the personal data as a JSON string\n        String payload = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" + /* <=== java.lang.String */ \n                         \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +\n                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8));\n"
                  },
                  {
                    "sample" : "payload",
                    "lineNumber" : 19,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "        // Encode the personal data as a JSON string\n        String payload = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" +\n                         \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +\n                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8)); /* <=== java.lang.String */ \n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest()\n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content);"
                  },
                  {
                    "sample" : "payload.getBytes(StandardCharsets.UTF_8)",
                    "lineNumber" : 19,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "        // Encode the personal data as a JSON string\n        String payload = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" +\n                         \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +\n                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8)); /* <=== java.lang.String.getBytes */ \n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest()\n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content);"
                  },
                  {
                    "sample" : "ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8))",
                    "lineNumber" : 19,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "        // Encode the personal data as a JSON string\n        String payload = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" +\n                         \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +\n                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8)); /* <=== java.nio.ByteBuffer.wrap */ \n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest()\n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content);"
                  },
                  {
                    "sample" : "content",
                    "lineNumber" : 19,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "        // Encode the personal data as a JSON string\n        String payload = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" +\n                         \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +\n                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8)); /* <=== java.nio.ByteBuffer */ \n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest()\n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content);"
                  },
                  {
                    "sample" : "content",
                    "lineNumber" : 24,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8));\n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest()\n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content); /* <=== java.nio.ByteBuffer */ \n        InvokeResult invokeResult = lambdaClient.invoke(invokeRequest);\n    }\n}\n"
                  },
                  {
                    "sample" : "withFunctionName(\"myLambdaFunction\")",
                    "lineNumber" : 22,
                    "columnNumber" : 39,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8));\n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest() /* <=== com.amazonaws.services.lambda.model.InvokeRequest.withFunctionName */ \n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content);\n        InvokeResult invokeResult = lambdaClient.invoke(invokeRequest);\n    }\n}"
                  }
                ]
              },
              {
                "pathId" : "10208-10207-10211-10215-10219-10222",
                "path" : [
                  {
                    "sample" : "\"first_name\"",
                    "lineNumber" : 16,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/cloudcontrolapi.java",
                    "excerpt" : "\n        GetRightsizingRecommendationRequest request = new GetRightsizingRecommendationRequest();\n\n        // Add personal data to the request\n        Map<String, String> personalData = new HashMap<>();\n        personalData.put(\"first_name\", \"John\"); /* <===  */ \n        personalData.put(\"last_name\", \"Doe\");\n        personalData.put(\"email\", \"johndoe@example.com\");\n        personalData.put(\"phone_number\", \"555-555-1212\");\n        request.setPersonalData(personalData);\n"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 16,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/cloudcontrolapi.java",
                    "excerpt" : "\n        GetRightsizingRecommendationRequest request = new GetRightsizingRecommendationRequest();\n\n        // Add personal data to the request\n        Map<String, String> personalData = new HashMap<>();\n        personalData.put(\"first_name\", \"John\"); /* <=== java.util.Map */ \n        personalData.put(\"last_name\", \"Doe\");\n        personalData.put(\"email\", \"johndoe@example.com\");\n        personalData.put(\"phone_number\", \"555-555-1212\");\n        request.setPersonalData(personalData);\n"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 17,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/cloudcontrolapi.java",
                    "excerpt" : "        GetRightsizingRecommendationRequest request = new GetRightsizingRecommendationRequest();\n\n        // Add personal data to the request\n        Map<String, String> personalData = new HashMap<>();\n        personalData.put(\"first_name\", \"John\");\n        personalData.put(\"last_name\", \"Doe\"); /* <=== java.util.Map */ \n        personalData.put(\"email\", \"johndoe@example.com\");\n        personalData.put(\"phone_number\", \"555-555-1212\");\n        request.setPersonalData(personalData);\n\n        GetRightsizingRecommendationResult result = client.getRightsizingRecommendation(request);"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 18,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/cloudcontrolapi.java",
                    "excerpt" : "\n        // Add personal data to the request\n        Map<String, String> personalData = new HashMap<>();\n        personalData.put(\"first_name\", \"John\");\n        personalData.put(\"last_name\", \"Doe\");\n        personalData.put(\"email\", \"johndoe@example.com\"); /* <=== java.util.Map */ \n        personalData.put(\"phone_number\", \"555-555-1212\");\n        request.setPersonalData(personalData);\n\n        GetRightsizingRecommendationResult result = client.getRightsizingRecommendation(request);\n        System.out.println(\"Rightsizing recommendation: \" + result.getRecommendation());"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 19,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/cloudcontrolapi.java",
                    "excerpt" : "        // Add personal data to the request\n        Map<String, String> personalData = new HashMap<>();\n        personalData.put(\"first_name\", \"John\");\n        personalData.put(\"last_name\", \"Doe\");\n        personalData.put(\"email\", \"johndoe@example.com\");\n        personalData.put(\"phone_number\", \"555-555-1212\"); /* <=== java.util.Map */ \n        request.setPersonalData(personalData);\n\n        GetRightsizingRecommendationResult result = client.getRightsizingRecommendation(request);\n        System.out.println(\"Rightsizing recommendation: \" + result.getRecommendation());\n    }"
                  },
                  {
                    "sample" : "setPersonalData(personalData)",
                    "lineNumber" : 20,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/cloudcontrolapi.java",
                    "excerpt" : "        Map<String, String> personalData = new HashMap<>();\n        personalData.put(\"first_name\", \"John\");\n        personalData.put(\"last_name\", \"Doe\");\n        personalData.put(\"email\", \"johndoe@example.com\");\n        personalData.put(\"phone_number\", \"555-555-1212\");\n        request.setPersonalData(personalData); /* <=== com.amazonaws.services.cloudcontrolapi.model.GetRightsizingRecommendationRequest.setPersonalData */ \n\n        GetRightsizingRecommendationResult result = client.getRightsizingRecommendation(request);\n        System.out.println(\"Rightsizing recommendation: \" + result.getRecommendation());\n    }\n}"
                  }
                ]
              },
              {
                "pathId" : "13316-13314",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 16,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/marketplacemetering.java",
                    "excerpt" : "    // Create an instance of the AmazonMarketplaceMeteringClient.\n    client = AmazonMarketplaceMeteringClient.builder().build();\n\n    // Build the MeterUsageRequest with personal data such as first name, last name, phone number, DOB.\n    MeterUsageRequest request = new MeterUsageRequest();\n    request.setProductCode(firstName); /* <=== java.lang.String */ \n    request.setTimestamp(lastName);\n    request.setUsageDimension(phoneNumber);\n    request.setUsageQuantity(dob);\n\n    // Call the meterUsage method of the AmazonMarketplaceMeteringClient to send the data."
                  },
                  {
                    "sample" : "setProductCode(firstName)",
                    "lineNumber" : 16,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/marketplacemetering.java",
                    "excerpt" : "    // Create an instance of the AmazonMarketplaceMeteringClient.\n    client = AmazonMarketplaceMeteringClient.builder().build();\n\n    // Build the MeterUsageRequest with personal data such as first name, last name, phone number, DOB.\n    MeterUsageRequest request = new MeterUsageRequest();\n    request.setProductCode(firstName); /* <=== com.amazonaws.services.marketplacemetering.model.MeterUsageRequest.setProductCode */ \n    request.setTimestamp(lastName);\n    request.setUsageDimension(phoneNumber);\n    request.setUsageQuantity(dob);\n\n    // Call the meterUsage method of the AmazonMarketplaceMeteringClient to send the data."
                  }
                ]
              },
              {
                "pathId" : "14644-14665-14661-14652-14651-14650-14672-14671-14670-14766",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 14,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "\npublic class AWSDataExchangeUtil {\n    public static void AWSDataExchangeFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob, AmazonDataExchange dataExchangeClient) {\n        String dataSetName = firstName + \" \" + lastName + \" Personal Data\";\n        String revisionId = \"Revision1\";\n        String assetName = firstName + \" \" + lastName + \" Asset\"; /* <=== java.lang.String */ \n\n        // Create a new data set\n        CreateDataSetRequest createDataSetRequest = new CreateDataSetRequest()\n                .withName(dataSetName)\n                .withDescription(\"Personal data of \" + firstName + \" \" + lastName);"
                  },
                  {
                    "sample" : "firstName",
                    "lineNumber" : 19,
                    "columnNumber" : 56,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        String assetName = firstName + \" \" + lastName + \" Asset\";\n\n        // Create a new data set\n        CreateDataSetRequest createDataSetRequest = new CreateDataSetRequest()\n                .withName(dataSetName)\n                .withDescription(\"Personal data of \" + firstName + \" \" + lastName); /* <=== java.lang.String */ \n        String dataSetId = dataExchangeClient.createDataSet(createDataSetRequest).getId();\n\n        // Create a revision for the data set\n        CreateRevisionRequest createRevisionRequest = new CreateRevisionRequest()\n                .withDataSetId(dataSetId)"
                  },
                  {
                    "sample" : "\"Personal data of \" + firstName + \" \" + lastName",
                    "lineNumber" : 19,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        String assetName = firstName + \" \" + lastName + \" Asset\";\n\n        // Create a new data set\n        CreateDataSetRequest createDataSetRequest = new CreateDataSetRequest()\n                .withName(dataSetName)\n                .withDescription(\"Personal data of \" + firstName + \" \" + lastName); /* <===  */ \n        String dataSetId = dataExchangeClient.createDataSet(createDataSetRequest).getId();\n\n        // Create a revision for the data set\n        CreateRevisionRequest createRevisionRequest = new CreateRevisionRequest()\n                .withDataSetId(dataSetId)"
                  },
                  {
                    "sample" : "withName(dataSetName)",
                    "lineNumber" : 17,
                    "columnNumber" : 53,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        String dataSetName = firstName + \" \" + lastName + \" Personal Data\";\n        String revisionId = \"Revision1\";\n        String assetName = firstName + \" \" + lastName + \" Asset\";\n\n        // Create a new data set\n        CreateDataSetRequest createDataSetRequest = new CreateDataSetRequest() /* <=== com.amazonaws.services.dataexchange.model.CreateDataSetRequest.withName */ \n                .withName(dataSetName)\n                .withDescription(\"Personal data of \" + firstName + \" \" + lastName);\n        String dataSetId = dataExchangeClient.createDataSet(createDataSetRequest).getId();\n\n        // Create a revision for the data set"
                  },
                  {
                    "sample" : "withDescription(\"Personal data of \" + firstName + \" \" + lastName)",
                    "lineNumber" : 17,
                    "columnNumber" : 53,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        String dataSetName = firstName + \" \" + lastName + \" Personal Data\";\n        String revisionId = \"Revision1\";\n        String assetName = firstName + \" \" + lastName + \" Asset\";\n\n        // Create a new data set\n        CreateDataSetRequest createDataSetRequest = new CreateDataSetRequest() /* <===  */ \n                .withName(dataSetName)\n                .withDescription(\"Personal data of \" + firstName + \" \" + lastName);\n        String dataSetId = dataExchangeClient.createDataSet(createDataSetRequest).getId();\n\n        // Create a revision for the data set"
                  },
                  {
                    "sample" : "createDataSetRequest",
                    "lineNumber" : 17,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        String dataSetName = firstName + \" \" + lastName + \" Personal Data\";\n        String revisionId = \"Revision1\";\n        String assetName = firstName + \" \" + lastName + \" Asset\";\n\n        // Create a new data set\n        CreateDataSetRequest createDataSetRequest = new CreateDataSetRequest() /* <=== com.amazonaws.services.dataexchange.model.CreateDataSetRequest */ \n                .withName(dataSetName)\n                .withDescription(\"Personal data of \" + firstName + \" \" + lastName);\n        String dataSetId = dataExchangeClient.createDataSet(createDataSetRequest).getId();\n\n        // Create a revision for the data set"
                  },
                  {
                    "sample" : "createDataSet(createDataSetRequest)",
                    "lineNumber" : 20,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "\n        // Create a new data set\n        CreateDataSetRequest createDataSetRequest = new CreateDataSetRequest()\n                .withName(dataSetName)\n                .withDescription(\"Personal data of \" + firstName + \" \" + lastName);\n        String dataSetId = dataExchangeClient.createDataSet(createDataSetRequest).getId(); /* <=== com.amazonaws.services.dataexchange.AmazonDataExchange.createDataSet */ \n\n        // Create a revision for the data set\n        CreateRevisionRequest createRevisionRequest = new CreateRevisionRequest()\n                .withDataSetId(dataSetId)\n                .withComment(\"First revision for \" + firstName + \" \" + lastName + \" data\");"
                  },
                  {
                    "sample" : "getId()",
                    "lineNumber" : 20,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "\n        // Create a new data set\n        CreateDataSetRequest createDataSetRequest = new CreateDataSetRequest()\n                .withName(dataSetName)\n                .withDescription(\"Personal data of \" + firstName + \" \" + lastName);\n        String dataSetId = dataExchangeClient.createDataSet(createDataSetRequest).getId(); /* <===  */ \n\n        // Create a revision for the data set\n        CreateRevisionRequest createRevisionRequest = new CreateRevisionRequest()\n                .withDataSetId(dataSetId)\n                .withComment(\"First revision for \" + firstName + \" \" + lastName + \" data\");"
                  },
                  {
                    "sample" : "dataSetId",
                    "lineNumber" : 20,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "\n        // Create a new data set\n        CreateDataSetRequest createDataSetRequest = new CreateDataSetRequest()\n                .withName(dataSetName)\n                .withDescription(\"Personal data of \" + firstName + \" \" + lastName);\n        String dataSetId = dataExchangeClient.createDataSet(createDataSetRequest).getId(); /* <=== java.lang.String */ \n\n        // Create a revision for the data set\n        CreateRevisionRequest createRevisionRequest = new CreateRevisionRequest()\n                .withDataSetId(dataSetId)\n                .withComment(\"First revision for \" + firstName + \" \" + lastName + \" data\");"
                  },
                  {
                    "sample" : "withDataSetId(dataSetId)",
                    "lineNumber" : 36,
                    "columnNumber" : 62,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        entries.add(new DataSetEntry().withEntryName(\"lastName\").withContent(lastName));\n        entries.add(new DataSetEntry().withEntryName(\"phoneNumber\").withContent(phoneNumber));\n        entries.add(new DataSetEntry().withEntryName(\"dob\").withContent(dob));\n\n        // Import the asset\n        ImportAssetFromSignedUrlRequest importAssetRequest = new ImportAssetFromSignedUrlRequest() /* <=== com.amazonaws.services.dataexchange.model.ImportAssetFromSignedUrlRequest.withDataSetId */ \n                .withDataSetId(dataSetId)\n                .withRevisionId(revisionId)\n                .withAssetName(assetName)\n                .withEntries(entries);\n        dataExchangeClient.importAssetFromSignedUrl(importAssetRequest);"
                  }
                ]
              },
              {
                "pathId" : "7444-7466-7472-7469-7456",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 15,
                    "columnNumber" : 60,
                    "fileName" : "/app/code/migrationHub.java",
                    "excerpt" : "public AWSMigrationHubUtil() {\n    client = AmazonMigrationHubClientBuilder.standard().build();\n}\n\npublic void AWSMigrationHubProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob); /* <=== java.lang.String */ \n\n    ImportMigrationTaskRequest importMigrationTaskRequest = new ImportMigrationTaskRequest()\n            .withMigrationTaskName(firstName + \"_\" + lastName)\n            .withProgressUpdateStream(firstName + \"_\" + lastName + \"_Stream\")\n            .withResourceAttributeList(new ResourceAttribute().withType(\"PersonalData\")"
                  },
                  {
                    "sample" : "firstName",
                    "lineNumber" : 18,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/migrationHub.java",
                    "excerpt" : "\npublic void AWSMigrationHubProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\n    ImportMigrationTaskRequest importMigrationTaskRequest = new ImportMigrationTaskRequest()\n            .withMigrationTaskName(firstName + \"_\" + lastName) /* <=== java.lang.String */ \n            .withProgressUpdateStream(firstName + \"_\" + lastName + \"_Stream\")\n            .withResourceAttributeList(new ResourceAttribute().withType(\"PersonalData\")\n                    .withValue(personalData.toString()));\n\n    client.importMigrationTask(importMigrationTaskRequest);"
                  },
                  {
                    "sample" : "firstName",
                    "lineNumber" : 19,
                    "columnNumber" : 39,
                    "fileName" : "/app/code/migrationHub.java",
                    "excerpt" : "public void AWSMigrationHubProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\n    ImportMigrationTaskRequest importMigrationTaskRequest = new ImportMigrationTaskRequest()\n            .withMigrationTaskName(firstName + \"_\" + lastName)\n            .withProgressUpdateStream(firstName + \"_\" + lastName + \"_Stream\") /* <=== java.lang.String */ \n            .withResourceAttributeList(new ResourceAttribute().withType(\"PersonalData\")\n                    .withValue(personalData.toString()));\n\n    client.importMigrationTask(importMigrationTaskRequest);\n}"
                  },
                  {
                    "sample" : "firstName + \"_\" + lastName + \"_Stream\"",
                    "lineNumber" : 19,
                    "columnNumber" : 39,
                    "fileName" : "/app/code/migrationHub.java",
                    "excerpt" : "public void AWSMigrationHubProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\n    ImportMigrationTaskRequest importMigrationTaskRequest = new ImportMigrationTaskRequest()\n            .withMigrationTaskName(firstName + \"_\" + lastName)\n            .withProgressUpdateStream(firstName + \"_\" + lastName + \"_Stream\") /* <===  */ \n            .withResourceAttributeList(new ResourceAttribute().withType(\"PersonalData\")\n                    .withValue(personalData.toString()));\n\n    client.importMigrationTask(importMigrationTaskRequest);\n}"
                  },
                  {
                    "sample" : "withMigrationTaskName(firstName + \"_\" + lastName)",
                    "lineNumber" : 17,
                    "columnNumber" : 61,
                    "fileName" : "/app/code/migrationHub.java",
                    "excerpt" : "}\n\npublic void AWSMigrationHubProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\n    ImportMigrationTaskRequest importMigrationTaskRequest = new ImportMigrationTaskRequest() /* <=== com.amazonaws.services.migrationhub.model.ImportMigrationTaskRequest.withMigrationTaskName */ \n            .withMigrationTaskName(firstName + \"_\" + lastName)\n            .withProgressUpdateStream(firstName + \"_\" + lastName + \"_Stream\")\n            .withResourceAttributeList(new ResourceAttribute().withType(\"PersonalData\")\n                    .withValue(personalData.toString()));\n"
                  }
                ]
              },
              {
                "pathId" : "12011-12002-12001-12034-12033-12024",
                "path" : [
                  {
                    "sample" : "firstName",
                    "lineNumber" : 16,
                    "columnNumber" : 40,
                    "fileName" : "/app/code/apiGateway.java",
                    "excerpt" : "swift\nCopy code\n  Map<String, String> headers = new HashMap<>();\n  headers.put(\"Content-Type\", \"application/json\");\n  \n  String body = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \\\"lastName\\\": \\\"\" + lastName + \"\\\", \\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \\\"DOB\\\": \\\"\" + DOB + \"\\\"}\"; /* <=== java.lang.String */ \n \n  PostToConnectionRequest request = new PostToConnectionRequest()\n     .withConnectionId(\"connection-id\")\n     .withData(body.getBytes())\n     .withHeaders(headers);"
                  },
                  {
                    "sample" : "\"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \\\"lastName\\\": \\\"\" + lastName + \"\\\", \\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \\\"DOB\\\": \\\"\" + DOB + \"\\\"}\"",
                    "lineNumber" : 16,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/apiGateway.java",
                    "excerpt" : "swift\nCopy code\n  Map<String, String> headers = new HashMap<>();\n  headers.put(\"Content-Type\", \"application/json\");\n  \n  String body = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \\\"lastName\\\": \\\"\" + lastName + \"\\\", \\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \\\"DOB\\\": \\\"\" + DOB + \"\\\"}\"; /* <===  */ \n \n  PostToConnectionRequest request = new PostToConnectionRequest()\n     .withConnectionId(\"connection-id\")\n     .withData(body.getBytes())\n     .withHeaders(headers);"
                  },
                  {
                    "sample" : "body",
                    "lineNumber" : 16,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/apiGateway.java",
                    "excerpt" : "swift\nCopy code\n  Map<String, String> headers = new HashMap<>();\n  headers.put(\"Content-Type\", \"application/json\");\n  \n  String body = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \\\"lastName\\\": \\\"\" + lastName + \"\\\", \\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \\\"DOB\\\": \\\"\" + DOB + \"\\\"}\"; /* <=== java.lang.String */ \n \n  PostToConnectionRequest request = new PostToConnectionRequest()\n     .withConnectionId(\"connection-id\")\n     .withData(body.getBytes())\n     .withHeaders(headers);"
                  },
                  {
                    "sample" : "body",
                    "lineNumber" : 20,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/apiGateway.java",
                    "excerpt" : "  \n  String body = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \\\"lastName\\\": \\\"\" + lastName + \"\\\", \\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \\\"DOB\\\": \\\"\" + DOB + \"\\\"}\";\n \n  PostToConnectionRequest request = new PostToConnectionRequest()\n     .withConnectionId(\"connection-id\")\n     .withData(body.getBytes()) /* <=== java.lang.String */ \n     .withHeaders(headers);\n \n  client.postToConnection(request);\n}\n}"
                  },
                  {
                    "sample" : "body.getBytes()",
                    "lineNumber" : 20,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/apiGateway.java",
                    "excerpt" : "  \n  String body = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \\\"lastName\\\": \\\"\" + lastName + \"\\\", \\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \\\"DOB\\\": \\\"\" + DOB + \"\\\"}\";\n \n  PostToConnectionRequest request = new PostToConnectionRequest()\n     .withConnectionId(\"connection-id\")\n     .withData(body.getBytes()) /* <=== java.lang.String.getBytes */ \n     .withHeaders(headers);\n \n  client.postToConnection(request);\n}\n}"
                  },
                  {
                    "sample" : "withConnectionId(\"connection-id\")",
                    "lineNumber" : 18,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/apiGateway.java",
                    "excerpt" : "  Map<String, String> headers = new HashMap<>();\n  headers.put(\"Content-Type\", \"application/json\");\n  \n  String body = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \\\"lastName\\\": \\\"\" + lastName + \"\\\", \\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \\\"DOB\\\": \\\"\" + DOB + \"\\\"}\";\n \n  PostToConnectionRequest request = new PostToConnectionRequest() /* <=== com.amazonaws.services.apigateway.model.PostToConnectionRequest.withConnectionId */ \n     .withConnectionId(\"connection-id\")\n     .withData(body.getBytes())\n     .withHeaders(headers);\n \n  client.postToConnection(request);"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.ContactData.Address",
        "sinks" : [
          {
            "sinkType" : "third_parties",
            "id" : "ThirdParties.SDK.Amazon.Aws",
            "name" : "Amazon Aws",
            "category" : "",
            "domains" : [
              "aws.amazon.com"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "databaseDetails" : {
              "dbName" : "",
              "dbVendor" : "",
              "dbLocation" : "",
              "dbOperation" : ""
            },
            "paths" : [
              {
                "pathId" : "1415-1416-1414-1418-1434-1425",
                "path" : [
                  {
                    "sample" : "\"Address\"",
                    "lineNumber" : 18,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/memoryDB.java",
                    "excerpt" : "    }\n\n    public void processData(String name, String address, int age) {\n        Map<String, Object> item = new HashMap<>();\n        item.put(\"Name\", name);\n        item.put(\"Address\", address); /* <===  */ \n        item.put(\"Age\", age);\n\n        PutItemRequest request = new PutItemRequest().withTableName(\"PersonalData\").withItem(item);\n        memoryDBClient.putItem(request);\n    }"
                  },
                  {
                    "sample" : "address",
                    "lineNumber" : 18,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/memoryDB.java",
                    "excerpt" : "    }\n\n    public void processData(String name, String address, int age) {\n        Map<String, Object> item = new HashMap<>();\n        item.put(\"Name\", name);\n        item.put(\"Address\", address); /* <=== java.lang.String */ \n        item.put(\"Age\", age);\n\n        PutItemRequest request = new PutItemRequest().withTableName(\"PersonalData\").withItem(item);\n        memoryDBClient.putItem(request);\n    }"
                  },
                  {
                    "sample" : "item",
                    "lineNumber" : 18,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/memoryDB.java",
                    "excerpt" : "    }\n\n    public void processData(String name, String address, int age) {\n        Map<String, Object> item = new HashMap<>();\n        item.put(\"Name\", name);\n        item.put(\"Address\", address); /* <=== java.util.Map */ \n        item.put(\"Age\", age);\n\n        PutItemRequest request = new PutItemRequest().withTableName(\"PersonalData\").withItem(item);\n        memoryDBClient.putItem(request);\n    }"
                  },
                  {
                    "sample" : "item",
                    "lineNumber" : 19,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/memoryDB.java",
                    "excerpt" : "\n    public void processData(String name, String address, int age) {\n        Map<String, Object> item = new HashMap<>();\n        item.put(\"Name\", name);\n        item.put(\"Address\", address);\n        item.put(\"Age\", age); /* <=== java.util.Map */ \n\n        PutItemRequest request = new PutItemRequest().withTableName(\"PersonalData\").withItem(item);\n        memoryDBClient.putItem(request);\n    }\n}"
                  },
                  {
                    "sample" : "item",
                    "lineNumber" : 21,
                    "columnNumber" : 94,
                    "fileName" : "/app/code/memoryDB.java",
                    "excerpt" : "        Map<String, Object> item = new HashMap<>();\n        item.put(\"Name\", name);\n        item.put(\"Address\", address);\n        item.put(\"Age\", age);\n\n        PutItemRequest request = new PutItemRequest().withTableName(\"PersonalData\").withItem(item); /* <=== java.util.Map */ \n        memoryDBClient.putItem(request);\n    }\n}\n"
                  },
                  {
                    "sample" : "withTableName(\"PersonalData\")",
                    "lineNumber" : 21,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/memoryDB.java",
                    "excerpt" : "        Map<String, Object> item = new HashMap<>();\n        item.put(\"Name\", name);\n        item.put(\"Address\", address);\n        item.put(\"Age\", age);\n\n        PutItemRequest request = new PutItemRequest().withTableName(\"PersonalData\").withItem(item); /* <=== com.amazonaws.services.memorydb.model.PutItemRequest.withTableName */ \n        memoryDBClient.putItem(request);\n    }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "1415-1416-1414-1418-1434-1425-1424-1423-1435",
                "path" : [
                  {
                    "sample" : "\"Address\"",
                    "lineNumber" : 18,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/memoryDB.java",
                    "excerpt" : "    }\n\n    public void processData(String name, String address, int age) {\n        Map<String, Object> item = new HashMap<>();\n        item.put(\"Name\", name);\n        item.put(\"Address\", address); /* <===  */ \n        item.put(\"Age\", age);\n\n        PutItemRequest request = new PutItemRequest().withTableName(\"PersonalData\").withItem(item);\n        memoryDBClient.putItem(request);\n    }"
                  },
                  {
                    "sample" : "address",
                    "lineNumber" : 18,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/memoryDB.java",
                    "excerpt" : "    }\n\n    public void processData(String name, String address, int age) {\n        Map<String, Object> item = new HashMap<>();\n        item.put(\"Name\", name);\n        item.put(\"Address\", address); /* <=== java.lang.String */ \n        item.put(\"Age\", age);\n\n        PutItemRequest request = new PutItemRequest().withTableName(\"PersonalData\").withItem(item);\n        memoryDBClient.putItem(request);\n    }"
                  },
                  {
                    "sample" : "item",
                    "lineNumber" : 18,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/memoryDB.java",
                    "excerpt" : "    }\n\n    public void processData(String name, String address, int age) {\n        Map<String, Object> item = new HashMap<>();\n        item.put(\"Name\", name);\n        item.put(\"Address\", address); /* <=== java.util.Map */ \n        item.put(\"Age\", age);\n\n        PutItemRequest request = new PutItemRequest().withTableName(\"PersonalData\").withItem(item);\n        memoryDBClient.putItem(request);\n    }"
                  },
                  {
                    "sample" : "item",
                    "lineNumber" : 19,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/memoryDB.java",
                    "excerpt" : "\n    public void processData(String name, String address, int age) {\n        Map<String, Object> item = new HashMap<>();\n        item.put(\"Name\", name);\n        item.put(\"Address\", address);\n        item.put(\"Age\", age); /* <=== java.util.Map */ \n\n        PutItemRequest request = new PutItemRequest().withTableName(\"PersonalData\").withItem(item);\n        memoryDBClient.putItem(request);\n    }\n}"
                  },
                  {
                    "sample" : "item",
                    "lineNumber" : 21,
                    "columnNumber" : 94,
                    "fileName" : "/app/code/memoryDB.java",
                    "excerpt" : "        Map<String, Object> item = new HashMap<>();\n        item.put(\"Name\", name);\n        item.put(\"Address\", address);\n        item.put(\"Age\", age);\n\n        PutItemRequest request = new PutItemRequest().withTableName(\"PersonalData\").withItem(item); /* <=== java.util.Map */ \n        memoryDBClient.putItem(request);\n    }\n}\n"
                  },
                  {
                    "sample" : "withTableName(\"PersonalData\")",
                    "lineNumber" : 21,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/memoryDB.java",
                    "excerpt" : "        Map<String, Object> item = new HashMap<>();\n        item.put(\"Name\", name);\n        item.put(\"Address\", address);\n        item.put(\"Age\", age);\n\n        PutItemRequest request = new PutItemRequest().withTableName(\"PersonalData\").withItem(item); /* <=== com.amazonaws.services.memorydb.model.PutItemRequest.withTableName */ \n        memoryDBClient.putItem(request);\n    }\n}\n"
                  },
                  {
                    "sample" : "withItem(item)",
                    "lineNumber" : 21,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/memoryDB.java",
                    "excerpt" : "        Map<String, Object> item = new HashMap<>();\n        item.put(\"Name\", name);\n        item.put(\"Address\", address);\n        item.put(\"Age\", age);\n\n        PutItemRequest request = new PutItemRequest().withTableName(\"PersonalData\").withItem(item); /* <===  */ \n        memoryDBClient.putItem(request);\n    }\n}\n"
                  },
                  {
                    "sample" : "request",
                    "lineNumber" : 21,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/memoryDB.java",
                    "excerpt" : "        Map<String, Object> item = new HashMap<>();\n        item.put(\"Name\", name);\n        item.put(\"Address\", address);\n        item.put(\"Age\", age);\n\n        PutItemRequest request = new PutItemRequest().withTableName(\"PersonalData\").withItem(item); /* <=== com.amazonaws.services.memorydb.model.PutItemRequest */ \n        memoryDBClient.putItem(request);\n    }\n}\n"
                  },
                  {
                    "sample" : "putItem(request)",
                    "lineNumber" : 22,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/memoryDB.java",
                    "excerpt" : "        item.put(\"Name\", name);\n        item.put(\"Address\", address);\n        item.put(\"Age\", age);\n\n        PutItemRequest request = new PutItemRequest().withTableName(\"PersonalData\").withItem(item);\n        memoryDBClient.putItem(request); /* <=== com.amazonaws.services.memorydb.AmazonMemoryDB.putItem */ \n    }\n}\n"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.ContactData.PhoneNumber",
        "sinks" : [
          {
            "sinkType" : "third_parties",
            "id" : "ThirdParties.SDK.Amazon.Aws",
            "name" : "Amazon Aws",
            "category" : "",
            "domains" : [
              "aws.amazon.com"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "databaseDetails" : {
              "dbName" : "",
              "dbVendor" : "",
              "dbLocation" : "",
              "dbOperation" : ""
            },
            "paths" : [
              {
                "pathId" : "14746-14737",
                "path" : [
                  {
                    "sample" : "phoneNumber",
                    "lineNumber" : 32,
                    "columnNumber" : 81,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "\n        // Prepare the asset\n        List<DataSetEntry> entries = new ArrayList<>();\n        entries.add(new DataSetEntry().withEntryName(\"firstName\").withContent(firstName));\n        entries.add(new DataSetEntry().withEntryName(\"lastName\").withContent(lastName));\n        entries.add(new DataSetEntry().withEntryName(\"phoneNumber\").withContent(phoneNumber)); /* <=== java.lang.String */ \n        entries.add(new DataSetEntry().withEntryName(\"dob\").withContent(dob));\n\n        // Import the asset\n        ImportAssetFromSignedUrlRequest importAssetRequest = new ImportAssetFromSignedUrlRequest()\n                .withDataSetId(dataSetId)"
                  },
                  {
                    "sample" : "withEntryName(\"phoneNumber\")",
                    "lineNumber" : 32,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "\n        // Prepare the asset\n        List<DataSetEntry> entries = new ArrayList<>();\n        entries.add(new DataSetEntry().withEntryName(\"firstName\").withContent(firstName));\n        entries.add(new DataSetEntry().withEntryName(\"lastName\").withContent(lastName));\n        entries.add(new DataSetEntry().withEntryName(\"phoneNumber\").withContent(phoneNumber)); /* <=== com.amazonaws.services.dataexchange.model.DataSetEntry.withEntryName */ \n        entries.add(new DataSetEntry().withEntryName(\"dob\").withContent(dob));\n\n        // Import the asset\n        ImportAssetFromSignedUrlRequest importAssetRequest = new ImportAssetFromSignedUrlRequest()\n                .withDataSetId(dataSetId)"
                  }
                ]
              },
              {
                "pathId" : "8825-8814-8813-8812-8829",
                "path" : [
                  {
                    "sample" : "phoneNumber",
                    "lineNumber" : 18,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/voiceid.java",
                    "excerpt" : "    public void processPersonalData(String firstName, String lastName, String phoneNumber) {\n        // Create a new profile in Voice ID\n        CreateProfileRequest createProfileRequest = new CreateProfileRequest()\n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber); /* <=== java.lang.String */ \n        CreateProfileResult createProfileResult = voiceIdClient.createProfile(createProfileRequest);\n        System.out.println(\"Profile created with ID: \" + createProfileResult.getProfileId());\n    }\n}\n"
                  },
                  {
                    "sample" : "withLastName(lastName)",
                    "lineNumber" : 15,
                    "columnNumber" : 53,
                    "fileName" : "/app/code/voiceid.java",
                    "excerpt" : "        this.voiceIdClient = voiceIdClient;\n    }\n\n    public void processPersonalData(String firstName, String lastName, String phoneNumber) {\n        // Create a new profile in Voice ID\n        CreateProfileRequest createProfileRequest = new CreateProfileRequest() /* <===  */ \n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber);\n        CreateProfileResult createProfileResult = voiceIdClient.createProfile(createProfileRequest);\n        System.out.println(\"Profile created with ID: \" + createProfileResult.getProfileId());"
                  },
                  {
                    "sample" : "withPhoneNumber(phoneNumber)",
                    "lineNumber" : 15,
                    "columnNumber" : 53,
                    "fileName" : "/app/code/voiceid.java",
                    "excerpt" : "        this.voiceIdClient = voiceIdClient;\n    }\n\n    public void processPersonalData(String firstName, String lastName, String phoneNumber) {\n        // Create a new profile in Voice ID\n        CreateProfileRequest createProfileRequest = new CreateProfileRequest() /* <===  */ \n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber);\n        CreateProfileResult createProfileResult = voiceIdClient.createProfile(createProfileRequest);\n        System.out.println(\"Profile created with ID: \" + createProfileResult.getProfileId());"
                  },
                  {
                    "sample" : "createProfileRequest",
                    "lineNumber" : 15,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/voiceid.java",
                    "excerpt" : "        this.voiceIdClient = voiceIdClient;\n    }\n\n    public void processPersonalData(String firstName, String lastName, String phoneNumber) {\n        // Create a new profile in Voice ID\n        CreateProfileRequest createProfileRequest = new CreateProfileRequest() /* <=== com.amazonaws.services.voiceid.model.CreateProfileRequest */ \n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber);\n        CreateProfileResult createProfileResult = voiceIdClient.createProfile(createProfileRequest);\n        System.out.println(\"Profile created with ID: \" + createProfileResult.getProfileId());"
                  },
                  {
                    "sample" : "createProfile(createProfileRequest)",
                    "lineNumber" : 19,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/voiceid.java",
                    "excerpt" : "        // Create a new profile in Voice ID\n        CreateProfileRequest createProfileRequest = new CreateProfileRequest()\n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber);\n        CreateProfileResult createProfileResult = voiceIdClient.createProfile(createProfileRequest); /* <=== com.amazonaws.services.voiceid.model.VoiceIdClient.createProfile */ \n        System.out.println(\"Profile created with ID: \" + createProfileResult.getProfileId());\n    }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "11550-11541",
                "path" : [
                  {
                    "sample" : "phoneNumber",
                    "lineNumber" : 31,
                    "columnNumber" : 57,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "    String workspaceId = workspace.getWorkspaceId();\n\n    List<Tag> tags = new ArrayList<>();\n    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber)); /* <=== java.lang.String */ \n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags);\n    workspacesClient.tagWorkspace(tagWorkspaceRequest);\n"
                  },
                  {
                    "sample" : "withKey(\"phoneNumber\")",
                    "lineNumber" : 31,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "    String workspaceId = workspace.getWorkspaceId();\n\n    List<Tag> tags = new ArrayList<>();\n    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber)); /* <=== com.amazonaws.services.workspaces.model.Tag.withKey */ \n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags);\n    workspacesClient.tagWorkspace(tagWorkspaceRequest);\n"
                  }
                ]
              },
              {
                "pathId" : "13882-13873",
                "path" : [
                  {
                    "sample" : "phoneNumber",
                    "lineNumber" : 17,
                    "columnNumber" : 75,
                    "fileName" : "/app/code/simpleSystemManagement.java",
                    "excerpt" : "    parameterName = \"/personalData/lastName\";\n    request = new PutParameterRequest().withName(parameterName).withValue(lastName).withType(\"String\");\n    ssmClient.putParameter(request);\n    \n    parameterName = \"/personalData/phoneNumber\";\n    request = new PutParameterRequest().withName(parameterName).withValue(phoneNumber).withType(\"String\"); /* <=== java.lang.String */ \n    ssmClient.putParameter(request);\n    \n    parameterName = \"/personalData/dob\";\n    request = new PutParameterRequest().withName(parameterName).withValue(dob).withType(\"String\");\n    ssmClient.putParameter(request);"
                  },
                  {
                    "sample" : "withName(parameterName)",
                    "lineNumber" : 17,
                    "columnNumber" : 15,
                    "fileName" : "/app/code/simpleSystemManagement.java",
                    "excerpt" : "    parameterName = \"/personalData/lastName\";\n    request = new PutParameterRequest().withName(parameterName).withValue(lastName).withType(\"String\");\n    ssmClient.putParameter(request);\n    \n    parameterName = \"/personalData/phoneNumber\";\n    request = new PutParameterRequest().withName(parameterName).withValue(phoneNumber).withType(\"String\"); /* <=== com.amazonaws.services.simplesystemsmanagement.model.PutParameterRequest.withName */ \n    ssmClient.putParameter(request);\n    \n    parameterName = \"/personalData/dob\";\n    request = new PutParameterRequest().withName(parameterName).withValue(dob).withType(\"String\");\n    ssmClient.putParameter(request);"
                  }
                ]
              },
              {
                "pathId" : "13027-13020-13019-13061-13034-13033-13032-13066",
                "path" : [
                  {
                    "sample" : "phoneNumber",
                    "lineNumber" : 16,
                    "columnNumber" : 104,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "public AWSIoTDeviceAdvisorUtil() {\nclient = AmazonIoTDeviceAdvisorClientBuilder.standard().build();\n}\n\npublic void AWSIoTDeviceAdvisorProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob); /* <=== java.lang.String */ \n\nTestRound testRound = new TestRound().withName(firstName + \"_\" + lastName + \"_TestRound\")\n        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n"
                  },
                  {
                    "sample" : "Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob)",
                    "lineNumber" : 16,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "public AWSIoTDeviceAdvisorUtil() {\nclient = AmazonIoTDeviceAdvisorClientBuilder.standard().build();\n}\n\npublic void AWSIoTDeviceAdvisorProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob); /* <=== java.util.Map.of */ \n\nTestRound testRound = new TestRound().withName(firstName + \"_\" + lastName + \"_TestRound\")\n        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 16,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "public AWSIoTDeviceAdvisorUtil() {\nclient = AmazonIoTDeviceAdvisorClientBuilder.standard().build();\n}\n\npublic void AWSIoTDeviceAdvisorProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob); /* <=== java.util.Map */ \n\nTestRound testRound = new TestRound().withName(firstName + \"_\" + lastName + \"_TestRound\")\n        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n"
                  },
                  {
                    "sample" : "personalData.toString()",
                    "lineNumber" : 20,
                    "columnNumber" : 75,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "public void AWSIoTDeviceAdvisorProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nTestRound testRound = new TestRound().withName(firstName + \"_\" + lastName + \"_TestRound\")\n        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString()); /* <=== java.util.Map.toString */ \n\nTestResult result = client.createTestRound(testRound);\n\nSystem.out.println(\"Result: \" + result.toString());\n}"
                  },
                  {
                    "sample" : "withPayloadSelection(PayloadSelection.PERSONAL_DATA)",
                    "lineNumber" : 18,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "}\n\npublic void AWSIoTDeviceAdvisorProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nTestRound testRound = new TestRound().withName(firstName + \"_\" + lastName + \"_TestRound\") /* <===  */ \n        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n\nTestResult result = client.createTestRound(testRound);\n"
                  },
                  {
                    "sample" : "withPayload(personalData.toString())",
                    "lineNumber" : 18,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "}\n\npublic void AWSIoTDeviceAdvisorProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nTestRound testRound = new TestRound().withName(firstName + \"_\" + lastName + \"_TestRound\") /* <===  */ \n        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n\nTestResult result = client.createTestRound(testRound);\n"
                  },
                  {
                    "sample" : "testRound",
                    "lineNumber" : 18,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "}\n\npublic void AWSIoTDeviceAdvisorProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nTestRound testRound = new TestRound().withName(firstName + \"_\" + lastName + \"_TestRound\") /* <=== com.amazonaws.services.iotdeviceadvisor.model.TestRound */ \n        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n\nTestResult result = client.createTestRound(testRound);\n"
                  },
                  {
                    "sample" : "createTestRound(testRound)",
                    "lineNumber" : 22,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "\nTestRound testRound = new TestRound().withName(firstName + \"_\" + lastName + \"_TestRound\")\n        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n\nTestResult result = client.createTestRound(testRound); /* <=== com.amazonaws.services.iotdeviceadvisor.AmazonIoTDeviceAdvisor.createTestRound */ \n\nSystem.out.println(\"Result: \" + result.toString());\n}\n}\n"
                  }
                ]
              },
              {
                "pathId" : "3266-3267-3265-3269-3285-3276",
                "path" : [
                  {
                    "sample" : "\"phoneNumber\"",
                    "lineNumber" : 17,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "\n    public static void AWSIoTRoboRunnerFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        Map<String, Object> personalData = new HashMap<>();\n        personalData.put(\"firstName\", firstName);\n        personalData.put(\"lastName\", lastName);\n        personalData.put(\"phoneNumber\", phoneNumber); /* <===  */ \n        personalData.put(\"dob\", dob);\n\n        PutThingShadowRequest request = new PutThingShadowRequest()\n                .withThingName(\"PersonalData\")\n                .withPayload(personalData);"
                  },
                  {
                    "sample" : "phoneNumber",
                    "lineNumber" : 17,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "\n    public static void AWSIoTRoboRunnerFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        Map<String, Object> personalData = new HashMap<>();\n        personalData.put(\"firstName\", firstName);\n        personalData.put(\"lastName\", lastName);\n        personalData.put(\"phoneNumber\", phoneNumber); /* <=== java.lang.String */ \n        personalData.put(\"dob\", dob);\n\n        PutThingShadowRequest request = new PutThingShadowRequest()\n                .withThingName(\"PersonalData\")\n                .withPayload(personalData);"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 17,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "\n    public static void AWSIoTRoboRunnerFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        Map<String, Object> personalData = new HashMap<>();\n        personalData.put(\"firstName\", firstName);\n        personalData.put(\"lastName\", lastName);\n        personalData.put(\"phoneNumber\", phoneNumber); /* <=== java.util.Map */ \n        personalData.put(\"dob\", dob);\n\n        PutThingShadowRequest request = new PutThingShadowRequest()\n                .withThingName(\"PersonalData\")\n                .withPayload(personalData);"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 18,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "    public static void AWSIoTRoboRunnerFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        Map<String, Object> personalData = new HashMap<>();\n        personalData.put(\"firstName\", firstName);\n        personalData.put(\"lastName\", lastName);\n        personalData.put(\"phoneNumber\", phoneNumber);\n        personalData.put(\"dob\", dob); /* <=== java.util.Map */ \n\n        PutThingShadowRequest request = new PutThingShadowRequest()\n                .withThingName(\"PersonalData\")\n                .withPayload(personalData);\n"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 22,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "        personalData.put(\"phoneNumber\", phoneNumber);\n        personalData.put(\"dob\", dob);\n\n        PutThingShadowRequest request = new PutThingShadowRequest()\n                .withThingName(\"PersonalData\")\n                .withPayload(personalData); /* <=== java.util.Map */ \n\n        PutThingShadowResult result = iotRoboRunnerClient.putThingShadow(request);\n        System.out.println(\"Data sent to AWS IoTRoboRunner successfully\");\n    }\n}"
                  },
                  {
                    "sample" : "withThingName(\"PersonalData\")",
                    "lineNumber" : 20,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "        personalData.put(\"firstName\", firstName);\n        personalData.put(\"lastName\", lastName);\n        personalData.put(\"phoneNumber\", phoneNumber);\n        personalData.put(\"dob\", dob);\n\n        PutThingShadowRequest request = new PutThingShadowRequest() /* <=== com.amazonaws.services.iotroborunner.model.PutThingShadowRequest.withThingName */ \n                .withThingName(\"PersonalData\")\n                .withPayload(personalData);\n\n        PutThingShadowResult result = iotRoboRunnerClient.putThingShadow(request);\n        System.out.println(\"Data sent to AWS IoTRoboRunner successfully\");"
                  }
                ]
              },
              {
                "pathId" : "3365-3357-3348",
                "path" : [
                  {
                    "sample" : "phoneNumber",
                    "lineNumber" : 12,
                    "columnNumber" : 58,
                    "fileName" : "/app/code/deviceFarm.java",
                    "excerpt" : "    public static void AWSDevicefarmFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        com.amazonaws.services.devicefarm.AWSDeviceFarm client = AWSDeviceFarmClientBuilder.defaultClient();\n\n        CreateUploadRequest createUploadRequest = new CreateUploadRequest()\n            .withProjectArn(\"<ProjectARN>\")\n            .withName(firstName + \"-\" + lastName + \"-\" + phoneNumber) /* <=== java.lang.String */ \n            .withType(UploadType.ANDROID_APP)\n            .withContentType(\"application/octet-stream\");\n\n        CreateUploadResult createUploadResult = client.createUpload(createUploadRequest);\n        String uploadUrl = createUploadResult.getUpload().getUrl();"
                  },
                  {
                    "sample" : "firstName + \"-\" + lastName + \"-\" + phoneNumber",
                    "lineNumber" : 12,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/deviceFarm.java",
                    "excerpt" : "    public static void AWSDevicefarmFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        com.amazonaws.services.devicefarm.AWSDeviceFarm client = AWSDeviceFarmClientBuilder.defaultClient();\n\n        CreateUploadRequest createUploadRequest = new CreateUploadRequest()\n            .withProjectArn(\"<ProjectARN>\")\n            .withName(firstName + \"-\" + lastName + \"-\" + phoneNumber) /* <===  */ \n            .withType(UploadType.ANDROID_APP)\n            .withContentType(\"application/octet-stream\");\n\n        CreateUploadResult createUploadResult = client.createUpload(createUploadRequest);\n        String uploadUrl = createUploadResult.getUpload().getUrl();"
                  },
                  {
                    "sample" : "withProjectArn(\"<ProjectARN>\")",
                    "lineNumber" : 10,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/deviceFarm.java",
                    "excerpt" : "\npublic class AWSDevicefarmUtil {\n    public static void AWSDevicefarmFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        com.amazonaws.services.devicefarm.AWSDeviceFarm client = AWSDeviceFarmClientBuilder.defaultClient();\n\n        CreateUploadRequest createUploadRequest = new CreateUploadRequest() /* <=== com.amazonaws.services.devicefarm.model.CreateUploadRequest.withProjectArn */ \n            .withProjectArn(\"<ProjectARN>\")\n            .withName(firstName + \"-\" + lastName + \"-\" + phoneNumber)\n            .withType(UploadType.ANDROID_APP)\n            .withContentType(\"application/octet-stream\");\n"
                  }
                ]
              },
              {
                "pathId" : "15713-15702-15701-15700-15699-15715",
                "path" : [
                  {
                    "sample" : "phoneNumber",
                    "lineNumber" : 10,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/workspacesweb.java",
                    "excerpt" : "    public static void AWSWorkspaceswebFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AWSWorkspacesWeb workspacesWebClient = AWSWorkspacesWebClientBuilder.standard().build();\n        CreateUserRequest request = new CreateUserRequest()\n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber) /* <=== java.lang.String */ \n                .withBirthDate(DOB);\n        workspacesWebClient.createUser(request);\n    }\n}\n"
                  },
                  {
                    "sample" : "withLastName(lastName)",
                    "lineNumber" : 7,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/workspacesweb.java",
                    "excerpt" : "import com.amazonaws.services.workspacesweb.model.CreateUserRequest;\n\npublic class AWSWorkspaceswebUtil {\n    public static void AWSWorkspaceswebFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AWSWorkspacesWeb workspacesWebClient = AWSWorkspacesWebClientBuilder.standard().build();\n        CreateUserRequest request = new CreateUserRequest() /* <===  */ \n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber)\n                .withBirthDate(DOB);\n        workspacesWebClient.createUser(request);"
                  },
                  {
                    "sample" : "withPhoneNumber(phoneNumber)",
                    "lineNumber" : 7,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/workspacesweb.java",
                    "excerpt" : "import com.amazonaws.services.workspacesweb.model.CreateUserRequest;\n\npublic class AWSWorkspaceswebUtil {\n    public static void AWSWorkspaceswebFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AWSWorkspacesWeb workspacesWebClient = AWSWorkspacesWebClientBuilder.standard().build();\n        CreateUserRequest request = new CreateUserRequest() /* <===  */ \n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber)\n                .withBirthDate(DOB);\n        workspacesWebClient.createUser(request);"
                  },
                  {
                    "sample" : "withBirthDate(DOB)",
                    "lineNumber" : 7,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/workspacesweb.java",
                    "excerpt" : "import com.amazonaws.services.workspacesweb.model.CreateUserRequest;\n\npublic class AWSWorkspaceswebUtil {\n    public static void AWSWorkspaceswebFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AWSWorkspacesWeb workspacesWebClient = AWSWorkspacesWebClientBuilder.standard().build();\n        CreateUserRequest request = new CreateUserRequest() /* <===  */ \n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber)\n                .withBirthDate(DOB);\n        workspacesWebClient.createUser(request);"
                  },
                  {
                    "sample" : "request",
                    "lineNumber" : 7,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/workspacesweb.java",
                    "excerpt" : "import com.amazonaws.services.workspacesweb.model.CreateUserRequest;\n\npublic class AWSWorkspaceswebUtil {\n    public static void AWSWorkspaceswebFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AWSWorkspacesWeb workspacesWebClient = AWSWorkspacesWebClientBuilder.standard().build();\n        CreateUserRequest request = new CreateUserRequest() /* <=== com.amazonaws.services.workspacesweb.model.CreateUserRequest */ \n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber)\n                .withBirthDate(DOB);\n        workspacesWebClient.createUser(request);"
                  },
                  {
                    "sample" : "createUser(request)",
                    "lineNumber" : 12,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/workspacesweb.java",
                    "excerpt" : "        CreateUserRequest request = new CreateUserRequest()\n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber)\n                .withBirthDate(DOB);\n        workspacesWebClient.createUser(request); /* <=== com.amazonaws.services.workspacesweb.AWSWorkspacesWeb.createUser */ \n    }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "6440-6430-6429-6416",
                "path" : [
                  {
                    "sample" : "phoneNumber",
                    "lineNumber" : 13,
                    "columnNumber" : 119,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : "\n    public static void AWSlexmodelsv2FirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AmazonLexModelBuilding client = AmazonLexModelBuildingClientBuilder.standard().build();\n        SlotTypeMetadata metadata = new SlotTypeMetadata().withName(\"PersonalDataSlot\").withDescription(\"Personal data slot\");\n        SlotTypeProperties properties = new SlotTypeProperties().withEnumerationValues(\n                new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB) /* <=== java.lang.String */ \n        );\n        PutSlotTypeRequest request = new PutSlotTypeRequest().withName(\"PersonalDataSlot\").withChecksum(null)\n                .withDescription(\"Personal data slot\").withEnumerationValues(properties.getEnumerationValues())\n                .withSlotTypeMetadata(metadata);\n        client.putSlotType(request);"
                  },
                  {
                    "sample" : "firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB",
                    "lineNumber" : 13,
                    "columnNumber" : 84,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : "\n    public static void AWSlexmodelsv2FirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AmazonLexModelBuilding client = AmazonLexModelBuildingClientBuilder.standard().build();\n        SlotTypeMetadata metadata = new SlotTypeMetadata().withName(\"PersonalDataSlot\").withDescription(\"Personal data slot\");\n        SlotTypeProperties properties = new SlotTypeProperties().withEnumerationValues(\n                new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB) /* <===  */ \n        );\n        PutSlotTypeRequest request = new PutSlotTypeRequest().withName(\"PersonalDataSlot\").withChecksum(null)\n                .withDescription(\"Personal data slot\").withEnumerationValues(properties.getEnumerationValues())\n                .withSlotTypeMetadata(metadata);\n        client.putSlotType(request);"
                  },
                  {
                    "sample" : "$obj1",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "withEnumerationValues(new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB))",
                    "lineNumber" : 12,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : "public class AWSLexModelsV2Util {\n\n    public static void AWSlexmodelsv2FirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AmazonLexModelBuilding client = AmazonLexModelBuildingClientBuilder.standard().build();\n        SlotTypeMetadata metadata = new SlotTypeMetadata().withName(\"PersonalDataSlot\").withDescription(\"Personal data slot\");\n        SlotTypeProperties properties = new SlotTypeProperties().withEnumerationValues( /* <=== com.amazonaws.services.lexmodelbuilding.model.SlotTypeProperties.withEnumerationValues */ \n                new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB)\n        );\n        PutSlotTypeRequest request = new PutSlotTypeRequest().withName(\"PersonalDataSlot\").withChecksum(null)\n                .withDescription(\"Personal data slot\").withEnumerationValues(properties.getEnumerationValues())\n                .withSlotTypeMetadata(metadata);"
                  }
                ]
              },
              {
                "pathId" : "3266-3267-3265-3269-3285-3276-3275-3274-3289",
                "path" : [
                  {
                    "sample" : "\"phoneNumber\"",
                    "lineNumber" : 17,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "\n    public static void AWSIoTRoboRunnerFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        Map<String, Object> personalData = new HashMap<>();\n        personalData.put(\"firstName\", firstName);\n        personalData.put(\"lastName\", lastName);\n        personalData.put(\"phoneNumber\", phoneNumber); /* <===  */ \n        personalData.put(\"dob\", dob);\n\n        PutThingShadowRequest request = new PutThingShadowRequest()\n                .withThingName(\"PersonalData\")\n                .withPayload(personalData);"
                  },
                  {
                    "sample" : "phoneNumber",
                    "lineNumber" : 17,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "\n    public static void AWSIoTRoboRunnerFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        Map<String, Object> personalData = new HashMap<>();\n        personalData.put(\"firstName\", firstName);\n        personalData.put(\"lastName\", lastName);\n        personalData.put(\"phoneNumber\", phoneNumber); /* <=== java.lang.String */ \n        personalData.put(\"dob\", dob);\n\n        PutThingShadowRequest request = new PutThingShadowRequest()\n                .withThingName(\"PersonalData\")\n                .withPayload(personalData);"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 17,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "\n    public static void AWSIoTRoboRunnerFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        Map<String, Object> personalData = new HashMap<>();\n        personalData.put(\"firstName\", firstName);\n        personalData.put(\"lastName\", lastName);\n        personalData.put(\"phoneNumber\", phoneNumber); /* <=== java.util.Map */ \n        personalData.put(\"dob\", dob);\n\n        PutThingShadowRequest request = new PutThingShadowRequest()\n                .withThingName(\"PersonalData\")\n                .withPayload(personalData);"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 18,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "    public static void AWSIoTRoboRunnerFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        Map<String, Object> personalData = new HashMap<>();\n        personalData.put(\"firstName\", firstName);\n        personalData.put(\"lastName\", lastName);\n        personalData.put(\"phoneNumber\", phoneNumber);\n        personalData.put(\"dob\", dob); /* <=== java.util.Map */ \n\n        PutThingShadowRequest request = new PutThingShadowRequest()\n                .withThingName(\"PersonalData\")\n                .withPayload(personalData);\n"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 22,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "        personalData.put(\"phoneNumber\", phoneNumber);\n        personalData.put(\"dob\", dob);\n\n        PutThingShadowRequest request = new PutThingShadowRequest()\n                .withThingName(\"PersonalData\")\n                .withPayload(personalData); /* <=== java.util.Map */ \n\n        PutThingShadowResult result = iotRoboRunnerClient.putThingShadow(request);\n        System.out.println(\"Data sent to AWS IoTRoboRunner successfully\");\n    }\n}"
                  },
                  {
                    "sample" : "withThingName(\"PersonalData\")",
                    "lineNumber" : 20,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "        personalData.put(\"firstName\", firstName);\n        personalData.put(\"lastName\", lastName);\n        personalData.put(\"phoneNumber\", phoneNumber);\n        personalData.put(\"dob\", dob);\n\n        PutThingShadowRequest request = new PutThingShadowRequest() /* <=== com.amazonaws.services.iotroborunner.model.PutThingShadowRequest.withThingName */ \n                .withThingName(\"PersonalData\")\n                .withPayload(personalData);\n\n        PutThingShadowResult result = iotRoboRunnerClient.putThingShadow(request);\n        System.out.println(\"Data sent to AWS IoTRoboRunner successfully\");"
                  },
                  {
                    "sample" : "withPayload(personalData)",
                    "lineNumber" : 20,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "        personalData.put(\"firstName\", firstName);\n        personalData.put(\"lastName\", lastName);\n        personalData.put(\"phoneNumber\", phoneNumber);\n        personalData.put(\"dob\", dob);\n\n        PutThingShadowRequest request = new PutThingShadowRequest() /* <===  */ \n                .withThingName(\"PersonalData\")\n                .withPayload(personalData);\n\n        PutThingShadowResult result = iotRoboRunnerClient.putThingShadow(request);\n        System.out.println(\"Data sent to AWS IoTRoboRunner successfully\");"
                  },
                  {
                    "sample" : "request",
                    "lineNumber" : 20,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "        personalData.put(\"firstName\", firstName);\n        personalData.put(\"lastName\", lastName);\n        personalData.put(\"phoneNumber\", phoneNumber);\n        personalData.put(\"dob\", dob);\n\n        PutThingShadowRequest request = new PutThingShadowRequest() /* <=== com.amazonaws.services.iotroborunner.model.PutThingShadowRequest */ \n                .withThingName(\"PersonalData\")\n                .withPayload(personalData);\n\n        PutThingShadowResult result = iotRoboRunnerClient.putThingShadow(request);\n        System.out.println(\"Data sent to AWS IoTRoboRunner successfully\");"
                  },
                  {
                    "sample" : "putThingShadow(request)",
                    "lineNumber" : 24,
                    "columnNumber" : 39,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "\n        PutThingShadowRequest request = new PutThingShadowRequest()\n                .withThingName(\"PersonalData\")\n                .withPayload(personalData);\n\n        PutThingShadowResult result = iotRoboRunnerClient.putThingShadow(request); /* <=== com.amazonaws.services.iotroborunner.AWSIoTRoboRunner.putThingShadow */ \n        System.out.println(\"Data sent to AWS IoTRoboRunner successfully\");\n    }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "8349-8340-8339-8338-8351-8366",
                "path" : [
                  {
                    "sample" : "phoneNumber",
                    "lineNumber" : 14,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/chimeSDKIdentity.java",
                    "excerpt" : "\n  public static void AWSChimeSDKIdentityFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n    List<Attribute> attributes = new ArrayList<>();\n    attributes.add(new Attribute().withKey(\"firstName\").withValue(firstName));\n    attributes.add(new Attribute().withKey(\"lastName\").withValue(lastName));\n    attributes.add(new Attribute().withKey(\"phoneNumber\").withValue(phoneNumber)); /* <=== java.lang.String */ \n    attributes.add(new Attribute().withKey(\"DOB\").withValue(DOB));\n\n    PutAttributesRequest request = new PutAttributesRequest().withAttributes(attributes);\n    CLIENT.putAttributes(request);\n  }"
                  },
                  {
                    "sample" : "withKey(\"phoneNumber\")",
                    "lineNumber" : 14,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/chimeSDKIdentity.java",
                    "excerpt" : "\n  public static void AWSChimeSDKIdentityFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n    List<Attribute> attributes = new ArrayList<>();\n    attributes.add(new Attribute().withKey(\"firstName\").withValue(firstName));\n    attributes.add(new Attribute().withKey(\"lastName\").withValue(lastName));\n    attributes.add(new Attribute().withKey(\"phoneNumber\").withValue(phoneNumber)); /* <=== com.amazonaws.services.chimesdkidentity.model.Attribute.withKey */ \n    attributes.add(new Attribute().withKey(\"DOB\").withValue(DOB));\n\n    PutAttributesRequest request = new PutAttributesRequest().withAttributes(attributes);\n    CLIENT.putAttributes(request);\n  }"
                  },
                  {
                    "sample" : "withValue(phoneNumber)",
                    "lineNumber" : 14,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/chimeSDKIdentity.java",
                    "excerpt" : "\n  public static void AWSChimeSDKIdentityFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n    List<Attribute> attributes = new ArrayList<>();\n    attributes.add(new Attribute().withKey(\"firstName\").withValue(firstName));\n    attributes.add(new Attribute().withKey(\"lastName\").withValue(lastName));\n    attributes.add(new Attribute().withKey(\"phoneNumber\").withValue(phoneNumber)); /* <===  */ \n    attributes.add(new Attribute().withKey(\"DOB\").withValue(DOB));\n\n    PutAttributesRequest request = new PutAttributesRequest().withAttributes(attributes);\n    CLIENT.putAttributes(request);\n  }"
                  },
                  {
                    "sample" : "attributes",
                    "lineNumber" : 14,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/chimeSDKIdentity.java",
                    "excerpt" : "\n  public static void AWSChimeSDKIdentityFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n    List<Attribute> attributes = new ArrayList<>();\n    attributes.add(new Attribute().withKey(\"firstName\").withValue(firstName));\n    attributes.add(new Attribute().withKey(\"lastName\").withValue(lastName));\n    attributes.add(new Attribute().withKey(\"phoneNumber\").withValue(phoneNumber)); /* <=== ANY */ \n    attributes.add(new Attribute().withKey(\"DOB\").withValue(DOB));\n\n    PutAttributesRequest request = new PutAttributesRequest().withAttributes(attributes);\n    CLIENT.putAttributes(request);\n  }"
                  },
                  {
                    "sample" : "attributes",
                    "lineNumber" : 15,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/chimeSDKIdentity.java",
                    "excerpt" : "  public static void AWSChimeSDKIdentityFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n    List<Attribute> attributes = new ArrayList<>();\n    attributes.add(new Attribute().withKey(\"firstName\").withValue(firstName));\n    attributes.add(new Attribute().withKey(\"lastName\").withValue(lastName));\n    attributes.add(new Attribute().withKey(\"phoneNumber\").withValue(phoneNumber));\n    attributes.add(new Attribute().withKey(\"DOB\").withValue(DOB)); /* <=== ANY */ \n\n    PutAttributesRequest request = new PutAttributesRequest().withAttributes(attributes);\n    CLIENT.putAttributes(request);\n  }\n}"
                  },
                  {
                    "sample" : "withAttributes(attributes)",
                    "lineNumber" : 17,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/chimeSDKIdentity.java",
                    "excerpt" : "    attributes.add(new Attribute().withKey(\"firstName\").withValue(firstName));\n    attributes.add(new Attribute().withKey(\"lastName\").withValue(lastName));\n    attributes.add(new Attribute().withKey(\"phoneNumber\").withValue(phoneNumber));\n    attributes.add(new Attribute().withKey(\"DOB\").withValue(DOB));\n\n    PutAttributesRequest request = new PutAttributesRequest().withAttributes(attributes); /* <=== com.amazonaws.services.chimesdkidentity.model.PutAttributesRequest.withAttributes */ \n    CLIENT.putAttributes(request);\n  }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "1740-1741-1726-1725-1724-1723-1747",
                "path" : [
                  {
                    "sample" : "\"phoneNumber\"",
                    "lineNumber" : 17,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "    public void AWSCodePipelineFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        PutJobSuccessResultRequest request = new PutJobSuccessResultRequest()\n            .withJobId(firstName)\n            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber) /* <===  */ \n            .addOutputVariablesEntry(\"dob\", dob);\n\n        PutJobSuccessResultResult result = client.putJobSuccessResult(request);\n        System.out.println(\"Successfully sent personal data to CodePipeline: \" + result);\n    }"
                  },
                  {
                    "sample" : "phoneNumber",
                    "lineNumber" : 17,
                    "columnNumber" : 53,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "    public void AWSCodePipelineFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        PutJobSuccessResultRequest request = new PutJobSuccessResultRequest()\n            .withJobId(firstName)\n            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber) /* <=== java.lang.String */ \n            .addOutputVariablesEntry(\"dob\", dob);\n\n        PutJobSuccessResultResult result = client.putJobSuccessResult(request);\n        System.out.println(\"Successfully sent personal data to CodePipeline: \" + result);\n    }"
                  },
                  {
                    "sample" : "addOutputVariablesEntry(\"lastName\", lastName)",
                    "lineNumber" : 13,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "    public AWSCodePipelineUtil(AWSCodePipeline client) {\n        this.client = client;\n    }\n\n    public void AWSCodePipelineFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        PutJobSuccessResultRequest request = new PutJobSuccessResultRequest() /* <===  */ \n            .withJobId(firstName)\n            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);"
                  },
                  {
                    "sample" : "addOutputVariablesEntry(\"phoneNumber\", phoneNumber)",
                    "lineNumber" : 13,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "    public AWSCodePipelineUtil(AWSCodePipeline client) {\n        this.client = client;\n    }\n\n    public void AWSCodePipelineFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        PutJobSuccessResultRequest request = new PutJobSuccessResultRequest() /* <===  */ \n            .withJobId(firstName)\n            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);"
                  },
                  {
                    "sample" : "addOutputVariablesEntry(\"dob\", dob)",
                    "lineNumber" : 13,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "    public AWSCodePipelineUtil(AWSCodePipeline client) {\n        this.client = client;\n    }\n\n    public void AWSCodePipelineFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        PutJobSuccessResultRequest request = new PutJobSuccessResultRequest() /* <===  */ \n            .withJobId(firstName)\n            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);"
                  },
                  {
                    "sample" : "request",
                    "lineNumber" : 13,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "    public AWSCodePipelineUtil(AWSCodePipeline client) {\n        this.client = client;\n    }\n\n    public void AWSCodePipelineFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        PutJobSuccessResultRequest request = new PutJobSuccessResultRequest() /* <=== com.amazonaws.services.codepipeline.model.PutJobSuccessResultRequest */ \n            .withJobId(firstName)\n            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);"
                  },
                  {
                    "sample" : "putJobSuccessResult(request)",
                    "lineNumber" : 20,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);\n\n        PutJobSuccessResultResult result = client.putJobSuccessResult(request); /* <=== com.amazonaws.services.codepipeline.AWSCodePipeline.putJobSuccessResult */ \n        System.out.println(\"Successfully sent personal data to CodePipeline: \" + result);\n    }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "16196-16187",
                "path" : [
                  {
                    "sample" : "phoneNumber",
                    "lineNumber" : 26,
                    "columnNumber" : 83,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "\n        // Define the user's personal data\n        List<AttributeType> userAttributes = new ArrayList<>();\n        userAttributes.add(new AttributeType().withName(\"given_name\").withValue(firstName));\n        userAttributes.add(new AttributeType().withName(\"family_name\").withValue(lastName));\n        userAttributes.add(new AttributeType().withName(\"phone_number\").withValue(phoneNumber)); /* <=== java.lang.String */ \n        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob));\n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest()\n                .withUserPoolId(USER_POOL_ID)"
                  },
                  {
                    "sample" : "withName(\"phone_number\")",
                    "lineNumber" : 26,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "\n        // Define the user's personal data\n        List<AttributeType> userAttributes = new ArrayList<>();\n        userAttributes.add(new AttributeType().withName(\"given_name\").withValue(firstName));\n        userAttributes.add(new AttributeType().withName(\"family_name\").withValue(lastName));\n        userAttributes.add(new AttributeType().withName(\"phone_number\").withValue(phoneNumber)); /* <=== com.amazonaws.services.cognitoidp.model.AttributeType.withName */ \n        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob));\n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest()\n                .withUserPoolId(USER_POOL_ID)"
                  }
                ]
              },
              {
                "pathId" : "16196-16187-16186-16185-16198-16229-16214-16213-16212-16233-16232-16240",
                "path" : [
                  {
                    "sample" : "phoneNumber",
                    "lineNumber" : 26,
                    "columnNumber" : 83,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "\n        // Define the user's personal data\n        List<AttributeType> userAttributes = new ArrayList<>();\n        userAttributes.add(new AttributeType().withName(\"given_name\").withValue(firstName));\n        userAttributes.add(new AttributeType().withName(\"family_name\").withValue(lastName));\n        userAttributes.add(new AttributeType().withName(\"phone_number\").withValue(phoneNumber)); /* <=== java.lang.String */ \n        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob));\n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest()\n                .withUserPoolId(USER_POOL_ID)"
                  },
                  {
                    "sample" : "withName(\"phone_number\")",
                    "lineNumber" : 26,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "\n        // Define the user's personal data\n        List<AttributeType> userAttributes = new ArrayList<>();\n        userAttributes.add(new AttributeType().withName(\"given_name\").withValue(firstName));\n        userAttributes.add(new AttributeType().withName(\"family_name\").withValue(lastName));\n        userAttributes.add(new AttributeType().withName(\"phone_number\").withValue(phoneNumber)); /* <=== com.amazonaws.services.cognitoidp.model.AttributeType.withName */ \n        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob));\n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest()\n                .withUserPoolId(USER_POOL_ID)"
                  },
                  {
                    "sample" : "withValue(phoneNumber)",
                    "lineNumber" : 26,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "\n        // Define the user's personal data\n        List<AttributeType> userAttributes = new ArrayList<>();\n        userAttributes.add(new AttributeType().withName(\"given_name\").withValue(firstName));\n        userAttributes.add(new AttributeType().withName(\"family_name\").withValue(lastName));\n        userAttributes.add(new AttributeType().withName(\"phone_number\").withValue(phoneNumber)); /* <===  */ \n        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob));\n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest()\n                .withUserPoolId(USER_POOL_ID)"
                  },
                  {
                    "sample" : "userAttributes",
                    "lineNumber" : 26,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "\n        // Define the user's personal data\n        List<AttributeType> userAttributes = new ArrayList<>();\n        userAttributes.add(new AttributeType().withName(\"given_name\").withValue(firstName));\n        userAttributes.add(new AttributeType().withName(\"family_name\").withValue(lastName));\n        userAttributes.add(new AttributeType().withName(\"phone_number\").withValue(phoneNumber)); /* <=== ANY */ \n        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob));\n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest()\n                .withUserPoolId(USER_POOL_ID)"
                  },
                  {
                    "sample" : "userAttributes",
                    "lineNumber" : 27,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "        // Define the user's personal data\n        List<AttributeType> userAttributes = new ArrayList<>();\n        userAttributes.add(new AttributeType().withName(\"given_name\").withValue(firstName));\n        userAttributes.add(new AttributeType().withName(\"family_name\").withValue(lastName));\n        userAttributes.add(new AttributeType().withName(\"phone_number\").withValue(phoneNumber));\n        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob)); /* <=== ANY */ \n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest()\n                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName)"
                  },
                  {
                    "sample" : "userAttributes",
                    "lineNumber" : 33,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest()\n                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName)\n                .withUserAttributes(userAttributes); /* <=== ANY */ \n\n        // Send the request to create the user\n        AdminCreateUserResult createUserResult = cognitoIdpClient.adminCreateUser(createUserRequest);\n\n        // Get the user's unique identifier"
                  },
                  {
                    "sample" : "withUsername(firstName + lastName)",
                    "lineNumber" : 30,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "        userAttributes.add(new AttributeType().withName(\"family_name\").withValue(lastName));\n        userAttributes.add(new AttributeType().withName(\"phone_number\").withValue(phoneNumber));\n        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob));\n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest() /* <===  */ \n                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName)\n                .withUserAttributes(userAttributes);\n\n        // Send the request to create the user"
                  },
                  {
                    "sample" : "withUserAttributes(userAttributes)",
                    "lineNumber" : 30,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "        userAttributes.add(new AttributeType().withName(\"family_name\").withValue(lastName));\n        userAttributes.add(new AttributeType().withName(\"phone_number\").withValue(phoneNumber));\n        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob));\n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest() /* <===  */ \n                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName)\n                .withUserAttributes(userAttributes);\n\n        // Send the request to create the user"
                  },
                  {
                    "sample" : "createUserRequest",
                    "lineNumber" : 30,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "        userAttributes.add(new AttributeType().withName(\"family_name\").withValue(lastName));\n        userAttributes.add(new AttributeType().withName(\"phone_number\").withValue(phoneNumber));\n        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob));\n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest() /* <=== com.amazonaws.services.cognitoidp.model.AdminCreateUserRequest */ \n                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName)\n                .withUserAttributes(userAttributes);\n\n        // Send the request to create the user"
                  },
                  {
                    "sample" : "adminCreateUser(createUserRequest)",
                    "lineNumber" : 36,
                    "columnNumber" : 50,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName)\n                .withUserAttributes(userAttributes);\n\n        // Send the request to create the user\n        AdminCreateUserResult createUserResult = cognitoIdpClient.adminCreateUser(createUserRequest); /* <=== com.amazonaws.services.cognitoidp.AWSCognitoIdentityProvider.adminCreateUser */ \n\n        // Get the user's unique identifier\n        String userId = createUserResult.getUser().getUsername();\n\n        System.out.println(\"Successfully created user with ID: \" + userId);"
                  },
                  {
                    "sample" : "createUserResult",
                    "lineNumber" : 36,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName)\n                .withUserAttributes(userAttributes);\n\n        // Send the request to create the user\n        AdminCreateUserResult createUserResult = cognitoIdpClient.adminCreateUser(createUserRequest); /* <=== com.amazonaws.services.cognitoidp.model.AdminCreateUserResult */ \n\n        // Get the user's unique identifier\n        String userId = createUserResult.getUser().getUsername();\n\n        System.out.println(\"Successfully created user with ID: \" + userId);"
                  },
                  {
                    "sample" : "getUser()",
                    "lineNumber" : 39,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "\n        // Send the request to create the user\n        AdminCreateUserResult createUserResult = cognitoIdpClient.adminCreateUser(createUserRequest);\n\n        // Get the user's unique identifier\n        String userId = createUserResult.getUser().getUsername(); /* <=== com.amazonaws.services.cognitoidp.model.AdminCreateUserResult.getUser */ \n\n        System.out.println(\"Successfully created user with ID: \" + userId);\n    }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "13475-13468-13467-13497-13482-13481-13480-13501",
                "path" : [
                  {
                    "sample" : "phoneNumber",
                    "lineNumber" : 16,
                    "columnNumber" : 104,
                    "fileName" : "/app/code/iotFleetwise.java",
                    "excerpt" : "public AWSIoTFleetwiseUtil() {\nclient = AmazonIoTFleetwiseClientBuilder.standard().build();\n}\n\npublic void AWSIoTFleetwiseProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob); /* <=== java.lang.String */ \n\nCreateTrackerRequest createTrackerRequest = new CreateTrackerRequest()\n        .withTrackerName(firstName + \"_\" + lastName + \"_Tracker\")\n        .withAttributePayload(personalData);\n"
                  },
                  {
                    "sample" : "Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob)",
                    "lineNumber" : 16,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/iotFleetwise.java",
                    "excerpt" : "public AWSIoTFleetwiseUtil() {\nclient = AmazonIoTFleetwiseClientBuilder.standard().build();\n}\n\npublic void AWSIoTFleetwiseProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob); /* <=== java.util.Map.of */ \n\nCreateTrackerRequest createTrackerRequest = new CreateTrackerRequest()\n        .withTrackerName(firstName + \"_\" + lastName + \"_Tracker\")\n        .withAttributePayload(personalData);\n"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 16,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/iotFleetwise.java",
                    "excerpt" : "public AWSIoTFleetwiseUtil() {\nclient = AmazonIoTFleetwiseClientBuilder.standard().build();\n}\n\npublic void AWSIoTFleetwiseProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob); /* <=== java.util.Map */ \n\nCreateTrackerRequest createTrackerRequest = new CreateTrackerRequest()\n        .withTrackerName(firstName + \"_\" + lastName + \"_Tracker\")\n        .withAttributePayload(personalData);\n"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 20,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/iotFleetwise.java",
                    "excerpt" : "public void AWSIoTFleetwiseProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nCreateTrackerRequest createTrackerRequest = new CreateTrackerRequest()\n        .withTrackerName(firstName + \"_\" + lastName + \"_Tracker\")\n        .withAttributePayload(personalData); /* <=== java.util.Map */ \n\nCreateTrackerResult result = client.createTracker(createTrackerRequest);\nSystem.out.println(\"Tracker created with ID: \" + result.getTrackerId());\n}\n}"
                  },
                  {
                    "sample" : "withTrackerName(firstName + \"_\" + lastName + \"_Tracker\")",
                    "lineNumber" : 18,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/iotFleetwise.java",
                    "excerpt" : "}\n\npublic void AWSIoTFleetwiseProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nCreateTrackerRequest createTrackerRequest = new CreateTrackerRequest() /* <=== com.amazonaws.services.iotfleetwise.model.CreateTrackerRequest.withTrackerName */ \n        .withTrackerName(firstName + \"_\" + lastName + \"_Tracker\")\n        .withAttributePayload(personalData);\n\nCreateTrackerResult result = client.createTracker(createTrackerRequest);\nSystem.out.println(\"Tracker created with ID: \" + result.getTrackerId());"
                  },
                  {
                    "sample" : "withAttributePayload(personalData)",
                    "lineNumber" : 18,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/iotFleetwise.java",
                    "excerpt" : "}\n\npublic void AWSIoTFleetwiseProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nCreateTrackerRequest createTrackerRequest = new CreateTrackerRequest() /* <===  */ \n        .withTrackerName(firstName + \"_\" + lastName + \"_Tracker\")\n        .withAttributePayload(personalData);\n\nCreateTrackerResult result = client.createTracker(createTrackerRequest);\nSystem.out.println(\"Tracker created with ID: \" + result.getTrackerId());"
                  },
                  {
                    "sample" : "createTrackerRequest",
                    "lineNumber" : 18,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/iotFleetwise.java",
                    "excerpt" : "}\n\npublic void AWSIoTFleetwiseProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nCreateTrackerRequest createTrackerRequest = new CreateTrackerRequest() /* <=== com.amazonaws.services.iotfleetwise.model.CreateTrackerRequest */ \n        .withTrackerName(firstName + \"_\" + lastName + \"_Tracker\")\n        .withAttributePayload(personalData);\n\nCreateTrackerResult result = client.createTracker(createTrackerRequest);\nSystem.out.println(\"Tracker created with ID: \" + result.getTrackerId());"
                  },
                  {
                    "sample" : "createTracker(createTrackerRequest)",
                    "lineNumber" : 22,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/iotFleetwise.java",
                    "excerpt" : "\nCreateTrackerRequest createTrackerRequest = new CreateTrackerRequest()\n        .withTrackerName(firstName + \"_\" + lastName + \"_Tracker\")\n        .withAttributePayload(personalData);\n\nCreateTrackerResult result = client.createTracker(createTrackerRequest); /* <=== com.amazonaws.services.iotfleetwise.AmazonIoTFleetwise.createTracker */ \nSystem.out.println(\"Tracker created with ID: \" + result.getTrackerId());\n}\n}"
                  }
                ]
              },
              {
                "pathId" : "3190-3191-3189-3193-3200",
                "path" : [
                  {
                    "sample" : "\"phoneNumber\"",
                    "lineNumber" : 14,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/chimeSdkMessaging.java",
                    "excerpt" : "\n  public static void AWSChimeSDKmessagingFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = new HashMap<>();\n    personalData.put(\"firstName\", firstName);\n    personalData.put(\"lastName\", lastName);\n    personalData.put(\"phoneNumber\", phoneNumber); /* <===  */ \n    personalData.put(\"dob\", dob);\n\n    MessageRequest messageRequest = new MessageRequest();\n    messageRequest.setContent(personalData.toString());\n"
                  },
                  {
                    "sample" : "phoneNumber",
                    "lineNumber" : 14,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/chimeSdkMessaging.java",
                    "excerpt" : "\n  public static void AWSChimeSDKmessagingFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = new HashMap<>();\n    personalData.put(\"firstName\", firstName);\n    personalData.put(\"lastName\", lastName);\n    personalData.put(\"phoneNumber\", phoneNumber); /* <=== java.lang.String */ \n    personalData.put(\"dob\", dob);\n\n    MessageRequest messageRequest = new MessageRequest();\n    messageRequest.setContent(personalData.toString());\n"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 14,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/chimeSdkMessaging.java",
                    "excerpt" : "\n  public static void AWSChimeSDKmessagingFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = new HashMap<>();\n    personalData.put(\"firstName\", firstName);\n    personalData.put(\"lastName\", lastName);\n    personalData.put(\"phoneNumber\", phoneNumber); /* <=== java.util.Map */ \n    personalData.put(\"dob\", dob);\n\n    MessageRequest messageRequest = new MessageRequest();\n    messageRequest.setContent(personalData.toString());\n"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 15,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/chimeSdkMessaging.java",
                    "excerpt" : "  public static void AWSChimeSDKmessagingFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = new HashMap<>();\n    personalData.put(\"firstName\", firstName);\n    personalData.put(\"lastName\", lastName);\n    personalData.put(\"phoneNumber\", phoneNumber);\n    personalData.put(\"dob\", dob); /* <=== java.util.Map */ \n\n    MessageRequest messageRequest = new MessageRequest();\n    messageRequest.setContent(personalData.toString());\n\n    chimeSDKMessagingClient.sendMessage(messageRequest);"
                  },
                  {
                    "sample" : "setContent(personalData.toString())",
                    "lineNumber" : 18,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/chimeSdkMessaging.java",
                    "excerpt" : "    personalData.put(\"lastName\", lastName);\n    personalData.put(\"phoneNumber\", phoneNumber);\n    personalData.put(\"dob\", dob);\n\n    MessageRequest messageRequest = new MessageRequest();\n    messageRequest.setContent(personalData.toString()); /* <=== com.amazonaws.services.chimesdkmessaging.model.MessageRequest.setContent */ \n\n    chimeSDKMessagingClient.sendMessage(messageRequest);\n  }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "14746-14737-14736-14735-14748-14777-14764-14763-14762-14778",
                "path" : [
                  {
                    "sample" : "phoneNumber",
                    "lineNumber" : 32,
                    "columnNumber" : 81,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "\n        // Prepare the asset\n        List<DataSetEntry> entries = new ArrayList<>();\n        entries.add(new DataSetEntry().withEntryName(\"firstName\").withContent(firstName));\n        entries.add(new DataSetEntry().withEntryName(\"lastName\").withContent(lastName));\n        entries.add(new DataSetEntry().withEntryName(\"phoneNumber\").withContent(phoneNumber)); /* <=== java.lang.String */ \n        entries.add(new DataSetEntry().withEntryName(\"dob\").withContent(dob));\n\n        // Import the asset\n        ImportAssetFromSignedUrlRequest importAssetRequest = new ImportAssetFromSignedUrlRequest()\n                .withDataSetId(dataSetId)"
                  },
                  {
                    "sample" : "withEntryName(\"phoneNumber\")",
                    "lineNumber" : 32,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "\n        // Prepare the asset\n        List<DataSetEntry> entries = new ArrayList<>();\n        entries.add(new DataSetEntry().withEntryName(\"firstName\").withContent(firstName));\n        entries.add(new DataSetEntry().withEntryName(\"lastName\").withContent(lastName));\n        entries.add(new DataSetEntry().withEntryName(\"phoneNumber\").withContent(phoneNumber)); /* <=== com.amazonaws.services.dataexchange.model.DataSetEntry.withEntryName */ \n        entries.add(new DataSetEntry().withEntryName(\"dob\").withContent(dob));\n\n        // Import the asset\n        ImportAssetFromSignedUrlRequest importAssetRequest = new ImportAssetFromSignedUrlRequest()\n                .withDataSetId(dataSetId)"
                  },
                  {
                    "sample" : "withContent(phoneNumber)",
                    "lineNumber" : 32,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "\n        // Prepare the asset\n        List<DataSetEntry> entries = new ArrayList<>();\n        entries.add(new DataSetEntry().withEntryName(\"firstName\").withContent(firstName));\n        entries.add(new DataSetEntry().withEntryName(\"lastName\").withContent(lastName));\n        entries.add(new DataSetEntry().withEntryName(\"phoneNumber\").withContent(phoneNumber)); /* <===  */ \n        entries.add(new DataSetEntry().withEntryName(\"dob\").withContent(dob));\n\n        // Import the asset\n        ImportAssetFromSignedUrlRequest importAssetRequest = new ImportAssetFromSignedUrlRequest()\n                .withDataSetId(dataSetId)"
                  },
                  {
                    "sample" : "entries",
                    "lineNumber" : 32,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "\n        // Prepare the asset\n        List<DataSetEntry> entries = new ArrayList<>();\n        entries.add(new DataSetEntry().withEntryName(\"firstName\").withContent(firstName));\n        entries.add(new DataSetEntry().withEntryName(\"lastName\").withContent(lastName));\n        entries.add(new DataSetEntry().withEntryName(\"phoneNumber\").withContent(phoneNumber)); /* <=== ANY */ \n        entries.add(new DataSetEntry().withEntryName(\"dob\").withContent(dob));\n\n        // Import the asset\n        ImportAssetFromSignedUrlRequest importAssetRequest = new ImportAssetFromSignedUrlRequest()\n                .withDataSetId(dataSetId)"
                  },
                  {
                    "sample" : "entries",
                    "lineNumber" : 33,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        // Prepare the asset\n        List<DataSetEntry> entries = new ArrayList<>();\n        entries.add(new DataSetEntry().withEntryName(\"firstName\").withContent(firstName));\n        entries.add(new DataSetEntry().withEntryName(\"lastName\").withContent(lastName));\n        entries.add(new DataSetEntry().withEntryName(\"phoneNumber\").withContent(phoneNumber));\n        entries.add(new DataSetEntry().withEntryName(\"dob\").withContent(dob)); /* <=== ANY */ \n\n        // Import the asset\n        ImportAssetFromSignedUrlRequest importAssetRequest = new ImportAssetFromSignedUrlRequest()\n                .withDataSetId(dataSetId)\n                .withRevisionId(revisionId)"
                  },
                  {
                    "sample" : "entries",
                    "lineNumber" : 40,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        // Import the asset\n        ImportAssetFromSignedUrlRequest importAssetRequest = new ImportAssetFromSignedUrlRequest()\n                .withDataSetId(dataSetId)\n                .withRevisionId(revisionId)\n                .withAssetName(assetName)\n                .withEntries(entries); /* <=== ANY */ \n        dataExchangeClient.importAssetFromSignedUrl(importAssetRequest);\n    }\n}\n"
                  },
                  {
                    "sample" : "withAssetName(assetName)",
                    "lineNumber" : 36,
                    "columnNumber" : 62,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        entries.add(new DataSetEntry().withEntryName(\"lastName\").withContent(lastName));\n        entries.add(new DataSetEntry().withEntryName(\"phoneNumber\").withContent(phoneNumber));\n        entries.add(new DataSetEntry().withEntryName(\"dob\").withContent(dob));\n\n        // Import the asset\n        ImportAssetFromSignedUrlRequest importAssetRequest = new ImportAssetFromSignedUrlRequest() /* <===  */ \n                .withDataSetId(dataSetId)\n                .withRevisionId(revisionId)\n                .withAssetName(assetName)\n                .withEntries(entries);\n        dataExchangeClient.importAssetFromSignedUrl(importAssetRequest);"
                  },
                  {
                    "sample" : "withEntries(entries)",
                    "lineNumber" : 36,
                    "columnNumber" : 62,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        entries.add(new DataSetEntry().withEntryName(\"lastName\").withContent(lastName));\n        entries.add(new DataSetEntry().withEntryName(\"phoneNumber\").withContent(phoneNumber));\n        entries.add(new DataSetEntry().withEntryName(\"dob\").withContent(dob));\n\n        // Import the asset\n        ImportAssetFromSignedUrlRequest importAssetRequest = new ImportAssetFromSignedUrlRequest() /* <===  */ \n                .withDataSetId(dataSetId)\n                .withRevisionId(revisionId)\n                .withAssetName(assetName)\n                .withEntries(entries);\n        dataExchangeClient.importAssetFromSignedUrl(importAssetRequest);"
                  },
                  {
                    "sample" : "importAssetRequest",
                    "lineNumber" : 36,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        entries.add(new DataSetEntry().withEntryName(\"lastName\").withContent(lastName));\n        entries.add(new DataSetEntry().withEntryName(\"phoneNumber\").withContent(phoneNumber));\n        entries.add(new DataSetEntry().withEntryName(\"dob\").withContent(dob));\n\n        // Import the asset\n        ImportAssetFromSignedUrlRequest importAssetRequest = new ImportAssetFromSignedUrlRequest() /* <=== com.amazonaws.services.dataexchange.model.ImportAssetFromSignedUrlRequest */ \n                .withDataSetId(dataSetId)\n                .withRevisionId(revisionId)\n                .withAssetName(assetName)\n                .withEntries(entries);\n        dataExchangeClient.importAssetFromSignedUrl(importAssetRequest);"
                  },
                  {
                    "sample" : "importAssetFromSignedUrl(importAssetRequest)",
                    "lineNumber" : 41,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        ImportAssetFromSignedUrlRequest importAssetRequest = new ImportAssetFromSignedUrlRequest()\n                .withDataSetId(dataSetId)\n                .withRevisionId(revisionId)\n                .withAssetName(assetName)\n                .withEntries(entries);\n        dataExchangeClient.importAssetFromSignedUrl(importAssetRequest); /* <=== com.amazonaws.services.dataexchange.AmazonDataExchange.importAssetFromSignedUrl */ \n    }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "11816-11805-11804-11803-11802-11819",
                "path" : [
                  {
                    "sample" : "phoneNumber",
                    "lineNumber" : 17,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/oam.java",
                    "excerpt" : "\n  public CreateUserResult AWSOAMFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    CreateUserRequest request = new CreateUserRequest()\n      .withFirstName(firstName)\n      .withLastName(lastName)\n      .withPhoneNumber(phoneNumber) /* <=== java.lang.String */ \n      .withDateOfBirth(dob);\n    return oamClient.createUser(request);\n  }\n}\n"
                  },
                  {
                    "sample" : "withLastName(lastName)",
                    "lineNumber" : 14,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/oam.java",
                    "excerpt" : "  public AWSOAMUtil(AWSOAM oamClient) {\n    this.oamClient = oamClient;\n  }\n\n  public CreateUserResult AWSOAMFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    CreateUserRequest request = new CreateUserRequest() /* <===  */ \n      .withFirstName(firstName)\n      .withLastName(lastName)\n      .withPhoneNumber(phoneNumber)\n      .withDateOfBirth(dob);\n    return oamClient.createUser(request);"
                  },
                  {
                    "sample" : "withPhoneNumber(phoneNumber)",
                    "lineNumber" : 14,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/oam.java",
                    "excerpt" : "  public AWSOAMUtil(AWSOAM oamClient) {\n    this.oamClient = oamClient;\n  }\n\n  public CreateUserResult AWSOAMFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    CreateUserRequest request = new CreateUserRequest() /* <===  */ \n      .withFirstName(firstName)\n      .withLastName(lastName)\n      .withPhoneNumber(phoneNumber)\n      .withDateOfBirth(dob);\n    return oamClient.createUser(request);"
                  },
                  {
                    "sample" : "withDateOfBirth(dob)",
                    "lineNumber" : 14,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/oam.java",
                    "excerpt" : "  public AWSOAMUtil(AWSOAM oamClient) {\n    this.oamClient = oamClient;\n  }\n\n  public CreateUserResult AWSOAMFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    CreateUserRequest request = new CreateUserRequest() /* <===  */ \n      .withFirstName(firstName)\n      .withLastName(lastName)\n      .withPhoneNumber(phoneNumber)\n      .withDateOfBirth(dob);\n    return oamClient.createUser(request);"
                  },
                  {
                    "sample" : "request",
                    "lineNumber" : 14,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/oam.java",
                    "excerpt" : "  public AWSOAMUtil(AWSOAM oamClient) {\n    this.oamClient = oamClient;\n  }\n\n  public CreateUserResult AWSOAMFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    CreateUserRequest request = new CreateUserRequest() /* <=== com.amazonaws.services.oam.model.CreateUserRequest */ \n      .withFirstName(firstName)\n      .withLastName(lastName)\n      .withPhoneNumber(phoneNumber)\n      .withDateOfBirth(dob);\n    return oamClient.createUser(request);"
                  },
                  {
                    "sample" : "createUser(request)",
                    "lineNumber" : 19,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/oam.java",
                    "excerpt" : "    CreateUserRequest request = new CreateUserRequest()\n      .withFirstName(firstName)\n      .withLastName(lastName)\n      .withPhoneNumber(phoneNumber)\n      .withDateOfBirth(dob);\n    return oamClient.createUser(request); /* <=== com.amazonaws.services.oam.AWSOAM.createUser */ \n  }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "8349-8340-8339-8338-8351-8366-8365-8375",
                "path" : [
                  {
                    "sample" : "phoneNumber",
                    "lineNumber" : 14,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/chimeSDKIdentity.java",
                    "excerpt" : "\n  public static void AWSChimeSDKIdentityFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n    List<Attribute> attributes = new ArrayList<>();\n    attributes.add(new Attribute().withKey(\"firstName\").withValue(firstName));\n    attributes.add(new Attribute().withKey(\"lastName\").withValue(lastName));\n    attributes.add(new Attribute().withKey(\"phoneNumber\").withValue(phoneNumber)); /* <=== java.lang.String */ \n    attributes.add(new Attribute().withKey(\"DOB\").withValue(DOB));\n\n    PutAttributesRequest request = new PutAttributesRequest().withAttributes(attributes);\n    CLIENT.putAttributes(request);\n  }"
                  },
                  {
                    "sample" : "withKey(\"phoneNumber\")",
                    "lineNumber" : 14,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/chimeSDKIdentity.java",
                    "excerpt" : "\n  public static void AWSChimeSDKIdentityFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n    List<Attribute> attributes = new ArrayList<>();\n    attributes.add(new Attribute().withKey(\"firstName\").withValue(firstName));\n    attributes.add(new Attribute().withKey(\"lastName\").withValue(lastName));\n    attributes.add(new Attribute().withKey(\"phoneNumber\").withValue(phoneNumber)); /* <=== com.amazonaws.services.chimesdkidentity.model.Attribute.withKey */ \n    attributes.add(new Attribute().withKey(\"DOB\").withValue(DOB));\n\n    PutAttributesRequest request = new PutAttributesRequest().withAttributes(attributes);\n    CLIENT.putAttributes(request);\n  }"
                  },
                  {
                    "sample" : "withValue(phoneNumber)",
                    "lineNumber" : 14,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/chimeSDKIdentity.java",
                    "excerpt" : "\n  public static void AWSChimeSDKIdentityFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n    List<Attribute> attributes = new ArrayList<>();\n    attributes.add(new Attribute().withKey(\"firstName\").withValue(firstName));\n    attributes.add(new Attribute().withKey(\"lastName\").withValue(lastName));\n    attributes.add(new Attribute().withKey(\"phoneNumber\").withValue(phoneNumber)); /* <===  */ \n    attributes.add(new Attribute().withKey(\"DOB\").withValue(DOB));\n\n    PutAttributesRequest request = new PutAttributesRequest().withAttributes(attributes);\n    CLIENT.putAttributes(request);\n  }"
                  },
                  {
                    "sample" : "attributes",
                    "lineNumber" : 14,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/chimeSDKIdentity.java",
                    "excerpt" : "\n  public static void AWSChimeSDKIdentityFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n    List<Attribute> attributes = new ArrayList<>();\n    attributes.add(new Attribute().withKey(\"firstName\").withValue(firstName));\n    attributes.add(new Attribute().withKey(\"lastName\").withValue(lastName));\n    attributes.add(new Attribute().withKey(\"phoneNumber\").withValue(phoneNumber)); /* <=== ANY */ \n    attributes.add(new Attribute().withKey(\"DOB\").withValue(DOB));\n\n    PutAttributesRequest request = new PutAttributesRequest().withAttributes(attributes);\n    CLIENT.putAttributes(request);\n  }"
                  },
                  {
                    "sample" : "attributes",
                    "lineNumber" : 15,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/chimeSDKIdentity.java",
                    "excerpt" : "  public static void AWSChimeSDKIdentityFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n    List<Attribute> attributes = new ArrayList<>();\n    attributes.add(new Attribute().withKey(\"firstName\").withValue(firstName));\n    attributes.add(new Attribute().withKey(\"lastName\").withValue(lastName));\n    attributes.add(new Attribute().withKey(\"phoneNumber\").withValue(phoneNumber));\n    attributes.add(new Attribute().withKey(\"DOB\").withValue(DOB)); /* <=== ANY */ \n\n    PutAttributesRequest request = new PutAttributesRequest().withAttributes(attributes);\n    CLIENT.putAttributes(request);\n  }\n}"
                  },
                  {
                    "sample" : "withAttributes(attributes)",
                    "lineNumber" : 17,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/chimeSDKIdentity.java",
                    "excerpt" : "    attributes.add(new Attribute().withKey(\"firstName\").withValue(firstName));\n    attributes.add(new Attribute().withKey(\"lastName\").withValue(lastName));\n    attributes.add(new Attribute().withKey(\"phoneNumber\").withValue(phoneNumber));\n    attributes.add(new Attribute().withKey(\"DOB\").withValue(DOB));\n\n    PutAttributesRequest request = new PutAttributesRequest().withAttributes(attributes); /* <=== com.amazonaws.services.chimesdkidentity.model.PutAttributesRequest.withAttributes */ \n    CLIENT.putAttributes(request);\n  }\n}\n"
                  },
                  {
                    "sample" : "request",
                    "lineNumber" : 17,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/chimeSDKIdentity.java",
                    "excerpt" : "    attributes.add(new Attribute().withKey(\"firstName\").withValue(firstName));\n    attributes.add(new Attribute().withKey(\"lastName\").withValue(lastName));\n    attributes.add(new Attribute().withKey(\"phoneNumber\").withValue(phoneNumber));\n    attributes.add(new Attribute().withKey(\"DOB\").withValue(DOB));\n\n    PutAttributesRequest request = new PutAttributesRequest().withAttributes(attributes); /* <=== com.amazonaws.services.chimesdkidentity.model.PutAttributesRequest */ \n    CLIENT.putAttributes(request);\n  }\n}\n"
                  },
                  {
                    "sample" : "putAttributes(request)",
                    "lineNumber" : 18,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/chimeSDKIdentity.java",
                    "excerpt" : "    attributes.add(new Attribute().withKey(\"lastName\").withValue(lastName));\n    attributes.add(new Attribute().withKey(\"phoneNumber\").withValue(phoneNumber));\n    attributes.add(new Attribute().withKey(\"DOB\").withValue(DOB));\n\n    PutAttributesRequest request = new PutAttributesRequest().withAttributes(attributes);\n    CLIENT.putAttributes(request); /* <=== com.amazonaws.services.chimesdkidentity.AWSChimeSDKIdentity.putAttributes */ \n  }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "8349-8340",
                "path" : [
                  {
                    "sample" : "phoneNumber",
                    "lineNumber" : 14,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/chimeSDKIdentity.java",
                    "excerpt" : "\n  public static void AWSChimeSDKIdentityFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n    List<Attribute> attributes = new ArrayList<>();\n    attributes.add(new Attribute().withKey(\"firstName\").withValue(firstName));\n    attributes.add(new Attribute().withKey(\"lastName\").withValue(lastName));\n    attributes.add(new Attribute().withKey(\"phoneNumber\").withValue(phoneNumber)); /* <=== java.lang.String */ \n    attributes.add(new Attribute().withKey(\"DOB\").withValue(DOB));\n\n    PutAttributesRequest request = new PutAttributesRequest().withAttributes(attributes);\n    CLIENT.putAttributes(request);\n  }"
                  },
                  {
                    "sample" : "withKey(\"phoneNumber\")",
                    "lineNumber" : 14,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/chimeSDKIdentity.java",
                    "excerpt" : "\n  public static void AWSChimeSDKIdentityFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n    List<Attribute> attributes = new ArrayList<>();\n    attributes.add(new Attribute().withKey(\"firstName\").withValue(firstName));\n    attributes.add(new Attribute().withKey(\"lastName\").withValue(lastName));\n    attributes.add(new Attribute().withKey(\"phoneNumber\").withValue(phoneNumber)); /* <=== com.amazonaws.services.chimesdkidentity.model.Attribute.withKey */ \n    attributes.add(new Attribute().withKey(\"DOB\").withValue(DOB));\n\n    PutAttributesRequest request = new PutAttributesRequest().withAttributes(attributes);\n    CLIENT.putAttributes(request);\n  }"
                  }
                ]
              },
              {
                "pathId" : "14194-14176-14175-14205-14204-14202-14201-14222-14213-14212-14211-14226",
                "path" : [
                  {
                    "sample" : "phoneNumber",
                    "lineNumber" : 17,
                    "columnNumber" : 50,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "        AWSLambda lambdaClient = AWSLambdaClientBuilder.defaultClient();\n\n        // Encode the personal data as a JSON string\n        String payload = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" +\n                         \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +\n                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" + /* <=== java.lang.String */ \n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8));\n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest()"
                  },
                  {
                    "sample" : "\"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" + \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" + \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" + \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\"",
                    "lineNumber" : 15,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "    public static void AWSLambdaFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        // Build the AWS Lambda client\n        AWSLambda lambdaClient = AWSLambdaClientBuilder.defaultClient();\n\n        // Encode the personal data as a JSON string\n        String payload = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" + /* <===  */ \n                         \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +\n                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8));\n"
                  },
                  {
                    "sample" : "payload",
                    "lineNumber" : 15,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "    public static void AWSLambdaFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        // Build the AWS Lambda client\n        AWSLambda lambdaClient = AWSLambdaClientBuilder.defaultClient();\n\n        // Encode the personal data as a JSON string\n        String payload = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" + /* <=== java.lang.String */ \n                         \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +\n                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8));\n"
                  },
                  {
                    "sample" : "payload",
                    "lineNumber" : 19,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "        // Encode the personal data as a JSON string\n        String payload = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" +\n                         \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +\n                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8)); /* <=== java.lang.String */ \n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest()\n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content);"
                  },
                  {
                    "sample" : "payload.getBytes(StandardCharsets.UTF_8)",
                    "lineNumber" : 19,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "        // Encode the personal data as a JSON string\n        String payload = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" +\n                         \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +\n                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8)); /* <=== java.lang.String.getBytes */ \n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest()\n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content);"
                  },
                  {
                    "sample" : "ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8))",
                    "lineNumber" : 19,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "        // Encode the personal data as a JSON string\n        String payload = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" +\n                         \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +\n                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8)); /* <=== java.nio.ByteBuffer.wrap */ \n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest()\n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content);"
                  },
                  {
                    "sample" : "content",
                    "lineNumber" : 19,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "        // Encode the personal data as a JSON string\n        String payload = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" +\n                         \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +\n                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8)); /* <=== java.nio.ByteBuffer */ \n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest()\n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content);"
                  },
                  {
                    "sample" : "content",
                    "lineNumber" : 24,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8));\n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest()\n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content); /* <=== java.nio.ByteBuffer */ \n        InvokeResult invokeResult = lambdaClient.invoke(invokeRequest);\n    }\n}\n"
                  },
                  {
                    "sample" : "withFunctionName(\"myLambdaFunction\")",
                    "lineNumber" : 22,
                    "columnNumber" : 39,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8));\n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest() /* <=== com.amazonaws.services.lambda.model.InvokeRequest.withFunctionName */ \n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content);\n        InvokeResult invokeResult = lambdaClient.invoke(invokeRequest);\n    }\n}"
                  },
                  {
                    "sample" : "withPayload(content)",
                    "lineNumber" : 22,
                    "columnNumber" : 39,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8));\n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest() /* <===  */ \n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content);\n        InvokeResult invokeResult = lambdaClient.invoke(invokeRequest);\n    }\n}"
                  },
                  {
                    "sample" : "invokeRequest",
                    "lineNumber" : 22,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8));\n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest() /* <=== com.amazonaws.services.lambda.model.InvokeRequest */ \n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content);\n        InvokeResult invokeResult = lambdaClient.invoke(invokeRequest);\n    }\n}"
                  },
                  {
                    "sample" : "invoke(invokeRequest)",
                    "lineNumber" : 25,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest()\n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content);\n        InvokeResult invokeResult = lambdaClient.invoke(invokeRequest); /* <=== com.amazonaws.services.lambda.AWSLambda.invoke */ \n    }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "3365-3357-3348-3347-3346-3345-3344-3375-3374-3373-3372-3380",
                "path" : [
                  {
                    "sample" : "phoneNumber",
                    "lineNumber" : 12,
                    "columnNumber" : 58,
                    "fileName" : "/app/code/deviceFarm.java",
                    "excerpt" : "    public static void AWSDevicefarmFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        com.amazonaws.services.devicefarm.AWSDeviceFarm client = AWSDeviceFarmClientBuilder.defaultClient();\n\n        CreateUploadRequest createUploadRequest = new CreateUploadRequest()\n            .withProjectArn(\"<ProjectARN>\")\n            .withName(firstName + \"-\" + lastName + \"-\" + phoneNumber) /* <=== java.lang.String */ \n            .withType(UploadType.ANDROID_APP)\n            .withContentType(\"application/octet-stream\");\n\n        CreateUploadResult createUploadResult = client.createUpload(createUploadRequest);\n        String uploadUrl = createUploadResult.getUpload().getUrl();"
                  },
                  {
                    "sample" : "firstName + \"-\" + lastName + \"-\" + phoneNumber",
                    "lineNumber" : 12,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/deviceFarm.java",
                    "excerpt" : "    public static void AWSDevicefarmFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        com.amazonaws.services.devicefarm.AWSDeviceFarm client = AWSDeviceFarmClientBuilder.defaultClient();\n\n        CreateUploadRequest createUploadRequest = new CreateUploadRequest()\n            .withProjectArn(\"<ProjectARN>\")\n            .withName(firstName + \"-\" + lastName + \"-\" + phoneNumber) /* <===  */ \n            .withType(UploadType.ANDROID_APP)\n            .withContentType(\"application/octet-stream\");\n\n        CreateUploadResult createUploadResult = client.createUpload(createUploadRequest);\n        String uploadUrl = createUploadResult.getUpload().getUrl();"
                  },
                  {
                    "sample" : "withProjectArn(\"<ProjectARN>\")",
                    "lineNumber" : 10,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/deviceFarm.java",
                    "excerpt" : "\npublic class AWSDevicefarmUtil {\n    public static void AWSDevicefarmFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        com.amazonaws.services.devicefarm.AWSDeviceFarm client = AWSDeviceFarmClientBuilder.defaultClient();\n\n        CreateUploadRequest createUploadRequest = new CreateUploadRequest() /* <=== com.amazonaws.services.devicefarm.model.CreateUploadRequest.withProjectArn */ \n            .withProjectArn(\"<ProjectARN>\")\n            .withName(firstName + \"-\" + lastName + \"-\" + phoneNumber)\n            .withType(UploadType.ANDROID_APP)\n            .withContentType(\"application/octet-stream\");\n"
                  },
                  {
                    "sample" : "withName(firstName + \"-\" + lastName + \"-\" + phoneNumber)",
                    "lineNumber" : 10,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/deviceFarm.java",
                    "excerpt" : "\npublic class AWSDevicefarmUtil {\n    public static void AWSDevicefarmFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        com.amazonaws.services.devicefarm.AWSDeviceFarm client = AWSDeviceFarmClientBuilder.defaultClient();\n\n        CreateUploadRequest createUploadRequest = new CreateUploadRequest() /* <===  */ \n            .withProjectArn(\"<ProjectARN>\")\n            .withName(firstName + \"-\" + lastName + \"-\" + phoneNumber)\n            .withType(UploadType.ANDROID_APP)\n            .withContentType(\"application/octet-stream\");\n"
                  },
                  {
                    "sample" : "withType(UploadType.ANDROID_APP)",
                    "lineNumber" : 10,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/deviceFarm.java",
                    "excerpt" : "\npublic class AWSDevicefarmUtil {\n    public static void AWSDevicefarmFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        com.amazonaws.services.devicefarm.AWSDeviceFarm client = AWSDeviceFarmClientBuilder.defaultClient();\n\n        CreateUploadRequest createUploadRequest = new CreateUploadRequest() /* <===  */ \n            .withProjectArn(\"<ProjectARN>\")\n            .withName(firstName + \"-\" + lastName + \"-\" + phoneNumber)\n            .withType(UploadType.ANDROID_APP)\n            .withContentType(\"application/octet-stream\");\n"
                  },
                  {
                    "sample" : "withContentType(\"application/octet-stream\")",
                    "lineNumber" : 10,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/deviceFarm.java",
                    "excerpt" : "\npublic class AWSDevicefarmUtil {\n    public static void AWSDevicefarmFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        com.amazonaws.services.devicefarm.AWSDeviceFarm client = AWSDeviceFarmClientBuilder.defaultClient();\n\n        CreateUploadRequest createUploadRequest = new CreateUploadRequest() /* <===  */ \n            .withProjectArn(\"<ProjectARN>\")\n            .withName(firstName + \"-\" + lastName + \"-\" + phoneNumber)\n            .withType(UploadType.ANDROID_APP)\n            .withContentType(\"application/octet-stream\");\n"
                  },
                  {
                    "sample" : "createUploadRequest",
                    "lineNumber" : 10,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/deviceFarm.java",
                    "excerpt" : "\npublic class AWSDevicefarmUtil {\n    public static void AWSDevicefarmFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        com.amazonaws.services.devicefarm.AWSDeviceFarm client = AWSDeviceFarmClientBuilder.defaultClient();\n\n        CreateUploadRequest createUploadRequest = new CreateUploadRequest() /* <=== com.amazonaws.services.devicefarm.model.CreateUploadRequest */ \n            .withProjectArn(\"<ProjectARN>\")\n            .withName(firstName + \"-\" + lastName + \"-\" + phoneNumber)\n            .withType(UploadType.ANDROID_APP)\n            .withContentType(\"application/octet-stream\");\n"
                  },
                  {
                    "sample" : "createUploadRequest",
                    "lineNumber" : 16,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/deviceFarm.java",
                    "excerpt" : "            .withProjectArn(\"<ProjectARN>\")\n            .withName(firstName + \"-\" + lastName + \"-\" + phoneNumber)\n            .withType(UploadType.ANDROID_APP)\n            .withContentType(\"application/octet-stream\");\n\n        CreateUploadResult createUploadResult = client.createUpload(createUploadRequest); /* <=== com.amazonaws.services.devicefarm.model.CreateUploadRequest */ \n        String uploadUrl = createUploadResult.getUpload().getUrl();\n\n        // Store the personal data in a suitable format, for example in a JSON file.\n        String personalData = \"{ \\\"firstName\\\": \\\"\" + firstName + \"\\\", \" +\n                              \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +"
                  },
                  {
                    "sample" : "client",
                    "lineNumber" : 16,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/deviceFarm.java",
                    "excerpt" : "            .withProjectArn(\"<ProjectARN>\")\n            .withName(firstName + \"-\" + lastName + \"-\" + phoneNumber)\n            .withType(UploadType.ANDROID_APP)\n            .withContentType(\"application/octet-stream\");\n\n        CreateUploadResult createUploadResult = client.createUpload(createUploadRequest); /* <=== ANY */ \n        String uploadUrl = createUploadResult.getUpload().getUrl();\n\n        // Store the personal data in a suitable format, for example in a JSON file.\n        String personalData = \"{ \\\"firstName\\\": \\\"\" + firstName + \"\\\", \" +\n                              \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +"
                  },
                  {
                    "sample" : "createUpload(createUploadRequest)",
                    "lineNumber" : 16,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/deviceFarm.java",
                    "excerpt" : "            .withProjectArn(\"<ProjectARN>\")\n            .withName(firstName + \"-\" + lastName + \"-\" + phoneNumber)\n            .withType(UploadType.ANDROID_APP)\n            .withContentType(\"application/octet-stream\");\n\n        CreateUploadResult createUploadResult = client.createUpload(createUploadRequest); /* <=== ANY.createUpload */ \n        String uploadUrl = createUploadResult.getUpload().getUrl();\n\n        // Store the personal data in a suitable format, for example in a JSON file.\n        String personalData = \"{ \\\"firstName\\\": \\\"\" + firstName + \"\\\", \" +\n                              \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +"
                  },
                  {
                    "sample" : "createUploadResult",
                    "lineNumber" : 16,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/deviceFarm.java",
                    "excerpt" : "            .withProjectArn(\"<ProjectARN>\")\n            .withName(firstName + \"-\" + lastName + \"-\" + phoneNumber)\n            .withType(UploadType.ANDROID_APP)\n            .withContentType(\"application/octet-stream\");\n\n        CreateUploadResult createUploadResult = client.createUpload(createUploadRequest); /* <=== com.amazonaws.services.devicefarm.model.CreateUploadResult */ \n        String uploadUrl = createUploadResult.getUpload().getUrl();\n\n        // Store the personal data in a suitable format, for example in a JSON file.\n        String personalData = \"{ \\\"firstName\\\": \\\"\" + firstName + \"\\\", \" +\n                              \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +"
                  },
                  {
                    "sample" : "getUpload()",
                    "lineNumber" : 17,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/deviceFarm.java",
                    "excerpt" : "            .withName(firstName + \"-\" + lastName + \"-\" + phoneNumber)\n            .withType(UploadType.ANDROID_APP)\n            .withContentType(\"application/octet-stream\");\n\n        CreateUploadResult createUploadResult = client.createUpload(createUploadRequest);\n        String uploadUrl = createUploadResult.getUpload().getUrl(); /* <=== com.amazonaws.services.devicefarm.model.CreateUploadResult.getUpload */ \n\n        // Store the personal data in a suitable format, for example in a JSON file.\n        String personalData = \"{ \\\"firstName\\\": \\\"\" + firstName + \"\\\", \" +\n                              \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +\n                              \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +"
                  }
                ]
              },
              {
                "pathId" : "6440-6430-6429-6416-6415-6462",
                "path" : [
                  {
                    "sample" : "phoneNumber",
                    "lineNumber" : 13,
                    "columnNumber" : 119,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : "\n    public static void AWSlexmodelsv2FirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AmazonLexModelBuilding client = AmazonLexModelBuildingClientBuilder.standard().build();\n        SlotTypeMetadata metadata = new SlotTypeMetadata().withName(\"PersonalDataSlot\").withDescription(\"Personal data slot\");\n        SlotTypeProperties properties = new SlotTypeProperties().withEnumerationValues(\n                new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB) /* <=== java.lang.String */ \n        );\n        PutSlotTypeRequest request = new PutSlotTypeRequest().withName(\"PersonalDataSlot\").withChecksum(null)\n                .withDescription(\"Personal data slot\").withEnumerationValues(properties.getEnumerationValues())\n                .withSlotTypeMetadata(metadata);\n        client.putSlotType(request);"
                  },
                  {
                    "sample" : "firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB",
                    "lineNumber" : 13,
                    "columnNumber" : 84,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : "\n    public static void AWSlexmodelsv2FirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AmazonLexModelBuilding client = AmazonLexModelBuildingClientBuilder.standard().build();\n        SlotTypeMetadata metadata = new SlotTypeMetadata().withName(\"PersonalDataSlot\").withDescription(\"Personal data slot\");\n        SlotTypeProperties properties = new SlotTypeProperties().withEnumerationValues(\n                new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB) /* <===  */ \n        );\n        PutSlotTypeRequest request = new PutSlotTypeRequest().withName(\"PersonalDataSlot\").withChecksum(null)\n                .withDescription(\"Personal data slot\").withEnumerationValues(properties.getEnumerationValues())\n                .withSlotTypeMetadata(metadata);\n        client.putSlotType(request);"
                  },
                  {
                    "sample" : "$obj1",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "withEnumerationValues(new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB))",
                    "lineNumber" : 12,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : "public class AWSLexModelsV2Util {\n\n    public static void AWSlexmodelsv2FirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AmazonLexModelBuilding client = AmazonLexModelBuildingClientBuilder.standard().build();\n        SlotTypeMetadata metadata = new SlotTypeMetadata().withName(\"PersonalDataSlot\").withDescription(\"Personal data slot\");\n        SlotTypeProperties properties = new SlotTypeProperties().withEnumerationValues( /* <=== com.amazonaws.services.lexmodelbuilding.model.SlotTypeProperties.withEnumerationValues */ \n                new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB)\n        );\n        PutSlotTypeRequest request = new PutSlotTypeRequest().withName(\"PersonalDataSlot\").withChecksum(null)\n                .withDescription(\"Personal data slot\").withEnumerationValues(properties.getEnumerationValues())\n                .withSlotTypeMetadata(metadata);"
                  },
                  {
                    "sample" : "properties",
                    "lineNumber" : 12,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : "public class AWSLexModelsV2Util {\n\n    public static void AWSlexmodelsv2FirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AmazonLexModelBuilding client = AmazonLexModelBuildingClientBuilder.standard().build();\n        SlotTypeMetadata metadata = new SlotTypeMetadata().withName(\"PersonalDataSlot\").withDescription(\"Personal data slot\");\n        SlotTypeProperties properties = new SlotTypeProperties().withEnumerationValues( /* <=== com.amazonaws.services.lexmodelbuilding.model.SlotTypeProperties */ \n                new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB)\n        );\n        PutSlotTypeRequest request = new PutSlotTypeRequest().withName(\"PersonalDataSlot\").withChecksum(null)\n                .withDescription(\"Personal data slot\").withEnumerationValues(properties.getEnumerationValues())\n                .withSlotTypeMetadata(metadata);"
                  },
                  {
                    "sample" : "getEnumerationValues()",
                    "lineNumber" : 16,
                    "columnNumber" : 78,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : "        SlotTypeMetadata metadata = new SlotTypeMetadata().withName(\"PersonalDataSlot\").withDescription(\"Personal data slot\");\n        SlotTypeProperties properties = new SlotTypeProperties().withEnumerationValues(\n                new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB)\n        );\n        PutSlotTypeRequest request = new PutSlotTypeRequest().withName(\"PersonalDataSlot\").withChecksum(null)\n                .withDescription(\"Personal data slot\").withEnumerationValues(properties.getEnumerationValues()) /* <=== com.amazonaws.services.lexmodelbuilding.model.SlotTypeProperties.getEnumerationValues */ \n                .withSlotTypeMetadata(metadata);\n        client.putSlotType(request);\n    }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "9865-9863",
                "path" : [
                  {
                    "sample" : "\"PhoneNumber\"",
                    "lineNumber" : 13,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/devOpsGuru.java",
                    "excerpt" : "        DevOpsGuruClient devOpsGuruClient = DevOpsGuruClient.builder().build();\n        Event event = new Event();\n        event.setName(\"PersonalDataEvent\");\n        event.addDetail(\"FirstName\", firstName);\n        event.addDetail(\"LastName\", lastName);\n        event.addDetail(\"PhoneNumber\", phoneNumber); /* <===  */ \n        event.addDetail(\"DOB\", DOB);\n        PutEventRequest request = new PutEventRequest().withEvent(event);\n        devOpsGuruClient.putEvent(request);\n    }\n}"
                  },
                  {
                    "sample" : "addDetail(\"PhoneNumber\", phoneNumber)",
                    "lineNumber" : 13,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/devOpsGuru.java",
                    "excerpt" : "        DevOpsGuruClient devOpsGuruClient = DevOpsGuruClient.builder().build();\n        Event event = new Event();\n        event.setName(\"PersonalDataEvent\");\n        event.addDetail(\"FirstName\", firstName);\n        event.addDetail(\"LastName\", lastName);\n        event.addDetail(\"PhoneNumber\", phoneNumber); /* <=== com.amazonaws.services.devopsguru.model.Event.addDetail */ \n        event.addDetail(\"DOB\", DOB);\n        PutEventRequest request = new PutEventRequest().withEvent(event);\n        devOpsGuruClient.putEvent(request);\n    }\n}"
                  }
                ]
              },
              {
                "pathId" : "16196-16187-16186-16185-16198-16229-16214-16213-16212-16233",
                "path" : [
                  {
                    "sample" : "phoneNumber",
                    "lineNumber" : 26,
                    "columnNumber" : 83,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "\n        // Define the user's personal data\n        List<AttributeType> userAttributes = new ArrayList<>();\n        userAttributes.add(new AttributeType().withName(\"given_name\").withValue(firstName));\n        userAttributes.add(new AttributeType().withName(\"family_name\").withValue(lastName));\n        userAttributes.add(new AttributeType().withName(\"phone_number\").withValue(phoneNumber)); /* <=== java.lang.String */ \n        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob));\n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest()\n                .withUserPoolId(USER_POOL_ID)"
                  },
                  {
                    "sample" : "withName(\"phone_number\")",
                    "lineNumber" : 26,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "\n        // Define the user's personal data\n        List<AttributeType> userAttributes = new ArrayList<>();\n        userAttributes.add(new AttributeType().withName(\"given_name\").withValue(firstName));\n        userAttributes.add(new AttributeType().withName(\"family_name\").withValue(lastName));\n        userAttributes.add(new AttributeType().withName(\"phone_number\").withValue(phoneNumber)); /* <=== com.amazonaws.services.cognitoidp.model.AttributeType.withName */ \n        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob));\n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest()\n                .withUserPoolId(USER_POOL_ID)"
                  },
                  {
                    "sample" : "withValue(phoneNumber)",
                    "lineNumber" : 26,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "\n        // Define the user's personal data\n        List<AttributeType> userAttributes = new ArrayList<>();\n        userAttributes.add(new AttributeType().withName(\"given_name\").withValue(firstName));\n        userAttributes.add(new AttributeType().withName(\"family_name\").withValue(lastName));\n        userAttributes.add(new AttributeType().withName(\"phone_number\").withValue(phoneNumber)); /* <===  */ \n        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob));\n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest()\n                .withUserPoolId(USER_POOL_ID)"
                  },
                  {
                    "sample" : "userAttributes",
                    "lineNumber" : 26,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "\n        // Define the user's personal data\n        List<AttributeType> userAttributes = new ArrayList<>();\n        userAttributes.add(new AttributeType().withName(\"given_name\").withValue(firstName));\n        userAttributes.add(new AttributeType().withName(\"family_name\").withValue(lastName));\n        userAttributes.add(new AttributeType().withName(\"phone_number\").withValue(phoneNumber)); /* <=== ANY */ \n        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob));\n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest()\n                .withUserPoolId(USER_POOL_ID)"
                  },
                  {
                    "sample" : "userAttributes",
                    "lineNumber" : 27,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "        // Define the user's personal data\n        List<AttributeType> userAttributes = new ArrayList<>();\n        userAttributes.add(new AttributeType().withName(\"given_name\").withValue(firstName));\n        userAttributes.add(new AttributeType().withName(\"family_name\").withValue(lastName));\n        userAttributes.add(new AttributeType().withName(\"phone_number\").withValue(phoneNumber));\n        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob)); /* <=== ANY */ \n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest()\n                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName)"
                  },
                  {
                    "sample" : "userAttributes",
                    "lineNumber" : 33,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest()\n                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName)\n                .withUserAttributes(userAttributes); /* <=== ANY */ \n\n        // Send the request to create the user\n        AdminCreateUserResult createUserResult = cognitoIdpClient.adminCreateUser(createUserRequest);\n\n        // Get the user's unique identifier"
                  },
                  {
                    "sample" : "withUsername(firstName + lastName)",
                    "lineNumber" : 30,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "        userAttributes.add(new AttributeType().withName(\"family_name\").withValue(lastName));\n        userAttributes.add(new AttributeType().withName(\"phone_number\").withValue(phoneNumber));\n        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob));\n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest() /* <===  */ \n                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName)\n                .withUserAttributes(userAttributes);\n\n        // Send the request to create the user"
                  },
                  {
                    "sample" : "withUserAttributes(userAttributes)",
                    "lineNumber" : 30,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "        userAttributes.add(new AttributeType().withName(\"family_name\").withValue(lastName));\n        userAttributes.add(new AttributeType().withName(\"phone_number\").withValue(phoneNumber));\n        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob));\n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest() /* <===  */ \n                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName)\n                .withUserAttributes(userAttributes);\n\n        // Send the request to create the user"
                  },
                  {
                    "sample" : "createUserRequest",
                    "lineNumber" : 30,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "        userAttributes.add(new AttributeType().withName(\"family_name\").withValue(lastName));\n        userAttributes.add(new AttributeType().withName(\"phone_number\").withValue(phoneNumber));\n        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob));\n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest() /* <=== com.amazonaws.services.cognitoidp.model.AdminCreateUserRequest */ \n                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName)\n                .withUserAttributes(userAttributes);\n\n        // Send the request to create the user"
                  },
                  {
                    "sample" : "adminCreateUser(createUserRequest)",
                    "lineNumber" : 36,
                    "columnNumber" : 50,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName)\n                .withUserAttributes(userAttributes);\n\n        // Send the request to create the user\n        AdminCreateUserResult createUserResult = cognitoIdpClient.adminCreateUser(createUserRequest); /* <=== com.amazonaws.services.cognitoidp.AWSCognitoIdentityProvider.adminCreateUser */ \n\n        // Get the user's unique identifier\n        String userId = createUserResult.getUser().getUsername();\n\n        System.out.println(\"Successfully created user with ID: \" + userId);"
                  }
                ]
              },
              {
                "pathId" : "6440-6430-6429-6416-6415-6462-6449-6448-6447-6446-6465",
                "path" : [
                  {
                    "sample" : "phoneNumber",
                    "lineNumber" : 13,
                    "columnNumber" : 119,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : "\n    public static void AWSlexmodelsv2FirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AmazonLexModelBuilding client = AmazonLexModelBuildingClientBuilder.standard().build();\n        SlotTypeMetadata metadata = new SlotTypeMetadata().withName(\"PersonalDataSlot\").withDescription(\"Personal data slot\");\n        SlotTypeProperties properties = new SlotTypeProperties().withEnumerationValues(\n                new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB) /* <=== java.lang.String */ \n        );\n        PutSlotTypeRequest request = new PutSlotTypeRequest().withName(\"PersonalDataSlot\").withChecksum(null)\n                .withDescription(\"Personal data slot\").withEnumerationValues(properties.getEnumerationValues())\n                .withSlotTypeMetadata(metadata);\n        client.putSlotType(request);"
                  },
                  {
                    "sample" : "firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB",
                    "lineNumber" : 13,
                    "columnNumber" : 84,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : "\n    public static void AWSlexmodelsv2FirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AmazonLexModelBuilding client = AmazonLexModelBuildingClientBuilder.standard().build();\n        SlotTypeMetadata metadata = new SlotTypeMetadata().withName(\"PersonalDataSlot\").withDescription(\"Personal data slot\");\n        SlotTypeProperties properties = new SlotTypeProperties().withEnumerationValues(\n                new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB) /* <===  */ \n        );\n        PutSlotTypeRequest request = new PutSlotTypeRequest().withName(\"PersonalDataSlot\").withChecksum(null)\n                .withDescription(\"Personal data slot\").withEnumerationValues(properties.getEnumerationValues())\n                .withSlotTypeMetadata(metadata);\n        client.putSlotType(request);"
                  },
                  {
                    "sample" : "$obj1",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "withEnumerationValues(new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB))",
                    "lineNumber" : 12,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : "public class AWSLexModelsV2Util {\n\n    public static void AWSlexmodelsv2FirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AmazonLexModelBuilding client = AmazonLexModelBuildingClientBuilder.standard().build();\n        SlotTypeMetadata metadata = new SlotTypeMetadata().withName(\"PersonalDataSlot\").withDescription(\"Personal data slot\");\n        SlotTypeProperties properties = new SlotTypeProperties().withEnumerationValues( /* <=== com.amazonaws.services.lexmodelbuilding.model.SlotTypeProperties.withEnumerationValues */ \n                new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB)\n        );\n        PutSlotTypeRequest request = new PutSlotTypeRequest().withName(\"PersonalDataSlot\").withChecksum(null)\n                .withDescription(\"Personal data slot\").withEnumerationValues(properties.getEnumerationValues())\n                .withSlotTypeMetadata(metadata);"
                  },
                  {
                    "sample" : "properties",
                    "lineNumber" : 12,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : "public class AWSLexModelsV2Util {\n\n    public static void AWSlexmodelsv2FirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AmazonLexModelBuilding client = AmazonLexModelBuildingClientBuilder.standard().build();\n        SlotTypeMetadata metadata = new SlotTypeMetadata().withName(\"PersonalDataSlot\").withDescription(\"Personal data slot\");\n        SlotTypeProperties properties = new SlotTypeProperties().withEnumerationValues( /* <=== com.amazonaws.services.lexmodelbuilding.model.SlotTypeProperties */ \n                new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB)\n        );\n        PutSlotTypeRequest request = new PutSlotTypeRequest().withName(\"PersonalDataSlot\").withChecksum(null)\n                .withDescription(\"Personal data slot\").withEnumerationValues(properties.getEnumerationValues())\n                .withSlotTypeMetadata(metadata);"
                  },
                  {
                    "sample" : "getEnumerationValues()",
                    "lineNumber" : 16,
                    "columnNumber" : 78,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : "        SlotTypeMetadata metadata = new SlotTypeMetadata().withName(\"PersonalDataSlot\").withDescription(\"Personal data slot\");\n        SlotTypeProperties properties = new SlotTypeProperties().withEnumerationValues(\n                new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB)\n        );\n        PutSlotTypeRequest request = new PutSlotTypeRequest().withName(\"PersonalDataSlot\").withChecksum(null)\n                .withDescription(\"Personal data slot\").withEnumerationValues(properties.getEnumerationValues()) /* <=== com.amazonaws.services.lexmodelbuilding.model.SlotTypeProperties.getEnumerationValues */ \n                .withSlotTypeMetadata(metadata);\n        client.putSlotType(request);\n    }\n}\n"
                  },
                  {
                    "sample" : "withDescription(\"Personal data slot\")",
                    "lineNumber" : 15,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : "        AmazonLexModelBuilding client = AmazonLexModelBuildingClientBuilder.standard().build();\n        SlotTypeMetadata metadata = new SlotTypeMetadata().withName(\"PersonalDataSlot\").withDescription(\"Personal data slot\");\n        SlotTypeProperties properties = new SlotTypeProperties().withEnumerationValues(\n                new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB)\n        );\n        PutSlotTypeRequest request = new PutSlotTypeRequest().withName(\"PersonalDataSlot\").withChecksum(null) /* <===  */ \n                .withDescription(\"Personal data slot\").withEnumerationValues(properties.getEnumerationValues())\n                .withSlotTypeMetadata(metadata);\n        client.putSlotType(request);\n    }\n}"
                  },
                  {
                    "sample" : "withEnumerationValues(properties.getEnumerationValues())",
                    "lineNumber" : 15,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : "        AmazonLexModelBuilding client = AmazonLexModelBuildingClientBuilder.standard().build();\n        SlotTypeMetadata metadata = new SlotTypeMetadata().withName(\"PersonalDataSlot\").withDescription(\"Personal data slot\");\n        SlotTypeProperties properties = new SlotTypeProperties().withEnumerationValues(\n                new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB)\n        );\n        PutSlotTypeRequest request = new PutSlotTypeRequest().withName(\"PersonalDataSlot\").withChecksum(null) /* <===  */ \n                .withDescription(\"Personal data slot\").withEnumerationValues(properties.getEnumerationValues())\n                .withSlotTypeMetadata(metadata);\n        client.putSlotType(request);\n    }\n}"
                  },
                  {
                    "sample" : "withSlotTypeMetadata(metadata)",
                    "lineNumber" : 15,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : "        AmazonLexModelBuilding client = AmazonLexModelBuildingClientBuilder.standard().build();\n        SlotTypeMetadata metadata = new SlotTypeMetadata().withName(\"PersonalDataSlot\").withDescription(\"Personal data slot\");\n        SlotTypeProperties properties = new SlotTypeProperties().withEnumerationValues(\n                new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB)\n        );\n        PutSlotTypeRequest request = new PutSlotTypeRequest().withName(\"PersonalDataSlot\").withChecksum(null) /* <===  */ \n                .withDescription(\"Personal data slot\").withEnumerationValues(properties.getEnumerationValues())\n                .withSlotTypeMetadata(metadata);\n        client.putSlotType(request);\n    }\n}"
                  },
                  {
                    "sample" : "request",
                    "lineNumber" : 15,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : "        AmazonLexModelBuilding client = AmazonLexModelBuildingClientBuilder.standard().build();\n        SlotTypeMetadata metadata = new SlotTypeMetadata().withName(\"PersonalDataSlot\").withDescription(\"Personal data slot\");\n        SlotTypeProperties properties = new SlotTypeProperties().withEnumerationValues(\n                new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB)\n        );\n        PutSlotTypeRequest request = new PutSlotTypeRequest().withName(\"PersonalDataSlot\").withChecksum(null) /* <=== com.amazonaws.services.lexmodelbuilding.model.PutSlotTypeRequest */ \n                .withDescription(\"Personal data slot\").withEnumerationValues(properties.getEnumerationValues())\n                .withSlotTypeMetadata(metadata);\n        client.putSlotType(request);\n    }\n}"
                  },
                  {
                    "sample" : "putSlotType(request)",
                    "lineNumber" : 18,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : "                new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB)\n        );\n        PutSlotTypeRequest request = new PutSlotTypeRequest().withName(\"PersonalDataSlot\").withChecksum(null)\n                .withDescription(\"Personal data slot\").withEnumerationValues(properties.getEnumerationValues())\n                .withSlotTypeMetadata(metadata);\n        client.putSlotType(request); /* <=== com.amazonaws.services.lexmodelbuilding.AmazonLexModelBuilding.putSlotType */ \n    }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "12767-12765",
                "path" : [
                  {
                    "sample" : "phoneNumber",
                    "lineNumber" : 20,
                    "columnNumber" : 87,
                    "fileName" : "/app/code/directory.java",
                    "excerpt" : "  public static void AWSDirectoryFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    try {\n      // Create an entry in AWS Directory\n      DirectoryAttribute firstNameAttribute = new DirectoryAttribute(\"firstName\", firstName);\n      DirectoryAttribute lastNameAttribute = new DirectoryAttribute(\"lastName\", lastName);\n      DirectoryAttribute phoneNumberAttribute = new DirectoryAttribute(\"phoneNumber\", phoneNumber); /* <=== java.lang.String */ \n      DirectoryAttribute dobAttribute = new DirectoryAttribute(\"dob\", dob);\n      List<DirectoryAttribute> attributes = Arrays.asList(firstNameAttribute, lastNameAttribute, phoneNumberAttribute, dobAttribute);\n      AddUserToGroupRequest request = new AddUserToGroupRequest().withDirectoryId(\"your-directory-id\").withUserName(\"user-name\").withGroupName(\"group-name\").withAttributes(attributes);\n      client.addUserToGroup(request);\n    } catch (Exception e) {"
                  },
                  {
                    "sample" : "new DirectoryAttribute(\"phoneNumber\", phoneNumber)",
                    "lineNumber" : 20,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/directory.java",
                    "excerpt" : "  public static void AWSDirectoryFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    try {\n      // Create an entry in AWS Directory\n      DirectoryAttribute firstNameAttribute = new DirectoryAttribute(\"firstName\", firstName);\n      DirectoryAttribute lastNameAttribute = new DirectoryAttribute(\"lastName\", lastName);\n      DirectoryAttribute phoneNumberAttribute = new DirectoryAttribute(\"phoneNumber\", phoneNumber); /* <=== com.amazonaws.services.directory.model.DirectoryAttribute.<init> */ \n      DirectoryAttribute dobAttribute = new DirectoryAttribute(\"dob\", dob);\n      List<DirectoryAttribute> attributes = Arrays.asList(firstNameAttribute, lastNameAttribute, phoneNumberAttribute, dobAttribute);\n      AddUserToGroupRequest request = new AddUserToGroupRequest().withDirectoryId(\"your-directory-id\").withUserName(\"user-name\").withGroupName(\"group-name\").withAttributes(attributes);\n      client.addUserToGroup(request);\n    } catch (Exception e) {"
                  }
                ]
              },
              {
                "pathId" : "16316-16305-16304-16303-16302-16318",
                "path" : [
                  {
                    "sample" : "phoneNumber",
                    "lineNumber" : 12,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/amplifyUIBuilder.java",
                    "excerpt" : "        AmplifyUIBuilder amplifyUIBuilder = new AmplifyUIBuilder();\n\n        CreateUserRequest createUserRequest = new CreateUserRequest()\n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber) /* <=== java.lang.String */ \n                .withDOB(DOB);\n\n        amplifyUIBuilder.createUser(createUserRequest);\n    }\n}"
                  },
                  {
                    "sample" : "withLastName(lastName)",
                    "lineNumber" : 9,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/amplifyUIBuilder.java",
                    "excerpt" : "public class AWSAmplifyUIBuilderUtil {\n\n    public void AWSAmplifyUIBuilderFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AmplifyUIBuilder amplifyUIBuilder = new AmplifyUIBuilder();\n\n        CreateUserRequest createUserRequest = new CreateUserRequest() /* <===  */ \n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber)\n                .withDOB(DOB);\n"
                  },
                  {
                    "sample" : "withPhoneNumber(phoneNumber)",
                    "lineNumber" : 9,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/amplifyUIBuilder.java",
                    "excerpt" : "public class AWSAmplifyUIBuilderUtil {\n\n    public void AWSAmplifyUIBuilderFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AmplifyUIBuilder amplifyUIBuilder = new AmplifyUIBuilder();\n\n        CreateUserRequest createUserRequest = new CreateUserRequest() /* <===  */ \n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber)\n                .withDOB(DOB);\n"
                  },
                  {
                    "sample" : "withDOB(DOB)",
                    "lineNumber" : 9,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/amplifyUIBuilder.java",
                    "excerpt" : "public class AWSAmplifyUIBuilderUtil {\n\n    public void AWSAmplifyUIBuilderFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AmplifyUIBuilder amplifyUIBuilder = new AmplifyUIBuilder();\n\n        CreateUserRequest createUserRequest = new CreateUserRequest() /* <===  */ \n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber)\n                .withDOB(DOB);\n"
                  },
                  {
                    "sample" : "createUserRequest",
                    "lineNumber" : 9,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/amplifyUIBuilder.java",
                    "excerpt" : "public class AWSAmplifyUIBuilderUtil {\n\n    public void AWSAmplifyUIBuilderFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AmplifyUIBuilder amplifyUIBuilder = new AmplifyUIBuilder();\n\n        CreateUserRequest createUserRequest = new CreateUserRequest() /* <=== com.amazonaws.services.amplifyuibuilder.model.CreateUserRequest */ \n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber)\n                .withDOB(DOB);\n"
                  },
                  {
                    "sample" : "createUser(createUserRequest)",
                    "lineNumber" : 15,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/amplifyUIBuilder.java",
                    "excerpt" : "                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber)\n                .withDOB(DOB);\n\n        amplifyUIBuilder.createUser(createUserRequest); /* <=== com.amazonaws.services.amplifyuibuilder.AmplifyUIBuilder.createUser */ \n    }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "14194-14176-14175-14205-14204-14202-14201-14222-14213",
                "path" : [
                  {
                    "sample" : "phoneNumber",
                    "lineNumber" : 17,
                    "columnNumber" : 50,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "        AWSLambda lambdaClient = AWSLambdaClientBuilder.defaultClient();\n\n        // Encode the personal data as a JSON string\n        String payload = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" +\n                         \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +\n                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" + /* <=== java.lang.String */ \n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8));\n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest()"
                  },
                  {
                    "sample" : "\"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" + \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" + \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" + \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\"",
                    "lineNumber" : 15,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "    public static void AWSLambdaFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        // Build the AWS Lambda client\n        AWSLambda lambdaClient = AWSLambdaClientBuilder.defaultClient();\n\n        // Encode the personal data as a JSON string\n        String payload = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" + /* <===  */ \n                         \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +\n                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8));\n"
                  },
                  {
                    "sample" : "payload",
                    "lineNumber" : 15,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "    public static void AWSLambdaFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        // Build the AWS Lambda client\n        AWSLambda lambdaClient = AWSLambdaClientBuilder.defaultClient();\n\n        // Encode the personal data as a JSON string\n        String payload = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" + /* <=== java.lang.String */ \n                         \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +\n                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8));\n"
                  },
                  {
                    "sample" : "payload",
                    "lineNumber" : 19,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "        // Encode the personal data as a JSON string\n        String payload = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" +\n                         \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +\n                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8)); /* <=== java.lang.String */ \n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest()\n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content);"
                  },
                  {
                    "sample" : "payload.getBytes(StandardCharsets.UTF_8)",
                    "lineNumber" : 19,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "        // Encode the personal data as a JSON string\n        String payload = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" +\n                         \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +\n                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8)); /* <=== java.lang.String.getBytes */ \n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest()\n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content);"
                  },
                  {
                    "sample" : "ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8))",
                    "lineNumber" : 19,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "        // Encode the personal data as a JSON string\n        String payload = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" +\n                         \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +\n                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8)); /* <=== java.nio.ByteBuffer.wrap */ \n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest()\n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content);"
                  },
                  {
                    "sample" : "content",
                    "lineNumber" : 19,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "        // Encode the personal data as a JSON string\n        String payload = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" +\n                         \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +\n                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8)); /* <=== java.nio.ByteBuffer */ \n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest()\n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content);"
                  },
                  {
                    "sample" : "content",
                    "lineNumber" : 24,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8));\n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest()\n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content); /* <=== java.nio.ByteBuffer */ \n        InvokeResult invokeResult = lambdaClient.invoke(invokeRequest);\n    }\n}\n"
                  },
                  {
                    "sample" : "withFunctionName(\"myLambdaFunction\")",
                    "lineNumber" : 22,
                    "columnNumber" : 39,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8));\n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest() /* <=== com.amazonaws.services.lambda.model.InvokeRequest.withFunctionName */ \n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content);\n        InvokeResult invokeResult = lambdaClient.invoke(invokeRequest);\n    }\n}"
                  }
                ]
              },
              {
                "pathId" : "11728-11729-11727-11731-11751-11738-11737-11736-11752",
                "path" : [
                  {
                    "sample" : "\"phoneNumber\"",
                    "lineNumber" : 14,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/mgn.java",
                    "excerpt" : "    AmazonMGNClient mgnClient = AmazonMGNClient.builder().build();\n    \n    Map<String, String> personalData = new HashMap<>();\n    personalData.put(\"firstName\", firstName);\n    personalData.put(\"lastName\", lastName);\n    personalData.put(\"phoneNumber\", phoneNumber); /* <===  */ \n    personalData.put(\"DOB\", DOB);\n    \n    IndexDocumentRequest indexDocumentRequest = new IndexDocumentRequest()\n        .withIndexName(\"personal-data\")\n        .withId(firstName + lastName)"
                  },
                  {
                    "sample" : "phoneNumber",
                    "lineNumber" : 14,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/mgn.java",
                    "excerpt" : "    AmazonMGNClient mgnClient = AmazonMGNClient.builder().build();\n    \n    Map<String, String> personalData = new HashMap<>();\n    personalData.put(\"firstName\", firstName);\n    personalData.put(\"lastName\", lastName);\n    personalData.put(\"phoneNumber\", phoneNumber); /* <=== java.lang.String */ \n    personalData.put(\"DOB\", DOB);\n    \n    IndexDocumentRequest indexDocumentRequest = new IndexDocumentRequest()\n        .withIndexName(\"personal-data\")\n        .withId(firstName + lastName)"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 14,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/mgn.java",
                    "excerpt" : "    AmazonMGNClient mgnClient = AmazonMGNClient.builder().build();\n    \n    Map<String, String> personalData = new HashMap<>();\n    personalData.put(\"firstName\", firstName);\n    personalData.put(\"lastName\", lastName);\n    personalData.put(\"phoneNumber\", phoneNumber); /* <=== java.util.Map */ \n    personalData.put(\"DOB\", DOB);\n    \n    IndexDocumentRequest indexDocumentRequest = new IndexDocumentRequest()\n        .withIndexName(\"personal-data\")\n        .withId(firstName + lastName)"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 15,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/mgn.java",
                    "excerpt" : "    \n    Map<String, String> personalData = new HashMap<>();\n    personalData.put(\"firstName\", firstName);\n    personalData.put(\"lastName\", lastName);\n    personalData.put(\"phoneNumber\", phoneNumber);\n    personalData.put(\"DOB\", DOB); /* <=== java.util.Map */ \n    \n    IndexDocumentRequest indexDocumentRequest = new IndexDocumentRequest()\n        .withIndexName(\"personal-data\")\n        .withId(firstName + lastName)\n        .withSource(personalData);"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 20,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/mgn.java",
                    "excerpt" : "    personalData.put(\"DOB\", DOB);\n    \n    IndexDocumentRequest indexDocumentRequest = new IndexDocumentRequest()\n        .withIndexName(\"personal-data\")\n        .withId(firstName + lastName)\n        .withSource(personalData); /* <=== java.util.Map */ \n    \n    mgnClient.indexDocument(indexDocumentRequest);\n  }\n}\n"
                  },
                  {
                    "sample" : "withId(firstName + lastName)",
                    "lineNumber" : 17,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/mgn.java",
                    "excerpt" : "    personalData.put(\"firstName\", firstName);\n    personalData.put(\"lastName\", lastName);\n    personalData.put(\"phoneNumber\", phoneNumber);\n    personalData.put(\"DOB\", DOB);\n    \n    IndexDocumentRequest indexDocumentRequest = new IndexDocumentRequest() /* <===  */ \n        .withIndexName(\"personal-data\")\n        .withId(firstName + lastName)\n        .withSource(personalData);\n    \n    mgnClient.indexDocument(indexDocumentRequest);"
                  },
                  {
                    "sample" : "withSource(personalData)",
                    "lineNumber" : 17,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/mgn.java",
                    "excerpt" : "    personalData.put(\"firstName\", firstName);\n    personalData.put(\"lastName\", lastName);\n    personalData.put(\"phoneNumber\", phoneNumber);\n    personalData.put(\"DOB\", DOB);\n    \n    IndexDocumentRequest indexDocumentRequest = new IndexDocumentRequest() /* <===  */ \n        .withIndexName(\"personal-data\")\n        .withId(firstName + lastName)\n        .withSource(personalData);\n    \n    mgnClient.indexDocument(indexDocumentRequest);"
                  },
                  {
                    "sample" : "indexDocumentRequest",
                    "lineNumber" : 17,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/mgn.java",
                    "excerpt" : "    personalData.put(\"firstName\", firstName);\n    personalData.put(\"lastName\", lastName);\n    personalData.put(\"phoneNumber\", phoneNumber);\n    personalData.put(\"DOB\", DOB);\n    \n    IndexDocumentRequest indexDocumentRequest = new IndexDocumentRequest() /* <=== com.amazonaws.services.mgn.model.IndexDocumentRequest */ \n        .withIndexName(\"personal-data\")\n        .withId(firstName + lastName)\n        .withSource(personalData);\n    \n    mgnClient.indexDocument(indexDocumentRequest);"
                  },
                  {
                    "sample" : "indexDocument(indexDocumentRequest)",
                    "lineNumber" : 22,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/mgn.java",
                    "excerpt" : "    IndexDocumentRequest indexDocumentRequest = new IndexDocumentRequest()\n        .withIndexName(\"personal-data\")\n        .withId(firstName + lastName)\n        .withSource(personalData);\n    \n    mgnClient.indexDocument(indexDocumentRequest); /* <=== com.amazonaws.services.mgn.AmazonMGNClient.indexDocument */ \n  }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "13475-13468-13467-13497-13482",
                "path" : [
                  {
                    "sample" : "phoneNumber",
                    "lineNumber" : 16,
                    "columnNumber" : 104,
                    "fileName" : "/app/code/iotFleetwise.java",
                    "excerpt" : "public AWSIoTFleetwiseUtil() {\nclient = AmazonIoTFleetwiseClientBuilder.standard().build();\n}\n\npublic void AWSIoTFleetwiseProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob); /* <=== java.lang.String */ \n\nCreateTrackerRequest createTrackerRequest = new CreateTrackerRequest()\n        .withTrackerName(firstName + \"_\" + lastName + \"_Tracker\")\n        .withAttributePayload(personalData);\n"
                  },
                  {
                    "sample" : "Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob)",
                    "lineNumber" : 16,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/iotFleetwise.java",
                    "excerpt" : "public AWSIoTFleetwiseUtil() {\nclient = AmazonIoTFleetwiseClientBuilder.standard().build();\n}\n\npublic void AWSIoTFleetwiseProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob); /* <=== java.util.Map.of */ \n\nCreateTrackerRequest createTrackerRequest = new CreateTrackerRequest()\n        .withTrackerName(firstName + \"_\" + lastName + \"_Tracker\")\n        .withAttributePayload(personalData);\n"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 16,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/iotFleetwise.java",
                    "excerpt" : "public AWSIoTFleetwiseUtil() {\nclient = AmazonIoTFleetwiseClientBuilder.standard().build();\n}\n\npublic void AWSIoTFleetwiseProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob); /* <=== java.util.Map */ \n\nCreateTrackerRequest createTrackerRequest = new CreateTrackerRequest()\n        .withTrackerName(firstName + \"_\" + lastName + \"_Tracker\")\n        .withAttributePayload(personalData);\n"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 20,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/iotFleetwise.java",
                    "excerpt" : "public void AWSIoTFleetwiseProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nCreateTrackerRequest createTrackerRequest = new CreateTrackerRequest()\n        .withTrackerName(firstName + \"_\" + lastName + \"_Tracker\")\n        .withAttributePayload(personalData); /* <=== java.util.Map */ \n\nCreateTrackerResult result = client.createTracker(createTrackerRequest);\nSystem.out.println(\"Tracker created with ID: \" + result.getTrackerId());\n}\n}"
                  },
                  {
                    "sample" : "withTrackerName(firstName + \"_\" + lastName + \"_Tracker\")",
                    "lineNumber" : 18,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/iotFleetwise.java",
                    "excerpt" : "}\n\npublic void AWSIoTFleetwiseProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nCreateTrackerRequest createTrackerRequest = new CreateTrackerRequest() /* <=== com.amazonaws.services.iotfleetwise.model.CreateTrackerRequest.withTrackerName */ \n        .withTrackerName(firstName + \"_\" + lastName + \"_Tracker\")\n        .withAttributePayload(personalData);\n\nCreateTrackerResult result = client.createTracker(createTrackerRequest);\nSystem.out.println(\"Tracker created with ID: \" + result.getTrackerId());"
                  }
                ]
              },
              {
                "pathId" : "10220-10219-10222",
                "path" : [
                  {
                    "sample" : "\"phone_number\"",
                    "lineNumber" : 19,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/cloudcontrolapi.java",
                    "excerpt" : "        // Add personal data to the request\n        Map<String, String> personalData = new HashMap<>();\n        personalData.put(\"first_name\", \"John\");\n        personalData.put(\"last_name\", \"Doe\");\n        personalData.put(\"email\", \"johndoe@example.com\");\n        personalData.put(\"phone_number\", \"555-555-1212\"); /* <===  */ \n        request.setPersonalData(personalData);\n\n        GetRightsizingRecommendationResult result = client.getRightsizingRecommendation(request);\n        System.out.println(\"Rightsizing recommendation: \" + result.getRecommendation());\n    }"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 19,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/cloudcontrolapi.java",
                    "excerpt" : "        // Add personal data to the request\n        Map<String, String> personalData = new HashMap<>();\n        personalData.put(\"first_name\", \"John\");\n        personalData.put(\"last_name\", \"Doe\");\n        personalData.put(\"email\", \"johndoe@example.com\");\n        personalData.put(\"phone_number\", \"555-555-1212\"); /* <=== java.util.Map */ \n        request.setPersonalData(personalData);\n\n        GetRightsizingRecommendationResult result = client.getRightsizingRecommendation(request);\n        System.out.println(\"Rightsizing recommendation: \" + result.getRecommendation());\n    }"
                  },
                  {
                    "sample" : "setPersonalData(personalData)",
                    "lineNumber" : 20,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/cloudcontrolapi.java",
                    "excerpt" : "        Map<String, String> personalData = new HashMap<>();\n        personalData.put(\"first_name\", \"John\");\n        personalData.put(\"last_name\", \"Doe\");\n        personalData.put(\"email\", \"johndoe@example.com\");\n        personalData.put(\"phone_number\", \"555-555-1212\");\n        request.setPersonalData(personalData); /* <=== com.amazonaws.services.cloudcontrolapi.model.GetRightsizingRecommendationRequest.setPersonalData */ \n\n        GetRightsizingRecommendationResult result = client.getRightsizingRecommendation(request);\n        System.out.println(\"Rightsizing recommendation: \" + result.getRecommendation());\n    }\n}"
                  }
                ]
              },
              {
                "pathId" : "13882-13873-13872-13871-13870-13884",
                "path" : [
                  {
                    "sample" : "phoneNumber",
                    "lineNumber" : 17,
                    "columnNumber" : 75,
                    "fileName" : "/app/code/simpleSystemManagement.java",
                    "excerpt" : "    parameterName = \"/personalData/lastName\";\n    request = new PutParameterRequest().withName(parameterName).withValue(lastName).withType(\"String\");\n    ssmClient.putParameter(request);\n    \n    parameterName = \"/personalData/phoneNumber\";\n    request = new PutParameterRequest().withName(parameterName).withValue(phoneNumber).withType(\"String\"); /* <=== java.lang.String */ \n    ssmClient.putParameter(request);\n    \n    parameterName = \"/personalData/dob\";\n    request = new PutParameterRequest().withName(parameterName).withValue(dob).withType(\"String\");\n    ssmClient.putParameter(request);"
                  },
                  {
                    "sample" : "withName(parameterName)",
                    "lineNumber" : 17,
                    "columnNumber" : 15,
                    "fileName" : "/app/code/simpleSystemManagement.java",
                    "excerpt" : "    parameterName = \"/personalData/lastName\";\n    request = new PutParameterRequest().withName(parameterName).withValue(lastName).withType(\"String\");\n    ssmClient.putParameter(request);\n    \n    parameterName = \"/personalData/phoneNumber\";\n    request = new PutParameterRequest().withName(parameterName).withValue(phoneNumber).withType(\"String\"); /* <=== com.amazonaws.services.simplesystemsmanagement.model.PutParameterRequest.withName */ \n    ssmClient.putParameter(request);\n    \n    parameterName = \"/personalData/dob\";\n    request = new PutParameterRequest().withName(parameterName).withValue(dob).withType(\"String\");\n    ssmClient.putParameter(request);"
                  },
                  {
                    "sample" : "withValue(phoneNumber)",
                    "lineNumber" : 17,
                    "columnNumber" : 15,
                    "fileName" : "/app/code/simpleSystemManagement.java",
                    "excerpt" : "    parameterName = \"/personalData/lastName\";\n    request = new PutParameterRequest().withName(parameterName).withValue(lastName).withType(\"String\");\n    ssmClient.putParameter(request);\n    \n    parameterName = \"/personalData/phoneNumber\";\n    request = new PutParameterRequest().withName(parameterName).withValue(phoneNumber).withType(\"String\"); /* <===  */ \n    ssmClient.putParameter(request);\n    \n    parameterName = \"/personalData/dob\";\n    request = new PutParameterRequest().withName(parameterName).withValue(dob).withType(\"String\");\n    ssmClient.putParameter(request);"
                  },
                  {
                    "sample" : "withType(\"String\")",
                    "lineNumber" : 17,
                    "columnNumber" : 15,
                    "fileName" : "/app/code/simpleSystemManagement.java",
                    "excerpt" : "    parameterName = \"/personalData/lastName\";\n    request = new PutParameterRequest().withName(parameterName).withValue(lastName).withType(\"String\");\n    ssmClient.putParameter(request);\n    \n    parameterName = \"/personalData/phoneNumber\";\n    request = new PutParameterRequest().withName(parameterName).withValue(phoneNumber).withType(\"String\"); /* <===  */ \n    ssmClient.putParameter(request);\n    \n    parameterName = \"/personalData/dob\";\n    request = new PutParameterRequest().withName(parameterName).withValue(dob).withType(\"String\");\n    ssmClient.putParameter(request);"
                  },
                  {
                    "sample" : "request",
                    "lineNumber" : 17,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/simpleSystemManagement.java",
                    "excerpt" : "    parameterName = \"/personalData/lastName\";\n    request = new PutParameterRequest().withName(parameterName).withValue(lastName).withType(\"String\");\n    ssmClient.putParameter(request);\n    \n    parameterName = \"/personalData/phoneNumber\";\n    request = new PutParameterRequest().withName(parameterName).withValue(phoneNumber).withType(\"String\"); /* <=== com.amazonaws.services.simplesystemsmanagement.model.PutParameterRequest */ \n    ssmClient.putParameter(request);\n    \n    parameterName = \"/personalData/dob\";\n    request = new PutParameterRequest().withName(parameterName).withValue(dob).withType(\"String\");\n    ssmClient.putParameter(request);"
                  },
                  {
                    "sample" : "putParameter(request)",
                    "lineNumber" : 18,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/simpleSystemManagement.java",
                    "excerpt" : "    request = new PutParameterRequest().withName(parameterName).withValue(lastName).withType(\"String\");\n    ssmClient.putParameter(request);\n    \n    parameterName = \"/personalData/phoneNumber\";\n    request = new PutParameterRequest().withName(parameterName).withValue(phoneNumber).withType(\"String\");\n    ssmClient.putParameter(request); /* <=== com.amazonaws.services.simplesystemsmanagement.AWSSimpleSystemsManagement.putParameter */ \n    \n    parameterName = \"/personalData/dob\";\n    request = new PutParameterRequest().withName(parameterName).withValue(dob).withType(\"String\");\n    ssmClient.putParameter(request);\n    "
                  }
                ]
              },
              {
                "pathId" : "12015-12002-12001-12034-12033-12024-12023-12022-12021-12036",
                "path" : [
                  {
                    "sample" : "phoneNumber",
                    "lineNumber" : 16,
                    "columnNumber" : 116,
                    "fileName" : "/app/code/apiGateway.java",
                    "excerpt" : "swift\nCopy code\n  Map<String, String> headers = new HashMap<>();\n  headers.put(\"Content-Type\", \"application/json\");\n  \n  String body = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \\\"lastName\\\": \\\"\" + lastName + \"\\\", \\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \\\"DOB\\\": \\\"\" + DOB + \"\\\"}\"; /* <=== java.lang.String */ \n \n  PostToConnectionRequest request = new PostToConnectionRequest()\n     .withConnectionId(\"connection-id\")\n     .withData(body.getBytes())\n     .withHeaders(headers);"
                  },
                  {
                    "sample" : "\"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \\\"lastName\\\": \\\"\" + lastName + \"\\\", \\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \\\"DOB\\\": \\\"\" + DOB + \"\\\"}\"",
                    "lineNumber" : 16,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/apiGateway.java",
                    "excerpt" : "swift\nCopy code\n  Map<String, String> headers = new HashMap<>();\n  headers.put(\"Content-Type\", \"application/json\");\n  \n  String body = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \\\"lastName\\\": \\\"\" + lastName + \"\\\", \\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \\\"DOB\\\": \\\"\" + DOB + \"\\\"}\"; /* <===  */ \n \n  PostToConnectionRequest request = new PostToConnectionRequest()\n     .withConnectionId(\"connection-id\")\n     .withData(body.getBytes())\n     .withHeaders(headers);"
                  },
                  {
                    "sample" : "body",
                    "lineNumber" : 16,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/apiGateway.java",
                    "excerpt" : "swift\nCopy code\n  Map<String, String> headers = new HashMap<>();\n  headers.put(\"Content-Type\", \"application/json\");\n  \n  String body = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \\\"lastName\\\": \\\"\" + lastName + \"\\\", \\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \\\"DOB\\\": \\\"\" + DOB + \"\\\"}\"; /* <=== java.lang.String */ \n \n  PostToConnectionRequest request = new PostToConnectionRequest()\n     .withConnectionId(\"connection-id\")\n     .withData(body.getBytes())\n     .withHeaders(headers);"
                  },
                  {
                    "sample" : "body",
                    "lineNumber" : 20,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/apiGateway.java",
                    "excerpt" : "  \n  String body = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \\\"lastName\\\": \\\"\" + lastName + \"\\\", \\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \\\"DOB\\\": \\\"\" + DOB + \"\\\"}\";\n \n  PostToConnectionRequest request = new PostToConnectionRequest()\n     .withConnectionId(\"connection-id\")\n     .withData(body.getBytes()) /* <=== java.lang.String */ \n     .withHeaders(headers);\n \n  client.postToConnection(request);\n}\n}"
                  },
                  {
                    "sample" : "body.getBytes()",
                    "lineNumber" : 20,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/apiGateway.java",
                    "excerpt" : "  \n  String body = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \\\"lastName\\\": \\\"\" + lastName + \"\\\", \\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \\\"DOB\\\": \\\"\" + DOB + \"\\\"}\";\n \n  PostToConnectionRequest request = new PostToConnectionRequest()\n     .withConnectionId(\"connection-id\")\n     .withData(body.getBytes()) /* <=== java.lang.String.getBytes */ \n     .withHeaders(headers);\n \n  client.postToConnection(request);\n}\n}"
                  },
                  {
                    "sample" : "withConnectionId(\"connection-id\")",
                    "lineNumber" : 18,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/apiGateway.java",
                    "excerpt" : "  Map<String, String> headers = new HashMap<>();\n  headers.put(\"Content-Type\", \"application/json\");\n  \n  String body = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \\\"lastName\\\": \\\"\" + lastName + \"\\\", \\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \\\"DOB\\\": \\\"\" + DOB + \"\\\"}\";\n \n  PostToConnectionRequest request = new PostToConnectionRequest() /* <=== com.amazonaws.services.apigateway.model.PostToConnectionRequest.withConnectionId */ \n     .withConnectionId(\"connection-id\")\n     .withData(body.getBytes())\n     .withHeaders(headers);\n \n  client.postToConnection(request);"
                  },
                  {
                    "sample" : "withData(body.getBytes())",
                    "lineNumber" : 18,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/apiGateway.java",
                    "excerpt" : "  Map<String, String> headers = new HashMap<>();\n  headers.put(\"Content-Type\", \"application/json\");\n  \n  String body = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \\\"lastName\\\": \\\"\" + lastName + \"\\\", \\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \\\"DOB\\\": \\\"\" + DOB + \"\\\"}\";\n \n  PostToConnectionRequest request = new PostToConnectionRequest() /* <===  */ \n     .withConnectionId(\"connection-id\")\n     .withData(body.getBytes())\n     .withHeaders(headers);\n \n  client.postToConnection(request);"
                  },
                  {
                    "sample" : "withHeaders(headers)",
                    "lineNumber" : 18,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/apiGateway.java",
                    "excerpt" : "  Map<String, String> headers = new HashMap<>();\n  headers.put(\"Content-Type\", \"application/json\");\n  \n  String body = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \\\"lastName\\\": \\\"\" + lastName + \"\\\", \\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \\\"DOB\\\": \\\"\" + DOB + \"\\\"}\";\n \n  PostToConnectionRequest request = new PostToConnectionRequest() /* <===  */ \n     .withConnectionId(\"connection-id\")\n     .withData(body.getBytes())\n     .withHeaders(headers);\n \n  client.postToConnection(request);"
                  },
                  {
                    "sample" : "request",
                    "lineNumber" : 18,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/apiGateway.java",
                    "excerpt" : "  Map<String, String> headers = new HashMap<>();\n  headers.put(\"Content-Type\", \"application/json\");\n  \n  String body = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \\\"lastName\\\": \\\"\" + lastName + \"\\\", \\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \\\"DOB\\\": \\\"\" + DOB + \"\\\"}\";\n \n  PostToConnectionRequest request = new PostToConnectionRequest() /* <=== com.amazonaws.services.apigateway.model.PostToConnectionRequest */ \n     .withConnectionId(\"connection-id\")\n     .withData(body.getBytes())\n     .withHeaders(headers);\n \n  client.postToConnection(request);"
                  },
                  {
                    "sample" : "postToConnection(request)",
                    "lineNumber" : 23,
                    "columnNumber" : 3,
                    "fileName" : "/app/code/apiGateway.java",
                    "excerpt" : "  PostToConnectionRequest request = new PostToConnectionRequest()\n     .withConnectionId(\"connection-id\")\n     .withData(body.getBytes())\n     .withHeaders(headers);\n \n  client.postToConnection(request); /* <=== com.amazonaws.services.apigateway.AmazonApiGateway.postToConnection */ \n}\n}\n"
                  }
                ]
              },
              {
                "pathId" : "13322-13320",
                "path" : [
                  {
                    "sample" : "phoneNumber",
                    "lineNumber" : 18,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/marketplacemetering.java",
                    "excerpt" : "\n    // Build the MeterUsageRequest with personal data such as first name, last name, phone number, DOB.\n    MeterUsageRequest request = new MeterUsageRequest();\n    request.setProductCode(firstName);\n    request.setTimestamp(lastName);\n    request.setUsageDimension(phoneNumber); /* <=== java.lang.String */ \n    request.setUsageQuantity(dob);\n\n    // Call the meterUsage method of the AmazonMarketplaceMeteringClient to send the data.\n    client.meterUsage(request);\n  }"
                  },
                  {
                    "sample" : "setUsageDimension(phoneNumber)",
                    "lineNumber" : 18,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/marketplacemetering.java",
                    "excerpt" : "\n    // Build the MeterUsageRequest with personal data such as first name, last name, phone number, DOB.\n    MeterUsageRequest request = new MeterUsageRequest();\n    request.setProductCode(firstName);\n    request.setTimestamp(lastName);\n    request.setUsageDimension(phoneNumber); /* <=== com.amazonaws.services.marketplacemetering.model.MeterUsageRequest.setUsageDimension */ \n    request.setUsageQuantity(dob);\n\n    // Call the meterUsage method of the AmazonMarketplaceMeteringClient to send the data.\n    client.meterUsage(request);\n  }"
                  }
                ]
              },
              {
                "pathId" : "11550-11541-11540-11539-11552-11577-11568-11567-11566-11578",
                "path" : [
                  {
                    "sample" : "phoneNumber",
                    "lineNumber" : 31,
                    "columnNumber" : 57,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "    String workspaceId = workspace.getWorkspaceId();\n\n    List<Tag> tags = new ArrayList<>();\n    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber)); /* <=== java.lang.String */ \n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags);\n    workspacesClient.tagWorkspace(tagWorkspaceRequest);\n"
                  },
                  {
                    "sample" : "withKey(\"phoneNumber\")",
                    "lineNumber" : 31,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "    String workspaceId = workspace.getWorkspaceId();\n\n    List<Tag> tags = new ArrayList<>();\n    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber)); /* <=== com.amazonaws.services.workspaces.model.Tag.withKey */ \n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags);\n    workspacesClient.tagWorkspace(tagWorkspaceRequest);\n"
                  },
                  {
                    "sample" : "withValue(phoneNumber)",
                    "lineNumber" : 31,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "    String workspaceId = workspace.getWorkspaceId();\n\n    List<Tag> tags = new ArrayList<>();\n    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber)); /* <===  */ \n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags);\n    workspacesClient.tagWorkspace(tagWorkspaceRequest);\n"
                  },
                  {
                    "sample" : "tags",
                    "lineNumber" : 31,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "    String workspaceId = workspace.getWorkspaceId();\n\n    List<Tag> tags = new ArrayList<>();\n    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber)); /* <=== ANY */ \n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags);\n    workspacesClient.tagWorkspace(tagWorkspaceRequest);\n"
                  },
                  {
                    "sample" : "tags",
                    "lineNumber" : 32,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "\n    List<Tag> tags = new ArrayList<>();\n    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob)); /* <=== ANY */ \n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags);\n    workspacesClient.tagWorkspace(tagWorkspaceRequest);\n\n    System.out.println(\"Personal data saved successfully to workspace with ID: \" + workspaceId);"
                  },
                  {
                    "sample" : "tags",
                    "lineNumber" : 34,
                    "columnNumber" : 110,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags); /* <=== ANY */ \n    workspacesClient.tagWorkspace(tagWorkspaceRequest);\n\n    System.out.println(\"Personal data saved successfully to workspace with ID: \" + workspaceId);\n  }\n"
                  },
                  {
                    "sample" : "withResourceId(workspaceId)",
                    "lineNumber" : 34,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags); /* <=== com.amazonaws.services.workspaces.model.TagWorkspaceRequest.withResourceId */ \n    workspacesClient.tagWorkspace(tagWorkspaceRequest);\n\n    System.out.println(\"Personal data saved successfully to workspace with ID: \" + workspaceId);\n  }\n"
                  },
                  {
                    "sample" : "withTags(tags)",
                    "lineNumber" : 34,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags); /* <===  */ \n    workspacesClient.tagWorkspace(tagWorkspaceRequest);\n\n    System.out.println(\"Personal data saved successfully to workspace with ID: \" + workspaceId);\n  }\n"
                  },
                  {
                    "sample" : "tagWorkspaceRequest",
                    "lineNumber" : 34,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags); /* <=== com.amazonaws.services.workspaces.model.TagWorkspaceRequest */ \n    workspacesClient.tagWorkspace(tagWorkspaceRequest);\n\n    System.out.println(\"Personal data saved successfully to workspace with ID: \" + workspaceId);\n  }\n"
                  },
                  {
                    "sample" : "tagWorkspace(tagWorkspaceRequest)",
                    "lineNumber" : 35,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags);\n    workspacesClient.tagWorkspace(tagWorkspaceRequest); /* <=== com.amazonaws.services.workspaces.AmazonWorkspaces.tagWorkspace */ \n\n    System.out.println(\"Personal data saved successfully to workspace with ID: \" + workspaceId);\n  }\n\n}"
                  }
                ]
              },
              {
                "pathId" : "11550-11541-11540-11539-11552-11577-11568",
                "path" : [
                  {
                    "sample" : "phoneNumber",
                    "lineNumber" : 31,
                    "columnNumber" : 57,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "    String workspaceId = workspace.getWorkspaceId();\n\n    List<Tag> tags = new ArrayList<>();\n    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber)); /* <=== java.lang.String */ \n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags);\n    workspacesClient.tagWorkspace(tagWorkspaceRequest);\n"
                  },
                  {
                    "sample" : "withKey(\"phoneNumber\")",
                    "lineNumber" : 31,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "    String workspaceId = workspace.getWorkspaceId();\n\n    List<Tag> tags = new ArrayList<>();\n    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber)); /* <=== com.amazonaws.services.workspaces.model.Tag.withKey */ \n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags);\n    workspacesClient.tagWorkspace(tagWorkspaceRequest);\n"
                  },
                  {
                    "sample" : "withValue(phoneNumber)",
                    "lineNumber" : 31,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "    String workspaceId = workspace.getWorkspaceId();\n\n    List<Tag> tags = new ArrayList<>();\n    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber)); /* <===  */ \n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags);\n    workspacesClient.tagWorkspace(tagWorkspaceRequest);\n"
                  },
                  {
                    "sample" : "tags",
                    "lineNumber" : 31,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "    String workspaceId = workspace.getWorkspaceId();\n\n    List<Tag> tags = new ArrayList<>();\n    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber)); /* <=== ANY */ \n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags);\n    workspacesClient.tagWorkspace(tagWorkspaceRequest);\n"
                  },
                  {
                    "sample" : "tags",
                    "lineNumber" : 32,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "\n    List<Tag> tags = new ArrayList<>();\n    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob)); /* <=== ANY */ \n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags);\n    workspacesClient.tagWorkspace(tagWorkspaceRequest);\n\n    System.out.println(\"Personal data saved successfully to workspace with ID: \" + workspaceId);"
                  },
                  {
                    "sample" : "tags",
                    "lineNumber" : 34,
                    "columnNumber" : 110,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags); /* <=== ANY */ \n    workspacesClient.tagWorkspace(tagWorkspaceRequest);\n\n    System.out.println(\"Personal data saved successfully to workspace with ID: \" + workspaceId);\n  }\n"
                  },
                  {
                    "sample" : "withResourceId(workspaceId)",
                    "lineNumber" : 34,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags); /* <=== com.amazonaws.services.workspaces.model.TagWorkspaceRequest.withResourceId */ \n    workspacesClient.tagWorkspace(tagWorkspaceRequest);\n\n    System.out.println(\"Personal data saved successfully to workspace with ID: \" + workspaceId);\n  }\n"
                  }
                ]
              },
              {
                "pathId" : "12015-12002-12001-12034-12033-12024",
                "path" : [
                  {
                    "sample" : "phoneNumber",
                    "lineNumber" : 16,
                    "columnNumber" : 116,
                    "fileName" : "/app/code/apiGateway.java",
                    "excerpt" : "swift\nCopy code\n  Map<String, String> headers = new HashMap<>();\n  headers.put(\"Content-Type\", \"application/json\");\n  \n  String body = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \\\"lastName\\\": \\\"\" + lastName + \"\\\", \\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \\\"DOB\\\": \\\"\" + DOB + \"\\\"}\"; /* <=== java.lang.String */ \n \n  PostToConnectionRequest request = new PostToConnectionRequest()\n     .withConnectionId(\"connection-id\")\n     .withData(body.getBytes())\n     .withHeaders(headers);"
                  },
                  {
                    "sample" : "\"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \\\"lastName\\\": \\\"\" + lastName + \"\\\", \\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \\\"DOB\\\": \\\"\" + DOB + \"\\\"}\"",
                    "lineNumber" : 16,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/apiGateway.java",
                    "excerpt" : "swift\nCopy code\n  Map<String, String> headers = new HashMap<>();\n  headers.put(\"Content-Type\", \"application/json\");\n  \n  String body = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \\\"lastName\\\": \\\"\" + lastName + \"\\\", \\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \\\"DOB\\\": \\\"\" + DOB + \"\\\"}\"; /* <===  */ \n \n  PostToConnectionRequest request = new PostToConnectionRequest()\n     .withConnectionId(\"connection-id\")\n     .withData(body.getBytes())\n     .withHeaders(headers);"
                  },
                  {
                    "sample" : "body",
                    "lineNumber" : 16,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/apiGateway.java",
                    "excerpt" : "swift\nCopy code\n  Map<String, String> headers = new HashMap<>();\n  headers.put(\"Content-Type\", \"application/json\");\n  \n  String body = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \\\"lastName\\\": \\\"\" + lastName + \"\\\", \\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \\\"DOB\\\": \\\"\" + DOB + \"\\\"}\"; /* <=== java.lang.String */ \n \n  PostToConnectionRequest request = new PostToConnectionRequest()\n     .withConnectionId(\"connection-id\")\n     .withData(body.getBytes())\n     .withHeaders(headers);"
                  },
                  {
                    "sample" : "body",
                    "lineNumber" : 20,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/apiGateway.java",
                    "excerpt" : "  \n  String body = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \\\"lastName\\\": \\\"\" + lastName + \"\\\", \\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \\\"DOB\\\": \\\"\" + DOB + \"\\\"}\";\n \n  PostToConnectionRequest request = new PostToConnectionRequest()\n     .withConnectionId(\"connection-id\")\n     .withData(body.getBytes()) /* <=== java.lang.String */ \n     .withHeaders(headers);\n \n  client.postToConnection(request);\n}\n}"
                  },
                  {
                    "sample" : "body.getBytes()",
                    "lineNumber" : 20,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/apiGateway.java",
                    "excerpt" : "  \n  String body = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \\\"lastName\\\": \\\"\" + lastName + \"\\\", \\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \\\"DOB\\\": \\\"\" + DOB + \"\\\"}\";\n \n  PostToConnectionRequest request = new PostToConnectionRequest()\n     .withConnectionId(\"connection-id\")\n     .withData(body.getBytes()) /* <=== java.lang.String.getBytes */ \n     .withHeaders(headers);\n \n  client.postToConnection(request);\n}\n}"
                  },
                  {
                    "sample" : "withConnectionId(\"connection-id\")",
                    "lineNumber" : 18,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/apiGateway.java",
                    "excerpt" : "  Map<String, String> headers = new HashMap<>();\n  headers.put(\"Content-Type\", \"application/json\");\n  \n  String body = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \\\"lastName\\\": \\\"\" + lastName + \"\\\", \\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \\\"DOB\\\": \\\"\" + DOB + \"\\\"}\";\n \n  PostToConnectionRequest request = new PostToConnectionRequest() /* <=== com.amazonaws.services.apigateway.model.PostToConnectionRequest.withConnectionId */ \n     .withConnectionId(\"connection-id\")\n     .withData(body.getBytes())\n     .withHeaders(headers);\n \n  client.postToConnection(request);"
                  }
                ]
              },
              {
                "pathId" : "15476-15464-15451-15450-15449-15479",
                "path" : [
                  {
                    "sample" : "phoneNumber",
                    "lineNumber" : 14,
                    "columnNumber" : 57,
                    "fileName" : "/app/code/support.java",
                    "excerpt" : "        CreateCaseRequest createCaseRequest = new CreateCaseRequest()\n            .withSubject(\"Personal Data\")\n            .withServiceCode(\"personal-data\")\n            .withCategoryCode(\"data-request\")\n            .withCommunicationBody(\"First Name: \" + firstName + \"\\nLast Name: \" + lastName + \n                                   \"\\nPhone Number: \" + phoneNumber + \"\\nDOB: \" + DOB); /* <=== java.lang.String */ \n\n        supportClient.createCase(createCaseRequest);\n    }\n}\n"
                  },
                  {
                    "sample" : "\"First Name: \" + firstName + \"\\nLast Name: \" + lastName + \"\\nPhone Number: \" + phoneNumber + \"\\nDOB: \" + DOB",
                    "lineNumber" : 13,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/support.java",
                    "excerpt" : "\n        CreateCaseRequest createCaseRequest = new CreateCaseRequest()\n            .withSubject(\"Personal Data\")\n            .withServiceCode(\"personal-data\")\n            .withCategoryCode(\"data-request\")\n            .withCommunicationBody(\"First Name: \" + firstName + \"\\nLast Name: \" + lastName +  /* <===  */ \n                                   \"\\nPhone Number: \" + phoneNumber + \"\\nDOB: \" + DOB);\n\n        supportClient.createCase(createCaseRequest);\n    }\n}"
                  },
                  {
                    "sample" : "withCategoryCode(\"data-request\")",
                    "lineNumber" : 9,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/support.java",
                    "excerpt" : "\npublic class AWSSupportUtil {\n    public static void AWSSupportFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AWSSupport supportClient = AWSSupportClientBuilder.defaultClient();\n\n        CreateCaseRequest createCaseRequest = new CreateCaseRequest() /* <===  */ \n            .withSubject(\"Personal Data\")\n            .withServiceCode(\"personal-data\")\n            .withCategoryCode(\"data-request\")\n            .withCommunicationBody(\"First Name: \" + firstName + \"\\nLast Name: \" + lastName + \n                                   \"\\nPhone Number: \" + phoneNumber + \"\\nDOB: \" + DOB);"
                  },
                  {
                    "sample" : "withCommunicationBody(\"First Name: \" + firstName + \"\\nLast Name: \" + lastName + \"\\nPhone Number: \" + phoneNumber + \"\\nDOB: \" + DOB)",
                    "lineNumber" : 9,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/support.java",
                    "excerpt" : "\npublic class AWSSupportUtil {\n    public static void AWSSupportFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AWSSupport supportClient = AWSSupportClientBuilder.defaultClient();\n\n        CreateCaseRequest createCaseRequest = new CreateCaseRequest() /* <===  */ \n            .withSubject(\"Personal Data\")\n            .withServiceCode(\"personal-data\")\n            .withCategoryCode(\"data-request\")\n            .withCommunicationBody(\"First Name: \" + firstName + \"\\nLast Name: \" + lastName + \n                                   \"\\nPhone Number: \" + phoneNumber + \"\\nDOB: \" + DOB);"
                  },
                  {
                    "sample" : "createCaseRequest",
                    "lineNumber" : 9,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/support.java",
                    "excerpt" : "\npublic class AWSSupportUtil {\n    public static void AWSSupportFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AWSSupport supportClient = AWSSupportClientBuilder.defaultClient();\n\n        CreateCaseRequest createCaseRequest = new CreateCaseRequest() /* <=== com.amazonaws.services.support.model.CreateCaseRequest */ \n            .withSubject(\"Personal Data\")\n            .withServiceCode(\"personal-data\")\n            .withCategoryCode(\"data-request\")\n            .withCommunicationBody(\"First Name: \" + firstName + \"\\nLast Name: \" + lastName + \n                                   \"\\nPhone Number: \" + phoneNumber + \"\\nDOB: \" + DOB);"
                  },
                  {
                    "sample" : "createCase(createCaseRequest)",
                    "lineNumber" : 16,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/support.java",
                    "excerpt" : "            .withServiceCode(\"personal-data\")\n            .withCategoryCode(\"data-request\")\n            .withCommunicationBody(\"First Name: \" + firstName + \"\\nLast Name: \" + lastName + \n                                   \"\\nPhone Number: \" + phoneNumber + \"\\nDOB: \" + DOB);\n\n        supportClient.createCase(createCaseRequest); /* <=== com.amazonaws.services.support.AWSSupport.createCase */ \n    }\n}\n"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.PersonalIdentification.Age",
        "sinks" : [
          {
            "sinkType" : "third_parties",
            "id" : "ThirdParties.SDK.Amazon.Aws",
            "name" : "Amazon Aws",
            "category" : "",
            "domains" : [
              "aws.amazon.com"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "databaseDetails" : {
              "dbName" : "",
              "dbVendor" : "",
              "dbLocation" : "",
              "dbOperation" : ""
            },
            "paths" : [
              {
                "pathId" : "9080-9096-9098-9097-9087-9086-9085-9102",
                "path" : [
                  {
                    "sample" : "int age",
                    "lineNumber" : 30,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/ssm.java",
                    "excerpt" : "}\n\nclass PersonalData {\n    private final String id;\n    private final String name;\n    private final int age; /* <=== 'age' is a member of 'PersonalData' class */ \n\n    public PersonalData(String id, String name, int age) {\n        this.id = id;\n        this.name = name;\n        this.age = age;"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 16,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/gluedatabrew.java",
                    "excerpt" : "    public GlueDataBrewProcessor() {\n        this.glueDataBrewClient = AWSGlueDataBrewClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(List<PersonalData> personalDataList) {\n        for (PersonalData personalData : personalDataList) { /* <=== PersonalData */ \n            CreateProfileJobRequest createProfileJobRequest = new CreateProfileJobRequest()\n                    .withDatasetName(personalData.getDatasetName())\n                    .withRecipeReference(personalData.getRecipeReference());\n\n            CreateProfileJobResult createProfileJobResult = glueDataBrewClient.createProfileJob(createProfileJobRequest);"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 18,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/gluedatabrew.java",
                    "excerpt" : "    }\n\n    public void processPersonalData(List<PersonalData> personalDataList) {\n        for (PersonalData personalData : personalDataList) {\n            CreateProfileJobRequest createProfileJobRequest = new CreateProfileJobRequest()\n                    .withDatasetName(personalData.getDatasetName()) /* <=== PersonalData */ \n                    .withRecipeReference(personalData.getRecipeReference());\n\n            CreateProfileJobResult createProfileJobResult = glueDataBrewClient.createProfileJob(createProfileJobRequest);\n\n            // You can add additional processing logic here"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 19,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/gluedatabrew.java",
                    "excerpt" : "\n    public void processPersonalData(List<PersonalData> personalDataList) {\n        for (PersonalData personalData : personalDataList) {\n            CreateProfileJobRequest createProfileJobRequest = new CreateProfileJobRequest()\n                    .withDatasetName(personalData.getDatasetName())\n                    .withRecipeReference(personalData.getRecipeReference()); /* <=== PersonalData */ \n\n            CreateProfileJobResult createProfileJobResult = glueDataBrewClient.createProfileJob(createProfileJobRequest);\n\n            // You can add additional processing logic here\n        }"
                  },
                  {
                    "sample" : "personalData.getRecipeReference()",
                    "lineNumber" : 19,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/gluedatabrew.java",
                    "excerpt" : "\n    public void processPersonalData(List<PersonalData> personalDataList) {\n        for (PersonalData personalData : personalDataList) {\n            CreateProfileJobRequest createProfileJobRequest = new CreateProfileJobRequest()\n                    .withDatasetName(personalData.getDatasetName())\n                    .withRecipeReference(personalData.getRecipeReference()); /* <=== PersonalData.getRecipeReference */ \n\n            CreateProfileJobResult createProfileJobResult = glueDataBrewClient.createProfileJob(createProfileJobRequest);\n\n            // You can add additional processing logic here\n        }"
                  },
                  {
                    "sample" : "withDatasetName(personalData.getDatasetName())",
                    "lineNumber" : 17,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/gluedatabrew.java",
                    "excerpt" : "        this.glueDataBrewClient = AWSGlueDataBrewClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(List<PersonalData> personalDataList) {\n        for (PersonalData personalData : personalDataList) {\n            CreateProfileJobRequest createProfileJobRequest = new CreateProfileJobRequest() /* <=== com.amazonaws.services.gluedatabrew.model.CreateProfileJobRequest.withDatasetName */ \n                    .withDatasetName(personalData.getDatasetName())\n                    .withRecipeReference(personalData.getRecipeReference());\n\n            CreateProfileJobResult createProfileJobResult = glueDataBrewClient.createProfileJob(createProfileJobRequest);\n"
                  },
                  {
                    "sample" : "withRecipeReference(personalData.getRecipeReference())",
                    "lineNumber" : 17,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/gluedatabrew.java",
                    "excerpt" : "        this.glueDataBrewClient = AWSGlueDataBrewClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(List<PersonalData> personalDataList) {\n        for (PersonalData personalData : personalDataList) {\n            CreateProfileJobRequest createProfileJobRequest = new CreateProfileJobRequest() /* <===  */ \n                    .withDatasetName(personalData.getDatasetName())\n                    .withRecipeReference(personalData.getRecipeReference());\n\n            CreateProfileJobResult createProfileJobResult = glueDataBrewClient.createProfileJob(createProfileJobRequest);\n"
                  },
                  {
                    "sample" : "createProfileJobRequest",
                    "lineNumber" : 17,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/gluedatabrew.java",
                    "excerpt" : "        this.glueDataBrewClient = AWSGlueDataBrewClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(List<PersonalData> personalDataList) {\n        for (PersonalData personalData : personalDataList) {\n            CreateProfileJobRequest createProfileJobRequest = new CreateProfileJobRequest() /* <=== com.amazonaws.services.gluedatabrew.model.CreateProfileJobRequest */ \n                    .withDatasetName(personalData.getDatasetName())\n                    .withRecipeReference(personalData.getRecipeReference());\n\n            CreateProfileJobResult createProfileJobResult = glueDataBrewClient.createProfileJob(createProfileJobRequest);\n"
                  },
                  {
                    "sample" : "createProfileJob(createProfileJobRequest)",
                    "lineNumber" : 21,
                    "columnNumber" : 61,
                    "fileName" : "/app/code/gluedatabrew.java",
                    "excerpt" : "        for (PersonalData personalData : personalDataList) {\n            CreateProfileJobRequest createProfileJobRequest = new CreateProfileJobRequest()\n                    .withDatasetName(personalData.getDatasetName())\n                    .withRecipeReference(personalData.getRecipeReference());\n\n            CreateProfileJobResult createProfileJobResult = glueDataBrewClient.createProfileJob(createProfileJobRequest); /* <=== com.amazonaws.services.gluedatabrew.AWSGlueDataBrew.createProfileJob */ \n\n            // You can add additional processing logic here\n        }\n    }\n}"
                  }
                ]
              },
              {
                "pathId" : "1419-1420-1418-1434-1425",
                "path" : [
                  {
                    "sample" : "\"Age\"",
                    "lineNumber" : 19,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/memoryDB.java",
                    "excerpt" : "\n    public void processData(String name, String address, int age) {\n        Map<String, Object> item = new HashMap<>();\n        item.put(\"Name\", name);\n        item.put(\"Address\", address);\n        item.put(\"Age\", age); /* <===  */ \n\n        PutItemRequest request = new PutItemRequest().withTableName(\"PersonalData\").withItem(item);\n        memoryDBClient.putItem(request);\n    }\n}"
                  },
                  {
                    "sample" : "age",
                    "lineNumber" : 19,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/memoryDB.java",
                    "excerpt" : "\n    public void processData(String name, String address, int age) {\n        Map<String, Object> item = new HashMap<>();\n        item.put(\"Name\", name);\n        item.put(\"Address\", address);\n        item.put(\"Age\", age); /* <=== int */ \n\n        PutItemRequest request = new PutItemRequest().withTableName(\"PersonalData\").withItem(item);\n        memoryDBClient.putItem(request);\n    }\n}"
                  },
                  {
                    "sample" : "item",
                    "lineNumber" : 19,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/memoryDB.java",
                    "excerpt" : "\n    public void processData(String name, String address, int age) {\n        Map<String, Object> item = new HashMap<>();\n        item.put(\"Name\", name);\n        item.put(\"Address\", address);\n        item.put(\"Age\", age); /* <=== java.util.Map */ \n\n        PutItemRequest request = new PutItemRequest().withTableName(\"PersonalData\").withItem(item);\n        memoryDBClient.putItem(request);\n    }\n}"
                  },
                  {
                    "sample" : "item",
                    "lineNumber" : 21,
                    "columnNumber" : 94,
                    "fileName" : "/app/code/memoryDB.java",
                    "excerpt" : "        Map<String, Object> item = new HashMap<>();\n        item.put(\"Name\", name);\n        item.put(\"Address\", address);\n        item.put(\"Age\", age);\n\n        PutItemRequest request = new PutItemRequest().withTableName(\"PersonalData\").withItem(item); /* <=== java.util.Map */ \n        memoryDBClient.putItem(request);\n    }\n}\n"
                  },
                  {
                    "sample" : "withTableName(\"PersonalData\")",
                    "lineNumber" : 21,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/memoryDB.java",
                    "excerpt" : "        Map<String, Object> item = new HashMap<>();\n        item.put(\"Name\", name);\n        item.put(\"Address\", address);\n        item.put(\"Age\", age);\n\n        PutItemRequest request = new PutItemRequest().withTableName(\"PersonalData\").withItem(item); /* <=== com.amazonaws.services.memorydb.model.PutItemRequest.withTableName */ \n        memoryDBClient.putItem(request);\n    }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "9080-9096-9098-9097-9087",
                "path" : [
                  {
                    "sample" : "int age",
                    "lineNumber" : 30,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/ssm.java",
                    "excerpt" : "}\n\nclass PersonalData {\n    private final String id;\n    private final String name;\n    private final int age; /* <=== 'age' is a member of 'PersonalData' class */ \n\n    public PersonalData(String id, String name, int age) {\n        this.id = id;\n        this.name = name;\n        this.age = age;"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 16,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/gluedatabrew.java",
                    "excerpt" : "    public GlueDataBrewProcessor() {\n        this.glueDataBrewClient = AWSGlueDataBrewClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(List<PersonalData> personalDataList) {\n        for (PersonalData personalData : personalDataList) { /* <=== PersonalData */ \n            CreateProfileJobRequest createProfileJobRequest = new CreateProfileJobRequest()\n                    .withDatasetName(personalData.getDatasetName())\n                    .withRecipeReference(personalData.getRecipeReference());\n\n            CreateProfileJobResult createProfileJobResult = glueDataBrewClient.createProfileJob(createProfileJobRequest);"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 18,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/gluedatabrew.java",
                    "excerpt" : "    }\n\n    public void processPersonalData(List<PersonalData> personalDataList) {\n        for (PersonalData personalData : personalDataList) {\n            CreateProfileJobRequest createProfileJobRequest = new CreateProfileJobRequest()\n                    .withDatasetName(personalData.getDatasetName()) /* <=== PersonalData */ \n                    .withRecipeReference(personalData.getRecipeReference());\n\n            CreateProfileJobResult createProfileJobResult = glueDataBrewClient.createProfileJob(createProfileJobRequest);\n\n            // You can add additional processing logic here"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 19,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/gluedatabrew.java",
                    "excerpt" : "\n    public void processPersonalData(List<PersonalData> personalDataList) {\n        for (PersonalData personalData : personalDataList) {\n            CreateProfileJobRequest createProfileJobRequest = new CreateProfileJobRequest()\n                    .withDatasetName(personalData.getDatasetName())\n                    .withRecipeReference(personalData.getRecipeReference()); /* <=== PersonalData */ \n\n            CreateProfileJobResult createProfileJobResult = glueDataBrewClient.createProfileJob(createProfileJobRequest);\n\n            // You can add additional processing logic here\n        }"
                  },
                  {
                    "sample" : "personalData.getRecipeReference()",
                    "lineNumber" : 19,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/gluedatabrew.java",
                    "excerpt" : "\n    public void processPersonalData(List<PersonalData> personalDataList) {\n        for (PersonalData personalData : personalDataList) {\n            CreateProfileJobRequest createProfileJobRequest = new CreateProfileJobRequest()\n                    .withDatasetName(personalData.getDatasetName())\n                    .withRecipeReference(personalData.getRecipeReference()); /* <=== PersonalData.getRecipeReference */ \n\n            CreateProfileJobResult createProfileJobResult = glueDataBrewClient.createProfileJob(createProfileJobRequest);\n\n            // You can add additional processing logic here\n        }"
                  },
                  {
                    "sample" : "withDatasetName(personalData.getDatasetName())",
                    "lineNumber" : 17,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/gluedatabrew.java",
                    "excerpt" : "        this.glueDataBrewClient = AWSGlueDataBrewClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(List<PersonalData> personalDataList) {\n        for (PersonalData personalData : personalDataList) {\n            CreateProfileJobRequest createProfileJobRequest = new CreateProfileJobRequest() /* <=== com.amazonaws.services.gluedatabrew.model.CreateProfileJobRequest.withDatasetName */ \n                    .withDatasetName(personalData.getDatasetName())\n                    .withRecipeReference(personalData.getRecipeReference());\n\n            CreateProfileJobResult createProfileJobResult = glueDataBrewClient.createProfileJob(createProfileJobRequest);\n"
                  }
                ]
              },
              {
                "pathId" : "1419-1420-1418-1434-1425-1424-1423-1435",
                "path" : [
                  {
                    "sample" : "\"Age\"",
                    "lineNumber" : 19,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/memoryDB.java",
                    "excerpt" : "\n    public void processData(String name, String address, int age) {\n        Map<String, Object> item = new HashMap<>();\n        item.put(\"Name\", name);\n        item.put(\"Address\", address);\n        item.put(\"Age\", age); /* <===  */ \n\n        PutItemRequest request = new PutItemRequest().withTableName(\"PersonalData\").withItem(item);\n        memoryDBClient.putItem(request);\n    }\n}"
                  },
                  {
                    "sample" : "age",
                    "lineNumber" : 19,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/memoryDB.java",
                    "excerpt" : "\n    public void processData(String name, String address, int age) {\n        Map<String, Object> item = new HashMap<>();\n        item.put(\"Name\", name);\n        item.put(\"Address\", address);\n        item.put(\"Age\", age); /* <=== int */ \n\n        PutItemRequest request = new PutItemRequest().withTableName(\"PersonalData\").withItem(item);\n        memoryDBClient.putItem(request);\n    }\n}"
                  },
                  {
                    "sample" : "item",
                    "lineNumber" : 19,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/memoryDB.java",
                    "excerpt" : "\n    public void processData(String name, String address, int age) {\n        Map<String, Object> item = new HashMap<>();\n        item.put(\"Name\", name);\n        item.put(\"Address\", address);\n        item.put(\"Age\", age); /* <=== java.util.Map */ \n\n        PutItemRequest request = new PutItemRequest().withTableName(\"PersonalData\").withItem(item);\n        memoryDBClient.putItem(request);\n    }\n}"
                  },
                  {
                    "sample" : "item",
                    "lineNumber" : 21,
                    "columnNumber" : 94,
                    "fileName" : "/app/code/memoryDB.java",
                    "excerpt" : "        Map<String, Object> item = new HashMap<>();\n        item.put(\"Name\", name);\n        item.put(\"Address\", address);\n        item.put(\"Age\", age);\n\n        PutItemRequest request = new PutItemRequest().withTableName(\"PersonalData\").withItem(item); /* <=== java.util.Map */ \n        memoryDBClient.putItem(request);\n    }\n}\n"
                  },
                  {
                    "sample" : "withTableName(\"PersonalData\")",
                    "lineNumber" : 21,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/memoryDB.java",
                    "excerpt" : "        Map<String, Object> item = new HashMap<>();\n        item.put(\"Name\", name);\n        item.put(\"Address\", address);\n        item.put(\"Age\", age);\n\n        PutItemRequest request = new PutItemRequest().withTableName(\"PersonalData\").withItem(item); /* <=== com.amazonaws.services.memorydb.model.PutItemRequest.withTableName */ \n        memoryDBClient.putItem(request);\n    }\n}\n"
                  },
                  {
                    "sample" : "withItem(item)",
                    "lineNumber" : 21,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/memoryDB.java",
                    "excerpt" : "        Map<String, Object> item = new HashMap<>();\n        item.put(\"Name\", name);\n        item.put(\"Address\", address);\n        item.put(\"Age\", age);\n\n        PutItemRequest request = new PutItemRequest().withTableName(\"PersonalData\").withItem(item); /* <===  */ \n        memoryDBClient.putItem(request);\n    }\n}\n"
                  },
                  {
                    "sample" : "request",
                    "lineNumber" : 21,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/memoryDB.java",
                    "excerpt" : "        Map<String, Object> item = new HashMap<>();\n        item.put(\"Name\", name);\n        item.put(\"Address\", address);\n        item.put(\"Age\", age);\n\n        PutItemRequest request = new PutItemRequest().withTableName(\"PersonalData\").withItem(item); /* <=== com.amazonaws.services.memorydb.model.PutItemRequest */ \n        memoryDBClient.putItem(request);\n    }\n}\n"
                  },
                  {
                    "sample" : "putItem(request)",
                    "lineNumber" : 22,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/memoryDB.java",
                    "excerpt" : "        item.put(\"Name\", name);\n        item.put(\"Address\", address);\n        item.put(\"Age\", age);\n\n        PutItemRequest request = new PutItemRequest().withTableName(\"PersonalData\").withItem(item);\n        memoryDBClient.putItem(request); /* <=== com.amazonaws.services.memorydb.AmazonMemoryDB.putItem */ \n    }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "5266-5268-5267-5257",
                "path" : [
                  {
                    "sample" : "int age",
                    "lineNumber" : 30,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/ssm.java",
                    "excerpt" : "}\n\nclass PersonalData {\n    private final String id;\n    private final String name;\n    private final int age; /* <=== 'age' is a member of 'PersonalData' class */ \n\n    public PersonalData(String id, String name, int age) {\n        this.id = id;\n        this.name = name;\n        this.age = age;"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 16,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/identitystore.java",
                    "excerpt" : "    }\n\n    public void processData(PersonalData personalData) {\n        try {\n            CreateUserRequest createUserRequest = new CreateUserRequest()\n                .withUserPoolId(personalData.getUserPoolId()) /* <=== PersonalData */ \n                .withUsername(personalData.getUsername())\n                .withUserAttributes(personalData.getUserAttributes());\n\n            CreateUserResult createUserResult = identityStoreClient.createUser(createUserRequest);\n            System.out.println(\"Successfully sent personal data to Amazon Identity Store\");"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 17,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/identitystore.java",
                    "excerpt" : "\n    public void processData(PersonalData personalData) {\n        try {\n            CreateUserRequest createUserRequest = new CreateUserRequest()\n                .withUserPoolId(personalData.getUserPoolId())\n                .withUsername(personalData.getUsername()) /* <=== PersonalData */ \n                .withUserAttributes(personalData.getUserAttributes());\n\n            CreateUserResult createUserResult = identityStoreClient.createUser(createUserRequest);\n            System.out.println(\"Successfully sent personal data to Amazon Identity Store\");\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "personalData.getUsername()",
                    "lineNumber" : 17,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/identitystore.java",
                    "excerpt" : "\n    public void processData(PersonalData personalData) {\n        try {\n            CreateUserRequest createUserRequest = new CreateUserRequest()\n                .withUserPoolId(personalData.getUserPoolId())\n                .withUsername(personalData.getUsername()) /* <=== PersonalData.getUsername */ \n                .withUserAttributes(personalData.getUserAttributes());\n\n            CreateUserResult createUserResult = identityStoreClient.createUser(createUserRequest);\n            System.out.println(\"Successfully sent personal data to Amazon Identity Store\");\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "withUserPoolId(personalData.getUserPoolId())",
                    "lineNumber" : 15,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/identitystore.java",
                    "excerpt" : "        identityStoreClient = AWSIdentityStoreClientBuilder.defaultClient();\n    }\n\n    public void processData(PersonalData personalData) {\n        try {\n            CreateUserRequest createUserRequest = new CreateUserRequest() /* <=== com.amazonaws.services.identitystore.model.CreateUserRequest.withUserPoolId */ \n                .withUserPoolId(personalData.getUserPoolId())\n                .withUsername(personalData.getUsername())\n                .withUserAttributes(personalData.getUserAttributes());\n\n            CreateUserResult createUserResult = identityStoreClient.createUser(createUserRequest);"
                  }
                ]
              },
              {
                "pathId" : "5270-5269-5256-5255-5254-5274",
                "path" : [
                  {
                    "sample" : "int age",
                    "lineNumber" : 30,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/ssm.java",
                    "excerpt" : "}\n\nclass PersonalData {\n    private final String id;\n    private final String name;\n    private final int age; /* <=== 'age' is a member of 'PersonalData' class */ \n\n    public PersonalData(String id, String name, int age) {\n        this.id = id;\n        this.name = name;\n        this.age = age;"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 18,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/identitystore.java",
                    "excerpt" : "    public void processData(PersonalData personalData) {\n        try {\n            CreateUserRequest createUserRequest = new CreateUserRequest()\n                .withUserPoolId(personalData.getUserPoolId())\n                .withUsername(personalData.getUsername())\n                .withUserAttributes(personalData.getUserAttributes()); /* <=== PersonalData */ \n\n            CreateUserResult createUserResult = identityStoreClient.createUser(createUserRequest);\n            System.out.println(\"Successfully sent personal data to Amazon Identity Store\");\n        } catch (Exception e) {\n            System.err.println(\"Error processing personal data: \" + e.getMessage());"
                  },
                  {
                    "sample" : "personalData.getUserAttributes()",
                    "lineNumber" : 18,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/identitystore.java",
                    "excerpt" : "    public void processData(PersonalData personalData) {\n        try {\n            CreateUserRequest createUserRequest = new CreateUserRequest()\n                .withUserPoolId(personalData.getUserPoolId())\n                .withUsername(personalData.getUsername())\n                .withUserAttributes(personalData.getUserAttributes()); /* <=== PersonalData.getUserAttributes */ \n\n            CreateUserResult createUserResult = identityStoreClient.createUser(createUserRequest);\n            System.out.println(\"Successfully sent personal data to Amazon Identity Store\");\n        } catch (Exception e) {\n            System.err.println(\"Error processing personal data: \" + e.getMessage());"
                  },
                  {
                    "sample" : "withUsername(personalData.getUsername())",
                    "lineNumber" : 15,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/identitystore.java",
                    "excerpt" : "        identityStoreClient = AWSIdentityStoreClientBuilder.defaultClient();\n    }\n\n    public void processData(PersonalData personalData) {\n        try {\n            CreateUserRequest createUserRequest = new CreateUserRequest() /* <===  */ \n                .withUserPoolId(personalData.getUserPoolId())\n                .withUsername(personalData.getUsername())\n                .withUserAttributes(personalData.getUserAttributes());\n\n            CreateUserResult createUserResult = identityStoreClient.createUser(createUserRequest);"
                  },
                  {
                    "sample" : "withUserAttributes(personalData.getUserAttributes())",
                    "lineNumber" : 15,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/identitystore.java",
                    "excerpt" : "        identityStoreClient = AWSIdentityStoreClientBuilder.defaultClient();\n    }\n\n    public void processData(PersonalData personalData) {\n        try {\n            CreateUserRequest createUserRequest = new CreateUserRequest() /* <===  */ \n                .withUserPoolId(personalData.getUserPoolId())\n                .withUsername(personalData.getUsername())\n                .withUserAttributes(personalData.getUserAttributes());\n\n            CreateUserResult createUserResult = identityStoreClient.createUser(createUserRequest);"
                  },
                  {
                    "sample" : "createUserRequest",
                    "lineNumber" : 15,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/identitystore.java",
                    "excerpt" : "        identityStoreClient = AWSIdentityStoreClientBuilder.defaultClient();\n    }\n\n    public void processData(PersonalData personalData) {\n        try {\n            CreateUserRequest createUserRequest = new CreateUserRequest() /* <=== com.amazonaws.services.identitystore.model.CreateUserRequest */ \n                .withUserPoolId(personalData.getUserPoolId())\n                .withUsername(personalData.getUsername())\n                .withUserAttributes(personalData.getUserAttributes());\n\n            CreateUserResult createUserResult = identityStoreClient.createUser(createUserRequest);"
                  },
                  {
                    "sample" : "createUser(createUserRequest)",
                    "lineNumber" : 20,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/identitystore.java",
                    "excerpt" : "            CreateUserRequest createUserRequest = new CreateUserRequest()\n                .withUserPoolId(personalData.getUserPoolId())\n                .withUsername(personalData.getUsername())\n                .withUserAttributes(personalData.getUserAttributes());\n\n            CreateUserResult createUserResult = identityStoreClient.createUser(createUserRequest); /* <=== com.amazonaws.services.identitystore.AWSIdentityStore.createUser */ \n            System.out.println(\"Successfully sent personal data to Amazon Identity Store\");\n        } catch (Exception e) {\n            System.err.println(\"Error processing personal data: \" + e.getMessage());\n        }\n    }"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.PersonalIdentification.LastName",
        "sinks" : [
          {
            "sinkType" : "third_parties",
            "id" : "ThirdParties.SDK.Amazon.Aws",
            "name" : "Amazon Aws",
            "category" : "",
            "domains" : [
              "aws.amazon.com"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "databaseDetails" : {
              "dbName" : "",
              "dbVendor" : "",
              "dbLocation" : "",
              "dbOperation" : ""
            },
            "paths" : [
              {
                "pathId" : "8824-8815-8814-8813-8812-8829",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 17,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/voiceid.java",
                    "excerpt" : "\n    public void processPersonalData(String firstName, String lastName, String phoneNumber) {\n        // Create a new profile in Voice ID\n        CreateProfileRequest createProfileRequest = new CreateProfileRequest()\n                .withFirstName(firstName)\n                .withLastName(lastName) /* <=== java.lang.String */ \n                .withPhoneNumber(phoneNumber);\n        CreateProfileResult createProfileResult = voiceIdClient.createProfile(createProfileRequest);\n        System.out.println(\"Profile created with ID: \" + createProfileResult.getProfileId());\n    }\n}"
                  },
                  {
                    "sample" : "withFirstName(firstName)",
                    "lineNumber" : 15,
                    "columnNumber" : 53,
                    "fileName" : "/app/code/voiceid.java",
                    "excerpt" : "        this.voiceIdClient = voiceIdClient;\n    }\n\n    public void processPersonalData(String firstName, String lastName, String phoneNumber) {\n        // Create a new profile in Voice ID\n        CreateProfileRequest createProfileRequest = new CreateProfileRequest() /* <=== com.amazonaws.services.voiceid.model.CreateProfileRequest.withFirstName */ \n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber);\n        CreateProfileResult createProfileResult = voiceIdClient.createProfile(createProfileRequest);\n        System.out.println(\"Profile created with ID: \" + createProfileResult.getProfileId());"
                  },
                  {
                    "sample" : "withLastName(lastName)",
                    "lineNumber" : 15,
                    "columnNumber" : 53,
                    "fileName" : "/app/code/voiceid.java",
                    "excerpt" : "        this.voiceIdClient = voiceIdClient;\n    }\n\n    public void processPersonalData(String firstName, String lastName, String phoneNumber) {\n        // Create a new profile in Voice ID\n        CreateProfileRequest createProfileRequest = new CreateProfileRequest() /* <===  */ \n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber);\n        CreateProfileResult createProfileResult = voiceIdClient.createProfile(createProfileRequest);\n        System.out.println(\"Profile created with ID: \" + createProfileResult.getProfileId());"
                  },
                  {
                    "sample" : "withPhoneNumber(phoneNumber)",
                    "lineNumber" : 15,
                    "columnNumber" : 53,
                    "fileName" : "/app/code/voiceid.java",
                    "excerpt" : "        this.voiceIdClient = voiceIdClient;\n    }\n\n    public void processPersonalData(String firstName, String lastName, String phoneNumber) {\n        // Create a new profile in Voice ID\n        CreateProfileRequest createProfileRequest = new CreateProfileRequest() /* <===  */ \n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber);\n        CreateProfileResult createProfileResult = voiceIdClient.createProfile(createProfileRequest);\n        System.out.println(\"Profile created with ID: \" + createProfileResult.getProfileId());"
                  },
                  {
                    "sample" : "createProfileRequest",
                    "lineNumber" : 15,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/voiceid.java",
                    "excerpt" : "        this.voiceIdClient = voiceIdClient;\n    }\n\n    public void processPersonalData(String firstName, String lastName, String phoneNumber) {\n        // Create a new profile in Voice ID\n        CreateProfileRequest createProfileRequest = new CreateProfileRequest() /* <=== com.amazonaws.services.voiceid.model.CreateProfileRequest */ \n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber);\n        CreateProfileResult createProfileResult = voiceIdClient.createProfile(createProfileRequest);\n        System.out.println(\"Profile created with ID: \" + createProfileResult.getProfileId());"
                  },
                  {
                    "sample" : "createProfile(createProfileRequest)",
                    "lineNumber" : 19,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/voiceid.java",
                    "excerpt" : "        // Create a new profile in Voice ID\n        CreateProfileRequest createProfileRequest = new CreateProfileRequest()\n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber);\n        CreateProfileResult createProfileResult = voiceIdClient.createProfile(createProfileRequest); /* <=== com.amazonaws.services.voiceid.model.VoiceIdClient.createProfile */ \n        System.out.println(\"Profile created with ID: \" + createProfileResult.getProfileId());\n    }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "16315-16306",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 11,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/amplifyUIBuilder.java",
                    "excerpt" : "    public void AWSAmplifyUIBuilderFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AmplifyUIBuilder amplifyUIBuilder = new AmplifyUIBuilder();\n\n        CreateUserRequest createUserRequest = new CreateUserRequest()\n                .withFirstName(firstName)\n                .withLastName(lastName) /* <=== java.lang.String */ \n                .withPhoneNumber(phoneNumber)\n                .withDOB(DOB);\n\n        amplifyUIBuilder.createUser(createUserRequest);\n    }"
                  },
                  {
                    "sample" : "withFirstName(firstName)",
                    "lineNumber" : 9,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/amplifyUIBuilder.java",
                    "excerpt" : "public class AWSAmplifyUIBuilderUtil {\n\n    public void AWSAmplifyUIBuilderFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AmplifyUIBuilder amplifyUIBuilder = new AmplifyUIBuilder();\n\n        CreateUserRequest createUserRequest = new CreateUserRequest() /* <=== com.amazonaws.services.amplifyuibuilder.model.CreateUserRequest.withFirstName */ \n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber)\n                .withDOB(DOB);\n"
                  }
                ]
              },
              {
                "pathId" : "13050-13037",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 18,
                    "columnNumber" : 66,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "}\n\npublic void AWSIoTDeviceAdvisorProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nTestRound testRound = new TestRound().withName(firstName + \"_\" + lastName + \"_TestRound\") /* <=== java.lang.String */ \n        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n\nTestResult result = client.createTestRound(testRound);\n"
                  },
                  {
                    "sample" : "withName(firstName + \"_\" + lastName + \"_TestRound\")",
                    "lineNumber" : 18,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "}\n\npublic void AWSIoTDeviceAdvisorProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nTestRound testRound = new TestRound().withName(firstName + \"_\" + lastName + \"_TestRound\") /* <=== com.amazonaws.services.iotdeviceadvisor.model.TestRound.withName */ \n        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n\nTestResult result = client.createTestRound(testRound);\n"
                  }
                ]
              },
              {
                "pathId" : "13050-13037-13036-13035-13034-13033-13032-13066",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 18,
                    "columnNumber" : 66,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "}\n\npublic void AWSIoTDeviceAdvisorProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nTestRound testRound = new TestRound().withName(firstName + \"_\" + lastName + \"_TestRound\") /* <=== java.lang.String */ \n        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n\nTestResult result = client.createTestRound(testRound);\n"
                  },
                  {
                    "sample" : "withName(firstName + \"_\" + lastName + \"_TestRound\")",
                    "lineNumber" : 18,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "}\n\npublic void AWSIoTDeviceAdvisorProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nTestRound testRound = new TestRound().withName(firstName + \"_\" + lastName + \"_TestRound\") /* <=== com.amazonaws.services.iotdeviceadvisor.model.TestRound.withName */ \n        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n\nTestResult result = client.createTestRound(testRound);\n"
                  },
                  {
                    "sample" : "withTargetSelection(TargetSelection.CONTINUOUS)",
                    "lineNumber" : 18,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "}\n\npublic void AWSIoTDeviceAdvisorProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nTestRound testRound = new TestRound().withName(firstName + \"_\" + lastName + \"_TestRound\") /* <===  */ \n        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n\nTestResult result = client.createTestRound(testRound);\n"
                  },
                  {
                    "sample" : "withPayloadSelection(PayloadSelection.CONTINUOUS)",
                    "lineNumber" : 18,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "}\n\npublic void AWSIoTDeviceAdvisorProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nTestRound testRound = new TestRound().withName(firstName + \"_\" + lastName + \"_TestRound\") /* <===  */ \n        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n\nTestResult result = client.createTestRound(testRound);\n"
                  },
                  {
                    "sample" : "withPayloadSelection(PayloadSelection.PERSONAL_DATA)",
                    "lineNumber" : 18,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "}\n\npublic void AWSIoTDeviceAdvisorProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nTestRound testRound = new TestRound().withName(firstName + \"_\" + lastName + \"_TestRound\") /* <===  */ \n        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n\nTestResult result = client.createTestRound(testRound);\n"
                  },
                  {
                    "sample" : "withPayload(personalData.toString())",
                    "lineNumber" : 18,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "}\n\npublic void AWSIoTDeviceAdvisorProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nTestRound testRound = new TestRound().withName(firstName + \"_\" + lastName + \"_TestRound\") /* <===  */ \n        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n\nTestResult result = client.createTestRound(testRound);\n"
                  },
                  {
                    "sample" : "testRound",
                    "lineNumber" : 18,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "}\n\npublic void AWSIoTDeviceAdvisorProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nTestRound testRound = new TestRound().withName(firstName + \"_\" + lastName + \"_TestRound\") /* <=== com.amazonaws.services.iotdeviceadvisor.model.TestRound */ \n        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n\nTestResult result = client.createTestRound(testRound);\n"
                  },
                  {
                    "sample" : "createTestRound(testRound)",
                    "lineNumber" : 22,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/iotDeviceAdvisor.java",
                    "excerpt" : "\nTestRound testRound = new TestRound().withName(firstName + \"_\" + lastName + \"_TestRound\")\n        .withTargetSelection(TargetSelection.CONTINUOUS).withPayloadSelection(PayloadSelection.CONTINUOUS)\n        .withPayloadSelection(PayloadSelection.PERSONAL_DATA).withPayload(personalData.toString());\n\nTestResult result = client.createTestRound(testRound); /* <=== com.amazonaws.services.iotdeviceadvisor.AmazonIoTDeviceAdvisor.createTestRound */ \n\nSystem.out.println(\"Result: \" + result.toString());\n}\n}\n"
                  }
                ]
              },
              {
                "pathId" : "14632-14627-14626-14652-14651-14650-14672",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 12,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "import java.util.ArrayList;\nimport java.util.List;\n\npublic class AWSDataExchangeUtil {\n    public static void AWSDataExchangeFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob, AmazonDataExchange dataExchangeClient) {\n        String dataSetName = firstName + \" \" + lastName + \" Personal Data\"; /* <=== java.lang.String */ \n        String revisionId = \"Revision1\";\n        String assetName = firstName + \" \" + lastName + \" Asset\";\n\n        // Create a new data set\n        CreateDataSetRequest createDataSetRequest = new CreateDataSetRequest()"
                  },
                  {
                    "sample" : "firstName + \" \" + lastName + \" Personal Data\"",
                    "lineNumber" : 12,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "import java.util.ArrayList;\nimport java.util.List;\n\npublic class AWSDataExchangeUtil {\n    public static void AWSDataExchangeFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob, AmazonDataExchange dataExchangeClient) {\n        String dataSetName = firstName + \" \" + lastName + \" Personal Data\"; /* <===  */ \n        String revisionId = \"Revision1\";\n        String assetName = firstName + \" \" + lastName + \" Asset\";\n\n        // Create a new data set\n        CreateDataSetRequest createDataSetRequest = new CreateDataSetRequest()"
                  },
                  {
                    "sample" : "dataSetName",
                    "lineNumber" : 12,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "import java.util.ArrayList;\nimport java.util.List;\n\npublic class AWSDataExchangeUtil {\n    public static void AWSDataExchangeFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob, AmazonDataExchange dataExchangeClient) {\n        String dataSetName = firstName + \" \" + lastName + \" Personal Data\"; /* <=== java.lang.String */ \n        String revisionId = \"Revision1\";\n        String assetName = firstName + \" \" + lastName + \" Asset\";\n\n        // Create a new data set\n        CreateDataSetRequest createDataSetRequest = new CreateDataSetRequest()"
                  },
                  {
                    "sample" : "withName(dataSetName)",
                    "lineNumber" : 17,
                    "columnNumber" : 53,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        String dataSetName = firstName + \" \" + lastName + \" Personal Data\";\n        String revisionId = \"Revision1\";\n        String assetName = firstName + \" \" + lastName + \" Asset\";\n\n        // Create a new data set\n        CreateDataSetRequest createDataSetRequest = new CreateDataSetRequest() /* <=== com.amazonaws.services.dataexchange.model.CreateDataSetRequest.withName */ \n                .withName(dataSetName)\n                .withDescription(\"Personal data of \" + firstName + \" \" + lastName);\n        String dataSetId = dataExchangeClient.createDataSet(createDataSetRequest).getId();\n\n        // Create a revision for the data set"
                  },
                  {
                    "sample" : "withDescription(\"Personal data of \" + firstName + \" \" + lastName)",
                    "lineNumber" : 17,
                    "columnNumber" : 53,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        String dataSetName = firstName + \" \" + lastName + \" Personal Data\";\n        String revisionId = \"Revision1\";\n        String assetName = firstName + \" \" + lastName + \" Asset\";\n\n        // Create a new data set\n        CreateDataSetRequest createDataSetRequest = new CreateDataSetRequest() /* <===  */ \n                .withName(dataSetName)\n                .withDescription(\"Personal data of \" + firstName + \" \" + lastName);\n        String dataSetId = dataExchangeClient.createDataSet(createDataSetRequest).getId();\n\n        // Create a revision for the data set"
                  },
                  {
                    "sample" : "createDataSetRequest",
                    "lineNumber" : 17,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        String dataSetName = firstName + \" \" + lastName + \" Personal Data\";\n        String revisionId = \"Revision1\";\n        String assetName = firstName + \" \" + lastName + \" Asset\";\n\n        // Create a new data set\n        CreateDataSetRequest createDataSetRequest = new CreateDataSetRequest() /* <=== com.amazonaws.services.dataexchange.model.CreateDataSetRequest */ \n                .withName(dataSetName)\n                .withDescription(\"Personal data of \" + firstName + \" \" + lastName);\n        String dataSetId = dataExchangeClient.createDataSet(createDataSetRequest).getId();\n\n        // Create a revision for the data set"
                  },
                  {
                    "sample" : "createDataSet(createDataSetRequest)",
                    "lineNumber" : 20,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "\n        // Create a new data set\n        CreateDataSetRequest createDataSetRequest = new CreateDataSetRequest()\n                .withName(dataSetName)\n                .withDescription(\"Personal data of \" + firstName + \" \" + lastName);\n        String dataSetId = dataExchangeClient.createDataSet(createDataSetRequest).getId(); /* <=== com.amazonaws.services.dataexchange.AmazonDataExchange.createDataSet */ \n\n        // Create a revision for the data set\n        CreateRevisionRequest createRevisionRequest = new CreateRevisionRequest()\n                .withDataSetId(dataSetId)\n                .withComment(\"First revision for \" + firstName + \" \" + lastName + \" data\");"
                  }
                ]
              },
              {
                "pathId" : "3262-3263-3261-3265-3269-3285-3276",
                "path" : [
                  {
                    "sample" : "\"lastName\"",
                    "lineNumber" : 16,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "    private static AWSIoTRoboRunner iotRoboRunnerClient = AWSIoTRoboRunnerClientBuilder.defaultClient();\n\n    public static void AWSIoTRoboRunnerFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        Map<String, Object> personalData = new HashMap<>();\n        personalData.put(\"firstName\", firstName);\n        personalData.put(\"lastName\", lastName); /* <===  */ \n        personalData.put(\"phoneNumber\", phoneNumber);\n        personalData.put(\"dob\", dob);\n\n        PutThingShadowRequest request = new PutThingShadowRequest()\n                .withThingName(\"PersonalData\")"
                  },
                  {
                    "sample" : "lastName",
                    "lineNumber" : 16,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "    private static AWSIoTRoboRunner iotRoboRunnerClient = AWSIoTRoboRunnerClientBuilder.defaultClient();\n\n    public static void AWSIoTRoboRunnerFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        Map<String, Object> personalData = new HashMap<>();\n        personalData.put(\"firstName\", firstName);\n        personalData.put(\"lastName\", lastName); /* <=== java.lang.String */ \n        personalData.put(\"phoneNumber\", phoneNumber);\n        personalData.put(\"dob\", dob);\n\n        PutThingShadowRequest request = new PutThingShadowRequest()\n                .withThingName(\"PersonalData\")"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 16,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "    private static AWSIoTRoboRunner iotRoboRunnerClient = AWSIoTRoboRunnerClientBuilder.defaultClient();\n\n    public static void AWSIoTRoboRunnerFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        Map<String, Object> personalData = new HashMap<>();\n        personalData.put(\"firstName\", firstName);\n        personalData.put(\"lastName\", lastName); /* <=== java.util.Map */ \n        personalData.put(\"phoneNumber\", phoneNumber);\n        personalData.put(\"dob\", dob);\n\n        PutThingShadowRequest request = new PutThingShadowRequest()\n                .withThingName(\"PersonalData\")"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 17,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "\n    public static void AWSIoTRoboRunnerFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        Map<String, Object> personalData = new HashMap<>();\n        personalData.put(\"firstName\", firstName);\n        personalData.put(\"lastName\", lastName);\n        personalData.put(\"phoneNumber\", phoneNumber); /* <=== java.util.Map */ \n        personalData.put(\"dob\", dob);\n\n        PutThingShadowRequest request = new PutThingShadowRequest()\n                .withThingName(\"PersonalData\")\n                .withPayload(personalData);"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 18,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "    public static void AWSIoTRoboRunnerFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        Map<String, Object> personalData = new HashMap<>();\n        personalData.put(\"firstName\", firstName);\n        personalData.put(\"lastName\", lastName);\n        personalData.put(\"phoneNumber\", phoneNumber);\n        personalData.put(\"dob\", dob); /* <=== java.util.Map */ \n\n        PutThingShadowRequest request = new PutThingShadowRequest()\n                .withThingName(\"PersonalData\")\n                .withPayload(personalData);\n"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 22,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "        personalData.put(\"phoneNumber\", phoneNumber);\n        personalData.put(\"dob\", dob);\n\n        PutThingShadowRequest request = new PutThingShadowRequest()\n                .withThingName(\"PersonalData\")\n                .withPayload(personalData); /* <=== java.util.Map */ \n\n        PutThingShadowResult result = iotRoboRunnerClient.putThingShadow(request);\n        System.out.println(\"Data sent to AWS IoTRoboRunner successfully\");\n    }\n}"
                  },
                  {
                    "sample" : "withThingName(\"PersonalData\")",
                    "lineNumber" : 20,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "        personalData.put(\"firstName\", firstName);\n        personalData.put(\"lastName\", lastName);\n        personalData.put(\"phoneNumber\", phoneNumber);\n        personalData.put(\"dob\", dob);\n\n        PutThingShadowRequest request = new PutThingShadowRequest() /* <=== com.amazonaws.services.iotroborunner.model.PutThingShadowRequest.withThingName */ \n                .withThingName(\"PersonalData\")\n                .withPayload(personalData);\n\n        PutThingShadowResult result = iotRoboRunnerClient.putThingShadow(request);\n        System.out.println(\"Data sent to AWS IoTRoboRunner successfully\");"
                  }
                ]
              },
              {
                "pathId" : "8601-8588",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 18,
                    "columnNumber" : 62,
                    "fileName" : "/app/code/databaseMigration.java",
                    "excerpt" : "\npublic void AWSDatabaseMigrationServiceProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\n    CreateReplicationTaskRequest createReplicationTaskRequest = new CreateReplicationTaskRequest()\n            .withReplicationTaskIdentifier(firstName + \"_\" + lastName + \"_Task\") /* <=== java.lang.String */ \n            .withSourceEndpointArn(\"arn:aws:dms:us-west-2:012345678901:endpoint:ASXWXYZWEXAMPLE\")\n            .withTargetEndpointArn(\"arn:aws:dms:us-west-2:012345678901:endpoint:AKXWXYZWEXAMPLE\")\n            .withReplicationInstanceArn(\"arn:aws:dms:us-west-2:012345678901:rep:6UTDJGB043EXAMPLE\")\n            .withMigrationType(\"full-load\")\n            .withTableMappings(\"{\\\"rules\\\":[{\\\"rule-type\\\":\\\"selection\\\",\\\"rule-id\\\":\\\"1\\\",\\\"rule-name\\\":\\\"1\\\",\\\"object-locator\\\":{\\\"schema-name\\\":\\\"personal_data\\\",\\\"table-name\\\":\\\"\" + firstName + \"_\" + lastName + \"\\\"},\\\"rule-action\\\":\\\"include\\\",\\\"filters\\\":{}}]}\")"
                  },
                  {
                    "sample" : "withReplicationTaskIdentifier(firstName + \"_\" + lastName + \"_Task\")",
                    "lineNumber" : 17,
                    "columnNumber" : 65,
                    "fileName" : "/app/code/databaseMigration.java",
                    "excerpt" : "}\n\npublic void AWSDatabaseMigrationServiceProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\n    CreateReplicationTaskRequest createReplicationTaskRequest = new CreateReplicationTaskRequest() /* <=== com.amazonaws.services.databasemigrationservice.model.CreateReplicationTaskRequest.withReplicationTaskIdentifier */ \n            .withReplicationTaskIdentifier(firstName + \"_\" + lastName + \"_Task\")\n            .withSourceEndpointArn(\"arn:aws:dms:us-west-2:012345678901:endpoint:ASXWXYZWEXAMPLE\")\n            .withTargetEndpointArn(\"arn:aws:dms:us-west-2:012345678901:endpoint:AKXWXYZWEXAMPLE\")\n            .withReplicationInstanceArn(\"arn:aws:dms:us-west-2:012345678901:rep:6UTDJGB043EXAMPLE\")\n            .withMigrationType(\"full-load\")"
                  }
                ]
              },
              {
                "pathId" : "7468-7474-7469-7456-7455-7454-7453-7488",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 18,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/migrationHub.java",
                    "excerpt" : "\npublic void AWSMigrationHubProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\n    ImportMigrationTaskRequest importMigrationTaskRequest = new ImportMigrationTaskRequest()\n            .withMigrationTaskName(firstName + \"_\" + lastName) /* <=== java.lang.String */ \n            .withProgressUpdateStream(firstName + \"_\" + lastName + \"_Stream\")\n            .withResourceAttributeList(new ResourceAttribute().withType(\"PersonalData\")\n                    .withValue(personalData.toString()));\n\n    client.importMigrationTask(importMigrationTaskRequest);"
                  },
                  {
                    "sample" : "lastName",
                    "lineNumber" : 19,
                    "columnNumber" : 57,
                    "fileName" : "/app/code/migrationHub.java",
                    "excerpt" : "public void AWSMigrationHubProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\n    ImportMigrationTaskRequest importMigrationTaskRequest = new ImportMigrationTaskRequest()\n            .withMigrationTaskName(firstName + \"_\" + lastName)\n            .withProgressUpdateStream(firstName + \"_\" + lastName + \"_Stream\") /* <=== java.lang.String */ \n            .withResourceAttributeList(new ResourceAttribute().withType(\"PersonalData\")\n                    .withValue(personalData.toString()));\n\n    client.importMigrationTask(importMigrationTaskRequest);\n}"
                  },
                  {
                    "sample" : "firstName + \"_\" + lastName + \"_Stream\"",
                    "lineNumber" : 19,
                    "columnNumber" : 39,
                    "fileName" : "/app/code/migrationHub.java",
                    "excerpt" : "public void AWSMigrationHubProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\n    ImportMigrationTaskRequest importMigrationTaskRequest = new ImportMigrationTaskRequest()\n            .withMigrationTaskName(firstName + \"_\" + lastName)\n            .withProgressUpdateStream(firstName + \"_\" + lastName + \"_Stream\") /* <===  */ \n            .withResourceAttributeList(new ResourceAttribute().withType(\"PersonalData\")\n                    .withValue(personalData.toString()));\n\n    client.importMigrationTask(importMigrationTaskRequest);\n}"
                  },
                  {
                    "sample" : "withMigrationTaskName(firstName + \"_\" + lastName)",
                    "lineNumber" : 17,
                    "columnNumber" : 61,
                    "fileName" : "/app/code/migrationHub.java",
                    "excerpt" : "}\n\npublic void AWSMigrationHubProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\n    ImportMigrationTaskRequest importMigrationTaskRequest = new ImportMigrationTaskRequest() /* <=== com.amazonaws.services.migrationhub.model.ImportMigrationTaskRequest.withMigrationTaskName */ \n            .withMigrationTaskName(firstName + \"_\" + lastName)\n            .withProgressUpdateStream(firstName + \"_\" + lastName + \"_Stream\")\n            .withResourceAttributeList(new ResourceAttribute().withType(\"PersonalData\")\n                    .withValue(personalData.toString()));\n"
                  },
                  {
                    "sample" : "withProgressUpdateStream(firstName + \"_\" + lastName + \"_Stream\")",
                    "lineNumber" : 17,
                    "columnNumber" : 61,
                    "fileName" : "/app/code/migrationHub.java",
                    "excerpt" : "}\n\npublic void AWSMigrationHubProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\n    ImportMigrationTaskRequest importMigrationTaskRequest = new ImportMigrationTaskRequest() /* <===  */ \n            .withMigrationTaskName(firstName + \"_\" + lastName)\n            .withProgressUpdateStream(firstName + \"_\" + lastName + \"_Stream\")\n            .withResourceAttributeList(new ResourceAttribute().withType(\"PersonalData\")\n                    .withValue(personalData.toString()));\n"
                  },
                  {
                    "sample" : "withResourceAttributeList(new ResourceAttribute().withType(\"PersonalData\").withValue(personalData.toString()))",
                    "lineNumber" : 17,
                    "columnNumber" : 61,
                    "fileName" : "/app/code/migrationHub.java",
                    "excerpt" : "}\n\npublic void AWSMigrationHubProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\n    ImportMigrationTaskRequest importMigrationTaskRequest = new ImportMigrationTaskRequest() /* <===  */ \n            .withMigrationTaskName(firstName + \"_\" + lastName)\n            .withProgressUpdateStream(firstName + \"_\" + lastName + \"_Stream\")\n            .withResourceAttributeList(new ResourceAttribute().withType(\"PersonalData\")\n                    .withValue(personalData.toString()));\n"
                  },
                  {
                    "sample" : "importMigrationTaskRequest",
                    "lineNumber" : 17,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/migrationHub.java",
                    "excerpt" : "}\n\npublic void AWSMigrationHubProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\n    ImportMigrationTaskRequest importMigrationTaskRequest = new ImportMigrationTaskRequest() /* <=== com.amazonaws.services.migrationhub.model.ImportMigrationTaskRequest */ \n            .withMigrationTaskName(firstName + \"_\" + lastName)\n            .withProgressUpdateStream(firstName + \"_\" + lastName + \"_Stream\")\n            .withResourceAttributeList(new ResourceAttribute().withType(\"PersonalData\")\n                    .withValue(personalData.toString()));\n"
                  },
                  {
                    "sample" : "importMigrationTask(importMigrationTaskRequest)",
                    "lineNumber" : 23,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/migrationHub.java",
                    "excerpt" : "            .withMigrationTaskName(firstName + \"_\" + lastName)\n            .withProgressUpdateStream(firstName + \"_\" + lastName + \"_Stream\")\n            .withResourceAttributeList(new ResourceAttribute().withType(\"PersonalData\")\n                    .withValue(personalData.toString()));\n\n    client.importMigrationTask(importMigrationTaskRequest); /* <=== com.amazonaws.services.migrationhub.AmazonMigrationHub.importMigrationTask */ \n}\n}"
                  }
                ]
              },
              {
                "pathId" : "2644-2640-2639-2638-2665-2663-2662-2653-2652-2651-2667",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 14,
                    "columnNumber" : 83,
                    "fileName" : "/app/code/eks.java",
                    "excerpt" : "public AWSEKSDataProcessor() {\n    client = AmazonEKSClientBuilder.standard().build();\n}\n\npublic void processPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob); /* <=== java.lang.String */ \n    \n    CreateClusterRequest createClusterRequest = new CreateClusterRequest()\n            .withName(\"PersonalDataCluster\")\n            .withTags(Map.of(\"PersonalData\", personalData.toString()));\n            "
                  },
                  {
                    "sample" : "Map",
                    "lineNumber" : 14,
                    "columnNumber" : 40,
                    "fileName" : "/app/code/eks.java",
                    "excerpt" : "public AWSEKSDataProcessor() {\n    client = AmazonEKSClientBuilder.standard().build();\n}\n\npublic void processPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob); /* <=== java.util.Map */ \n    \n    CreateClusterRequest createClusterRequest = new CreateClusterRequest()\n            .withName(\"PersonalDataCluster\")\n            .withTags(Map.of(\"PersonalData\", personalData.toString()));\n            "
                  },
                  {
                    "sample" : "Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob)",
                    "lineNumber" : 14,
                    "columnNumber" : 40,
                    "fileName" : "/app/code/eks.java",
                    "excerpt" : "public AWSEKSDataProcessor() {\n    client = AmazonEKSClientBuilder.standard().build();\n}\n\npublic void processPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob); /* <=== java.util.Map.of */ \n    \n    CreateClusterRequest createClusterRequest = new CreateClusterRequest()\n            .withName(\"PersonalDataCluster\")\n            .withTags(Map.of(\"PersonalData\", personalData.toString()));\n            "
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 14,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/eks.java",
                    "excerpt" : "public AWSEKSDataProcessor() {\n    client = AmazonEKSClientBuilder.standard().build();\n}\n\npublic void processPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob); /* <=== java.util.Map */ \n    \n    CreateClusterRequest createClusterRequest = new CreateClusterRequest()\n            .withName(\"PersonalDataCluster\")\n            .withTags(Map.of(\"PersonalData\", personalData.toString()));\n            "
                  },
                  {
                    "sample" : "personalData.toString()",
                    "lineNumber" : 18,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/eks.java",
                    "excerpt" : "public void processPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n    \n    CreateClusterRequest createClusterRequest = new CreateClusterRequest()\n            .withName(\"PersonalDataCluster\")\n            .withTags(Map.of(\"PersonalData\", personalData.toString())); /* <=== java.util.Map.toString */ \n            \n    client.createCluster(createClusterRequest);\n}\n}"
                  },
                  {
                    "sample" : "Map",
                    "lineNumber" : 18,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/eks.java",
                    "excerpt" : "public void processPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n    \n    CreateClusterRequest createClusterRequest = new CreateClusterRequest()\n            .withName(\"PersonalDataCluster\")\n            .withTags(Map.of(\"PersonalData\", personalData.toString())); /* <=== java.util.Map */ \n            \n    client.createCluster(createClusterRequest);\n}\n}"
                  },
                  {
                    "sample" : "Map.of(\"PersonalData\", personalData.toString())",
                    "lineNumber" : 18,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/eks.java",
                    "excerpt" : "public void processPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n    \n    CreateClusterRequest createClusterRequest = new CreateClusterRequest()\n            .withName(\"PersonalDataCluster\")\n            .withTags(Map.of(\"PersonalData\", personalData.toString())); /* <=== java.util.Map.of */ \n            \n    client.createCluster(createClusterRequest);\n}\n}"
                  },
                  {
                    "sample" : "withName(\"PersonalDataCluster\")",
                    "lineNumber" : 16,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/eks.java",
                    "excerpt" : "}\n\npublic void processPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n    \n    CreateClusterRequest createClusterRequest = new CreateClusterRequest() /* <=== com.amazonaws.services.eks.model.CreateClusterRequest.withName */ \n            .withName(\"PersonalDataCluster\")\n            .withTags(Map.of(\"PersonalData\", personalData.toString()));\n            \n    client.createCluster(createClusterRequest);\n}"
                  },
                  {
                    "sample" : "withTags(Map.of(\"PersonalData\", personalData.toString()))",
                    "lineNumber" : 16,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/eks.java",
                    "excerpt" : "}\n\npublic void processPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n    \n    CreateClusterRequest createClusterRequest = new CreateClusterRequest() /* <===  */ \n            .withName(\"PersonalDataCluster\")\n            .withTags(Map.of(\"PersonalData\", personalData.toString()));\n            \n    client.createCluster(createClusterRequest);\n}"
                  },
                  {
                    "sample" : "createClusterRequest",
                    "lineNumber" : 16,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/eks.java",
                    "excerpt" : "}\n\npublic void processPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n    \n    CreateClusterRequest createClusterRequest = new CreateClusterRequest() /* <=== com.amazonaws.services.eks.model.CreateClusterRequest */ \n            .withName(\"PersonalDataCluster\")\n            .withTags(Map.of(\"PersonalData\", personalData.toString()));\n            \n    client.createCluster(createClusterRequest);\n}"
                  },
                  {
                    "sample" : "createCluster(createClusterRequest)",
                    "lineNumber" : 20,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/eks.java",
                    "excerpt" : "    \n    CreateClusterRequest createClusterRequest = new CreateClusterRequest()\n            .withName(\"PersonalDataCluster\")\n            .withTags(Map.of(\"PersonalData\", personalData.toString()));\n            \n    client.createCluster(createClusterRequest); /* <=== com.amazonaws.services.eks.AmazonEKS.createCluster */ \n}\n}"
                  }
                ]
              },
              {
                "pathId" : "8336-8327-8326-8325-8338-8351-8366",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 13,
                    "columnNumber" : 66,
                    "fileName" : "/app/code/chimeSDKIdentity.java",
                    "excerpt" : "  private static final AWSChimeSDKIdentity CLIENT = AWSChimeSDKIdentityClientBuilder.defaultClient();\n\n  public static void AWSChimeSDKIdentityFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n    List<Attribute> attributes = new ArrayList<>();\n    attributes.add(new Attribute().withKey(\"firstName\").withValue(firstName));\n    attributes.add(new Attribute().withKey(\"lastName\").withValue(lastName)); /* <=== java.lang.String */ \n    attributes.add(new Attribute().withKey(\"phoneNumber\").withValue(phoneNumber));\n    attributes.add(new Attribute().withKey(\"DOB\").withValue(DOB));\n\n    PutAttributesRequest request = new PutAttributesRequest().withAttributes(attributes);\n    CLIENT.putAttributes(request);"
                  },
                  {
                    "sample" : "withKey(\"lastName\")",
                    "lineNumber" : 13,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/chimeSDKIdentity.java",
                    "excerpt" : "  private static final AWSChimeSDKIdentity CLIENT = AWSChimeSDKIdentityClientBuilder.defaultClient();\n\n  public static void AWSChimeSDKIdentityFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n    List<Attribute> attributes = new ArrayList<>();\n    attributes.add(new Attribute().withKey(\"firstName\").withValue(firstName));\n    attributes.add(new Attribute().withKey(\"lastName\").withValue(lastName)); /* <=== com.amazonaws.services.chimesdkidentity.model.Attribute.withKey */ \n    attributes.add(new Attribute().withKey(\"phoneNumber\").withValue(phoneNumber));\n    attributes.add(new Attribute().withKey(\"DOB\").withValue(DOB));\n\n    PutAttributesRequest request = new PutAttributesRequest().withAttributes(attributes);\n    CLIENT.putAttributes(request);"
                  },
                  {
                    "sample" : "withValue(lastName)",
                    "lineNumber" : 13,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/chimeSDKIdentity.java",
                    "excerpt" : "  private static final AWSChimeSDKIdentity CLIENT = AWSChimeSDKIdentityClientBuilder.defaultClient();\n\n  public static void AWSChimeSDKIdentityFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n    List<Attribute> attributes = new ArrayList<>();\n    attributes.add(new Attribute().withKey(\"firstName\").withValue(firstName));\n    attributes.add(new Attribute().withKey(\"lastName\").withValue(lastName)); /* <===  */ \n    attributes.add(new Attribute().withKey(\"phoneNumber\").withValue(phoneNumber));\n    attributes.add(new Attribute().withKey(\"DOB\").withValue(DOB));\n\n    PutAttributesRequest request = new PutAttributesRequest().withAttributes(attributes);\n    CLIENT.putAttributes(request);"
                  },
                  {
                    "sample" : "attributes",
                    "lineNumber" : 13,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/chimeSDKIdentity.java",
                    "excerpt" : "  private static final AWSChimeSDKIdentity CLIENT = AWSChimeSDKIdentityClientBuilder.defaultClient();\n\n  public static void AWSChimeSDKIdentityFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n    List<Attribute> attributes = new ArrayList<>();\n    attributes.add(new Attribute().withKey(\"firstName\").withValue(firstName));\n    attributes.add(new Attribute().withKey(\"lastName\").withValue(lastName)); /* <=== ANY */ \n    attributes.add(new Attribute().withKey(\"phoneNumber\").withValue(phoneNumber));\n    attributes.add(new Attribute().withKey(\"DOB\").withValue(DOB));\n\n    PutAttributesRequest request = new PutAttributesRequest().withAttributes(attributes);\n    CLIENT.putAttributes(request);"
                  },
                  {
                    "sample" : "attributes",
                    "lineNumber" : 14,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/chimeSDKIdentity.java",
                    "excerpt" : "\n  public static void AWSChimeSDKIdentityFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n    List<Attribute> attributes = new ArrayList<>();\n    attributes.add(new Attribute().withKey(\"firstName\").withValue(firstName));\n    attributes.add(new Attribute().withKey(\"lastName\").withValue(lastName));\n    attributes.add(new Attribute().withKey(\"phoneNumber\").withValue(phoneNumber)); /* <=== ANY */ \n    attributes.add(new Attribute().withKey(\"DOB\").withValue(DOB));\n\n    PutAttributesRequest request = new PutAttributesRequest().withAttributes(attributes);\n    CLIENT.putAttributes(request);\n  }"
                  },
                  {
                    "sample" : "attributes",
                    "lineNumber" : 15,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/chimeSDKIdentity.java",
                    "excerpt" : "  public static void AWSChimeSDKIdentityFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n    List<Attribute> attributes = new ArrayList<>();\n    attributes.add(new Attribute().withKey(\"firstName\").withValue(firstName));\n    attributes.add(new Attribute().withKey(\"lastName\").withValue(lastName));\n    attributes.add(new Attribute().withKey(\"phoneNumber\").withValue(phoneNumber));\n    attributes.add(new Attribute().withKey(\"DOB\").withValue(DOB)); /* <=== ANY */ \n\n    PutAttributesRequest request = new PutAttributesRequest().withAttributes(attributes);\n    CLIENT.putAttributes(request);\n  }\n}"
                  },
                  {
                    "sample" : "withAttributes(attributes)",
                    "lineNumber" : 17,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/chimeSDKIdentity.java",
                    "excerpt" : "    attributes.add(new Attribute().withKey(\"firstName\").withValue(firstName));\n    attributes.add(new Attribute().withKey(\"lastName\").withValue(lastName));\n    attributes.add(new Attribute().withKey(\"phoneNumber\").withValue(phoneNumber));\n    attributes.add(new Attribute().withKey(\"DOB\").withValue(DOB));\n\n    PutAttributesRequest request = new PutAttributesRequest().withAttributes(attributes); /* <=== com.amazonaws.services.chimesdkidentity.model.PutAttributesRequest.withAttributes */ \n    CLIENT.putAttributes(request);\n  }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "1738-1739-1727-1726-1725-1724-1723-1747",
                "path" : [
                  {
                    "sample" : "\"lastName\"",
                    "lineNumber" : 16,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "\n    public void AWSCodePipelineFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        PutJobSuccessResultRequest request = new PutJobSuccessResultRequest()\n            .withJobId(firstName)\n            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName) /* <===  */ \n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);\n\n        PutJobSuccessResultResult result = client.putJobSuccessResult(request);\n        System.out.println(\"Successfully sent personal data to CodePipeline: \" + result);"
                  },
                  {
                    "sample" : "lastName",
                    "lineNumber" : 16,
                    "columnNumber" : 50,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "\n    public void AWSCodePipelineFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        PutJobSuccessResultRequest request = new PutJobSuccessResultRequest()\n            .withJobId(firstName)\n            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName) /* <=== java.lang.String */ \n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);\n\n        PutJobSuccessResultResult result = client.putJobSuccessResult(request);\n        System.out.println(\"Successfully sent personal data to CodePipeline: \" + result);"
                  },
                  {
                    "sample" : "withContinuationToken(\"optional_token\")",
                    "lineNumber" : 13,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "    public AWSCodePipelineUtil(AWSCodePipeline client) {\n        this.client = client;\n    }\n\n    public void AWSCodePipelineFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        PutJobSuccessResultRequest request = new PutJobSuccessResultRequest() /* <===  */ \n            .withJobId(firstName)\n            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);"
                  },
                  {
                    "sample" : "addOutputVariablesEntry(\"lastName\", lastName)",
                    "lineNumber" : 13,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "    public AWSCodePipelineUtil(AWSCodePipeline client) {\n        this.client = client;\n    }\n\n    public void AWSCodePipelineFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        PutJobSuccessResultRequest request = new PutJobSuccessResultRequest() /* <===  */ \n            .withJobId(firstName)\n            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);"
                  },
                  {
                    "sample" : "addOutputVariablesEntry(\"phoneNumber\", phoneNumber)",
                    "lineNumber" : 13,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "    public AWSCodePipelineUtil(AWSCodePipeline client) {\n        this.client = client;\n    }\n\n    public void AWSCodePipelineFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        PutJobSuccessResultRequest request = new PutJobSuccessResultRequest() /* <===  */ \n            .withJobId(firstName)\n            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);"
                  },
                  {
                    "sample" : "addOutputVariablesEntry(\"dob\", dob)",
                    "lineNumber" : 13,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "    public AWSCodePipelineUtil(AWSCodePipeline client) {\n        this.client = client;\n    }\n\n    public void AWSCodePipelineFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        PutJobSuccessResultRequest request = new PutJobSuccessResultRequest() /* <===  */ \n            .withJobId(firstName)\n            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);"
                  },
                  {
                    "sample" : "request",
                    "lineNumber" : 13,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "    public AWSCodePipelineUtil(AWSCodePipeline client) {\n        this.client = client;\n    }\n\n    public void AWSCodePipelineFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        PutJobSuccessResultRequest request = new PutJobSuccessResultRequest() /* <=== com.amazonaws.services.codepipeline.model.PutJobSuccessResultRequest */ \n            .withJobId(firstName)\n            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);"
                  },
                  {
                    "sample" : "putJobSuccessResult(request)",
                    "lineNumber" : 20,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);\n\n        PutJobSuccessResultResult result = client.putJobSuccessResult(request); /* <=== com.amazonaws.services.codepipeline.AWSCodePipeline.putJobSuccessResult */ \n        System.out.println(\"Successfully sent personal data to CodePipeline: \" + result);\n    }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "16228-16226-16215-16214-16213-16212-16233-16232-16240",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 32,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob));\n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest()\n                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName) /* <=== java.lang.String */ \n                .withUserAttributes(userAttributes);\n\n        // Send the request to create the user\n        AdminCreateUserResult createUserResult = cognitoIdpClient.adminCreateUser(createUserRequest);\n"
                  },
                  {
                    "sample" : "firstName + lastName",
                    "lineNumber" : 32,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob));\n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest()\n                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName) /* <===  */ \n                .withUserAttributes(userAttributes);\n\n        // Send the request to create the user\n        AdminCreateUserResult createUserResult = cognitoIdpClient.adminCreateUser(createUserRequest);\n"
                  },
                  {
                    "sample" : "withUserPoolId(USER_POOL_ID)",
                    "lineNumber" : 30,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "        userAttributes.add(new AttributeType().withName(\"family_name\").withValue(lastName));\n        userAttributes.add(new AttributeType().withName(\"phone_number\").withValue(phoneNumber));\n        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob));\n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest() /* <=== com.amazonaws.services.cognitoidp.model.AdminCreateUserRequest.withUserPoolId */ \n                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName)\n                .withUserAttributes(userAttributes);\n\n        // Send the request to create the user"
                  },
                  {
                    "sample" : "withUsername(firstName + lastName)",
                    "lineNumber" : 30,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "        userAttributes.add(new AttributeType().withName(\"family_name\").withValue(lastName));\n        userAttributes.add(new AttributeType().withName(\"phone_number\").withValue(phoneNumber));\n        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob));\n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest() /* <===  */ \n                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName)\n                .withUserAttributes(userAttributes);\n\n        // Send the request to create the user"
                  },
                  {
                    "sample" : "withUserAttributes(userAttributes)",
                    "lineNumber" : 30,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "        userAttributes.add(new AttributeType().withName(\"family_name\").withValue(lastName));\n        userAttributes.add(new AttributeType().withName(\"phone_number\").withValue(phoneNumber));\n        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob));\n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest() /* <===  */ \n                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName)\n                .withUserAttributes(userAttributes);\n\n        // Send the request to create the user"
                  },
                  {
                    "sample" : "createUserRequest",
                    "lineNumber" : 30,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "        userAttributes.add(new AttributeType().withName(\"family_name\").withValue(lastName));\n        userAttributes.add(new AttributeType().withName(\"phone_number\").withValue(phoneNumber));\n        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob));\n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest() /* <=== com.amazonaws.services.cognitoidp.model.AdminCreateUserRequest */ \n                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName)\n                .withUserAttributes(userAttributes);\n\n        // Send the request to create the user"
                  },
                  {
                    "sample" : "adminCreateUser(createUserRequest)",
                    "lineNumber" : 36,
                    "columnNumber" : 50,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName)\n                .withUserAttributes(userAttributes);\n\n        // Send the request to create the user\n        AdminCreateUserResult createUserResult = cognitoIdpClient.adminCreateUser(createUserRequest); /* <=== com.amazonaws.services.cognitoidp.AWSCognitoIdentityProvider.adminCreateUser */ \n\n        // Get the user's unique identifier\n        String userId = createUserResult.getUser().getUsername();\n\n        System.out.println(\"Successfully created user with ID: \" + userId);"
                  },
                  {
                    "sample" : "createUserResult",
                    "lineNumber" : 36,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName)\n                .withUserAttributes(userAttributes);\n\n        // Send the request to create the user\n        AdminCreateUserResult createUserResult = cognitoIdpClient.adminCreateUser(createUserRequest); /* <=== com.amazonaws.services.cognitoidp.model.AdminCreateUserResult */ \n\n        // Get the user's unique identifier\n        String userId = createUserResult.getUser().getUsername();\n\n        System.out.println(\"Successfully created user with ID: \" + userId);"
                  },
                  {
                    "sample" : "getUser()",
                    "lineNumber" : 39,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "\n        // Send the request to create the user\n        AdminCreateUserResult createUserResult = cognitoIdpClient.adminCreateUser(createUserRequest);\n\n        // Get the user's unique identifier\n        String userId = createUserResult.getUser().getUsername(); /* <=== com.amazonaws.services.cognitoidp.model.AdminCreateUserResult.getUser */ \n\n        System.out.println(\"Successfully created user with ID: \" + userId);\n    }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "16183-16174",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 25,
                    "columnNumber" : 82,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "                        .build();\n\n        // Define the user's personal data\n        List<AttributeType> userAttributes = new ArrayList<>();\n        userAttributes.add(new AttributeType().withName(\"given_name\").withValue(firstName));\n        userAttributes.add(new AttributeType().withName(\"family_name\").withValue(lastName)); /* <=== java.lang.String */ \n        userAttributes.add(new AttributeType().withName(\"phone_number\").withValue(phoneNumber));\n        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob));\n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest()"
                  },
                  {
                    "sample" : "withName(\"family_name\")",
                    "lineNumber" : 25,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "                        .build();\n\n        // Define the user's personal data\n        List<AttributeType> userAttributes = new ArrayList<>();\n        userAttributes.add(new AttributeType().withName(\"given_name\").withValue(firstName));\n        userAttributes.add(new AttributeType().withName(\"family_name\").withValue(lastName)); /* <=== com.amazonaws.services.cognitoidp.model.AttributeType.withName */ \n        userAttributes.add(new AttributeType().withName(\"phone_number\").withValue(phoneNumber));\n        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob));\n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest()"
                  }
                ]
              },
              {
                "pathId" : "16183-16228-16226-16215",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 25,
                    "columnNumber" : 82,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "                        .build();\n\n        // Define the user's personal data\n        List<AttributeType> userAttributes = new ArrayList<>();\n        userAttributes.add(new AttributeType().withName(\"given_name\").withValue(firstName));\n        userAttributes.add(new AttributeType().withName(\"family_name\").withValue(lastName)); /* <=== java.lang.String */ \n        userAttributes.add(new AttributeType().withName(\"phone_number\").withValue(phoneNumber));\n        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob));\n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest()"
                  },
                  {
                    "sample" : "lastName",
                    "lineNumber" : 32,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob));\n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest()\n                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName) /* <=== java.lang.String */ \n                .withUserAttributes(userAttributes);\n\n        // Send the request to create the user\n        AdminCreateUserResult createUserResult = cognitoIdpClient.adminCreateUser(createUserRequest);\n"
                  },
                  {
                    "sample" : "firstName + lastName",
                    "lineNumber" : 32,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob));\n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest()\n                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName) /* <===  */ \n                .withUserAttributes(userAttributes);\n\n        // Send the request to create the user\n        AdminCreateUserResult createUserResult = cognitoIdpClient.adminCreateUser(createUserRequest);\n"
                  },
                  {
                    "sample" : "withUserPoolId(USER_POOL_ID)",
                    "lineNumber" : 30,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "        userAttributes.add(new AttributeType().withName(\"family_name\").withValue(lastName));\n        userAttributes.add(new AttributeType().withName(\"phone_number\").withValue(phoneNumber));\n        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob));\n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest() /* <=== com.amazonaws.services.cognitoidp.model.AdminCreateUserRequest.withUserPoolId */ \n                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName)\n                .withUserAttributes(userAttributes);\n\n        // Send the request to create the user"
                  }
                ]
              },
              {
                "pathId" : "14695-14733-14724-14723-14722-14735-14748-14777-14764-14763-14762-14778",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 25,
                    "columnNumber" : 72,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        String dataSetId = dataExchangeClient.createDataSet(createDataSetRequest).getId();\n\n        // Create a revision for the data set\n        CreateRevisionRequest createRevisionRequest = new CreateRevisionRequest()\n                .withDataSetId(dataSetId)\n                .withComment(\"First revision for \" + firstName + \" \" + lastName + \" data\"); /* <=== java.lang.String */ \n        String revisionArn = dataExchangeClient.createRevision(createRevisionRequest).getArn();\n\n        // Prepare the asset\n        List<DataSetEntry> entries = new ArrayList<>();\n        entries.add(new DataSetEntry().withEntryName(\"firstName\").withContent(firstName));"
                  },
                  {
                    "sample" : "lastName",
                    "lineNumber" : 31,
                    "columnNumber" : 78,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        String revisionArn = dataExchangeClient.createRevision(createRevisionRequest).getArn();\n\n        // Prepare the asset\n        List<DataSetEntry> entries = new ArrayList<>();\n        entries.add(new DataSetEntry().withEntryName(\"firstName\").withContent(firstName));\n        entries.add(new DataSetEntry().withEntryName(\"lastName\").withContent(lastName)); /* <=== java.lang.String */ \n        entries.add(new DataSetEntry().withEntryName(\"phoneNumber\").withContent(phoneNumber));\n        entries.add(new DataSetEntry().withEntryName(\"dob\").withContent(dob));\n\n        // Import the asset\n        ImportAssetFromSignedUrlRequest importAssetRequest = new ImportAssetFromSignedUrlRequest()"
                  },
                  {
                    "sample" : "withEntryName(\"lastName\")",
                    "lineNumber" : 31,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        String revisionArn = dataExchangeClient.createRevision(createRevisionRequest).getArn();\n\n        // Prepare the asset\n        List<DataSetEntry> entries = new ArrayList<>();\n        entries.add(new DataSetEntry().withEntryName(\"firstName\").withContent(firstName));\n        entries.add(new DataSetEntry().withEntryName(\"lastName\").withContent(lastName)); /* <=== com.amazonaws.services.dataexchange.model.DataSetEntry.withEntryName */ \n        entries.add(new DataSetEntry().withEntryName(\"phoneNumber\").withContent(phoneNumber));\n        entries.add(new DataSetEntry().withEntryName(\"dob\").withContent(dob));\n\n        // Import the asset\n        ImportAssetFromSignedUrlRequest importAssetRequest = new ImportAssetFromSignedUrlRequest()"
                  },
                  {
                    "sample" : "withContent(lastName)",
                    "lineNumber" : 31,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        String revisionArn = dataExchangeClient.createRevision(createRevisionRequest).getArn();\n\n        // Prepare the asset\n        List<DataSetEntry> entries = new ArrayList<>();\n        entries.add(new DataSetEntry().withEntryName(\"firstName\").withContent(firstName));\n        entries.add(new DataSetEntry().withEntryName(\"lastName\").withContent(lastName)); /* <===  */ \n        entries.add(new DataSetEntry().withEntryName(\"phoneNumber\").withContent(phoneNumber));\n        entries.add(new DataSetEntry().withEntryName(\"dob\").withContent(dob));\n\n        // Import the asset\n        ImportAssetFromSignedUrlRequest importAssetRequest = new ImportAssetFromSignedUrlRequest()"
                  },
                  {
                    "sample" : "entries",
                    "lineNumber" : 31,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        String revisionArn = dataExchangeClient.createRevision(createRevisionRequest).getArn();\n\n        // Prepare the asset\n        List<DataSetEntry> entries = new ArrayList<>();\n        entries.add(new DataSetEntry().withEntryName(\"firstName\").withContent(firstName));\n        entries.add(new DataSetEntry().withEntryName(\"lastName\").withContent(lastName)); /* <=== ANY */ \n        entries.add(new DataSetEntry().withEntryName(\"phoneNumber\").withContent(phoneNumber));\n        entries.add(new DataSetEntry().withEntryName(\"dob\").withContent(dob));\n\n        // Import the asset\n        ImportAssetFromSignedUrlRequest importAssetRequest = new ImportAssetFromSignedUrlRequest()"
                  },
                  {
                    "sample" : "entries",
                    "lineNumber" : 32,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "\n        // Prepare the asset\n        List<DataSetEntry> entries = new ArrayList<>();\n        entries.add(new DataSetEntry().withEntryName(\"firstName\").withContent(firstName));\n        entries.add(new DataSetEntry().withEntryName(\"lastName\").withContent(lastName));\n        entries.add(new DataSetEntry().withEntryName(\"phoneNumber\").withContent(phoneNumber)); /* <=== ANY */ \n        entries.add(new DataSetEntry().withEntryName(\"dob\").withContent(dob));\n\n        // Import the asset\n        ImportAssetFromSignedUrlRequest importAssetRequest = new ImportAssetFromSignedUrlRequest()\n                .withDataSetId(dataSetId)"
                  },
                  {
                    "sample" : "entries",
                    "lineNumber" : 33,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        // Prepare the asset\n        List<DataSetEntry> entries = new ArrayList<>();\n        entries.add(new DataSetEntry().withEntryName(\"firstName\").withContent(firstName));\n        entries.add(new DataSetEntry().withEntryName(\"lastName\").withContent(lastName));\n        entries.add(new DataSetEntry().withEntryName(\"phoneNumber\").withContent(phoneNumber));\n        entries.add(new DataSetEntry().withEntryName(\"dob\").withContent(dob)); /* <=== ANY */ \n\n        // Import the asset\n        ImportAssetFromSignedUrlRequest importAssetRequest = new ImportAssetFromSignedUrlRequest()\n                .withDataSetId(dataSetId)\n                .withRevisionId(revisionId)"
                  },
                  {
                    "sample" : "entries",
                    "lineNumber" : 40,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        // Import the asset\n        ImportAssetFromSignedUrlRequest importAssetRequest = new ImportAssetFromSignedUrlRequest()\n                .withDataSetId(dataSetId)\n                .withRevisionId(revisionId)\n                .withAssetName(assetName)\n                .withEntries(entries); /* <=== ANY */ \n        dataExchangeClient.importAssetFromSignedUrl(importAssetRequest);\n    }\n}\n"
                  },
                  {
                    "sample" : "withAssetName(assetName)",
                    "lineNumber" : 36,
                    "columnNumber" : 62,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        entries.add(new DataSetEntry().withEntryName(\"lastName\").withContent(lastName));\n        entries.add(new DataSetEntry().withEntryName(\"phoneNumber\").withContent(phoneNumber));\n        entries.add(new DataSetEntry().withEntryName(\"dob\").withContent(dob));\n\n        // Import the asset\n        ImportAssetFromSignedUrlRequest importAssetRequest = new ImportAssetFromSignedUrlRequest() /* <===  */ \n                .withDataSetId(dataSetId)\n                .withRevisionId(revisionId)\n                .withAssetName(assetName)\n                .withEntries(entries);\n        dataExchangeClient.importAssetFromSignedUrl(importAssetRequest);"
                  },
                  {
                    "sample" : "withEntries(entries)",
                    "lineNumber" : 36,
                    "columnNumber" : 62,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        entries.add(new DataSetEntry().withEntryName(\"lastName\").withContent(lastName));\n        entries.add(new DataSetEntry().withEntryName(\"phoneNumber\").withContent(phoneNumber));\n        entries.add(new DataSetEntry().withEntryName(\"dob\").withContent(dob));\n\n        // Import the asset\n        ImportAssetFromSignedUrlRequest importAssetRequest = new ImportAssetFromSignedUrlRequest() /* <===  */ \n                .withDataSetId(dataSetId)\n                .withRevisionId(revisionId)\n                .withAssetName(assetName)\n                .withEntries(entries);\n        dataExchangeClient.importAssetFromSignedUrl(importAssetRequest);"
                  },
                  {
                    "sample" : "importAssetRequest",
                    "lineNumber" : 36,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        entries.add(new DataSetEntry().withEntryName(\"lastName\").withContent(lastName));\n        entries.add(new DataSetEntry().withEntryName(\"phoneNumber\").withContent(phoneNumber));\n        entries.add(new DataSetEntry().withEntryName(\"dob\").withContent(dob));\n\n        // Import the asset\n        ImportAssetFromSignedUrlRequest importAssetRequest = new ImportAssetFromSignedUrlRequest() /* <=== com.amazonaws.services.dataexchange.model.ImportAssetFromSignedUrlRequest */ \n                .withDataSetId(dataSetId)\n                .withRevisionId(revisionId)\n                .withAssetName(assetName)\n                .withEntries(entries);\n        dataExchangeClient.importAssetFromSignedUrl(importAssetRequest);"
                  },
                  {
                    "sample" : "importAssetFromSignedUrl(importAssetRequest)",
                    "lineNumber" : 41,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        ImportAssetFromSignedUrlRequest importAssetRequest = new ImportAssetFromSignedUrlRequest()\n                .withDataSetId(dataSetId)\n                .withRevisionId(revisionId)\n                .withAssetName(assetName)\n                .withEntries(entries);\n        dataExchangeClient.importAssetFromSignedUrl(importAssetRequest); /* <=== com.amazonaws.services.dataexchange.AmazonDataExchange.importAssetFromSignedUrl */ \n    }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "13319-13317",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 17,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/marketplacemetering.java",
                    "excerpt" : "    client = AmazonMarketplaceMeteringClient.builder().build();\n\n    // Build the MeterUsageRequest with personal data such as first name, last name, phone number, DOB.\n    MeterUsageRequest request = new MeterUsageRequest();\n    request.setProductCode(firstName);\n    request.setTimestamp(lastName); /* <=== java.lang.String */ \n    request.setUsageDimension(phoneNumber);\n    request.setUsageQuantity(dob);\n\n    // Call the meterUsage method of the AmazonMarketplaceMeteringClient to send the data.\n    client.meterUsage(request);"
                  },
                  {
                    "sample" : "setTimestamp(lastName)",
                    "lineNumber" : 17,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/marketplacemetering.java",
                    "excerpt" : "    client = AmazonMarketplaceMeteringClient.builder().build();\n\n    // Build the MeterUsageRequest with personal data such as first name, last name, phone number, DOB.\n    MeterUsageRequest request = new MeterUsageRequest();\n    request.setProductCode(firstName);\n    request.setTimestamp(lastName); /* <=== com.amazonaws.services.marketplacemetering.model.MeterUsageRequest.setTimestamp */ \n    request.setUsageDimension(phoneNumber);\n    request.setUsageQuantity(dob);\n\n    // Call the meterUsage method of the AmazonMarketplaceMeteringClient to send the data.\n    client.meterUsage(request);"
                  }
                ]
              },
              {
                "pathId" : "7757-7744",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 18,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/ebs.java",
                    "excerpt" : "\npublic void AWSEBSProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n    \n    CreateSnapshotRequest createSnapshotRequest = new CreateSnapshotRequest()\n            .withVolumeId(firstName + \"_\" + lastName + \"_Volume\") /* <=== java.lang.String */ \n            .withTagSpecifications(new Tag().withKey(\"PersonalData\").withValue(personalData.toString()));\n    \n    client.createSnapshot(createSnapshotRequest);\n}\n}"
                  },
                  {
                    "sample" : "withVolumeId(firstName + \"_\" + lastName + \"_Volume\")",
                    "lineNumber" : 17,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/ebs.java",
                    "excerpt" : "}\n\npublic void AWSEBSProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n    \n    CreateSnapshotRequest createSnapshotRequest = new CreateSnapshotRequest() /* <=== com.amazonaws.services.ebs.model.CreateSnapshotRequest.withVolumeId */ \n            .withVolumeId(firstName + \"_\" + lastName + \"_Volume\")\n            .withTagSpecifications(new Tag().withKey(\"PersonalData\").withValue(personalData.toString()));\n    \n    client.createSnapshot(createSnapshotRequest);\n}"
                  }
                ]
              },
              {
                "pathId" : "9862-9859",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 12,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/devOpsGuru.java",
                    "excerpt" : "    public static void AWSDevOpsGuruFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        DevOpsGuruClient devOpsGuruClient = DevOpsGuruClient.builder().build();\n        Event event = new Event();\n        event.setName(\"PersonalDataEvent\");\n        event.addDetail(\"FirstName\", firstName);\n        event.addDetail(\"LastName\", lastName); /* <=== java.lang.String */ \n        event.addDetail(\"PhoneNumber\", phoneNumber);\n        event.addDetail(\"DOB\", DOB);\n        PutEventRequest request = new PutEventRequest().withEvent(event);\n        devOpsGuruClient.putEvent(request);\n    }"
                  },
                  {
                    "sample" : "addDetail(\"LastName\", lastName)",
                    "lineNumber" : 12,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/devOpsGuru.java",
                    "excerpt" : "    public static void AWSDevOpsGuruFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        DevOpsGuruClient devOpsGuruClient = DevOpsGuruClient.builder().build();\n        Event event = new Event();\n        event.setName(\"PersonalDataEvent\");\n        event.addDetail(\"FirstName\", firstName);\n        event.addDetail(\"LastName\", lastName); /* <=== com.amazonaws.services.devopsguru.model.Event.addDetail */ \n        event.addDetail(\"PhoneNumber\", phoneNumber);\n        event.addDetail(\"DOB\", DOB);\n        PutEventRequest request = new PutEventRequest().withEvent(event);\n        devOpsGuruClient.putEvent(request);\n    }"
                  }
                ]
              },
              {
                "pathId" : "14831-14829-14820-14819-14818-14835",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 15,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/route53.java",
                    "excerpt" : "  public static void processData(String firstName, String lastName, String phoneNumber, String dob) {\n    try {\n      // Create a new hosted zone in Route 53\n      CreateHostedZoneRequest createHostedZoneRequest = new CreateHostedZoneRequest()\n        .withName(\"example.com\")\n        .withCallerReference(firstName + lastName); /* <=== java.lang.String */ \n      CreateHostedZoneResult createHostedZoneResult = client.createHostedZone(createHostedZoneRequest);\n      \n      // Use the hosted zone to process personal data\n      // ...\n    } catch (Exception e) {"
                  },
                  {
                    "sample" : "firstName + lastName",
                    "lineNumber" : 15,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/route53.java",
                    "excerpt" : "  public static void processData(String firstName, String lastName, String phoneNumber, String dob) {\n    try {\n      // Create a new hosted zone in Route 53\n      CreateHostedZoneRequest createHostedZoneRequest = new CreateHostedZoneRequest()\n        .withName(\"example.com\")\n        .withCallerReference(firstName + lastName); /* <===  */ \n      CreateHostedZoneResult createHostedZoneResult = client.createHostedZone(createHostedZoneRequest);\n      \n      // Use the hosted zone to process personal data\n      // ...\n    } catch (Exception e) {"
                  },
                  {
                    "sample" : "withName(\"example.com\")",
                    "lineNumber" : 13,
                    "columnNumber" : 57,
                    "fileName" : "/app/code/route53.java",
                    "excerpt" : "  private static AmazonRoute53 client = AmazonRoute53ClientBuilder.defaultClient();\n  \n  public static void processData(String firstName, String lastName, String phoneNumber, String dob) {\n    try {\n      // Create a new hosted zone in Route 53\n      CreateHostedZoneRequest createHostedZoneRequest = new CreateHostedZoneRequest() /* <=== com.amazonaws.services.route53.model.CreateHostedZoneRequest.withName */ \n        .withName(\"example.com\")\n        .withCallerReference(firstName + lastName);\n      CreateHostedZoneResult createHostedZoneResult = client.createHostedZone(createHostedZoneRequest);\n      \n      // Use the hosted zone to process personal data"
                  },
                  {
                    "sample" : "withCallerReference(firstName + lastName)",
                    "lineNumber" : 13,
                    "columnNumber" : 57,
                    "fileName" : "/app/code/route53.java",
                    "excerpt" : "  private static AmazonRoute53 client = AmazonRoute53ClientBuilder.defaultClient();\n  \n  public static void processData(String firstName, String lastName, String phoneNumber, String dob) {\n    try {\n      // Create a new hosted zone in Route 53\n      CreateHostedZoneRequest createHostedZoneRequest = new CreateHostedZoneRequest() /* <===  */ \n        .withName(\"example.com\")\n        .withCallerReference(firstName + lastName);\n      CreateHostedZoneResult createHostedZoneResult = client.createHostedZone(createHostedZoneRequest);\n      \n      // Use the hosted zone to process personal data"
                  },
                  {
                    "sample" : "createHostedZoneRequest",
                    "lineNumber" : 13,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/route53.java",
                    "excerpt" : "  private static AmazonRoute53 client = AmazonRoute53ClientBuilder.defaultClient();\n  \n  public static void processData(String firstName, String lastName, String phoneNumber, String dob) {\n    try {\n      // Create a new hosted zone in Route 53\n      CreateHostedZoneRequest createHostedZoneRequest = new CreateHostedZoneRequest() /* <=== com.amazonaws.services.route53.model.CreateHostedZoneRequest */ \n        .withName(\"example.com\")\n        .withCallerReference(firstName + lastName);\n      CreateHostedZoneResult createHostedZoneResult = client.createHostedZone(createHostedZoneRequest);\n      \n      // Use the hosted zone to process personal data"
                  },
                  {
                    "sample" : "createHostedZone(createHostedZoneRequest)",
                    "lineNumber" : 16,
                    "columnNumber" : 55,
                    "fileName" : "/app/code/route53.java",
                    "excerpt" : "    try {\n      // Create a new hosted zone in Route 53\n      CreateHostedZoneRequest createHostedZoneRequest = new CreateHostedZoneRequest()\n        .withName(\"example.com\")\n        .withCallerReference(firstName + lastName);\n      CreateHostedZoneResult createHostedZoneResult = client.createHostedZone(createHostedZoneRequest); /* <=== com.amazonaws.services.route53.AmazonRoute53.createHostedZone */ \n      \n      // Use the hosted zone to process personal data\n      // ...\n    } catch (Exception e) {\n      System.err.println(\"Error processing personal data: \" + e.getMessage());"
                  }
                ]
              },
              {
                "pathId" : "3363-3357-3348-3347-3346-3345-3344-3375-3374-3373-3372-3380",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 12,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/deviceFarm.java",
                    "excerpt" : "    public static void AWSDevicefarmFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        com.amazonaws.services.devicefarm.AWSDeviceFarm client = AWSDeviceFarmClientBuilder.defaultClient();\n\n        CreateUploadRequest createUploadRequest = new CreateUploadRequest()\n            .withProjectArn(\"<ProjectARN>\")\n            .withName(firstName + \"-\" + lastName + \"-\" + phoneNumber) /* <=== java.lang.String */ \n            .withType(UploadType.ANDROID_APP)\n            .withContentType(\"application/octet-stream\");\n\n        CreateUploadResult createUploadResult = client.createUpload(createUploadRequest);\n        String uploadUrl = createUploadResult.getUpload().getUrl();"
                  },
                  {
                    "sample" : "firstName + \"-\" + lastName + \"-\" + phoneNumber",
                    "lineNumber" : 12,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/deviceFarm.java",
                    "excerpt" : "    public static void AWSDevicefarmFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        com.amazonaws.services.devicefarm.AWSDeviceFarm client = AWSDeviceFarmClientBuilder.defaultClient();\n\n        CreateUploadRequest createUploadRequest = new CreateUploadRequest()\n            .withProjectArn(\"<ProjectARN>\")\n            .withName(firstName + \"-\" + lastName + \"-\" + phoneNumber) /* <===  */ \n            .withType(UploadType.ANDROID_APP)\n            .withContentType(\"application/octet-stream\");\n\n        CreateUploadResult createUploadResult = client.createUpload(createUploadRequest);\n        String uploadUrl = createUploadResult.getUpload().getUrl();"
                  },
                  {
                    "sample" : "withProjectArn(\"<ProjectARN>\")",
                    "lineNumber" : 10,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/deviceFarm.java",
                    "excerpt" : "\npublic class AWSDevicefarmUtil {\n    public static void AWSDevicefarmFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        com.amazonaws.services.devicefarm.AWSDeviceFarm client = AWSDeviceFarmClientBuilder.defaultClient();\n\n        CreateUploadRequest createUploadRequest = new CreateUploadRequest() /* <=== com.amazonaws.services.devicefarm.model.CreateUploadRequest.withProjectArn */ \n            .withProjectArn(\"<ProjectARN>\")\n            .withName(firstName + \"-\" + lastName + \"-\" + phoneNumber)\n            .withType(UploadType.ANDROID_APP)\n            .withContentType(\"application/octet-stream\");\n"
                  },
                  {
                    "sample" : "withName(firstName + \"-\" + lastName + \"-\" + phoneNumber)",
                    "lineNumber" : 10,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/deviceFarm.java",
                    "excerpt" : "\npublic class AWSDevicefarmUtil {\n    public static void AWSDevicefarmFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        com.amazonaws.services.devicefarm.AWSDeviceFarm client = AWSDeviceFarmClientBuilder.defaultClient();\n\n        CreateUploadRequest createUploadRequest = new CreateUploadRequest() /* <===  */ \n            .withProjectArn(\"<ProjectARN>\")\n            .withName(firstName + \"-\" + lastName + \"-\" + phoneNumber)\n            .withType(UploadType.ANDROID_APP)\n            .withContentType(\"application/octet-stream\");\n"
                  },
                  {
                    "sample" : "withType(UploadType.ANDROID_APP)",
                    "lineNumber" : 10,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/deviceFarm.java",
                    "excerpt" : "\npublic class AWSDevicefarmUtil {\n    public static void AWSDevicefarmFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        com.amazonaws.services.devicefarm.AWSDeviceFarm client = AWSDeviceFarmClientBuilder.defaultClient();\n\n        CreateUploadRequest createUploadRequest = new CreateUploadRequest() /* <===  */ \n            .withProjectArn(\"<ProjectARN>\")\n            .withName(firstName + \"-\" + lastName + \"-\" + phoneNumber)\n            .withType(UploadType.ANDROID_APP)\n            .withContentType(\"application/octet-stream\");\n"
                  },
                  {
                    "sample" : "withContentType(\"application/octet-stream\")",
                    "lineNumber" : 10,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/deviceFarm.java",
                    "excerpt" : "\npublic class AWSDevicefarmUtil {\n    public static void AWSDevicefarmFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        com.amazonaws.services.devicefarm.AWSDeviceFarm client = AWSDeviceFarmClientBuilder.defaultClient();\n\n        CreateUploadRequest createUploadRequest = new CreateUploadRequest() /* <===  */ \n            .withProjectArn(\"<ProjectARN>\")\n            .withName(firstName + \"-\" + lastName + \"-\" + phoneNumber)\n            .withType(UploadType.ANDROID_APP)\n            .withContentType(\"application/octet-stream\");\n"
                  },
                  {
                    "sample" : "createUploadRequest",
                    "lineNumber" : 10,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/deviceFarm.java",
                    "excerpt" : "\npublic class AWSDevicefarmUtil {\n    public static void AWSDevicefarmFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        com.amazonaws.services.devicefarm.AWSDeviceFarm client = AWSDeviceFarmClientBuilder.defaultClient();\n\n        CreateUploadRequest createUploadRequest = new CreateUploadRequest() /* <=== com.amazonaws.services.devicefarm.model.CreateUploadRequest */ \n            .withProjectArn(\"<ProjectARN>\")\n            .withName(firstName + \"-\" + lastName + \"-\" + phoneNumber)\n            .withType(UploadType.ANDROID_APP)\n            .withContentType(\"application/octet-stream\");\n"
                  },
                  {
                    "sample" : "createUploadRequest",
                    "lineNumber" : 16,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/deviceFarm.java",
                    "excerpt" : "            .withProjectArn(\"<ProjectARN>\")\n            .withName(firstName + \"-\" + lastName + \"-\" + phoneNumber)\n            .withType(UploadType.ANDROID_APP)\n            .withContentType(\"application/octet-stream\");\n\n        CreateUploadResult createUploadResult = client.createUpload(createUploadRequest); /* <=== com.amazonaws.services.devicefarm.model.CreateUploadRequest */ \n        String uploadUrl = createUploadResult.getUpload().getUrl();\n\n        // Store the personal data in a suitable format, for example in a JSON file.\n        String personalData = \"{ \\\"firstName\\\": \\\"\" + firstName + \"\\\", \" +\n                              \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +"
                  },
                  {
                    "sample" : "client",
                    "lineNumber" : 16,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/deviceFarm.java",
                    "excerpt" : "            .withProjectArn(\"<ProjectARN>\")\n            .withName(firstName + \"-\" + lastName + \"-\" + phoneNumber)\n            .withType(UploadType.ANDROID_APP)\n            .withContentType(\"application/octet-stream\");\n\n        CreateUploadResult createUploadResult = client.createUpload(createUploadRequest); /* <=== ANY */ \n        String uploadUrl = createUploadResult.getUpload().getUrl();\n\n        // Store the personal data in a suitable format, for example in a JSON file.\n        String personalData = \"{ \\\"firstName\\\": \\\"\" + firstName + \"\\\", \" +\n                              \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +"
                  },
                  {
                    "sample" : "createUpload(createUploadRequest)",
                    "lineNumber" : 16,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/deviceFarm.java",
                    "excerpt" : "            .withProjectArn(\"<ProjectARN>\")\n            .withName(firstName + \"-\" + lastName + \"-\" + phoneNumber)\n            .withType(UploadType.ANDROID_APP)\n            .withContentType(\"application/octet-stream\");\n\n        CreateUploadResult createUploadResult = client.createUpload(createUploadRequest); /* <=== ANY.createUpload */ \n        String uploadUrl = createUploadResult.getUpload().getUrl();\n\n        // Store the personal data in a suitable format, for example in a JSON file.\n        String personalData = \"{ \\\"firstName\\\": \\\"\" + firstName + \"\\\", \" +\n                              \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +"
                  },
                  {
                    "sample" : "createUploadResult",
                    "lineNumber" : 16,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/deviceFarm.java",
                    "excerpt" : "            .withProjectArn(\"<ProjectARN>\")\n            .withName(firstName + \"-\" + lastName + \"-\" + phoneNumber)\n            .withType(UploadType.ANDROID_APP)\n            .withContentType(\"application/octet-stream\");\n\n        CreateUploadResult createUploadResult = client.createUpload(createUploadRequest); /* <=== com.amazonaws.services.devicefarm.model.CreateUploadResult */ \n        String uploadUrl = createUploadResult.getUpload().getUrl();\n\n        // Store the personal data in a suitable format, for example in a JSON file.\n        String personalData = \"{ \\\"firstName\\\": \\\"\" + firstName + \"\\\", \" +\n                              \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +"
                  },
                  {
                    "sample" : "getUpload()",
                    "lineNumber" : 17,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/deviceFarm.java",
                    "excerpt" : "            .withName(firstName + \"-\" + lastName + \"-\" + phoneNumber)\n            .withType(UploadType.ANDROID_APP)\n            .withContentType(\"application/octet-stream\");\n\n        CreateUploadResult createUploadResult = client.createUpload(createUploadRequest);\n        String uploadUrl = createUploadResult.getUpload().getUrl(); /* <=== com.amazonaws.services.devicefarm.model.CreateUploadResult.getUpload */ \n\n        // Store the personal data in a suitable format, for example in a JSON file.\n        String personalData = \"{ \\\"firstName\\\": \\\"\" + firstName + \"\\\", \" +\n                              \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +\n                              \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +"
                  }
                ]
              },
              {
                "pathId" : "6438-6430-6429-6416-6415-6462",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 13,
                    "columnNumber" : 102,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : "\n    public static void AWSlexmodelsv2FirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AmazonLexModelBuilding client = AmazonLexModelBuildingClientBuilder.standard().build();\n        SlotTypeMetadata metadata = new SlotTypeMetadata().withName(\"PersonalDataSlot\").withDescription(\"Personal data slot\");\n        SlotTypeProperties properties = new SlotTypeProperties().withEnumerationValues(\n                new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB) /* <=== java.lang.String */ \n        );\n        PutSlotTypeRequest request = new PutSlotTypeRequest().withName(\"PersonalDataSlot\").withChecksum(null)\n                .withDescription(\"Personal data slot\").withEnumerationValues(properties.getEnumerationValues())\n                .withSlotTypeMetadata(metadata);\n        client.putSlotType(request);"
                  },
                  {
                    "sample" : "firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB",
                    "lineNumber" : 13,
                    "columnNumber" : 84,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : "\n    public static void AWSlexmodelsv2FirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AmazonLexModelBuilding client = AmazonLexModelBuildingClientBuilder.standard().build();\n        SlotTypeMetadata metadata = new SlotTypeMetadata().withName(\"PersonalDataSlot\").withDescription(\"Personal data slot\");\n        SlotTypeProperties properties = new SlotTypeProperties().withEnumerationValues(\n                new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB) /* <===  */ \n        );\n        PutSlotTypeRequest request = new PutSlotTypeRequest().withName(\"PersonalDataSlot\").withChecksum(null)\n                .withDescription(\"Personal data slot\").withEnumerationValues(properties.getEnumerationValues())\n                .withSlotTypeMetadata(metadata);\n        client.putSlotType(request);"
                  },
                  {
                    "sample" : "$obj1",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "withEnumerationValues(new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB))",
                    "lineNumber" : 12,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : "public class AWSLexModelsV2Util {\n\n    public static void AWSlexmodelsv2FirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AmazonLexModelBuilding client = AmazonLexModelBuildingClientBuilder.standard().build();\n        SlotTypeMetadata metadata = new SlotTypeMetadata().withName(\"PersonalDataSlot\").withDescription(\"Personal data slot\");\n        SlotTypeProperties properties = new SlotTypeProperties().withEnumerationValues( /* <=== com.amazonaws.services.lexmodelbuilding.model.SlotTypeProperties.withEnumerationValues */ \n                new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB)\n        );\n        PutSlotTypeRequest request = new PutSlotTypeRequest().withName(\"PersonalDataSlot\").withChecksum(null)\n                .withDescription(\"Personal data slot\").withEnumerationValues(properties.getEnumerationValues())\n                .withSlotTypeMetadata(metadata);"
                  },
                  {
                    "sample" : "properties",
                    "lineNumber" : 12,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : "public class AWSLexModelsV2Util {\n\n    public static void AWSlexmodelsv2FirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AmazonLexModelBuilding client = AmazonLexModelBuildingClientBuilder.standard().build();\n        SlotTypeMetadata metadata = new SlotTypeMetadata().withName(\"PersonalDataSlot\").withDescription(\"Personal data slot\");\n        SlotTypeProperties properties = new SlotTypeProperties().withEnumerationValues( /* <=== com.amazonaws.services.lexmodelbuilding.model.SlotTypeProperties */ \n                new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB)\n        );\n        PutSlotTypeRequest request = new PutSlotTypeRequest().withName(\"PersonalDataSlot\").withChecksum(null)\n                .withDescription(\"Personal data slot\").withEnumerationValues(properties.getEnumerationValues())\n                .withSlotTypeMetadata(metadata);"
                  },
                  {
                    "sample" : "getEnumerationValues()",
                    "lineNumber" : 16,
                    "columnNumber" : 78,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : "        SlotTypeMetadata metadata = new SlotTypeMetadata().withName(\"PersonalDataSlot\").withDescription(\"Personal data slot\");\n        SlotTypeProperties properties = new SlotTypeProperties().withEnumerationValues(\n                new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB)\n        );\n        PutSlotTypeRequest request = new PutSlotTypeRequest().withName(\"PersonalDataSlot\").withChecksum(null)\n                .withDescription(\"Personal data slot\").withEnumerationValues(properties.getEnumerationValues()) /* <=== com.amazonaws.services.lexmodelbuilding.model.SlotTypeProperties.getEnumerationValues */ \n                .withSlotTypeMetadata(metadata);\n        client.putSlotType(request);\n    }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "13861-13852-13851-13850-13849-13863",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 13,
                    "columnNumber" : 75,
                    "fileName" : "/app/code/simpleSystemManagement.java",
                    "excerpt" : "    String parameterName = \"/personalData/firstName\";\n    PutParameterRequest request = new PutParameterRequest().withName(parameterName).withValue(firstName).withType(\"String\");\n    ssmClient.putParameter(request);\n    \n    parameterName = \"/personalData/lastName\";\n    request = new PutParameterRequest().withName(parameterName).withValue(lastName).withType(\"String\"); /* <=== java.lang.String */ \n    ssmClient.putParameter(request);\n    \n    parameterName = \"/personalData/phoneNumber\";\n    request = new PutParameterRequest().withName(parameterName).withValue(phoneNumber).withType(\"String\");\n    ssmClient.putParameter(request);"
                  },
                  {
                    "sample" : "withName(parameterName)",
                    "lineNumber" : 13,
                    "columnNumber" : 15,
                    "fileName" : "/app/code/simpleSystemManagement.java",
                    "excerpt" : "    String parameterName = \"/personalData/firstName\";\n    PutParameterRequest request = new PutParameterRequest().withName(parameterName).withValue(firstName).withType(\"String\");\n    ssmClient.putParameter(request);\n    \n    parameterName = \"/personalData/lastName\";\n    request = new PutParameterRequest().withName(parameterName).withValue(lastName).withType(\"String\"); /* <=== com.amazonaws.services.simplesystemsmanagement.model.PutParameterRequest.withName */ \n    ssmClient.putParameter(request);\n    \n    parameterName = \"/personalData/phoneNumber\";\n    request = new PutParameterRequest().withName(parameterName).withValue(phoneNumber).withType(\"String\");\n    ssmClient.putParameter(request);"
                  },
                  {
                    "sample" : "withValue(lastName)",
                    "lineNumber" : 13,
                    "columnNumber" : 15,
                    "fileName" : "/app/code/simpleSystemManagement.java",
                    "excerpt" : "    String parameterName = \"/personalData/firstName\";\n    PutParameterRequest request = new PutParameterRequest().withName(parameterName).withValue(firstName).withType(\"String\");\n    ssmClient.putParameter(request);\n    \n    parameterName = \"/personalData/lastName\";\n    request = new PutParameterRequest().withName(parameterName).withValue(lastName).withType(\"String\"); /* <===  */ \n    ssmClient.putParameter(request);\n    \n    parameterName = \"/personalData/phoneNumber\";\n    request = new PutParameterRequest().withName(parameterName).withValue(phoneNumber).withType(\"String\");\n    ssmClient.putParameter(request);"
                  },
                  {
                    "sample" : "withType(\"String\")",
                    "lineNumber" : 13,
                    "columnNumber" : 15,
                    "fileName" : "/app/code/simpleSystemManagement.java",
                    "excerpt" : "    String parameterName = \"/personalData/firstName\";\n    PutParameterRequest request = new PutParameterRequest().withName(parameterName).withValue(firstName).withType(\"String\");\n    ssmClient.putParameter(request);\n    \n    parameterName = \"/personalData/lastName\";\n    request = new PutParameterRequest().withName(parameterName).withValue(lastName).withType(\"String\"); /* <===  */ \n    ssmClient.putParameter(request);\n    \n    parameterName = \"/personalData/phoneNumber\";\n    request = new PutParameterRequest().withName(parameterName).withValue(phoneNumber).withType(\"String\");\n    ssmClient.putParameter(request);"
                  },
                  {
                    "sample" : "request",
                    "lineNumber" : 13,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/simpleSystemManagement.java",
                    "excerpt" : "    String parameterName = \"/personalData/firstName\";\n    PutParameterRequest request = new PutParameterRequest().withName(parameterName).withValue(firstName).withType(\"String\");\n    ssmClient.putParameter(request);\n    \n    parameterName = \"/personalData/lastName\";\n    request = new PutParameterRequest().withName(parameterName).withValue(lastName).withType(\"String\"); /* <=== com.amazonaws.services.simplesystemsmanagement.model.PutParameterRequest */ \n    ssmClient.putParameter(request);\n    \n    parameterName = \"/personalData/phoneNumber\";\n    request = new PutParameterRequest().withName(parameterName).withValue(phoneNumber).withType(\"String\");\n    ssmClient.putParameter(request);"
                  },
                  {
                    "sample" : "putParameter(request)",
                    "lineNumber" : 14,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/simpleSystemManagement.java",
                    "excerpt" : "    PutParameterRequest request = new PutParameterRequest().withName(parameterName).withValue(firstName).withType(\"String\");\n    ssmClient.putParameter(request);\n    \n    parameterName = \"/personalData/lastName\";\n    request = new PutParameterRequest().withName(parameterName).withValue(lastName).withType(\"String\");\n    ssmClient.putParameter(request); /* <=== com.amazonaws.services.simplesystemsmanagement.AWSSimpleSystemsManagement.putParameter */ \n    \n    parameterName = \"/personalData/phoneNumber\";\n    request = new PutParameterRequest().withName(parameterName).withValue(phoneNumber).withType(\"String\");\n    ssmClient.putParameter(request);\n    "
                  }
                ]
              },
              {
                "pathId" : "16315-16306-16305-16304-16303-16302-16318",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 11,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/amplifyUIBuilder.java",
                    "excerpt" : "    public void AWSAmplifyUIBuilderFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AmplifyUIBuilder amplifyUIBuilder = new AmplifyUIBuilder();\n\n        CreateUserRequest createUserRequest = new CreateUserRequest()\n                .withFirstName(firstName)\n                .withLastName(lastName) /* <=== java.lang.String */ \n                .withPhoneNumber(phoneNumber)\n                .withDOB(DOB);\n\n        amplifyUIBuilder.createUser(createUserRequest);\n    }"
                  },
                  {
                    "sample" : "withFirstName(firstName)",
                    "lineNumber" : 9,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/amplifyUIBuilder.java",
                    "excerpt" : "public class AWSAmplifyUIBuilderUtil {\n\n    public void AWSAmplifyUIBuilderFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AmplifyUIBuilder amplifyUIBuilder = new AmplifyUIBuilder();\n\n        CreateUserRequest createUserRequest = new CreateUserRequest() /* <=== com.amazonaws.services.amplifyuibuilder.model.CreateUserRequest.withFirstName */ \n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber)\n                .withDOB(DOB);\n"
                  },
                  {
                    "sample" : "withLastName(lastName)",
                    "lineNumber" : 9,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/amplifyUIBuilder.java",
                    "excerpt" : "public class AWSAmplifyUIBuilderUtil {\n\n    public void AWSAmplifyUIBuilderFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AmplifyUIBuilder amplifyUIBuilder = new AmplifyUIBuilder();\n\n        CreateUserRequest createUserRequest = new CreateUserRequest() /* <===  */ \n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber)\n                .withDOB(DOB);\n"
                  },
                  {
                    "sample" : "withPhoneNumber(phoneNumber)",
                    "lineNumber" : 9,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/amplifyUIBuilder.java",
                    "excerpt" : "public class AWSAmplifyUIBuilderUtil {\n\n    public void AWSAmplifyUIBuilderFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AmplifyUIBuilder amplifyUIBuilder = new AmplifyUIBuilder();\n\n        CreateUserRequest createUserRequest = new CreateUserRequest() /* <===  */ \n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber)\n                .withDOB(DOB);\n"
                  },
                  {
                    "sample" : "withDOB(DOB)",
                    "lineNumber" : 9,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/amplifyUIBuilder.java",
                    "excerpt" : "public class AWSAmplifyUIBuilderUtil {\n\n    public void AWSAmplifyUIBuilderFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AmplifyUIBuilder amplifyUIBuilder = new AmplifyUIBuilder();\n\n        CreateUserRequest createUserRequest = new CreateUserRequest() /* <===  */ \n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber)\n                .withDOB(DOB);\n"
                  },
                  {
                    "sample" : "createUserRequest",
                    "lineNumber" : 9,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/amplifyUIBuilder.java",
                    "excerpt" : "public class AWSAmplifyUIBuilderUtil {\n\n    public void AWSAmplifyUIBuilderFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AmplifyUIBuilder amplifyUIBuilder = new AmplifyUIBuilder();\n\n        CreateUserRequest createUserRequest = new CreateUserRequest() /* <=== com.amazonaws.services.amplifyuibuilder.model.CreateUserRequest */ \n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber)\n                .withDOB(DOB);\n"
                  },
                  {
                    "sample" : "createUser(createUserRequest)",
                    "lineNumber" : 15,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/amplifyUIBuilder.java",
                    "excerpt" : "                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber)\n                .withDOB(DOB);\n\n        amplifyUIBuilder.createUser(createUserRequest); /* <=== com.amazonaws.services.amplifyuibuilder.AmplifyUIBuilder.createUser */ \n    }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "11724-11723-11725-11750-11748-11739-11738-11737-11736-11752",
                "path" : [
                  {
                    "sample" : "\"lastName\"",
                    "lineNumber" : 13,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/mgn.java",
                    "excerpt" : "  public static void AWSMGNFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n    AmazonMGNClient mgnClient = AmazonMGNClient.builder().build();\n    \n    Map<String, String> personalData = new HashMap<>();\n    personalData.put(\"firstName\", firstName);\n    personalData.put(\"lastName\", lastName); /* <===  */ \n    personalData.put(\"phoneNumber\", phoneNumber);\n    personalData.put(\"DOB\", DOB);\n    \n    IndexDocumentRequest indexDocumentRequest = new IndexDocumentRequest()\n        .withIndexName(\"personal-data\")"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 13,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/mgn.java",
                    "excerpt" : "  public static void AWSMGNFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n    AmazonMGNClient mgnClient = AmazonMGNClient.builder().build();\n    \n    Map<String, String> personalData = new HashMap<>();\n    personalData.put(\"firstName\", firstName);\n    personalData.put(\"lastName\", lastName); /* <=== java.util.Map */ \n    personalData.put(\"phoneNumber\", phoneNumber);\n    personalData.put(\"DOB\", DOB);\n    \n    IndexDocumentRequest indexDocumentRequest = new IndexDocumentRequest()\n        .withIndexName(\"personal-data\")"
                  },
                  {
                    "sample" : "lastName",
                    "lineNumber" : 13,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/mgn.java",
                    "excerpt" : "  public static void AWSMGNFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n    AmazonMGNClient mgnClient = AmazonMGNClient.builder().build();\n    \n    Map<String, String> personalData = new HashMap<>();\n    personalData.put(\"firstName\", firstName);\n    personalData.put(\"lastName\", lastName); /* <=== java.lang.String */ \n    personalData.put(\"phoneNumber\", phoneNumber);\n    personalData.put(\"DOB\", DOB);\n    \n    IndexDocumentRequest indexDocumentRequest = new IndexDocumentRequest()\n        .withIndexName(\"personal-data\")"
                  },
                  {
                    "sample" : "lastName",
                    "lineNumber" : 19,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/mgn.java",
                    "excerpt" : "    personalData.put(\"phoneNumber\", phoneNumber);\n    personalData.put(\"DOB\", DOB);\n    \n    IndexDocumentRequest indexDocumentRequest = new IndexDocumentRequest()\n        .withIndexName(\"personal-data\")\n        .withId(firstName + lastName) /* <=== java.lang.String */ \n        .withSource(personalData);\n    \n    mgnClient.indexDocument(indexDocumentRequest);\n  }\n}"
                  },
                  {
                    "sample" : "firstName + lastName",
                    "lineNumber" : 19,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/mgn.java",
                    "excerpt" : "    personalData.put(\"phoneNumber\", phoneNumber);\n    personalData.put(\"DOB\", DOB);\n    \n    IndexDocumentRequest indexDocumentRequest = new IndexDocumentRequest()\n        .withIndexName(\"personal-data\")\n        .withId(firstName + lastName) /* <===  */ \n        .withSource(personalData);\n    \n    mgnClient.indexDocument(indexDocumentRequest);\n  }\n}"
                  },
                  {
                    "sample" : "withIndexName(\"personal-data\")",
                    "lineNumber" : 17,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/mgn.java",
                    "excerpt" : "    personalData.put(\"firstName\", firstName);\n    personalData.put(\"lastName\", lastName);\n    personalData.put(\"phoneNumber\", phoneNumber);\n    personalData.put(\"DOB\", DOB);\n    \n    IndexDocumentRequest indexDocumentRequest = new IndexDocumentRequest() /* <=== com.amazonaws.services.mgn.model.IndexDocumentRequest.withIndexName */ \n        .withIndexName(\"personal-data\")\n        .withId(firstName + lastName)\n        .withSource(personalData);\n    \n    mgnClient.indexDocument(indexDocumentRequest);"
                  },
                  {
                    "sample" : "withId(firstName + lastName)",
                    "lineNumber" : 17,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/mgn.java",
                    "excerpt" : "    personalData.put(\"firstName\", firstName);\n    personalData.put(\"lastName\", lastName);\n    personalData.put(\"phoneNumber\", phoneNumber);\n    personalData.put(\"DOB\", DOB);\n    \n    IndexDocumentRequest indexDocumentRequest = new IndexDocumentRequest() /* <===  */ \n        .withIndexName(\"personal-data\")\n        .withId(firstName + lastName)\n        .withSource(personalData);\n    \n    mgnClient.indexDocument(indexDocumentRequest);"
                  },
                  {
                    "sample" : "withSource(personalData)",
                    "lineNumber" : 17,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/mgn.java",
                    "excerpt" : "    personalData.put(\"firstName\", firstName);\n    personalData.put(\"lastName\", lastName);\n    personalData.put(\"phoneNumber\", phoneNumber);\n    personalData.put(\"DOB\", DOB);\n    \n    IndexDocumentRequest indexDocumentRequest = new IndexDocumentRequest() /* <===  */ \n        .withIndexName(\"personal-data\")\n        .withId(firstName + lastName)\n        .withSource(personalData);\n    \n    mgnClient.indexDocument(indexDocumentRequest);"
                  },
                  {
                    "sample" : "indexDocumentRequest",
                    "lineNumber" : 17,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/mgn.java",
                    "excerpt" : "    personalData.put(\"firstName\", firstName);\n    personalData.put(\"lastName\", lastName);\n    personalData.put(\"phoneNumber\", phoneNumber);\n    personalData.put(\"DOB\", DOB);\n    \n    IndexDocumentRequest indexDocumentRequest = new IndexDocumentRequest() /* <=== com.amazonaws.services.mgn.model.IndexDocumentRequest */ \n        .withIndexName(\"personal-data\")\n        .withId(firstName + lastName)\n        .withSource(personalData);\n    \n    mgnClient.indexDocument(indexDocumentRequest);"
                  },
                  {
                    "sample" : "indexDocument(indexDocumentRequest)",
                    "lineNumber" : 22,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/mgn.java",
                    "excerpt" : "    IndexDocumentRequest indexDocumentRequest = new IndexDocumentRequest()\n        .withIndexName(\"personal-data\")\n        .withId(firstName + lastName)\n        .withSource(personalData);\n    \n    mgnClient.indexDocument(indexDocumentRequest); /* <=== com.amazonaws.services.mgn.AmazonMGNClient.indexDocument */ \n  }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "13495-13482",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 19,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/iotFleetwise.java",
                    "excerpt" : "\npublic void AWSIoTFleetwiseProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nCreateTrackerRequest createTrackerRequest = new CreateTrackerRequest()\n        .withTrackerName(firstName + \"_\" + lastName + \"_Tracker\") /* <=== java.lang.String */ \n        .withAttributePayload(personalData);\n\nCreateTrackerResult result = client.createTracker(createTrackerRequest);\nSystem.out.println(\"Tracker created with ID: \" + result.getTrackerId());\n}"
                  },
                  {
                    "sample" : "withTrackerName(firstName + \"_\" + lastName + \"_Tracker\")",
                    "lineNumber" : 18,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/iotFleetwise.java",
                    "excerpt" : "}\n\npublic void AWSIoTFleetwiseProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nCreateTrackerRequest createTrackerRequest = new CreateTrackerRequest() /* <=== com.amazonaws.services.iotfleetwise.model.CreateTrackerRequest.withTrackerName */ \n        .withTrackerName(firstName + \"_\" + lastName + \"_Tracker\")\n        .withAttributePayload(personalData);\n\nCreateTrackerResult result = client.createTracker(createTrackerRequest);\nSystem.out.println(\"Tracker created with ID: \" + result.getTrackerId());"
                  }
                ]
              },
              {
                "pathId" : "11815-11806",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 16,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/oam.java",
                    "excerpt" : "  }\n\n  public CreateUserResult AWSOAMFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    CreateUserRequest request = new CreateUserRequest()\n      .withFirstName(firstName)\n      .withLastName(lastName) /* <=== java.lang.String */ \n      .withPhoneNumber(phoneNumber)\n      .withDateOfBirth(dob);\n    return oamClient.createUser(request);\n  }\n}"
                  },
                  {
                    "sample" : "withFirstName(firstName)",
                    "lineNumber" : 14,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/oam.java",
                    "excerpt" : "  public AWSOAMUtil(AWSOAM oamClient) {\n    this.oamClient = oamClient;\n  }\n\n  public CreateUserResult AWSOAMFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    CreateUserRequest request = new CreateUserRequest() /* <=== com.amazonaws.services.oam.model.CreateUserRequest.withFirstName */ \n      .withFirstName(firstName)\n      .withLastName(lastName)\n      .withPhoneNumber(phoneNumber)\n      .withDateOfBirth(dob);\n    return oamClient.createUser(request);"
                  }
                ]
              },
              {
                "pathId" : "12013-12002-12001-12034-12033-12024-12023-12022-12021-12036",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 16,
                    "columnNumber" : 77,
                    "fileName" : "/app/code/apiGateway.java",
                    "excerpt" : "swift\nCopy code\n  Map<String, String> headers = new HashMap<>();\n  headers.put(\"Content-Type\", \"application/json\");\n  \n  String body = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \\\"lastName\\\": \\\"\" + lastName + \"\\\", \\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \\\"DOB\\\": \\\"\" + DOB + \"\\\"}\"; /* <=== java.lang.String */ \n \n  PostToConnectionRequest request = new PostToConnectionRequest()\n     .withConnectionId(\"connection-id\")\n     .withData(body.getBytes())\n     .withHeaders(headers);"
                  },
                  {
                    "sample" : "\"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \\\"lastName\\\": \\\"\" + lastName + \"\\\", \\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \\\"DOB\\\": \\\"\" + DOB + \"\\\"}\"",
                    "lineNumber" : 16,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/apiGateway.java",
                    "excerpt" : "swift\nCopy code\n  Map<String, String> headers = new HashMap<>();\n  headers.put(\"Content-Type\", \"application/json\");\n  \n  String body = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \\\"lastName\\\": \\\"\" + lastName + \"\\\", \\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \\\"DOB\\\": \\\"\" + DOB + \"\\\"}\"; /* <===  */ \n \n  PostToConnectionRequest request = new PostToConnectionRequest()\n     .withConnectionId(\"connection-id\")\n     .withData(body.getBytes())\n     .withHeaders(headers);"
                  },
                  {
                    "sample" : "body",
                    "lineNumber" : 16,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/apiGateway.java",
                    "excerpt" : "swift\nCopy code\n  Map<String, String> headers = new HashMap<>();\n  headers.put(\"Content-Type\", \"application/json\");\n  \n  String body = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \\\"lastName\\\": \\\"\" + lastName + \"\\\", \\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \\\"DOB\\\": \\\"\" + DOB + \"\\\"}\"; /* <=== java.lang.String */ \n \n  PostToConnectionRequest request = new PostToConnectionRequest()\n     .withConnectionId(\"connection-id\")\n     .withData(body.getBytes())\n     .withHeaders(headers);"
                  },
                  {
                    "sample" : "body",
                    "lineNumber" : 20,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/apiGateway.java",
                    "excerpt" : "  \n  String body = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \\\"lastName\\\": \\\"\" + lastName + \"\\\", \\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \\\"DOB\\\": \\\"\" + DOB + \"\\\"}\";\n \n  PostToConnectionRequest request = new PostToConnectionRequest()\n     .withConnectionId(\"connection-id\")\n     .withData(body.getBytes()) /* <=== java.lang.String */ \n     .withHeaders(headers);\n \n  client.postToConnection(request);\n}\n}"
                  },
                  {
                    "sample" : "body.getBytes()",
                    "lineNumber" : 20,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/apiGateway.java",
                    "excerpt" : "  \n  String body = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \\\"lastName\\\": \\\"\" + lastName + \"\\\", \\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \\\"DOB\\\": \\\"\" + DOB + \"\\\"}\";\n \n  PostToConnectionRequest request = new PostToConnectionRequest()\n     .withConnectionId(\"connection-id\")\n     .withData(body.getBytes()) /* <=== java.lang.String.getBytes */ \n     .withHeaders(headers);\n \n  client.postToConnection(request);\n}\n}"
                  },
                  {
                    "sample" : "withConnectionId(\"connection-id\")",
                    "lineNumber" : 18,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/apiGateway.java",
                    "excerpt" : "  Map<String, String> headers = new HashMap<>();\n  headers.put(\"Content-Type\", \"application/json\");\n  \n  String body = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \\\"lastName\\\": \\\"\" + lastName + \"\\\", \\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \\\"DOB\\\": \\\"\" + DOB + \"\\\"}\";\n \n  PostToConnectionRequest request = new PostToConnectionRequest() /* <=== com.amazonaws.services.apigateway.model.PostToConnectionRequest.withConnectionId */ \n     .withConnectionId(\"connection-id\")\n     .withData(body.getBytes())\n     .withHeaders(headers);\n \n  client.postToConnection(request);"
                  },
                  {
                    "sample" : "withData(body.getBytes())",
                    "lineNumber" : 18,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/apiGateway.java",
                    "excerpt" : "  Map<String, String> headers = new HashMap<>();\n  headers.put(\"Content-Type\", \"application/json\");\n  \n  String body = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \\\"lastName\\\": \\\"\" + lastName + \"\\\", \\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \\\"DOB\\\": \\\"\" + DOB + \"\\\"}\";\n \n  PostToConnectionRequest request = new PostToConnectionRequest() /* <===  */ \n     .withConnectionId(\"connection-id\")\n     .withData(body.getBytes())\n     .withHeaders(headers);\n \n  client.postToConnection(request);"
                  },
                  {
                    "sample" : "withHeaders(headers)",
                    "lineNumber" : 18,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/apiGateway.java",
                    "excerpt" : "  Map<String, String> headers = new HashMap<>();\n  headers.put(\"Content-Type\", \"application/json\");\n  \n  String body = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \\\"lastName\\\": \\\"\" + lastName + \"\\\", \\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \\\"DOB\\\": \\\"\" + DOB + \"\\\"}\";\n \n  PostToConnectionRequest request = new PostToConnectionRequest() /* <===  */ \n     .withConnectionId(\"connection-id\")\n     .withData(body.getBytes())\n     .withHeaders(headers);\n \n  client.postToConnection(request);"
                  },
                  {
                    "sample" : "request",
                    "lineNumber" : 18,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/apiGateway.java",
                    "excerpt" : "  Map<String, String> headers = new HashMap<>();\n  headers.put(\"Content-Type\", \"application/json\");\n  \n  String body = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \\\"lastName\\\": \\\"\" + lastName + \"\\\", \\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \\\"DOB\\\": \\\"\" + DOB + \"\\\"}\";\n \n  PostToConnectionRequest request = new PostToConnectionRequest() /* <=== com.amazonaws.services.apigateway.model.PostToConnectionRequest */ \n     .withConnectionId(\"connection-id\")\n     .withData(body.getBytes())\n     .withHeaders(headers);\n \n  client.postToConnection(request);"
                  },
                  {
                    "sample" : "postToConnection(request)",
                    "lineNumber" : 23,
                    "columnNumber" : 3,
                    "fileName" : "/app/code/apiGateway.java",
                    "excerpt" : "  PostToConnectionRequest request = new PostToConnectionRequest()\n     .withConnectionId(\"connection-id\")\n     .withData(body.getBytes())\n     .withHeaders(headers);\n \n  client.postToConnection(request); /* <=== com.amazonaws.services.apigateway.AmazonApiGateway.postToConnection */ \n}\n}\n"
                  }
                ]
              },
              {
                "pathId" : "11537-11528-11527-11526-11539-11552-11577-11568-11567-11566-11578",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 30,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "    Workspace workspace = workspaces.get(0);\n    String workspaceId = workspace.getWorkspaceId();\n\n    List<Tag> tags = new ArrayList<>();\n    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName)); /* <=== java.lang.String */ \n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags);\n    workspacesClient.tagWorkspace(tagWorkspaceRequest);"
                  },
                  {
                    "sample" : "withKey(\"lastName\")",
                    "lineNumber" : 30,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "    Workspace workspace = workspaces.get(0);\n    String workspaceId = workspace.getWorkspaceId();\n\n    List<Tag> tags = new ArrayList<>();\n    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName)); /* <=== com.amazonaws.services.workspaces.model.Tag.withKey */ \n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags);\n    workspacesClient.tagWorkspace(tagWorkspaceRequest);"
                  },
                  {
                    "sample" : "withValue(lastName)",
                    "lineNumber" : 30,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "    Workspace workspace = workspaces.get(0);\n    String workspaceId = workspace.getWorkspaceId();\n\n    List<Tag> tags = new ArrayList<>();\n    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName)); /* <===  */ \n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags);\n    workspacesClient.tagWorkspace(tagWorkspaceRequest);"
                  },
                  {
                    "sample" : "tags",
                    "lineNumber" : 30,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "    Workspace workspace = workspaces.get(0);\n    String workspaceId = workspace.getWorkspaceId();\n\n    List<Tag> tags = new ArrayList<>();\n    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName)); /* <=== ANY */ \n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags);\n    workspacesClient.tagWorkspace(tagWorkspaceRequest);"
                  },
                  {
                    "sample" : "tags",
                    "lineNumber" : 31,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "    String workspaceId = workspace.getWorkspaceId();\n\n    List<Tag> tags = new ArrayList<>();\n    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber)); /* <=== ANY */ \n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags);\n    workspacesClient.tagWorkspace(tagWorkspaceRequest);\n"
                  },
                  {
                    "sample" : "tags",
                    "lineNumber" : 32,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "\n    List<Tag> tags = new ArrayList<>();\n    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob)); /* <=== ANY */ \n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags);\n    workspacesClient.tagWorkspace(tagWorkspaceRequest);\n\n    System.out.println(\"Personal data saved successfully to workspace with ID: \" + workspaceId);"
                  },
                  {
                    "sample" : "tags",
                    "lineNumber" : 34,
                    "columnNumber" : 110,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags); /* <=== ANY */ \n    workspacesClient.tagWorkspace(tagWorkspaceRequest);\n\n    System.out.println(\"Personal data saved successfully to workspace with ID: \" + workspaceId);\n  }\n"
                  },
                  {
                    "sample" : "withResourceId(workspaceId)",
                    "lineNumber" : 34,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags); /* <=== com.amazonaws.services.workspaces.model.TagWorkspaceRequest.withResourceId */ \n    workspacesClient.tagWorkspace(tagWorkspaceRequest);\n\n    System.out.println(\"Personal data saved successfully to workspace with ID: \" + workspaceId);\n  }\n"
                  },
                  {
                    "sample" : "withTags(tags)",
                    "lineNumber" : 34,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags); /* <===  */ \n    workspacesClient.tagWorkspace(tagWorkspaceRequest);\n\n    System.out.println(\"Personal data saved successfully to workspace with ID: \" + workspaceId);\n  }\n"
                  },
                  {
                    "sample" : "tagWorkspaceRequest",
                    "lineNumber" : 34,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags); /* <=== com.amazonaws.services.workspaces.model.TagWorkspaceRequest */ \n    workspacesClient.tagWorkspace(tagWorkspaceRequest);\n\n    System.out.println(\"Personal data saved successfully to workspace with ID: \" + workspaceId);\n  }\n"
                  },
                  {
                    "sample" : "tagWorkspace(tagWorkspaceRequest)",
                    "lineNumber" : 35,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags);\n    workspacesClient.tagWorkspace(tagWorkspaceRequest); /* <=== com.amazonaws.services.workspaces.AmazonWorkspaces.tagWorkspace */ \n\n    System.out.println(\"Personal data saved successfully to workspace with ID: \" + workspaceId);\n  }\n\n}"
                  }
                ]
              },
              {
                "pathId" : "11537-11528-11527-11526-11539-11552-11577-11568",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 30,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "    Workspace workspace = workspaces.get(0);\n    String workspaceId = workspace.getWorkspaceId();\n\n    List<Tag> tags = new ArrayList<>();\n    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName)); /* <=== java.lang.String */ \n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags);\n    workspacesClient.tagWorkspace(tagWorkspaceRequest);"
                  },
                  {
                    "sample" : "withKey(\"lastName\")",
                    "lineNumber" : 30,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "    Workspace workspace = workspaces.get(0);\n    String workspaceId = workspace.getWorkspaceId();\n\n    List<Tag> tags = new ArrayList<>();\n    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName)); /* <=== com.amazonaws.services.workspaces.model.Tag.withKey */ \n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags);\n    workspacesClient.tagWorkspace(tagWorkspaceRequest);"
                  },
                  {
                    "sample" : "withValue(lastName)",
                    "lineNumber" : 30,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "    Workspace workspace = workspaces.get(0);\n    String workspaceId = workspace.getWorkspaceId();\n\n    List<Tag> tags = new ArrayList<>();\n    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName)); /* <===  */ \n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags);\n    workspacesClient.tagWorkspace(tagWorkspaceRequest);"
                  },
                  {
                    "sample" : "tags",
                    "lineNumber" : 30,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "    Workspace workspace = workspaces.get(0);\n    String workspaceId = workspace.getWorkspaceId();\n\n    List<Tag> tags = new ArrayList<>();\n    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName)); /* <=== ANY */ \n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags);\n    workspacesClient.tagWorkspace(tagWorkspaceRequest);"
                  },
                  {
                    "sample" : "tags",
                    "lineNumber" : 31,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "    String workspaceId = workspace.getWorkspaceId();\n\n    List<Tag> tags = new ArrayList<>();\n    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber)); /* <=== ANY */ \n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags);\n    workspacesClient.tagWorkspace(tagWorkspaceRequest);\n"
                  },
                  {
                    "sample" : "tags",
                    "lineNumber" : 32,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "\n    List<Tag> tags = new ArrayList<>();\n    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob)); /* <=== ANY */ \n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags);\n    workspacesClient.tagWorkspace(tagWorkspaceRequest);\n\n    System.out.println(\"Personal data saved successfully to workspace with ID: \" + workspaceId);"
                  },
                  {
                    "sample" : "tags",
                    "lineNumber" : 34,
                    "columnNumber" : 110,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags); /* <=== ANY */ \n    workspacesClient.tagWorkspace(tagWorkspaceRequest);\n\n    System.out.println(\"Personal data saved successfully to workspace with ID: \" + workspaceId);\n  }\n"
                  },
                  {
                    "sample" : "withResourceId(workspaceId)",
                    "lineNumber" : 34,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags); /* <=== com.amazonaws.services.workspaces.model.TagWorkspaceRequest.withResourceId */ \n    workspacesClient.tagWorkspace(tagWorkspaceRequest);\n\n    System.out.println(\"Personal data saved successfully to workspace with ID: \" + workspaceId);\n  }\n"
                  }
                ]
              },
              {
                "pathId" : "13861-13852",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 13,
                    "columnNumber" : 75,
                    "fileName" : "/app/code/simpleSystemManagement.java",
                    "excerpt" : "    String parameterName = \"/personalData/firstName\";\n    PutParameterRequest request = new PutParameterRequest().withName(parameterName).withValue(firstName).withType(\"String\");\n    ssmClient.putParameter(request);\n    \n    parameterName = \"/personalData/lastName\";\n    request = new PutParameterRequest().withName(parameterName).withValue(lastName).withType(\"String\"); /* <=== java.lang.String */ \n    ssmClient.putParameter(request);\n    \n    parameterName = \"/personalData/phoneNumber\";\n    request = new PutParameterRequest().withName(parameterName).withValue(phoneNumber).withType(\"String\");\n    ssmClient.putParameter(request);"
                  },
                  {
                    "sample" : "withName(parameterName)",
                    "lineNumber" : 13,
                    "columnNumber" : 15,
                    "fileName" : "/app/code/simpleSystemManagement.java",
                    "excerpt" : "    String parameterName = \"/personalData/firstName\";\n    PutParameterRequest request = new PutParameterRequest().withName(parameterName).withValue(firstName).withType(\"String\");\n    ssmClient.putParameter(request);\n    \n    parameterName = \"/personalData/lastName\";\n    request = new PutParameterRequest().withName(parameterName).withValue(lastName).withType(\"String\"); /* <=== com.amazonaws.services.simplesystemsmanagement.model.PutParameterRequest.withName */ \n    ssmClient.putParameter(request);\n    \n    parameterName = \"/personalData/phoneNumber\";\n    request = new PutParameterRequest().withName(parameterName).withValue(phoneNumber).withType(\"String\");\n    ssmClient.putParameter(request);"
                  }
                ]
              },
              {
                "pathId" : "15474-15464-15451-15450-15449-15479",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 13,
                    "columnNumber" : 83,
                    "fileName" : "/app/code/support.java",
                    "excerpt" : "\n        CreateCaseRequest createCaseRequest = new CreateCaseRequest()\n            .withSubject(\"Personal Data\")\n            .withServiceCode(\"personal-data\")\n            .withCategoryCode(\"data-request\")\n            .withCommunicationBody(\"First Name: \" + firstName + \"\\nLast Name: \" + lastName +  /* <=== java.lang.String */ \n                                   \"\\nPhone Number: \" + phoneNumber + \"\\nDOB: \" + DOB);\n\n        supportClient.createCase(createCaseRequest);\n    }\n}"
                  },
                  {
                    "sample" : "\"First Name: \" + firstName + \"\\nLast Name: \" + lastName + \"\\nPhone Number: \" + phoneNumber + \"\\nDOB: \" + DOB",
                    "lineNumber" : 13,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/support.java",
                    "excerpt" : "\n        CreateCaseRequest createCaseRequest = new CreateCaseRequest()\n            .withSubject(\"Personal Data\")\n            .withServiceCode(\"personal-data\")\n            .withCategoryCode(\"data-request\")\n            .withCommunicationBody(\"First Name: \" + firstName + \"\\nLast Name: \" + lastName +  /* <===  */ \n                                   \"\\nPhone Number: \" + phoneNumber + \"\\nDOB: \" + DOB);\n\n        supportClient.createCase(createCaseRequest);\n    }\n}"
                  },
                  {
                    "sample" : "withCategoryCode(\"data-request\")",
                    "lineNumber" : 9,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/support.java",
                    "excerpt" : "\npublic class AWSSupportUtil {\n    public static void AWSSupportFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AWSSupport supportClient = AWSSupportClientBuilder.defaultClient();\n\n        CreateCaseRequest createCaseRequest = new CreateCaseRequest() /* <===  */ \n            .withSubject(\"Personal Data\")\n            .withServiceCode(\"personal-data\")\n            .withCategoryCode(\"data-request\")\n            .withCommunicationBody(\"First Name: \" + firstName + \"\\nLast Name: \" + lastName + \n                                   \"\\nPhone Number: \" + phoneNumber + \"\\nDOB: \" + DOB);"
                  },
                  {
                    "sample" : "withCommunicationBody(\"First Name: \" + firstName + \"\\nLast Name: \" + lastName + \"\\nPhone Number: \" + phoneNumber + \"\\nDOB: \" + DOB)",
                    "lineNumber" : 9,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/support.java",
                    "excerpt" : "\npublic class AWSSupportUtil {\n    public static void AWSSupportFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AWSSupport supportClient = AWSSupportClientBuilder.defaultClient();\n\n        CreateCaseRequest createCaseRequest = new CreateCaseRequest() /* <===  */ \n            .withSubject(\"Personal Data\")\n            .withServiceCode(\"personal-data\")\n            .withCategoryCode(\"data-request\")\n            .withCommunicationBody(\"First Name: \" + firstName + \"\\nLast Name: \" + lastName + \n                                   \"\\nPhone Number: \" + phoneNumber + \"\\nDOB: \" + DOB);"
                  },
                  {
                    "sample" : "createCaseRequest",
                    "lineNumber" : 9,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/support.java",
                    "excerpt" : "\npublic class AWSSupportUtil {\n    public static void AWSSupportFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AWSSupport supportClient = AWSSupportClientBuilder.defaultClient();\n\n        CreateCaseRequest createCaseRequest = new CreateCaseRequest() /* <=== com.amazonaws.services.support.model.CreateCaseRequest */ \n            .withSubject(\"Personal Data\")\n            .withServiceCode(\"personal-data\")\n            .withCategoryCode(\"data-request\")\n            .withCommunicationBody(\"First Name: \" + firstName + \"\\nLast Name: \" + lastName + \n                                   \"\\nPhone Number: \" + phoneNumber + \"\\nDOB: \" + DOB);"
                  },
                  {
                    "sample" : "createCase(createCaseRequest)",
                    "lineNumber" : 16,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/support.java",
                    "excerpt" : "            .withServiceCode(\"personal-data\")\n            .withCategoryCode(\"data-request\")\n            .withCommunicationBody(\"First Name: \" + firstName + \"\\nLast Name: \" + lastName + \n                                   \"\\nPhone Number: \" + phoneNumber + \"\\nDOB: \" + DOB);\n\n        supportClient.createCase(createCaseRequest); /* <=== com.amazonaws.services.support.AWSSupport.createCase */ \n    }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "11537-11528",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 30,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "    Workspace workspace = workspaces.get(0);\n    String workspaceId = workspace.getWorkspaceId();\n\n    List<Tag> tags = new ArrayList<>();\n    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName)); /* <=== java.lang.String */ \n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags);\n    workspacesClient.tagWorkspace(tagWorkspaceRequest);"
                  },
                  {
                    "sample" : "withKey(\"lastName\")",
                    "lineNumber" : 30,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "    Workspace workspace = workspaces.get(0);\n    String workspaceId = workspace.getWorkspaceId();\n\n    List<Tag> tags = new ArrayList<>();\n    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName)); /* <=== com.amazonaws.services.workspaces.model.Tag.withKey */ \n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags);\n    workspacesClient.tagWorkspace(tagWorkspaceRequest);"
                  }
                ]
              },
              {
                "pathId" : "11724-11723-11725-11750-11748-11739",
                "path" : [
                  {
                    "sample" : "\"lastName\"",
                    "lineNumber" : 13,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/mgn.java",
                    "excerpt" : "  public static void AWSMGNFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n    AmazonMGNClient mgnClient = AmazonMGNClient.builder().build();\n    \n    Map<String, String> personalData = new HashMap<>();\n    personalData.put(\"firstName\", firstName);\n    personalData.put(\"lastName\", lastName); /* <===  */ \n    personalData.put(\"phoneNumber\", phoneNumber);\n    personalData.put(\"DOB\", DOB);\n    \n    IndexDocumentRequest indexDocumentRequest = new IndexDocumentRequest()\n        .withIndexName(\"personal-data\")"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 13,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/mgn.java",
                    "excerpt" : "  public static void AWSMGNFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n    AmazonMGNClient mgnClient = AmazonMGNClient.builder().build();\n    \n    Map<String, String> personalData = new HashMap<>();\n    personalData.put(\"firstName\", firstName);\n    personalData.put(\"lastName\", lastName); /* <=== java.util.Map */ \n    personalData.put(\"phoneNumber\", phoneNumber);\n    personalData.put(\"DOB\", DOB);\n    \n    IndexDocumentRequest indexDocumentRequest = new IndexDocumentRequest()\n        .withIndexName(\"personal-data\")"
                  },
                  {
                    "sample" : "lastName",
                    "lineNumber" : 13,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/mgn.java",
                    "excerpt" : "  public static void AWSMGNFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n    AmazonMGNClient mgnClient = AmazonMGNClient.builder().build();\n    \n    Map<String, String> personalData = new HashMap<>();\n    personalData.put(\"firstName\", firstName);\n    personalData.put(\"lastName\", lastName); /* <=== java.lang.String */ \n    personalData.put(\"phoneNumber\", phoneNumber);\n    personalData.put(\"DOB\", DOB);\n    \n    IndexDocumentRequest indexDocumentRequest = new IndexDocumentRequest()\n        .withIndexName(\"personal-data\")"
                  },
                  {
                    "sample" : "lastName",
                    "lineNumber" : 19,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/mgn.java",
                    "excerpt" : "    personalData.put(\"phoneNumber\", phoneNumber);\n    personalData.put(\"DOB\", DOB);\n    \n    IndexDocumentRequest indexDocumentRequest = new IndexDocumentRequest()\n        .withIndexName(\"personal-data\")\n        .withId(firstName + lastName) /* <=== java.lang.String */ \n        .withSource(personalData);\n    \n    mgnClient.indexDocument(indexDocumentRequest);\n  }\n}"
                  },
                  {
                    "sample" : "firstName + lastName",
                    "lineNumber" : 19,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/mgn.java",
                    "excerpt" : "    personalData.put(\"phoneNumber\", phoneNumber);\n    personalData.put(\"DOB\", DOB);\n    \n    IndexDocumentRequest indexDocumentRequest = new IndexDocumentRequest()\n        .withIndexName(\"personal-data\")\n        .withId(firstName + lastName) /* <===  */ \n        .withSource(personalData);\n    \n    mgnClient.indexDocument(indexDocumentRequest);\n  }\n}"
                  },
                  {
                    "sample" : "withIndexName(\"personal-data\")",
                    "lineNumber" : 17,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/mgn.java",
                    "excerpt" : "    personalData.put(\"firstName\", firstName);\n    personalData.put(\"lastName\", lastName);\n    personalData.put(\"phoneNumber\", phoneNumber);\n    personalData.put(\"DOB\", DOB);\n    \n    IndexDocumentRequest indexDocumentRequest = new IndexDocumentRequest() /* <=== com.amazonaws.services.mgn.model.IndexDocumentRequest.withIndexName */ \n        .withIndexName(\"personal-data\")\n        .withId(firstName + lastName)\n        .withSource(personalData);\n    \n    mgnClient.indexDocument(indexDocumentRequest);"
                  }
                ]
              },
              {
                "pathId" : "8824-8815",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 17,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/voiceid.java",
                    "excerpt" : "\n    public void processPersonalData(String firstName, String lastName, String phoneNumber) {\n        // Create a new profile in Voice ID\n        CreateProfileRequest createProfileRequest = new CreateProfileRequest()\n                .withFirstName(firstName)\n                .withLastName(lastName) /* <=== java.lang.String */ \n                .withPhoneNumber(phoneNumber);\n        CreateProfileResult createProfileResult = voiceIdClient.createProfile(createProfileRequest);\n        System.out.println(\"Profile created with ID: \" + createProfileResult.getProfileId());\n    }\n}"
                  },
                  {
                    "sample" : "withFirstName(firstName)",
                    "lineNumber" : 15,
                    "columnNumber" : 53,
                    "fileName" : "/app/code/voiceid.java",
                    "excerpt" : "        this.voiceIdClient = voiceIdClient;\n    }\n\n    public void processPersonalData(String firstName, String lastName, String phoneNumber) {\n        // Create a new profile in Voice ID\n        CreateProfileRequest createProfileRequest = new CreateProfileRequest() /* <=== com.amazonaws.services.voiceid.model.CreateProfileRequest.withFirstName */ \n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber);\n        CreateProfileResult createProfileResult = voiceIdClient.createProfile(createProfileRequest);\n        System.out.println(\"Profile created with ID: \" + createProfileResult.getProfileId());"
                  }
                ]
              },
              {
                "pathId" : "15712-15703",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 9,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/workspacesweb.java",
                    "excerpt" : "public class AWSWorkspaceswebUtil {\n    public static void AWSWorkspaceswebFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AWSWorkspacesWeb workspacesWebClient = AWSWorkspacesWebClientBuilder.standard().build();\n        CreateUserRequest request = new CreateUserRequest()\n                .withFirstName(firstName)\n                .withLastName(lastName) /* <=== java.lang.String */ \n                .withPhoneNumber(phoneNumber)\n                .withBirthDate(DOB);\n        workspacesWebClient.createUser(request);\n    }\n}"
                  },
                  {
                    "sample" : "withFirstName(firstName)",
                    "lineNumber" : 7,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/workspacesweb.java",
                    "excerpt" : "import com.amazonaws.services.workspacesweb.model.CreateUserRequest;\n\npublic class AWSWorkspaceswebUtil {\n    public static void AWSWorkspaceswebFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AWSWorkspacesWeb workspacesWebClient = AWSWorkspacesWebClientBuilder.standard().build();\n        CreateUserRequest request = new CreateUserRequest() /* <=== com.amazonaws.services.workspacesweb.model.CreateUserRequest.withFirstName */ \n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber)\n                .withBirthDate(DOB);\n        workspacesWebClient.createUser(request);"
                  }
                ]
              },
              {
                "pathId" : "14695-14688-14679-14678-14677-14701",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 25,
                    "columnNumber" : 72,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        String dataSetId = dataExchangeClient.createDataSet(createDataSetRequest).getId();\n\n        // Create a revision for the data set\n        CreateRevisionRequest createRevisionRequest = new CreateRevisionRequest()\n                .withDataSetId(dataSetId)\n                .withComment(\"First revision for \" + firstName + \" \" + lastName + \" data\"); /* <=== java.lang.String */ \n        String revisionArn = dataExchangeClient.createRevision(createRevisionRequest).getArn();\n\n        // Prepare the asset\n        List<DataSetEntry> entries = new ArrayList<>();\n        entries.add(new DataSetEntry().withEntryName(\"firstName\").withContent(firstName));"
                  },
                  {
                    "sample" : "\"First revision for \" + firstName + \" \" + lastName + \" data\"",
                    "lineNumber" : 25,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        String dataSetId = dataExchangeClient.createDataSet(createDataSetRequest).getId();\n\n        // Create a revision for the data set\n        CreateRevisionRequest createRevisionRequest = new CreateRevisionRequest()\n                .withDataSetId(dataSetId)\n                .withComment(\"First revision for \" + firstName + \" \" + lastName + \" data\"); /* <===  */ \n        String revisionArn = dataExchangeClient.createRevision(createRevisionRequest).getArn();\n\n        // Prepare the asset\n        List<DataSetEntry> entries = new ArrayList<>();\n        entries.add(new DataSetEntry().withEntryName(\"firstName\").withContent(firstName));"
                  },
                  {
                    "sample" : "withDataSetId(dataSetId)",
                    "lineNumber" : 23,
                    "columnNumber" : 55,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "                .withName(dataSetName)\n                .withDescription(\"Personal data of \" + firstName + \" \" + lastName);\n        String dataSetId = dataExchangeClient.createDataSet(createDataSetRequest).getId();\n\n        // Create a revision for the data set\n        CreateRevisionRequest createRevisionRequest = new CreateRevisionRequest() /* <=== com.amazonaws.services.dataexchange.model.CreateRevisionRequest.withDataSetId */ \n                .withDataSetId(dataSetId)\n                .withComment(\"First revision for \" + firstName + \" \" + lastName + \" data\");\n        String revisionArn = dataExchangeClient.createRevision(createRevisionRequest).getArn();\n\n        // Prepare the asset"
                  },
                  {
                    "sample" : "withComment(\"First revision for \" + firstName + \" \" + lastName + \" data\")",
                    "lineNumber" : 23,
                    "columnNumber" : 55,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "                .withName(dataSetName)\n                .withDescription(\"Personal data of \" + firstName + \" \" + lastName);\n        String dataSetId = dataExchangeClient.createDataSet(createDataSetRequest).getId();\n\n        // Create a revision for the data set\n        CreateRevisionRequest createRevisionRequest = new CreateRevisionRequest() /* <===  */ \n                .withDataSetId(dataSetId)\n                .withComment(\"First revision for \" + firstName + \" \" + lastName + \" data\");\n        String revisionArn = dataExchangeClient.createRevision(createRevisionRequest).getArn();\n\n        // Prepare the asset"
                  },
                  {
                    "sample" : "createRevisionRequest",
                    "lineNumber" : 23,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "                .withName(dataSetName)\n                .withDescription(\"Personal data of \" + firstName + \" \" + lastName);\n        String dataSetId = dataExchangeClient.createDataSet(createDataSetRequest).getId();\n\n        // Create a revision for the data set\n        CreateRevisionRequest createRevisionRequest = new CreateRevisionRequest() /* <=== com.amazonaws.services.dataexchange.model.CreateRevisionRequest */ \n                .withDataSetId(dataSetId)\n                .withComment(\"First revision for \" + firstName + \" \" + lastName + \" data\");\n        String revisionArn = dataExchangeClient.createRevision(createRevisionRequest).getArn();\n\n        // Prepare the asset"
                  },
                  {
                    "sample" : "createRevision(createRevisionRequest)",
                    "lineNumber" : 26,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "\n        // Create a revision for the data set\n        CreateRevisionRequest createRevisionRequest = new CreateRevisionRequest()\n                .withDataSetId(dataSetId)\n                .withComment(\"First revision for \" + firstName + \" \" + lastName + \" data\");\n        String revisionArn = dataExchangeClient.createRevision(createRevisionRequest).getArn(); /* <=== com.amazonaws.services.dataexchange.AmazonDataExchange.createRevision */ \n\n        // Prepare the asset\n        List<DataSetEntry> entries = new ArrayList<>();\n        entries.add(new DataSetEntry().withEntryName(\"firstName\").withContent(firstName));\n        entries.add(new DataSetEntry().withEntryName(\"lastName\").withContent(lastName));"
                  }
                ]
              },
              {
                "pathId" : "14632-14646-14667-14695-14733-14724",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 12,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "import java.util.ArrayList;\nimport java.util.List;\n\npublic class AWSDataExchangeUtil {\n    public static void AWSDataExchangeFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob, AmazonDataExchange dataExchangeClient) {\n        String dataSetName = firstName + \" \" + lastName + \" Personal Data\"; /* <=== java.lang.String */ \n        String revisionId = \"Revision1\";\n        String assetName = firstName + \" \" + lastName + \" Asset\";\n\n        // Create a new data set\n        CreateDataSetRequest createDataSetRequest = new CreateDataSetRequest()"
                  },
                  {
                    "sample" : "lastName",
                    "lineNumber" : 14,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "\npublic class AWSDataExchangeUtil {\n    public static void AWSDataExchangeFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob, AmazonDataExchange dataExchangeClient) {\n        String dataSetName = firstName + \" \" + lastName + \" Personal Data\";\n        String revisionId = \"Revision1\";\n        String assetName = firstName + \" \" + lastName + \" Asset\"; /* <=== java.lang.String */ \n\n        // Create a new data set\n        CreateDataSetRequest createDataSetRequest = new CreateDataSetRequest()\n                .withName(dataSetName)\n                .withDescription(\"Personal data of \" + firstName + \" \" + lastName);"
                  },
                  {
                    "sample" : "lastName",
                    "lineNumber" : 19,
                    "columnNumber" : 74,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        String assetName = firstName + \" \" + lastName + \" Asset\";\n\n        // Create a new data set\n        CreateDataSetRequest createDataSetRequest = new CreateDataSetRequest()\n                .withName(dataSetName)\n                .withDescription(\"Personal data of \" + firstName + \" \" + lastName); /* <=== java.lang.String */ \n        String dataSetId = dataExchangeClient.createDataSet(createDataSetRequest).getId();\n\n        // Create a revision for the data set\n        CreateRevisionRequest createRevisionRequest = new CreateRevisionRequest()\n                .withDataSetId(dataSetId)"
                  },
                  {
                    "sample" : "lastName",
                    "lineNumber" : 25,
                    "columnNumber" : 72,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        String dataSetId = dataExchangeClient.createDataSet(createDataSetRequest).getId();\n\n        // Create a revision for the data set\n        CreateRevisionRequest createRevisionRequest = new CreateRevisionRequest()\n                .withDataSetId(dataSetId)\n                .withComment(\"First revision for \" + firstName + \" \" + lastName + \" data\"); /* <=== java.lang.String */ \n        String revisionArn = dataExchangeClient.createRevision(createRevisionRequest).getArn();\n\n        // Prepare the asset\n        List<DataSetEntry> entries = new ArrayList<>();\n        entries.add(new DataSetEntry().withEntryName(\"firstName\").withContent(firstName));"
                  },
                  {
                    "sample" : "lastName",
                    "lineNumber" : 31,
                    "columnNumber" : 78,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        String revisionArn = dataExchangeClient.createRevision(createRevisionRequest).getArn();\n\n        // Prepare the asset\n        List<DataSetEntry> entries = new ArrayList<>();\n        entries.add(new DataSetEntry().withEntryName(\"firstName\").withContent(firstName));\n        entries.add(new DataSetEntry().withEntryName(\"lastName\").withContent(lastName)); /* <=== java.lang.String */ \n        entries.add(new DataSetEntry().withEntryName(\"phoneNumber\").withContent(phoneNumber));\n        entries.add(new DataSetEntry().withEntryName(\"dob\").withContent(dob));\n\n        // Import the asset\n        ImportAssetFromSignedUrlRequest importAssetRequest = new ImportAssetFromSignedUrlRequest()"
                  },
                  {
                    "sample" : "withEntryName(\"lastName\")",
                    "lineNumber" : 31,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        String revisionArn = dataExchangeClient.createRevision(createRevisionRequest).getArn();\n\n        // Prepare the asset\n        List<DataSetEntry> entries = new ArrayList<>();\n        entries.add(new DataSetEntry().withEntryName(\"firstName\").withContent(firstName));\n        entries.add(new DataSetEntry().withEntryName(\"lastName\").withContent(lastName)); /* <=== com.amazonaws.services.dataexchange.model.DataSetEntry.withEntryName */ \n        entries.add(new DataSetEntry().withEntryName(\"phoneNumber\").withContent(phoneNumber));\n        entries.add(new DataSetEntry().withEntryName(\"dob\").withContent(dob));\n\n        // Import the asset\n        ImportAssetFromSignedUrlRequest importAssetRequest = new ImportAssetFromSignedUrlRequest()"
                  }
                ]
              },
              {
                "pathId" : "3363-3357-3348",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 12,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/deviceFarm.java",
                    "excerpt" : "    public static void AWSDevicefarmFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        com.amazonaws.services.devicefarm.AWSDeviceFarm client = AWSDeviceFarmClientBuilder.defaultClient();\n\n        CreateUploadRequest createUploadRequest = new CreateUploadRequest()\n            .withProjectArn(\"<ProjectARN>\")\n            .withName(firstName + \"-\" + lastName + \"-\" + phoneNumber) /* <=== java.lang.String */ \n            .withType(UploadType.ANDROID_APP)\n            .withContentType(\"application/octet-stream\");\n\n        CreateUploadResult createUploadResult = client.createUpload(createUploadRequest);\n        String uploadUrl = createUploadResult.getUpload().getUrl();"
                  },
                  {
                    "sample" : "firstName + \"-\" + lastName + \"-\" + phoneNumber",
                    "lineNumber" : 12,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/deviceFarm.java",
                    "excerpt" : "    public static void AWSDevicefarmFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        com.amazonaws.services.devicefarm.AWSDeviceFarm client = AWSDeviceFarmClientBuilder.defaultClient();\n\n        CreateUploadRequest createUploadRequest = new CreateUploadRequest()\n            .withProjectArn(\"<ProjectARN>\")\n            .withName(firstName + \"-\" + lastName + \"-\" + phoneNumber) /* <===  */ \n            .withType(UploadType.ANDROID_APP)\n            .withContentType(\"application/octet-stream\");\n\n        CreateUploadResult createUploadResult = client.createUpload(createUploadRequest);\n        String uploadUrl = createUploadResult.getUpload().getUrl();"
                  },
                  {
                    "sample" : "withProjectArn(\"<ProjectARN>\")",
                    "lineNumber" : 10,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/deviceFarm.java",
                    "excerpt" : "\npublic class AWSDevicefarmUtil {\n    public static void AWSDevicefarmFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        com.amazonaws.services.devicefarm.AWSDeviceFarm client = AWSDeviceFarmClientBuilder.defaultClient();\n\n        CreateUploadRequest createUploadRequest = new CreateUploadRequest() /* <=== com.amazonaws.services.devicefarm.model.CreateUploadRequest.withProjectArn */ \n            .withProjectArn(\"<ProjectARN>\")\n            .withName(firstName + \"-\" + lastName + \"-\" + phoneNumber)\n            .withType(UploadType.ANDROID_APP)\n            .withContentType(\"application/octet-stream\");\n"
                  }
                ]
              },
              {
                "pathId" : "15712-15703-15702-15701-15700-15699-15715",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 9,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/workspacesweb.java",
                    "excerpt" : "public class AWSWorkspaceswebUtil {\n    public static void AWSWorkspaceswebFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AWSWorkspacesWeb workspacesWebClient = AWSWorkspacesWebClientBuilder.standard().build();\n        CreateUserRequest request = new CreateUserRequest()\n                .withFirstName(firstName)\n                .withLastName(lastName) /* <=== java.lang.String */ \n                .withPhoneNumber(phoneNumber)\n                .withBirthDate(DOB);\n        workspacesWebClient.createUser(request);\n    }\n}"
                  },
                  {
                    "sample" : "withFirstName(firstName)",
                    "lineNumber" : 7,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/workspacesweb.java",
                    "excerpt" : "import com.amazonaws.services.workspacesweb.model.CreateUserRequest;\n\npublic class AWSWorkspaceswebUtil {\n    public static void AWSWorkspaceswebFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AWSWorkspacesWeb workspacesWebClient = AWSWorkspacesWebClientBuilder.standard().build();\n        CreateUserRequest request = new CreateUserRequest() /* <=== com.amazonaws.services.workspacesweb.model.CreateUserRequest.withFirstName */ \n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber)\n                .withBirthDate(DOB);\n        workspacesWebClient.createUser(request);"
                  },
                  {
                    "sample" : "withLastName(lastName)",
                    "lineNumber" : 7,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/workspacesweb.java",
                    "excerpt" : "import com.amazonaws.services.workspacesweb.model.CreateUserRequest;\n\npublic class AWSWorkspaceswebUtil {\n    public static void AWSWorkspaceswebFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AWSWorkspacesWeb workspacesWebClient = AWSWorkspacesWebClientBuilder.standard().build();\n        CreateUserRequest request = new CreateUserRequest() /* <===  */ \n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber)\n                .withBirthDate(DOB);\n        workspacesWebClient.createUser(request);"
                  },
                  {
                    "sample" : "withPhoneNumber(phoneNumber)",
                    "lineNumber" : 7,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/workspacesweb.java",
                    "excerpt" : "import com.amazonaws.services.workspacesweb.model.CreateUserRequest;\n\npublic class AWSWorkspaceswebUtil {\n    public static void AWSWorkspaceswebFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AWSWorkspacesWeb workspacesWebClient = AWSWorkspacesWebClientBuilder.standard().build();\n        CreateUserRequest request = new CreateUserRequest() /* <===  */ \n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber)\n                .withBirthDate(DOB);\n        workspacesWebClient.createUser(request);"
                  },
                  {
                    "sample" : "withBirthDate(DOB)",
                    "lineNumber" : 7,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/workspacesweb.java",
                    "excerpt" : "import com.amazonaws.services.workspacesweb.model.CreateUserRequest;\n\npublic class AWSWorkspaceswebUtil {\n    public static void AWSWorkspaceswebFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AWSWorkspacesWeb workspacesWebClient = AWSWorkspacesWebClientBuilder.standard().build();\n        CreateUserRequest request = new CreateUserRequest() /* <===  */ \n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber)\n                .withBirthDate(DOB);\n        workspacesWebClient.createUser(request);"
                  },
                  {
                    "sample" : "request",
                    "lineNumber" : 7,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/workspacesweb.java",
                    "excerpt" : "import com.amazonaws.services.workspacesweb.model.CreateUserRequest;\n\npublic class AWSWorkspaceswebUtil {\n    public static void AWSWorkspaceswebFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AWSWorkspacesWeb workspacesWebClient = AWSWorkspacesWebClientBuilder.standard().build();\n        CreateUserRequest request = new CreateUserRequest() /* <=== com.amazonaws.services.workspacesweb.model.CreateUserRequest */ \n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber)\n                .withBirthDate(DOB);\n        workspacesWebClient.createUser(request);"
                  },
                  {
                    "sample" : "createUser(request)",
                    "lineNumber" : 12,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/workspacesweb.java",
                    "excerpt" : "        CreateUserRequest request = new CreateUserRequest()\n                .withFirstName(firstName)\n                .withLastName(lastName)\n                .withPhoneNumber(phoneNumber)\n                .withBirthDate(DOB);\n        workspacesWebClient.createUser(request); /* <=== com.amazonaws.services.workspacesweb.AWSWorkspacesWeb.createUser */ \n    }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "6438-6430-6429-6416",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 13,
                    "columnNumber" : 102,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : "\n    public static void AWSlexmodelsv2FirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AmazonLexModelBuilding client = AmazonLexModelBuildingClientBuilder.standard().build();\n        SlotTypeMetadata metadata = new SlotTypeMetadata().withName(\"PersonalDataSlot\").withDescription(\"Personal data slot\");\n        SlotTypeProperties properties = new SlotTypeProperties().withEnumerationValues(\n                new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB) /* <=== java.lang.String */ \n        );\n        PutSlotTypeRequest request = new PutSlotTypeRequest().withName(\"PersonalDataSlot\").withChecksum(null)\n                .withDescription(\"Personal data slot\").withEnumerationValues(properties.getEnumerationValues())\n                .withSlotTypeMetadata(metadata);\n        client.putSlotType(request);"
                  },
                  {
                    "sample" : "firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB",
                    "lineNumber" : 13,
                    "columnNumber" : 84,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : "\n    public static void AWSlexmodelsv2FirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AmazonLexModelBuilding client = AmazonLexModelBuildingClientBuilder.standard().build();\n        SlotTypeMetadata metadata = new SlotTypeMetadata().withName(\"PersonalDataSlot\").withDescription(\"Personal data slot\");\n        SlotTypeProperties properties = new SlotTypeProperties().withEnumerationValues(\n                new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB) /* <===  */ \n        );\n        PutSlotTypeRequest request = new PutSlotTypeRequest().withName(\"PersonalDataSlot\").withChecksum(null)\n                .withDescription(\"Personal data slot\").withEnumerationValues(properties.getEnumerationValues())\n                .withSlotTypeMetadata(metadata);\n        client.putSlotType(request);"
                  },
                  {
                    "sample" : "$obj1",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "withEnumerationValues(new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB))",
                    "lineNumber" : 12,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : "public class AWSLexModelsV2Util {\n\n    public static void AWSlexmodelsv2FirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AmazonLexModelBuilding client = AmazonLexModelBuildingClientBuilder.standard().build();\n        SlotTypeMetadata metadata = new SlotTypeMetadata().withName(\"PersonalDataSlot\").withDescription(\"Personal data slot\");\n        SlotTypeProperties properties = new SlotTypeProperties().withEnumerationValues( /* <=== com.amazonaws.services.lexmodelbuilding.model.SlotTypeProperties.withEnumerationValues */ \n                new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB)\n        );\n        PutSlotTypeRequest request = new PutSlotTypeRequest().withName(\"PersonalDataSlot\").withChecksum(null)\n                .withDescription(\"Personal data slot\").withEnumerationValues(properties.getEnumerationValues())\n                .withSlotTypeMetadata(metadata);"
                  }
                ]
              },
              {
                "pathId" : "3262-3263-3261-3265-3269-3285-3276-3275-3274-3289",
                "path" : [
                  {
                    "sample" : "\"lastName\"",
                    "lineNumber" : 16,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "    private static AWSIoTRoboRunner iotRoboRunnerClient = AWSIoTRoboRunnerClientBuilder.defaultClient();\n\n    public static void AWSIoTRoboRunnerFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        Map<String, Object> personalData = new HashMap<>();\n        personalData.put(\"firstName\", firstName);\n        personalData.put(\"lastName\", lastName); /* <===  */ \n        personalData.put(\"phoneNumber\", phoneNumber);\n        personalData.put(\"dob\", dob);\n\n        PutThingShadowRequest request = new PutThingShadowRequest()\n                .withThingName(\"PersonalData\")"
                  },
                  {
                    "sample" : "lastName",
                    "lineNumber" : 16,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "    private static AWSIoTRoboRunner iotRoboRunnerClient = AWSIoTRoboRunnerClientBuilder.defaultClient();\n\n    public static void AWSIoTRoboRunnerFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        Map<String, Object> personalData = new HashMap<>();\n        personalData.put(\"firstName\", firstName);\n        personalData.put(\"lastName\", lastName); /* <=== java.lang.String */ \n        personalData.put(\"phoneNumber\", phoneNumber);\n        personalData.put(\"dob\", dob);\n\n        PutThingShadowRequest request = new PutThingShadowRequest()\n                .withThingName(\"PersonalData\")"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 16,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "    private static AWSIoTRoboRunner iotRoboRunnerClient = AWSIoTRoboRunnerClientBuilder.defaultClient();\n\n    public static void AWSIoTRoboRunnerFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        Map<String, Object> personalData = new HashMap<>();\n        personalData.put(\"firstName\", firstName);\n        personalData.put(\"lastName\", lastName); /* <=== java.util.Map */ \n        personalData.put(\"phoneNumber\", phoneNumber);\n        personalData.put(\"dob\", dob);\n\n        PutThingShadowRequest request = new PutThingShadowRequest()\n                .withThingName(\"PersonalData\")"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 17,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "\n    public static void AWSIoTRoboRunnerFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        Map<String, Object> personalData = new HashMap<>();\n        personalData.put(\"firstName\", firstName);\n        personalData.put(\"lastName\", lastName);\n        personalData.put(\"phoneNumber\", phoneNumber); /* <=== java.util.Map */ \n        personalData.put(\"dob\", dob);\n\n        PutThingShadowRequest request = new PutThingShadowRequest()\n                .withThingName(\"PersonalData\")\n                .withPayload(personalData);"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 18,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "    public static void AWSIoTRoboRunnerFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        Map<String, Object> personalData = new HashMap<>();\n        personalData.put(\"firstName\", firstName);\n        personalData.put(\"lastName\", lastName);\n        personalData.put(\"phoneNumber\", phoneNumber);\n        personalData.put(\"dob\", dob); /* <=== java.util.Map */ \n\n        PutThingShadowRequest request = new PutThingShadowRequest()\n                .withThingName(\"PersonalData\")\n                .withPayload(personalData);\n"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 22,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "        personalData.put(\"phoneNumber\", phoneNumber);\n        personalData.put(\"dob\", dob);\n\n        PutThingShadowRequest request = new PutThingShadowRequest()\n                .withThingName(\"PersonalData\")\n                .withPayload(personalData); /* <=== java.util.Map */ \n\n        PutThingShadowResult result = iotRoboRunnerClient.putThingShadow(request);\n        System.out.println(\"Data sent to AWS IoTRoboRunner successfully\");\n    }\n}"
                  },
                  {
                    "sample" : "withThingName(\"PersonalData\")",
                    "lineNumber" : 20,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "        personalData.put(\"firstName\", firstName);\n        personalData.put(\"lastName\", lastName);\n        personalData.put(\"phoneNumber\", phoneNumber);\n        personalData.put(\"dob\", dob);\n\n        PutThingShadowRequest request = new PutThingShadowRequest() /* <=== com.amazonaws.services.iotroborunner.model.PutThingShadowRequest.withThingName */ \n                .withThingName(\"PersonalData\")\n                .withPayload(personalData);\n\n        PutThingShadowResult result = iotRoboRunnerClient.putThingShadow(request);\n        System.out.println(\"Data sent to AWS IoTRoboRunner successfully\");"
                  },
                  {
                    "sample" : "withPayload(personalData)",
                    "lineNumber" : 20,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "        personalData.put(\"firstName\", firstName);\n        personalData.put(\"lastName\", lastName);\n        personalData.put(\"phoneNumber\", phoneNumber);\n        personalData.put(\"dob\", dob);\n\n        PutThingShadowRequest request = new PutThingShadowRequest() /* <===  */ \n                .withThingName(\"PersonalData\")\n                .withPayload(personalData);\n\n        PutThingShadowResult result = iotRoboRunnerClient.putThingShadow(request);\n        System.out.println(\"Data sent to AWS IoTRoboRunner successfully\");"
                  },
                  {
                    "sample" : "request",
                    "lineNumber" : 20,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "        personalData.put(\"firstName\", firstName);\n        personalData.put(\"lastName\", lastName);\n        personalData.put(\"phoneNumber\", phoneNumber);\n        personalData.put(\"dob\", dob);\n\n        PutThingShadowRequest request = new PutThingShadowRequest() /* <=== com.amazonaws.services.iotroborunner.model.PutThingShadowRequest */ \n                .withThingName(\"PersonalData\")\n                .withPayload(personalData);\n\n        PutThingShadowResult result = iotRoboRunnerClient.putThingShadow(request);\n        System.out.println(\"Data sent to AWS IoTRoboRunner successfully\");"
                  },
                  {
                    "sample" : "putThingShadow(request)",
                    "lineNumber" : 24,
                    "columnNumber" : 39,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "\n        PutThingShadowRequest request = new PutThingShadowRequest()\n                .withThingName(\"PersonalData\")\n                .withPayload(personalData);\n\n        PutThingShadowResult result = iotRoboRunnerClient.putThingShadow(request); /* <=== com.amazonaws.services.iotroborunner.AWSIoTRoboRunner.putThingShadow */ \n        System.out.println(\"Data sent to AWS IoTRoboRunner successfully\");\n    }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "14831-14829-14820",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 15,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/route53.java",
                    "excerpt" : "  public static void processData(String firstName, String lastName, String phoneNumber, String dob) {\n    try {\n      // Create a new hosted zone in Route 53\n      CreateHostedZoneRequest createHostedZoneRequest = new CreateHostedZoneRequest()\n        .withName(\"example.com\")\n        .withCallerReference(firstName + lastName); /* <=== java.lang.String */ \n      CreateHostedZoneResult createHostedZoneResult = client.createHostedZone(createHostedZoneRequest);\n      \n      // Use the hosted zone to process personal data\n      // ...\n    } catch (Exception e) {"
                  },
                  {
                    "sample" : "firstName + lastName",
                    "lineNumber" : 15,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/route53.java",
                    "excerpt" : "  public static void processData(String firstName, String lastName, String phoneNumber, String dob) {\n    try {\n      // Create a new hosted zone in Route 53\n      CreateHostedZoneRequest createHostedZoneRequest = new CreateHostedZoneRequest()\n        .withName(\"example.com\")\n        .withCallerReference(firstName + lastName); /* <===  */ \n      CreateHostedZoneResult createHostedZoneResult = client.createHostedZone(createHostedZoneRequest);\n      \n      // Use the hosted zone to process personal data\n      // ...\n    } catch (Exception e) {"
                  },
                  {
                    "sample" : "withName(\"example.com\")",
                    "lineNumber" : 13,
                    "columnNumber" : 57,
                    "fileName" : "/app/code/route53.java",
                    "excerpt" : "  private static AmazonRoute53 client = AmazonRoute53ClientBuilder.defaultClient();\n  \n  public static void processData(String firstName, String lastName, String phoneNumber, String dob) {\n    try {\n      // Create a new hosted zone in Route 53\n      CreateHostedZoneRequest createHostedZoneRequest = new CreateHostedZoneRequest() /* <=== com.amazonaws.services.route53.model.CreateHostedZoneRequest.withName */ \n        .withName(\"example.com\")\n        .withCallerReference(firstName + lastName);\n      CreateHostedZoneResult createHostedZoneResult = client.createHostedZone(createHostedZoneRequest);\n      \n      // Use the hosted zone to process personal data"
                  }
                ]
              },
              {
                "pathId" : "8573-8568-8567-8627-8618",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 15,
                    "columnNumber" : 83,
                    "fileName" : "/app/code/databaseMigration.java",
                    "excerpt" : "public AWSDatabaseMigrationServiceUtil() {\n    client = AmazonDatabaseMigrationServiceClientBuilder.standard().build();\n}\n\npublic void AWSDatabaseMigrationServiceProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob); /* <=== java.lang.String */ \n\n    CreateReplicationTaskRequest createReplicationTaskRequest = new CreateReplicationTaskRequest()\n            .withReplicationTaskIdentifier(firstName + \"_\" + lastName + \"_Task\")\n            .withSourceEndpointArn(\"arn:aws:dms:us-west-2:012345678901:endpoint:ASXWXYZWEXAMPLE\")\n            .withTargetEndpointArn(\"arn:aws:dms:us-west-2:012345678901:endpoint:AKXWXYZWEXAMPLE\")"
                  },
                  {
                    "sample" : "Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob)",
                    "lineNumber" : 15,
                    "columnNumber" : 40,
                    "fileName" : "/app/code/databaseMigration.java",
                    "excerpt" : "public AWSDatabaseMigrationServiceUtil() {\n    client = AmazonDatabaseMigrationServiceClientBuilder.standard().build();\n}\n\npublic void AWSDatabaseMigrationServiceProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob); /* <=== java.util.Map.of */ \n\n    CreateReplicationTaskRequest createReplicationTaskRequest = new CreateReplicationTaskRequest()\n            .withReplicationTaskIdentifier(firstName + \"_\" + lastName + \"_Task\")\n            .withSourceEndpointArn(\"arn:aws:dms:us-west-2:012345678901:endpoint:ASXWXYZWEXAMPLE\")\n            .withTargetEndpointArn(\"arn:aws:dms:us-west-2:012345678901:endpoint:AKXWXYZWEXAMPLE\")"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 15,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/databaseMigration.java",
                    "excerpt" : "public AWSDatabaseMigrationServiceUtil() {\n    client = AmazonDatabaseMigrationServiceClientBuilder.standard().build();\n}\n\npublic void AWSDatabaseMigrationServiceProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob); /* <=== java.util.Map */ \n\n    CreateReplicationTaskRequest createReplicationTaskRequest = new CreateReplicationTaskRequest()\n            .withReplicationTaskIdentifier(firstName + \"_\" + lastName + \"_Task\")\n            .withSourceEndpointArn(\"arn:aws:dms:us-west-2:012345678901:endpoint:ASXWXYZWEXAMPLE\")\n            .withTargetEndpointArn(\"arn:aws:dms:us-west-2:012345678901:endpoint:AKXWXYZWEXAMPLE\")"
                  },
                  {
                    "sample" : "personalData.toString()",
                    "lineNumber" : 26,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/databaseMigration.java",
                    "excerpt" : "            .withReplicationInstanceArn(\"arn:aws:dms:us-west-2:012345678901:rep:6UTDJGB043EXAMPLE\")\n            .withMigrationType(\"full-load\")\n            .withTableMappings(\"{\\\"rules\\\":[{\\\"rule-type\\\":\\\"selection\\\",\\\"rule-id\\\":\\\"1\\\",\\\"rule-name\\\":\\\"1\\\",\\\"object-locator\\\":{\\\"schema-name\\\":\\\"personal_data\\\",\\\"table-name\\\":\\\"\" + firstName + \"_\" + lastName + \"\\\"},\\\"rule-action\\\":\\\"include\\\",\\\"filters\\\":{}}]}\")\n            .withReplicationTaskSettings(\"{\\\"TargetMetadata\\\":{\\\"TargetSchema\\\":\\\"\\\",\\\"SupportLobs\\\":true,\\\"FullLobMode\\\":false,\\\"LobChunkSize\\\":64,\\\"LimitedSizeLobMode\\\":true,\\\"LobMaxSize\\\":32},\\\"FullLoadSettings\\\":{\\\"FullLoadEnabled\\\":true,\\\"ApplyChangesEnabled\\\":false,\\\"TargetTablePrepareOptions\\\":\\\"DROP_AND_CREATE\\\",\\\"CreatePkAfterFullLoad\\\":false,\\\"StopTaskCachedChangesApplied\\\":false,\\\"StopTaskCachedChangesNotApplied\\\":false,\\\"ResumeEnabled\\\":false,\\\"RangeLinearityFactor\\\":null},\\\"Logging\\\":{\\\"EnableLogging\\\":false}}\")\n            .withResourceAttributeList(new ResourceAttribute().withType(\"PersonalData\")\n                    .withValue(personalData.toString())); /* <=== java.util.Map.toString */ \n\n    client.createReplicationTask(createReplicationTaskRequest);\n}\n}"
                  },
                  {
                    "sample" : "withType(\"PersonalData\")",
                    "lineNumber" : 25,
                    "columnNumber" : 40,
                    "fileName" : "/app/code/databaseMigration.java",
                    "excerpt" : "            .withTargetEndpointArn(\"arn:aws:dms:us-west-2:012345678901:endpoint:AKXWXYZWEXAMPLE\")\n            .withReplicationInstanceArn(\"arn:aws:dms:us-west-2:012345678901:rep:6UTDJGB043EXAMPLE\")\n            .withMigrationType(\"full-load\")\n            .withTableMappings(\"{\\\"rules\\\":[{\\\"rule-type\\\":\\\"selection\\\",\\\"rule-id\\\":\\\"1\\\",\\\"rule-name\\\":\\\"1\\\",\\\"object-locator\\\":{\\\"schema-name\\\":\\\"personal_data\\\",\\\"table-name\\\":\\\"\" + firstName + \"_\" + lastName + \"\\\"},\\\"rule-action\\\":\\\"include\\\",\\\"filters\\\":{}}]}\")\n            .withReplicationTaskSettings(\"{\\\"TargetMetadata\\\":{\\\"TargetSchema\\\":\\\"\\\",\\\"SupportLobs\\\":true,\\\"FullLobMode\\\":false,\\\"LobChunkSize\\\":64,\\\"LimitedSizeLobMode\\\":true,\\\"LobMaxSize\\\":32},\\\"FullLoadSettings\\\":{\\\"FullLoadEnabled\\\":true,\\\"ApplyChangesEnabled\\\":false,\\\"TargetTablePrepareOptions\\\":\\\"DROP_AND_CREATE\\\",\\\"CreatePkAfterFullLoad\\\":false,\\\"StopTaskCachedChangesApplied\\\":false,\\\"StopTaskCachedChangesNotApplied\\\":false,\\\"ResumeEnabled\\\":false,\\\"RangeLinearityFactor\\\":null},\\\"Logging\\\":{\\\"EnableLogging\\\":false}}\")\n            .withResourceAttributeList(new ResourceAttribute().withType(\"PersonalData\") /* <=== com.amazonaws.services.databasemigrationservice.model.ResourceAttribute.withType */ \n                    .withValue(personalData.toString()));\n\n    client.createReplicationTask(createReplicationTaskRequest);\n}\n}"
                  }
                ]
              },
              {
                "pathId" : "8614-8607-8584-8583-8582-8581-8580-8629",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 23,
                    "columnNumber" : 205,
                    "fileName" : "/app/code/databaseMigration.java",
                    "excerpt" : "            .withReplicationTaskIdentifier(firstName + \"_\" + lastName + \"_Task\")\n            .withSourceEndpointArn(\"arn:aws:dms:us-west-2:012345678901:endpoint:ASXWXYZWEXAMPLE\")\n            .withTargetEndpointArn(\"arn:aws:dms:us-west-2:012345678901:endpoint:AKXWXYZWEXAMPLE\")\n            .withReplicationInstanceArn(\"arn:aws:dms:us-west-2:012345678901:rep:6UTDJGB043EXAMPLE\")\n            .withMigrationType(\"full-load\")\n            .withTableMappings(\"{\\\"rules\\\":[{\\\"rule-type\\\":\\\"selection\\\",\\\"rule-id\\\":\\\"1\\\",\\\"rule-name\\\":\\\"1\\\",\\\"object-locator\\\":{\\\"schema-name\\\":\\\"personal_data\\\",\\\"table-name\\\":\\\"\" + firstName + \"_\" + lastName + \"\\\"},\\\"rule-action\\\":\\\"include\\\",\\\"filters\\\":{}}]}\") /* <=== java.lang.String */ \n            .withReplicationTaskSettings(\"{\\\"TargetMetadata\\\":{\\\"TargetSchema\\\":\\\"\\\",\\\"SupportLobs\\\":true,\\\"FullLobMode\\\":false,\\\"LobChunkSize\\\":64,\\\"LimitedSizeLobMode\\\":true,\\\"LobMaxSize\\\":32},\\\"FullLoadSettings\\\":{\\\"FullLoadEnabled\\\":true,\\\"ApplyChangesEnabled\\\":false,\\\"TargetTablePrepareOptions\\\":\\\"DROP_AND_CREATE\\\",\\\"CreatePkAfterFullLoad\\\":false,\\\"StopTaskCachedChangesApplied\\\":false,\\\"StopTaskCachedChangesNotApplied\\\":false,\\\"ResumeEnabled\\\":false,\\\"RangeLinearityFactor\\\":null},\\\"Logging\\\":{\\\"EnableLogging\\\":false}}\")\n            .withResourceAttributeList(new ResourceAttribute().withType(\"PersonalData\")\n                    .withValue(personalData.toString()));\n\n    client.createReplicationTask(createReplicationTaskRequest);"
                  },
                  {
                    "sample" : "\"{\\\"rules\\\":[{\\\"rule-type\\\":\\\"selection\\\",\\\"rule-id\\\":\\\"1\\\",\\\"rule-name\\\":\\\"1\\\",\\\"object-locator\\\":{\\\"schema-name\\\":\\\"personal_data\\\",\\\"table-name\\\":\\\"\" + firstName + \"_\" + lastName + \"\\\"},\\\"rule-action\\\":\\\"include\\\",\\\"filters\\\":{}}]}\"",
                    "lineNumber" : 23,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/databaseMigration.java",
                    "excerpt" : "            .withReplicationTaskIdentifier(firstName + \"_\" + lastName + \"_Task\")\n            .withSourceEndpointArn(\"arn:aws:dms:us-west-2:012345678901:endpoint:ASXWXYZWEXAMPLE\")\n            .withTargetEndpointArn(\"arn:aws:dms:us-west-2:012345678901:endpoint:AKXWXYZWEXAMPLE\")\n            .withReplicationInstanceArn(\"arn:aws:dms:us-west-2:012345678901:rep:6UTDJGB043EXAMPLE\")\n            .withMigrationType(\"full-load\")\n            .withTableMappings(\"{\\\"rules\\\":[{\\\"rule-type\\\":\\\"selection\\\",\\\"rule-id\\\":\\\"1\\\",\\\"rule-name\\\":\\\"1\\\",\\\"object-locator\\\":{\\\"schema-name\\\":\\\"personal_data\\\",\\\"table-name\\\":\\\"\" + firstName + \"_\" + lastName + \"\\\"},\\\"rule-action\\\":\\\"include\\\",\\\"filters\\\":{}}]}\") /* <===  */ \n            .withReplicationTaskSettings(\"{\\\"TargetMetadata\\\":{\\\"TargetSchema\\\":\\\"\\\",\\\"SupportLobs\\\":true,\\\"FullLobMode\\\":false,\\\"LobChunkSize\\\":64,\\\"LimitedSizeLobMode\\\":true,\\\"LobMaxSize\\\":32},\\\"FullLoadSettings\\\":{\\\"FullLoadEnabled\\\":true,\\\"ApplyChangesEnabled\\\":false,\\\"TargetTablePrepareOptions\\\":\\\"DROP_AND_CREATE\\\",\\\"CreatePkAfterFullLoad\\\":false,\\\"StopTaskCachedChangesApplied\\\":false,\\\"StopTaskCachedChangesNotApplied\\\":false,\\\"ResumeEnabled\\\":false,\\\"RangeLinearityFactor\\\":null},\\\"Logging\\\":{\\\"EnableLogging\\\":false}}\")\n            .withResourceAttributeList(new ResourceAttribute().withType(\"PersonalData\")\n                    .withValue(personalData.toString()));\n\n    client.createReplicationTask(createReplicationTaskRequest);"
                  },
                  {
                    "sample" : "withMigrationType(\"full-load\")",
                    "lineNumber" : 17,
                    "columnNumber" : 65,
                    "fileName" : "/app/code/databaseMigration.java",
                    "excerpt" : "}\n\npublic void AWSDatabaseMigrationServiceProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\n    CreateReplicationTaskRequest createReplicationTaskRequest = new CreateReplicationTaskRequest() /* <===  */ \n            .withReplicationTaskIdentifier(firstName + \"_\" + lastName + \"_Task\")\n            .withSourceEndpointArn(\"arn:aws:dms:us-west-2:012345678901:endpoint:ASXWXYZWEXAMPLE\")\n            .withTargetEndpointArn(\"arn:aws:dms:us-west-2:012345678901:endpoint:AKXWXYZWEXAMPLE\")\n            .withReplicationInstanceArn(\"arn:aws:dms:us-west-2:012345678901:rep:6UTDJGB043EXAMPLE\")\n            .withMigrationType(\"full-load\")"
                  },
                  {
                    "sample" : "withTableMappings(\"{\\\"rules\\\":[{\\\"rule-type\\\":\\\"selection\\\",\\\"rule-id\\\":\\\"1\\\",\\\"rule-name\\\":\\\"1\\\",\\\"object-locator\\\":{\\\"schema-name\\\":\\\"personal_data\\\",\\\"table-name\\\":\\\"\" + firstName + \"_\" + lastName + \"\\\"},\\\"rule-action\\\":\\\"include\\\",\\\"filters\\\":{}}]}\")",
                    "lineNumber" : 17,
                    "columnNumber" : 65,
                    "fileName" : "/app/code/databaseMigration.java",
                    "excerpt" : "}\n\npublic void AWSDatabaseMigrationServiceProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\n    CreateReplicationTaskRequest createReplicationTaskRequest = new CreateReplicationTaskRequest() /* <===  */ \n            .withReplicationTaskIdentifier(firstName + \"_\" + lastName + \"_Task\")\n            .withSourceEndpointArn(\"arn:aws:dms:us-west-2:012345678901:endpoint:ASXWXYZWEXAMPLE\")\n            .withTargetEndpointArn(\"arn:aws:dms:us-west-2:012345678901:endpoint:AKXWXYZWEXAMPLE\")\n            .withReplicationInstanceArn(\"arn:aws:dms:us-west-2:012345678901:rep:6UTDJGB043EXAMPLE\")\n            .withMigrationType(\"full-load\")"
                  },
                  {
                    "sample" : "withReplicationTaskSettings(\"{\\\"TargetMetadata\\\":{\\\"TargetSchema\\\":\\\"\\\",\\\"SupportLobs\\\":true,\\\"FullLobMode\\\":false,\\\"LobChunkSize\\\":64,\\\"LimitedSizeLobMode\\\":true,\\\"LobMaxSize\\\":32},\\\"FullLoadSettings\\\":{\\\"FullLoadEnabled\\\":true,\\\"ApplyChangesEnabled\\\":false,\\\"TargetTablePrepareOptions\\\":\\\"DROP_AND_CREATE\\\",\\\"CreatePkAfterFullLoad\\\":false,\\\"StopTaskCachedChangesApplied\\\":false,\\\"StopTaskCachedChangesNotApplied\\\":false,\\\"ResumeEnabled\\\":false,\\\"RangeLinearityFactor\\\":null},\\\"Logging\\\":{\\\"EnableLogging\\\":false}}\")",
                    "lineNumber" : 17,
                    "columnNumber" : 65,
                    "fileName" : "/app/code/databaseMigration.java",
                    "excerpt" : "}\n\npublic void AWSDatabaseMigrationServiceProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\n    CreateReplicationTaskRequest createReplicationTaskRequest = new CreateReplicationTaskRequest() /* <===  */ \n            .withReplicationTaskIdentifier(firstName + \"_\" + lastName + \"_Task\")\n            .withSourceEndpointArn(\"arn:aws:dms:us-west-2:012345678901:endpoint:ASXWXYZWEXAMPLE\")\n            .withTargetEndpointArn(\"arn:aws:dms:us-west-2:012345678901:endpoint:AKXWXYZWEXAMPLE\")\n            .withReplicationInstanceArn(\"arn:aws:dms:us-west-2:012345678901:rep:6UTDJGB043EXAMPLE\")\n            .withMigrationType(\"full-load\")"
                  },
                  {
                    "sample" : "withResourceAttributeList(new ResourceAttribute().withType(\"PersonalData\").withValue(personalData.toString()))",
                    "lineNumber" : 17,
                    "columnNumber" : 65,
                    "fileName" : "/app/code/databaseMigration.java",
                    "excerpt" : "}\n\npublic void AWSDatabaseMigrationServiceProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\n    CreateReplicationTaskRequest createReplicationTaskRequest = new CreateReplicationTaskRequest() /* <===  */ \n            .withReplicationTaskIdentifier(firstName + \"_\" + lastName + \"_Task\")\n            .withSourceEndpointArn(\"arn:aws:dms:us-west-2:012345678901:endpoint:ASXWXYZWEXAMPLE\")\n            .withTargetEndpointArn(\"arn:aws:dms:us-west-2:012345678901:endpoint:AKXWXYZWEXAMPLE\")\n            .withReplicationInstanceArn(\"arn:aws:dms:us-west-2:012345678901:rep:6UTDJGB043EXAMPLE\")\n            .withMigrationType(\"full-load\")"
                  },
                  {
                    "sample" : "createReplicationTaskRequest",
                    "lineNumber" : 17,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/databaseMigration.java",
                    "excerpt" : "}\n\npublic void AWSDatabaseMigrationServiceProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\n    CreateReplicationTaskRequest createReplicationTaskRequest = new CreateReplicationTaskRequest() /* <=== com.amazonaws.services.databasemigrationservice.model.CreateReplicationTaskRequest */ \n            .withReplicationTaskIdentifier(firstName + \"_\" + lastName + \"_Task\")\n            .withSourceEndpointArn(\"arn:aws:dms:us-west-2:012345678901:endpoint:ASXWXYZWEXAMPLE\")\n            .withTargetEndpointArn(\"arn:aws:dms:us-west-2:012345678901:endpoint:AKXWXYZWEXAMPLE\")\n            .withReplicationInstanceArn(\"arn:aws:dms:us-west-2:012345678901:rep:6UTDJGB043EXAMPLE\")\n            .withMigrationType(\"full-load\")"
                  },
                  {
                    "sample" : "createReplicationTask(createReplicationTaskRequest)",
                    "lineNumber" : 28,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/databaseMigration.java",
                    "excerpt" : "            .withTableMappings(\"{\\\"rules\\\":[{\\\"rule-type\\\":\\\"selection\\\",\\\"rule-id\\\":\\\"1\\\",\\\"rule-name\\\":\\\"1\\\",\\\"object-locator\\\":{\\\"schema-name\\\":\\\"personal_data\\\",\\\"table-name\\\":\\\"\" + firstName + \"_\" + lastName + \"\\\"},\\\"rule-action\\\":\\\"include\\\",\\\"filters\\\":{}}]}\")\n            .withReplicationTaskSettings(\"{\\\"TargetMetadata\\\":{\\\"TargetSchema\\\":\\\"\\\",\\\"SupportLobs\\\":true,\\\"FullLobMode\\\":false,\\\"LobChunkSize\\\":64,\\\"LimitedSizeLobMode\\\":true,\\\"LobMaxSize\\\":32},\\\"FullLoadSettings\\\":{\\\"FullLoadEnabled\\\":true,\\\"ApplyChangesEnabled\\\":false,\\\"TargetTablePrepareOptions\\\":\\\"DROP_AND_CREATE\\\",\\\"CreatePkAfterFullLoad\\\":false,\\\"StopTaskCachedChangesApplied\\\":false,\\\"StopTaskCachedChangesNotApplied\\\":false,\\\"ResumeEnabled\\\":false,\\\"RangeLinearityFactor\\\":null},\\\"Logging\\\":{\\\"EnableLogging\\\":false}}\")\n            .withResourceAttributeList(new ResourceAttribute().withType(\"PersonalData\")\n                    .withValue(personalData.toString()));\n\n    client.createReplicationTask(createReplicationTaskRequest); /* <=== com.amazonaws.services.databasemigrationservice.AmazonDatabaseMigrationService.createReplicationTask */ \n}\n}"
                  }
                ]
              },
              {
                "pathId" : "10135-10133",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 16,
                    "columnNumber" : 40,
                    "fileName" : "/app/code/chimeSDKVoice.java",
                    "excerpt" : "try {\n  CreateParticipantRequest createParticipantRequest = new CreateParticipantRequest();\n  createParticipantRequest.setMeetingId(\"<MEETING_ID>\");\n  \n  createParticipantRequest.setFirstName(firstName);\n  createParticipantRequest.setLastName(lastName); /* <=== java.lang.String */ \n  createParticipantRequest.setEmail(email);\n  \n  CreateParticipantResult createParticipantResult = client.createParticipant(createParticipantRequest);\n  System.out.println(\"Successfully sent personal data to AWS Chime SDK Voice, Participant Identifier: \" + createParticipantResult.getParticipantId());\n} catch (AmazonChimeSDKVoiceException e) {"
                  },
                  {
                    "sample" : "setLastName(lastName)",
                    "lineNumber" : 16,
                    "columnNumber" : 3,
                    "fileName" : "/app/code/chimeSDKVoice.java",
                    "excerpt" : "try {\n  CreateParticipantRequest createParticipantRequest = new CreateParticipantRequest();\n  createParticipantRequest.setMeetingId(\"<MEETING_ID>\");\n  \n  createParticipantRequest.setFirstName(firstName);\n  createParticipantRequest.setLastName(lastName); /* <=== com.amazonaws.services.chimesdkvoice.model.CreateParticipantRequest.setLastName */ \n  createParticipantRequest.setEmail(email);\n  \n  CreateParticipantResult createParticipantResult = client.createParticipant(createParticipantRequest);\n  System.out.println(\"Successfully sent personal data to AWS Chime SDK Voice, Participant Identifier: \" + createParticipantResult.getParticipantId());\n} catch (AmazonChimeSDKVoiceException e) {"
                  }
                ]
              },
              {
                "pathId" : "8336-8327",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 13,
                    "columnNumber" : 66,
                    "fileName" : "/app/code/chimeSDKIdentity.java",
                    "excerpt" : "  private static final AWSChimeSDKIdentity CLIENT = AWSChimeSDKIdentityClientBuilder.defaultClient();\n\n  public static void AWSChimeSDKIdentityFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n    List<Attribute> attributes = new ArrayList<>();\n    attributes.add(new Attribute().withKey(\"firstName\").withValue(firstName));\n    attributes.add(new Attribute().withKey(\"lastName\").withValue(lastName)); /* <=== java.lang.String */ \n    attributes.add(new Attribute().withKey(\"phoneNumber\").withValue(phoneNumber));\n    attributes.add(new Attribute().withKey(\"DOB\").withValue(DOB));\n\n    PutAttributesRequest request = new PutAttributesRequest().withAttributes(attributes);\n    CLIENT.putAttributes(request);"
                  },
                  {
                    "sample" : "withKey(\"lastName\")",
                    "lineNumber" : 13,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/chimeSDKIdentity.java",
                    "excerpt" : "  private static final AWSChimeSDKIdentity CLIENT = AWSChimeSDKIdentityClientBuilder.defaultClient();\n\n  public static void AWSChimeSDKIdentityFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n    List<Attribute> attributes = new ArrayList<>();\n    attributes.add(new Attribute().withKey(\"firstName\").withValue(firstName));\n    attributes.add(new Attribute().withKey(\"lastName\").withValue(lastName)); /* <=== com.amazonaws.services.chimesdkidentity.model.Attribute.withKey */ \n    attributes.add(new Attribute().withKey(\"phoneNumber\").withValue(phoneNumber));\n    attributes.add(new Attribute().withKey(\"DOB\").withValue(DOB));\n\n    PutAttributesRequest request = new PutAttributesRequest().withAttributes(attributes);\n    CLIENT.putAttributes(request);"
                  }
                ]
              },
              {
                "pathId" : "7757-7744-7743-7742-7771",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 18,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/ebs.java",
                    "excerpt" : "\npublic void AWSEBSProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n    \n    CreateSnapshotRequest createSnapshotRequest = new CreateSnapshotRequest()\n            .withVolumeId(firstName + \"_\" + lastName + \"_Volume\") /* <=== java.lang.String */ \n            .withTagSpecifications(new Tag().withKey(\"PersonalData\").withValue(personalData.toString()));\n    \n    client.createSnapshot(createSnapshotRequest);\n}\n}"
                  },
                  {
                    "sample" : "withVolumeId(firstName + \"_\" + lastName + \"_Volume\")",
                    "lineNumber" : 17,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/ebs.java",
                    "excerpt" : "}\n\npublic void AWSEBSProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n    \n    CreateSnapshotRequest createSnapshotRequest = new CreateSnapshotRequest() /* <=== com.amazonaws.services.ebs.model.CreateSnapshotRequest.withVolumeId */ \n            .withVolumeId(firstName + \"_\" + lastName + \"_Volume\")\n            .withTagSpecifications(new Tag().withKey(\"PersonalData\").withValue(personalData.toString()));\n    \n    client.createSnapshot(createSnapshotRequest);\n}"
                  },
                  {
                    "sample" : "withTagSpecifications(new Tag().withKey(\"PersonalData\").withValue(personalData.toString()))",
                    "lineNumber" : 17,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/ebs.java",
                    "excerpt" : "}\n\npublic void AWSEBSProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n    \n    CreateSnapshotRequest createSnapshotRequest = new CreateSnapshotRequest() /* <===  */ \n            .withVolumeId(firstName + \"_\" + lastName + \"_Volume\")\n            .withTagSpecifications(new Tag().withKey(\"PersonalData\").withValue(personalData.toString()));\n    \n    client.createSnapshot(createSnapshotRequest);\n}"
                  },
                  {
                    "sample" : "createSnapshotRequest",
                    "lineNumber" : 17,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/ebs.java",
                    "excerpt" : "}\n\npublic void AWSEBSProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n    \n    CreateSnapshotRequest createSnapshotRequest = new CreateSnapshotRequest() /* <=== com.amazonaws.services.ebs.model.CreateSnapshotRequest */ \n            .withVolumeId(firstName + \"_\" + lastName + \"_Volume\")\n            .withTagSpecifications(new Tag().withKey(\"PersonalData\").withValue(personalData.toString()));\n    \n    client.createSnapshot(createSnapshotRequest);\n}"
                  },
                  {
                    "sample" : "createSnapshot(createSnapshotRequest)",
                    "lineNumber" : 21,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/ebs.java",
                    "excerpt" : "    \n    CreateSnapshotRequest createSnapshotRequest = new CreateSnapshotRequest()\n            .withVolumeId(firstName + \"_\" + lastName + \"_Volume\")\n            .withTagSpecifications(new Tag().withKey(\"PersonalData\").withValue(personalData.toString()));\n    \n    client.createSnapshot(createSnapshotRequest); /* <=== com.amazonaws.services.ebs.AmazonEBS.createSnapshot */ \n}\n}"
                  }
                ]
              },
              {
                "pathId" : "13495-13482-13481-13480-13501",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 19,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/iotFleetwise.java",
                    "excerpt" : "\npublic void AWSIoTFleetwiseProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nCreateTrackerRequest createTrackerRequest = new CreateTrackerRequest()\n        .withTrackerName(firstName + \"_\" + lastName + \"_Tracker\") /* <=== java.lang.String */ \n        .withAttributePayload(personalData);\n\nCreateTrackerResult result = client.createTracker(createTrackerRequest);\nSystem.out.println(\"Tracker created with ID: \" + result.getTrackerId());\n}"
                  },
                  {
                    "sample" : "withTrackerName(firstName + \"_\" + lastName + \"_Tracker\")",
                    "lineNumber" : 18,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/iotFleetwise.java",
                    "excerpt" : "}\n\npublic void AWSIoTFleetwiseProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nCreateTrackerRequest createTrackerRequest = new CreateTrackerRequest() /* <=== com.amazonaws.services.iotfleetwise.model.CreateTrackerRequest.withTrackerName */ \n        .withTrackerName(firstName + \"_\" + lastName + \"_Tracker\")\n        .withAttributePayload(personalData);\n\nCreateTrackerResult result = client.createTracker(createTrackerRequest);\nSystem.out.println(\"Tracker created with ID: \" + result.getTrackerId());"
                  },
                  {
                    "sample" : "withAttributePayload(personalData)",
                    "lineNumber" : 18,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/iotFleetwise.java",
                    "excerpt" : "}\n\npublic void AWSIoTFleetwiseProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nCreateTrackerRequest createTrackerRequest = new CreateTrackerRequest() /* <===  */ \n        .withTrackerName(firstName + \"_\" + lastName + \"_Tracker\")\n        .withAttributePayload(personalData);\n\nCreateTrackerResult result = client.createTracker(createTrackerRequest);\nSystem.out.println(\"Tracker created with ID: \" + result.getTrackerId());"
                  },
                  {
                    "sample" : "createTrackerRequest",
                    "lineNumber" : 18,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/iotFleetwise.java",
                    "excerpt" : "}\n\npublic void AWSIoTFleetwiseProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\nMap<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\nCreateTrackerRequest createTrackerRequest = new CreateTrackerRequest() /* <=== com.amazonaws.services.iotfleetwise.model.CreateTrackerRequest */ \n        .withTrackerName(firstName + \"_\" + lastName + \"_Tracker\")\n        .withAttributePayload(personalData);\n\nCreateTrackerResult result = client.createTracker(createTrackerRequest);\nSystem.out.println(\"Tracker created with ID: \" + result.getTrackerId());"
                  },
                  {
                    "sample" : "createTracker(createTrackerRequest)",
                    "lineNumber" : 22,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/iotFleetwise.java",
                    "excerpt" : "\nCreateTrackerRequest createTrackerRequest = new CreateTrackerRequest()\n        .withTrackerName(firstName + \"_\" + lastName + \"_Tracker\")\n        .withAttributePayload(personalData);\n\nCreateTrackerResult result = client.createTracker(createTrackerRequest); /* <=== com.amazonaws.services.iotfleetwise.AmazonIoTFleetwise.createTracker */ \nSystem.out.println(\"Tracker created with ID: \" + result.getTrackerId());\n}\n}"
                  }
                ]
              },
              {
                "pathId" : "12582-12577-12576-12596",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 10,
                    "columnNumber" : 83,
                    "fileName" : "/app/code/minframeModernization.java",
                    "excerpt" : "import java.util.Map;\n\npublic class AWSMainframeModernizationUtil {\n\npublic void AWSMainframeModernizationProcessData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob); /* <=== java.lang.String */ \n    \n    AmazonMainframeModernizationClient client = AmazonMainframeModernizationClient.builder().build();\n    \n    MigrateSystemToVirtualMachineRequest request = new MigrateSystemToVirtualMachineRequest()\n            .withInputData(personalData);"
                  },
                  {
                    "sample" : "Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob)",
                    "lineNumber" : 10,
                    "columnNumber" : 40,
                    "fileName" : "/app/code/minframeModernization.java",
                    "excerpt" : "import java.util.Map;\n\npublic class AWSMainframeModernizationUtil {\n\npublic void AWSMainframeModernizationProcessData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob); /* <=== java.util.Map.of */ \n    \n    AmazonMainframeModernizationClient client = AmazonMainframeModernizationClient.builder().build();\n    \n    MigrateSystemToVirtualMachineRequest request = new MigrateSystemToVirtualMachineRequest()\n            .withInputData(personalData);"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 10,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/minframeModernization.java",
                    "excerpt" : "import java.util.Map;\n\npublic class AWSMainframeModernizationUtil {\n\npublic void AWSMainframeModernizationProcessData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob); /* <=== java.util.Map */ \n    \n    AmazonMainframeModernizationClient client = AmazonMainframeModernizationClient.builder().build();\n    \n    MigrateSystemToVirtualMachineRequest request = new MigrateSystemToVirtualMachineRequest()\n            .withInputData(personalData);"
                  },
                  {
                    "sample" : "withInputData(personalData)",
                    "lineNumber" : 14,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/minframeModernization.java",
                    "excerpt" : "public void AWSMainframeModernizationProcessData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n    \n    AmazonMainframeModernizationClient client = AmazonMainframeModernizationClient.builder().build();\n    \n    MigrateSystemToVirtualMachineRequest request = new MigrateSystemToVirtualMachineRequest() /* <=== com.amazonaws.services.mainframemodernization.model.MigrateSystemToVirtualMachineRequest.withInputData */ \n            .withInputData(personalData);\n    \n    MigrateSystemToVirtualMachineResult result = client.migrateSystemToVirtualMachine(request);\n    \n    System.out.println(\"Migration result: \" + result);"
                  }
                ]
              },
              {
                "pathId" : "12582-12577-12576-12596-12595-12608",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 10,
                    "columnNumber" : 83,
                    "fileName" : "/app/code/minframeModernization.java",
                    "excerpt" : "import java.util.Map;\n\npublic class AWSMainframeModernizationUtil {\n\npublic void AWSMainframeModernizationProcessData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob); /* <=== java.lang.String */ \n    \n    AmazonMainframeModernizationClient client = AmazonMainframeModernizationClient.builder().build();\n    \n    MigrateSystemToVirtualMachineRequest request = new MigrateSystemToVirtualMachineRequest()\n            .withInputData(personalData);"
                  },
                  {
                    "sample" : "Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob)",
                    "lineNumber" : 10,
                    "columnNumber" : 40,
                    "fileName" : "/app/code/minframeModernization.java",
                    "excerpt" : "import java.util.Map;\n\npublic class AWSMainframeModernizationUtil {\n\npublic void AWSMainframeModernizationProcessData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob); /* <=== java.util.Map.of */ \n    \n    AmazonMainframeModernizationClient client = AmazonMainframeModernizationClient.builder().build();\n    \n    MigrateSystemToVirtualMachineRequest request = new MigrateSystemToVirtualMachineRequest()\n            .withInputData(personalData);"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 10,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/minframeModernization.java",
                    "excerpt" : "import java.util.Map;\n\npublic class AWSMainframeModernizationUtil {\n\npublic void AWSMainframeModernizationProcessData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob); /* <=== java.util.Map */ \n    \n    AmazonMainframeModernizationClient client = AmazonMainframeModernizationClient.builder().build();\n    \n    MigrateSystemToVirtualMachineRequest request = new MigrateSystemToVirtualMachineRequest()\n            .withInputData(personalData);"
                  },
                  {
                    "sample" : "withInputData(personalData)",
                    "lineNumber" : 14,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/minframeModernization.java",
                    "excerpt" : "public void AWSMainframeModernizationProcessData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n    \n    AmazonMainframeModernizationClient client = AmazonMainframeModernizationClient.builder().build();\n    \n    MigrateSystemToVirtualMachineRequest request = new MigrateSystemToVirtualMachineRequest() /* <=== com.amazonaws.services.mainframemodernization.model.MigrateSystemToVirtualMachineRequest.withInputData */ \n            .withInputData(personalData);\n    \n    MigrateSystemToVirtualMachineResult result = client.migrateSystemToVirtualMachine(request);\n    \n    System.out.println(\"Migration result: \" + result);"
                  },
                  {
                    "sample" : "request",
                    "lineNumber" : 14,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/minframeModernization.java",
                    "excerpt" : "public void AWSMainframeModernizationProcessData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n    \n    AmazonMainframeModernizationClient client = AmazonMainframeModernizationClient.builder().build();\n    \n    MigrateSystemToVirtualMachineRequest request = new MigrateSystemToVirtualMachineRequest() /* <=== com.amazonaws.services.mainframemodernization.model.MigrateSystemToVirtualMachineRequest */ \n            .withInputData(personalData);\n    \n    MigrateSystemToVirtualMachineResult result = client.migrateSystemToVirtualMachine(request);\n    \n    System.out.println(\"Migration result: \" + result);"
                  },
                  {
                    "sample" : "migrateSystemToVirtualMachine(request)",
                    "lineNumber" : 17,
                    "columnNumber" : 50,
                    "fileName" : "/app/code/minframeModernization.java",
                    "excerpt" : "    AmazonMainframeModernizationClient client = AmazonMainframeModernizationClient.builder().build();\n    \n    MigrateSystemToVirtualMachineRequest request = new MigrateSystemToVirtualMachineRequest()\n            .withInputData(personalData);\n    \n    MigrateSystemToVirtualMachineResult result = client.migrateSystemToVirtualMachine(request); /* <=== com.amazonaws.services.mainframemodernization.AmazonMainframeModernizationClient.migrateSystemToVirtualMachine */ \n    \n    System.out.println(\"Migration result: \" + result);\n}\n}"
                  }
                ]
              },
              {
                "pathId" : "3186-3187-3185-3189-3193-3200",
                "path" : [
                  {
                    "sample" : "\"lastName\"",
                    "lineNumber" : 13,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/chimeSdkMessaging.java",
                    "excerpt" : "  private static AmazonChimeSDKMessaging chimeSDKMessagingClient = AmazonChimeSDKMessagingClientBuilder.defaultClient();\n\n  public static void AWSChimeSDKmessagingFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = new HashMap<>();\n    personalData.put(\"firstName\", firstName);\n    personalData.put(\"lastName\", lastName); /* <===  */ \n    personalData.put(\"phoneNumber\", phoneNumber);\n    personalData.put(\"dob\", dob);\n\n    MessageRequest messageRequest = new MessageRequest();\n    messageRequest.setContent(personalData.toString());"
                  },
                  {
                    "sample" : "lastName",
                    "lineNumber" : 13,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/chimeSdkMessaging.java",
                    "excerpt" : "  private static AmazonChimeSDKMessaging chimeSDKMessagingClient = AmazonChimeSDKMessagingClientBuilder.defaultClient();\n\n  public static void AWSChimeSDKmessagingFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = new HashMap<>();\n    personalData.put(\"firstName\", firstName);\n    personalData.put(\"lastName\", lastName); /* <=== java.lang.String */ \n    personalData.put(\"phoneNumber\", phoneNumber);\n    personalData.put(\"dob\", dob);\n\n    MessageRequest messageRequest = new MessageRequest();\n    messageRequest.setContent(personalData.toString());"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 13,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/chimeSdkMessaging.java",
                    "excerpt" : "  private static AmazonChimeSDKMessaging chimeSDKMessagingClient = AmazonChimeSDKMessagingClientBuilder.defaultClient();\n\n  public static void AWSChimeSDKmessagingFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = new HashMap<>();\n    personalData.put(\"firstName\", firstName);\n    personalData.put(\"lastName\", lastName); /* <=== java.util.Map */ \n    personalData.put(\"phoneNumber\", phoneNumber);\n    personalData.put(\"dob\", dob);\n\n    MessageRequest messageRequest = new MessageRequest();\n    messageRequest.setContent(personalData.toString());"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 14,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/chimeSdkMessaging.java",
                    "excerpt" : "\n  public static void AWSChimeSDKmessagingFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = new HashMap<>();\n    personalData.put(\"firstName\", firstName);\n    personalData.put(\"lastName\", lastName);\n    personalData.put(\"phoneNumber\", phoneNumber); /* <=== java.util.Map */ \n    personalData.put(\"dob\", dob);\n\n    MessageRequest messageRequest = new MessageRequest();\n    messageRequest.setContent(personalData.toString());\n"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 15,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/chimeSdkMessaging.java",
                    "excerpt" : "  public static void AWSChimeSDKmessagingFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = new HashMap<>();\n    personalData.put(\"firstName\", firstName);\n    personalData.put(\"lastName\", lastName);\n    personalData.put(\"phoneNumber\", phoneNumber);\n    personalData.put(\"dob\", dob); /* <=== java.util.Map */ \n\n    MessageRequest messageRequest = new MessageRequest();\n    messageRequest.setContent(personalData.toString());\n\n    chimeSDKMessagingClient.sendMessage(messageRequest);"
                  },
                  {
                    "sample" : "setContent(personalData.toString())",
                    "lineNumber" : 18,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/chimeSdkMessaging.java",
                    "excerpt" : "    personalData.put(\"lastName\", lastName);\n    personalData.put(\"phoneNumber\", phoneNumber);\n    personalData.put(\"dob\", dob);\n\n    MessageRequest messageRequest = new MessageRequest();\n    messageRequest.setContent(personalData.toString()); /* <=== com.amazonaws.services.chimesdkmessaging.model.MessageRequest.setContent */ \n\n    chimeSDKMessagingClient.sendMessage(messageRequest);\n  }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "2644-2640-2639-2638-2665-2663-2662-2653",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 14,
                    "columnNumber" : 83,
                    "fileName" : "/app/code/eks.java",
                    "excerpt" : "public AWSEKSDataProcessor() {\n    client = AmazonEKSClientBuilder.standard().build();\n}\n\npublic void processPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob); /* <=== java.lang.String */ \n    \n    CreateClusterRequest createClusterRequest = new CreateClusterRequest()\n            .withName(\"PersonalDataCluster\")\n            .withTags(Map.of(\"PersonalData\", personalData.toString()));\n            "
                  },
                  {
                    "sample" : "Map",
                    "lineNumber" : 14,
                    "columnNumber" : 40,
                    "fileName" : "/app/code/eks.java",
                    "excerpt" : "public AWSEKSDataProcessor() {\n    client = AmazonEKSClientBuilder.standard().build();\n}\n\npublic void processPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob); /* <=== java.util.Map */ \n    \n    CreateClusterRequest createClusterRequest = new CreateClusterRequest()\n            .withName(\"PersonalDataCluster\")\n            .withTags(Map.of(\"PersonalData\", personalData.toString()));\n            "
                  },
                  {
                    "sample" : "Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob)",
                    "lineNumber" : 14,
                    "columnNumber" : 40,
                    "fileName" : "/app/code/eks.java",
                    "excerpt" : "public AWSEKSDataProcessor() {\n    client = AmazonEKSClientBuilder.standard().build();\n}\n\npublic void processPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob); /* <=== java.util.Map.of */ \n    \n    CreateClusterRequest createClusterRequest = new CreateClusterRequest()\n            .withName(\"PersonalDataCluster\")\n            .withTags(Map.of(\"PersonalData\", personalData.toString()));\n            "
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 14,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/eks.java",
                    "excerpt" : "public AWSEKSDataProcessor() {\n    client = AmazonEKSClientBuilder.standard().build();\n}\n\npublic void processPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob); /* <=== java.util.Map */ \n    \n    CreateClusterRequest createClusterRequest = new CreateClusterRequest()\n            .withName(\"PersonalDataCluster\")\n            .withTags(Map.of(\"PersonalData\", personalData.toString()));\n            "
                  },
                  {
                    "sample" : "personalData.toString()",
                    "lineNumber" : 18,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/eks.java",
                    "excerpt" : "public void processPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n    \n    CreateClusterRequest createClusterRequest = new CreateClusterRequest()\n            .withName(\"PersonalDataCluster\")\n            .withTags(Map.of(\"PersonalData\", personalData.toString())); /* <=== java.util.Map.toString */ \n            \n    client.createCluster(createClusterRequest);\n}\n}"
                  },
                  {
                    "sample" : "Map",
                    "lineNumber" : 18,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/eks.java",
                    "excerpt" : "public void processPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n    \n    CreateClusterRequest createClusterRequest = new CreateClusterRequest()\n            .withName(\"PersonalDataCluster\")\n            .withTags(Map.of(\"PersonalData\", personalData.toString())); /* <=== java.util.Map */ \n            \n    client.createCluster(createClusterRequest);\n}\n}"
                  },
                  {
                    "sample" : "Map.of(\"PersonalData\", personalData.toString())",
                    "lineNumber" : 18,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/eks.java",
                    "excerpt" : "public void processPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n    \n    CreateClusterRequest createClusterRequest = new CreateClusterRequest()\n            .withName(\"PersonalDataCluster\")\n            .withTags(Map.of(\"PersonalData\", personalData.toString())); /* <=== java.util.Map.of */ \n            \n    client.createCluster(createClusterRequest);\n}\n}"
                  },
                  {
                    "sample" : "withName(\"PersonalDataCluster\")",
                    "lineNumber" : 16,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/eks.java",
                    "excerpt" : "}\n\npublic void processPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n    \n    CreateClusterRequest createClusterRequest = new CreateClusterRequest() /* <=== com.amazonaws.services.eks.model.CreateClusterRequest.withName */ \n            .withName(\"PersonalDataCluster\")\n            .withTags(Map.of(\"PersonalData\", personalData.toString()));\n            \n    client.createCluster(createClusterRequest);\n}"
                  }
                ]
              },
              {
                "pathId" : "11815-11806-11805-11804-11803-11802-11819",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 16,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/oam.java",
                    "excerpt" : "  }\n\n  public CreateUserResult AWSOAMFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    CreateUserRequest request = new CreateUserRequest()\n      .withFirstName(firstName)\n      .withLastName(lastName) /* <=== java.lang.String */ \n      .withPhoneNumber(phoneNumber)\n      .withDateOfBirth(dob);\n    return oamClient.createUser(request);\n  }\n}"
                  },
                  {
                    "sample" : "withFirstName(firstName)",
                    "lineNumber" : 14,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/oam.java",
                    "excerpt" : "  public AWSOAMUtil(AWSOAM oamClient) {\n    this.oamClient = oamClient;\n  }\n\n  public CreateUserResult AWSOAMFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    CreateUserRequest request = new CreateUserRequest() /* <=== com.amazonaws.services.oam.model.CreateUserRequest.withFirstName */ \n      .withFirstName(firstName)\n      .withLastName(lastName)\n      .withPhoneNumber(phoneNumber)\n      .withDateOfBirth(dob);\n    return oamClient.createUser(request);"
                  },
                  {
                    "sample" : "withLastName(lastName)",
                    "lineNumber" : 14,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/oam.java",
                    "excerpt" : "  public AWSOAMUtil(AWSOAM oamClient) {\n    this.oamClient = oamClient;\n  }\n\n  public CreateUserResult AWSOAMFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    CreateUserRequest request = new CreateUserRequest() /* <===  */ \n      .withFirstName(firstName)\n      .withLastName(lastName)\n      .withPhoneNumber(phoneNumber)\n      .withDateOfBirth(dob);\n    return oamClient.createUser(request);"
                  },
                  {
                    "sample" : "withPhoneNumber(phoneNumber)",
                    "lineNumber" : 14,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/oam.java",
                    "excerpt" : "  public AWSOAMUtil(AWSOAM oamClient) {\n    this.oamClient = oamClient;\n  }\n\n  public CreateUserResult AWSOAMFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    CreateUserRequest request = new CreateUserRequest() /* <===  */ \n      .withFirstName(firstName)\n      .withLastName(lastName)\n      .withPhoneNumber(phoneNumber)\n      .withDateOfBirth(dob);\n    return oamClient.createUser(request);"
                  },
                  {
                    "sample" : "withDateOfBirth(dob)",
                    "lineNumber" : 14,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/oam.java",
                    "excerpt" : "  public AWSOAMUtil(AWSOAM oamClient) {\n    this.oamClient = oamClient;\n  }\n\n  public CreateUserResult AWSOAMFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    CreateUserRequest request = new CreateUserRequest() /* <===  */ \n      .withFirstName(firstName)\n      .withLastName(lastName)\n      .withPhoneNumber(phoneNumber)\n      .withDateOfBirth(dob);\n    return oamClient.createUser(request);"
                  },
                  {
                    "sample" : "request",
                    "lineNumber" : 14,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/oam.java",
                    "excerpt" : "  public AWSOAMUtil(AWSOAM oamClient) {\n    this.oamClient = oamClient;\n  }\n\n  public CreateUserResult AWSOAMFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    CreateUserRequest request = new CreateUserRequest() /* <=== com.amazonaws.services.oam.model.CreateUserRequest */ \n      .withFirstName(firstName)\n      .withLastName(lastName)\n      .withPhoneNumber(phoneNumber)\n      .withDateOfBirth(dob);\n    return oamClient.createUser(request);"
                  },
                  {
                    "sample" : "createUser(request)",
                    "lineNumber" : 19,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/oam.java",
                    "excerpt" : "    CreateUserRequest request = new CreateUserRequest()\n      .withFirstName(firstName)\n      .withLastName(lastName)\n      .withPhoneNumber(phoneNumber)\n      .withDateOfBirth(dob);\n    return oamClient.createUser(request); /* <=== com.amazonaws.services.oam.AWSOAM.createUser */ \n  }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "8336-8327-8326-8325-8338-8351-8366-8365-8375",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 13,
                    "columnNumber" : 66,
                    "fileName" : "/app/code/chimeSDKIdentity.java",
                    "excerpt" : "  private static final AWSChimeSDKIdentity CLIENT = AWSChimeSDKIdentityClientBuilder.defaultClient();\n\n  public static void AWSChimeSDKIdentityFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n    List<Attribute> attributes = new ArrayList<>();\n    attributes.add(new Attribute().withKey(\"firstName\").withValue(firstName));\n    attributes.add(new Attribute().withKey(\"lastName\").withValue(lastName)); /* <=== java.lang.String */ \n    attributes.add(new Attribute().withKey(\"phoneNumber\").withValue(phoneNumber));\n    attributes.add(new Attribute().withKey(\"DOB\").withValue(DOB));\n\n    PutAttributesRequest request = new PutAttributesRequest().withAttributes(attributes);\n    CLIENT.putAttributes(request);"
                  },
                  {
                    "sample" : "withKey(\"lastName\")",
                    "lineNumber" : 13,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/chimeSDKIdentity.java",
                    "excerpt" : "  private static final AWSChimeSDKIdentity CLIENT = AWSChimeSDKIdentityClientBuilder.defaultClient();\n\n  public static void AWSChimeSDKIdentityFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n    List<Attribute> attributes = new ArrayList<>();\n    attributes.add(new Attribute().withKey(\"firstName\").withValue(firstName));\n    attributes.add(new Attribute().withKey(\"lastName\").withValue(lastName)); /* <=== com.amazonaws.services.chimesdkidentity.model.Attribute.withKey */ \n    attributes.add(new Attribute().withKey(\"phoneNumber\").withValue(phoneNumber));\n    attributes.add(new Attribute().withKey(\"DOB\").withValue(DOB));\n\n    PutAttributesRequest request = new PutAttributesRequest().withAttributes(attributes);\n    CLIENT.putAttributes(request);"
                  },
                  {
                    "sample" : "withValue(lastName)",
                    "lineNumber" : 13,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/chimeSDKIdentity.java",
                    "excerpt" : "  private static final AWSChimeSDKIdentity CLIENT = AWSChimeSDKIdentityClientBuilder.defaultClient();\n\n  public static void AWSChimeSDKIdentityFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n    List<Attribute> attributes = new ArrayList<>();\n    attributes.add(new Attribute().withKey(\"firstName\").withValue(firstName));\n    attributes.add(new Attribute().withKey(\"lastName\").withValue(lastName)); /* <===  */ \n    attributes.add(new Attribute().withKey(\"phoneNumber\").withValue(phoneNumber));\n    attributes.add(new Attribute().withKey(\"DOB\").withValue(DOB));\n\n    PutAttributesRequest request = new PutAttributesRequest().withAttributes(attributes);\n    CLIENT.putAttributes(request);"
                  },
                  {
                    "sample" : "attributes",
                    "lineNumber" : 13,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/chimeSDKIdentity.java",
                    "excerpt" : "  private static final AWSChimeSDKIdentity CLIENT = AWSChimeSDKIdentityClientBuilder.defaultClient();\n\n  public static void AWSChimeSDKIdentityFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n    List<Attribute> attributes = new ArrayList<>();\n    attributes.add(new Attribute().withKey(\"firstName\").withValue(firstName));\n    attributes.add(new Attribute().withKey(\"lastName\").withValue(lastName)); /* <=== ANY */ \n    attributes.add(new Attribute().withKey(\"phoneNumber\").withValue(phoneNumber));\n    attributes.add(new Attribute().withKey(\"DOB\").withValue(DOB));\n\n    PutAttributesRequest request = new PutAttributesRequest().withAttributes(attributes);\n    CLIENT.putAttributes(request);"
                  },
                  {
                    "sample" : "attributes",
                    "lineNumber" : 14,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/chimeSDKIdentity.java",
                    "excerpt" : "\n  public static void AWSChimeSDKIdentityFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n    List<Attribute> attributes = new ArrayList<>();\n    attributes.add(new Attribute().withKey(\"firstName\").withValue(firstName));\n    attributes.add(new Attribute().withKey(\"lastName\").withValue(lastName));\n    attributes.add(new Attribute().withKey(\"phoneNumber\").withValue(phoneNumber)); /* <=== ANY */ \n    attributes.add(new Attribute().withKey(\"DOB\").withValue(DOB));\n\n    PutAttributesRequest request = new PutAttributesRequest().withAttributes(attributes);\n    CLIENT.putAttributes(request);\n  }"
                  },
                  {
                    "sample" : "attributes",
                    "lineNumber" : 15,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/chimeSDKIdentity.java",
                    "excerpt" : "  public static void AWSChimeSDKIdentityFirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n    List<Attribute> attributes = new ArrayList<>();\n    attributes.add(new Attribute().withKey(\"firstName\").withValue(firstName));\n    attributes.add(new Attribute().withKey(\"lastName\").withValue(lastName));\n    attributes.add(new Attribute().withKey(\"phoneNumber\").withValue(phoneNumber));\n    attributes.add(new Attribute().withKey(\"DOB\").withValue(DOB)); /* <=== ANY */ \n\n    PutAttributesRequest request = new PutAttributesRequest().withAttributes(attributes);\n    CLIENT.putAttributes(request);\n  }\n}"
                  },
                  {
                    "sample" : "withAttributes(attributes)",
                    "lineNumber" : 17,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/chimeSDKIdentity.java",
                    "excerpt" : "    attributes.add(new Attribute().withKey(\"firstName\").withValue(firstName));\n    attributes.add(new Attribute().withKey(\"lastName\").withValue(lastName));\n    attributes.add(new Attribute().withKey(\"phoneNumber\").withValue(phoneNumber));\n    attributes.add(new Attribute().withKey(\"DOB\").withValue(DOB));\n\n    PutAttributesRequest request = new PutAttributesRequest().withAttributes(attributes); /* <=== com.amazonaws.services.chimesdkidentity.model.PutAttributesRequest.withAttributes */ \n    CLIENT.putAttributes(request);\n  }\n}\n"
                  },
                  {
                    "sample" : "request",
                    "lineNumber" : 17,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/chimeSDKIdentity.java",
                    "excerpt" : "    attributes.add(new Attribute().withKey(\"firstName\").withValue(firstName));\n    attributes.add(new Attribute().withKey(\"lastName\").withValue(lastName));\n    attributes.add(new Attribute().withKey(\"phoneNumber\").withValue(phoneNumber));\n    attributes.add(new Attribute().withKey(\"DOB\").withValue(DOB));\n\n    PutAttributesRequest request = new PutAttributesRequest().withAttributes(attributes); /* <=== com.amazonaws.services.chimesdkidentity.model.PutAttributesRequest */ \n    CLIENT.putAttributes(request);\n  }\n}\n"
                  },
                  {
                    "sample" : "putAttributes(request)",
                    "lineNumber" : 18,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/chimeSDKIdentity.java",
                    "excerpt" : "    attributes.add(new Attribute().withKey(\"lastName\").withValue(lastName));\n    attributes.add(new Attribute().withKey(\"phoneNumber\").withValue(phoneNumber));\n    attributes.add(new Attribute().withKey(\"DOB\").withValue(DOB));\n\n    PutAttributesRequest request = new PutAttributesRequest().withAttributes(attributes);\n    CLIENT.putAttributes(request); /* <=== com.amazonaws.services.chimesdkidentity.AWSChimeSDKIdentity.putAttributes */ \n  }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "14695-14688-14679",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 25,
                    "columnNumber" : 72,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        String dataSetId = dataExchangeClient.createDataSet(createDataSetRequest).getId();\n\n        // Create a revision for the data set\n        CreateRevisionRequest createRevisionRequest = new CreateRevisionRequest()\n                .withDataSetId(dataSetId)\n                .withComment(\"First revision for \" + firstName + \" \" + lastName + \" data\"); /* <=== java.lang.String */ \n        String revisionArn = dataExchangeClient.createRevision(createRevisionRequest).getArn();\n\n        // Prepare the asset\n        List<DataSetEntry> entries = new ArrayList<>();\n        entries.add(new DataSetEntry().withEntryName(\"firstName\").withContent(firstName));"
                  },
                  {
                    "sample" : "\"First revision for \" + firstName + \" \" + lastName + \" data\"",
                    "lineNumber" : 25,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        String dataSetId = dataExchangeClient.createDataSet(createDataSetRequest).getId();\n\n        // Create a revision for the data set\n        CreateRevisionRequest createRevisionRequest = new CreateRevisionRequest()\n                .withDataSetId(dataSetId)\n                .withComment(\"First revision for \" + firstName + \" \" + lastName + \" data\"); /* <===  */ \n        String revisionArn = dataExchangeClient.createRevision(createRevisionRequest).getArn();\n\n        // Prepare the asset\n        List<DataSetEntry> entries = new ArrayList<>();\n        entries.add(new DataSetEntry().withEntryName(\"firstName\").withContent(firstName));"
                  },
                  {
                    "sample" : "withDataSetId(dataSetId)",
                    "lineNumber" : 23,
                    "columnNumber" : 55,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "                .withName(dataSetName)\n                .withDescription(\"Personal data of \" + firstName + \" \" + lastName);\n        String dataSetId = dataExchangeClient.createDataSet(createDataSetRequest).getId();\n\n        // Create a revision for the data set\n        CreateRevisionRequest createRevisionRequest = new CreateRevisionRequest() /* <=== com.amazonaws.services.dataexchange.model.CreateRevisionRequest.withDataSetId */ \n                .withDataSetId(dataSetId)\n                .withComment(\"First revision for \" + firstName + \" \" + lastName + \" data\");\n        String revisionArn = dataExchangeClient.createRevision(createRevisionRequest).getArn();\n\n        // Prepare the asset"
                  }
                ]
              },
              {
                "pathId" : "14191-14176-14175-14205-14204-14202-14201-14222-14213-14212-14211-14226",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 16,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "        // Build the AWS Lambda client\n        AWSLambda lambdaClient = AWSLambdaClientBuilder.defaultClient();\n\n        // Encode the personal data as a JSON string\n        String payload = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" +\n                         \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" + /* <=== java.lang.String */ \n                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8));\n\n        // Send the personal data to the AWS Lambda function"
                  },
                  {
                    "sample" : "\"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" + \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" + \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" + \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\"",
                    "lineNumber" : 15,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "    public static void AWSLambdaFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        // Build the AWS Lambda client\n        AWSLambda lambdaClient = AWSLambdaClientBuilder.defaultClient();\n\n        // Encode the personal data as a JSON string\n        String payload = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" + /* <===  */ \n                         \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +\n                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8));\n"
                  },
                  {
                    "sample" : "payload",
                    "lineNumber" : 15,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "    public static void AWSLambdaFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        // Build the AWS Lambda client\n        AWSLambda lambdaClient = AWSLambdaClientBuilder.defaultClient();\n\n        // Encode the personal data as a JSON string\n        String payload = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" + /* <=== java.lang.String */ \n                         \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +\n                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8));\n"
                  },
                  {
                    "sample" : "payload",
                    "lineNumber" : 19,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "        // Encode the personal data as a JSON string\n        String payload = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" +\n                         \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +\n                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8)); /* <=== java.lang.String */ \n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest()\n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content);"
                  },
                  {
                    "sample" : "payload.getBytes(StandardCharsets.UTF_8)",
                    "lineNumber" : 19,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "        // Encode the personal data as a JSON string\n        String payload = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" +\n                         \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +\n                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8)); /* <=== java.lang.String.getBytes */ \n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest()\n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content);"
                  },
                  {
                    "sample" : "ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8))",
                    "lineNumber" : 19,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "        // Encode the personal data as a JSON string\n        String payload = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" +\n                         \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +\n                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8)); /* <=== java.nio.ByteBuffer.wrap */ \n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest()\n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content);"
                  },
                  {
                    "sample" : "content",
                    "lineNumber" : 19,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "        // Encode the personal data as a JSON string\n        String payload = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" +\n                         \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +\n                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8)); /* <=== java.nio.ByteBuffer */ \n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest()\n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content);"
                  },
                  {
                    "sample" : "content",
                    "lineNumber" : 24,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8));\n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest()\n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content); /* <=== java.nio.ByteBuffer */ \n        InvokeResult invokeResult = lambdaClient.invoke(invokeRequest);\n    }\n}\n"
                  },
                  {
                    "sample" : "withFunctionName(\"myLambdaFunction\")",
                    "lineNumber" : 22,
                    "columnNumber" : 39,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8));\n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest() /* <=== com.amazonaws.services.lambda.model.InvokeRequest.withFunctionName */ \n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content);\n        InvokeResult invokeResult = lambdaClient.invoke(invokeRequest);\n    }\n}"
                  },
                  {
                    "sample" : "withPayload(content)",
                    "lineNumber" : 22,
                    "columnNumber" : 39,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8));\n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest() /* <===  */ \n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content);\n        InvokeResult invokeResult = lambdaClient.invoke(invokeRequest);\n    }\n}"
                  },
                  {
                    "sample" : "invokeRequest",
                    "lineNumber" : 22,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8));\n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest() /* <=== com.amazonaws.services.lambda.model.InvokeRequest */ \n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content);\n        InvokeResult invokeResult = lambdaClient.invoke(invokeRequest);\n    }\n}"
                  },
                  {
                    "sample" : "invoke(invokeRequest)",
                    "lineNumber" : 25,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest()\n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content);\n        InvokeResult invokeResult = lambdaClient.invoke(invokeRequest); /* <=== com.amazonaws.services.lambda.AWSLambda.invoke */ \n    }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "14632-14627-14626-14652",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 12,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "import java.util.ArrayList;\nimport java.util.List;\n\npublic class AWSDataExchangeUtil {\n    public static void AWSDataExchangeFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob, AmazonDataExchange dataExchangeClient) {\n        String dataSetName = firstName + \" \" + lastName + \" Personal Data\"; /* <=== java.lang.String */ \n        String revisionId = \"Revision1\";\n        String assetName = firstName + \" \" + lastName + \" Asset\";\n\n        // Create a new data set\n        CreateDataSetRequest createDataSetRequest = new CreateDataSetRequest()"
                  },
                  {
                    "sample" : "firstName + \" \" + lastName + \" Personal Data\"",
                    "lineNumber" : 12,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "import java.util.ArrayList;\nimport java.util.List;\n\npublic class AWSDataExchangeUtil {\n    public static void AWSDataExchangeFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob, AmazonDataExchange dataExchangeClient) {\n        String dataSetName = firstName + \" \" + lastName + \" Personal Data\"; /* <===  */ \n        String revisionId = \"Revision1\";\n        String assetName = firstName + \" \" + lastName + \" Asset\";\n\n        // Create a new data set\n        CreateDataSetRequest createDataSetRequest = new CreateDataSetRequest()"
                  },
                  {
                    "sample" : "dataSetName",
                    "lineNumber" : 12,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "import java.util.ArrayList;\nimport java.util.List;\n\npublic class AWSDataExchangeUtil {\n    public static void AWSDataExchangeFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob, AmazonDataExchange dataExchangeClient) {\n        String dataSetName = firstName + \" \" + lastName + \" Personal Data\"; /* <=== java.lang.String */ \n        String revisionId = \"Revision1\";\n        String assetName = firstName + \" \" + lastName + \" Asset\";\n\n        // Create a new data set\n        CreateDataSetRequest createDataSetRequest = new CreateDataSetRequest()"
                  },
                  {
                    "sample" : "withName(dataSetName)",
                    "lineNumber" : 17,
                    "columnNumber" : 53,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        String dataSetName = firstName + \" \" + lastName + \" Personal Data\";\n        String revisionId = \"Revision1\";\n        String assetName = firstName + \" \" + lastName + \" Asset\";\n\n        // Create a new data set\n        CreateDataSetRequest createDataSetRequest = new CreateDataSetRequest() /* <=== com.amazonaws.services.dataexchange.model.CreateDataSetRequest.withName */ \n                .withName(dataSetName)\n                .withDescription(\"Personal data of \" + firstName + \" \" + lastName);\n        String dataSetId = dataExchangeClient.createDataSet(createDataSetRequest).getId();\n\n        // Create a revision for the data set"
                  }
                ]
              },
              {
                "pathId" : "16228-16226-16215-16214-16213-16212-16233",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 32,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob));\n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest()\n                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName) /* <=== java.lang.String */ \n                .withUserAttributes(userAttributes);\n\n        // Send the request to create the user\n        AdminCreateUserResult createUserResult = cognitoIdpClient.adminCreateUser(createUserRequest);\n"
                  },
                  {
                    "sample" : "firstName + lastName",
                    "lineNumber" : 32,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob));\n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest()\n                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName) /* <===  */ \n                .withUserAttributes(userAttributes);\n\n        // Send the request to create the user\n        AdminCreateUserResult createUserResult = cognitoIdpClient.adminCreateUser(createUserRequest);\n"
                  },
                  {
                    "sample" : "withUserPoolId(USER_POOL_ID)",
                    "lineNumber" : 30,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "        userAttributes.add(new AttributeType().withName(\"family_name\").withValue(lastName));\n        userAttributes.add(new AttributeType().withName(\"phone_number\").withValue(phoneNumber));\n        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob));\n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest() /* <=== com.amazonaws.services.cognitoidp.model.AdminCreateUserRequest.withUserPoolId */ \n                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName)\n                .withUserAttributes(userAttributes);\n\n        // Send the request to create the user"
                  },
                  {
                    "sample" : "withUsername(firstName + lastName)",
                    "lineNumber" : 30,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "        userAttributes.add(new AttributeType().withName(\"family_name\").withValue(lastName));\n        userAttributes.add(new AttributeType().withName(\"phone_number\").withValue(phoneNumber));\n        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob));\n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest() /* <===  */ \n                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName)\n                .withUserAttributes(userAttributes);\n\n        // Send the request to create the user"
                  },
                  {
                    "sample" : "withUserAttributes(userAttributes)",
                    "lineNumber" : 30,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "        userAttributes.add(new AttributeType().withName(\"family_name\").withValue(lastName));\n        userAttributes.add(new AttributeType().withName(\"phone_number\").withValue(phoneNumber));\n        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob));\n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest() /* <===  */ \n                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName)\n                .withUserAttributes(userAttributes);\n\n        // Send the request to create the user"
                  },
                  {
                    "sample" : "createUserRequest",
                    "lineNumber" : 30,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "        userAttributes.add(new AttributeType().withName(\"family_name\").withValue(lastName));\n        userAttributes.add(new AttributeType().withName(\"phone_number\").withValue(phoneNumber));\n        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob));\n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest() /* <=== com.amazonaws.services.cognitoidp.model.AdminCreateUserRequest */ \n                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName)\n                .withUserAttributes(userAttributes);\n\n        // Send the request to create the user"
                  },
                  {
                    "sample" : "adminCreateUser(createUserRequest)",
                    "lineNumber" : 36,
                    "columnNumber" : 50,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName)\n                .withUserAttributes(userAttributes);\n\n        // Send the request to create the user\n        AdminCreateUserResult createUserResult = cognitoIdpClient.adminCreateUser(createUserRequest); /* <=== com.amazonaws.services.cognitoidp.AWSCognitoIdentityProvider.adminCreateUser */ \n\n        // Get the user's unique identifier\n        String userId = createUserResult.getUser().getUsername();\n\n        System.out.println(\"Successfully created user with ID: \" + userId);"
                  }
                ]
              },
              {
                "pathId" : "6438-6430-6429-6416-6415-6462-6449-6448-6447-6446-6465",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 13,
                    "columnNumber" : 102,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : "\n    public static void AWSlexmodelsv2FirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AmazonLexModelBuilding client = AmazonLexModelBuildingClientBuilder.standard().build();\n        SlotTypeMetadata metadata = new SlotTypeMetadata().withName(\"PersonalDataSlot\").withDescription(\"Personal data slot\");\n        SlotTypeProperties properties = new SlotTypeProperties().withEnumerationValues(\n                new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB) /* <=== java.lang.String */ \n        );\n        PutSlotTypeRequest request = new PutSlotTypeRequest().withName(\"PersonalDataSlot\").withChecksum(null)\n                .withDescription(\"Personal data slot\").withEnumerationValues(properties.getEnumerationValues())\n                .withSlotTypeMetadata(metadata);\n        client.putSlotType(request);"
                  },
                  {
                    "sample" : "firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB",
                    "lineNumber" : 13,
                    "columnNumber" : 84,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : "\n    public static void AWSlexmodelsv2FirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AmazonLexModelBuilding client = AmazonLexModelBuildingClientBuilder.standard().build();\n        SlotTypeMetadata metadata = new SlotTypeMetadata().withName(\"PersonalDataSlot\").withDescription(\"Personal data slot\");\n        SlotTypeProperties properties = new SlotTypeProperties().withEnumerationValues(\n                new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB) /* <===  */ \n        );\n        PutSlotTypeRequest request = new PutSlotTypeRequest().withName(\"PersonalDataSlot\").withChecksum(null)\n                .withDescription(\"Personal data slot\").withEnumerationValues(properties.getEnumerationValues())\n                .withSlotTypeMetadata(metadata);\n        client.putSlotType(request);"
                  },
                  {
                    "sample" : "$obj1",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "withEnumerationValues(new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB))",
                    "lineNumber" : 12,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : "public class AWSLexModelsV2Util {\n\n    public static void AWSlexmodelsv2FirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AmazonLexModelBuilding client = AmazonLexModelBuildingClientBuilder.standard().build();\n        SlotTypeMetadata metadata = new SlotTypeMetadata().withName(\"PersonalDataSlot\").withDescription(\"Personal data slot\");\n        SlotTypeProperties properties = new SlotTypeProperties().withEnumerationValues( /* <=== com.amazonaws.services.lexmodelbuilding.model.SlotTypeProperties.withEnumerationValues */ \n                new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB)\n        );\n        PutSlotTypeRequest request = new PutSlotTypeRequest().withName(\"PersonalDataSlot\").withChecksum(null)\n                .withDescription(\"Personal data slot\").withEnumerationValues(properties.getEnumerationValues())\n                .withSlotTypeMetadata(metadata);"
                  },
                  {
                    "sample" : "properties",
                    "lineNumber" : 12,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : "public class AWSLexModelsV2Util {\n\n    public static void AWSlexmodelsv2FirstNameFlow(String firstName, String lastName, String phoneNumber, String DOB) {\n        AmazonLexModelBuilding client = AmazonLexModelBuildingClientBuilder.standard().build();\n        SlotTypeMetadata metadata = new SlotTypeMetadata().withName(\"PersonalDataSlot\").withDescription(\"Personal data slot\");\n        SlotTypeProperties properties = new SlotTypeProperties().withEnumerationValues( /* <=== com.amazonaws.services.lexmodelbuilding.model.SlotTypeProperties */ \n                new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB)\n        );\n        PutSlotTypeRequest request = new PutSlotTypeRequest().withName(\"PersonalDataSlot\").withChecksum(null)\n                .withDescription(\"Personal data slot\").withEnumerationValues(properties.getEnumerationValues())\n                .withSlotTypeMetadata(metadata);"
                  },
                  {
                    "sample" : "getEnumerationValues()",
                    "lineNumber" : 16,
                    "columnNumber" : 78,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : "        SlotTypeMetadata metadata = new SlotTypeMetadata().withName(\"PersonalDataSlot\").withDescription(\"Personal data slot\");\n        SlotTypeProperties properties = new SlotTypeProperties().withEnumerationValues(\n                new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB)\n        );\n        PutSlotTypeRequest request = new PutSlotTypeRequest().withName(\"PersonalDataSlot\").withChecksum(null)\n                .withDescription(\"Personal data slot\").withEnumerationValues(properties.getEnumerationValues()) /* <=== com.amazonaws.services.lexmodelbuilding.model.SlotTypeProperties.getEnumerationValues */ \n                .withSlotTypeMetadata(metadata);\n        client.putSlotType(request);\n    }\n}\n"
                  },
                  {
                    "sample" : "withDescription(\"Personal data slot\")",
                    "lineNumber" : 15,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : "        AmazonLexModelBuilding client = AmazonLexModelBuildingClientBuilder.standard().build();\n        SlotTypeMetadata metadata = new SlotTypeMetadata().withName(\"PersonalDataSlot\").withDescription(\"Personal data slot\");\n        SlotTypeProperties properties = new SlotTypeProperties().withEnumerationValues(\n                new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB)\n        );\n        PutSlotTypeRequest request = new PutSlotTypeRequest().withName(\"PersonalDataSlot\").withChecksum(null) /* <===  */ \n                .withDescription(\"Personal data slot\").withEnumerationValues(properties.getEnumerationValues())\n                .withSlotTypeMetadata(metadata);\n        client.putSlotType(request);\n    }\n}"
                  },
                  {
                    "sample" : "withEnumerationValues(properties.getEnumerationValues())",
                    "lineNumber" : 15,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : "        AmazonLexModelBuilding client = AmazonLexModelBuildingClientBuilder.standard().build();\n        SlotTypeMetadata metadata = new SlotTypeMetadata().withName(\"PersonalDataSlot\").withDescription(\"Personal data slot\");\n        SlotTypeProperties properties = new SlotTypeProperties().withEnumerationValues(\n                new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB)\n        );\n        PutSlotTypeRequest request = new PutSlotTypeRequest().withName(\"PersonalDataSlot\").withChecksum(null) /* <===  */ \n                .withDescription(\"Personal data slot\").withEnumerationValues(properties.getEnumerationValues())\n                .withSlotTypeMetadata(metadata);\n        client.putSlotType(request);\n    }\n}"
                  },
                  {
                    "sample" : "withSlotTypeMetadata(metadata)",
                    "lineNumber" : 15,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : "        AmazonLexModelBuilding client = AmazonLexModelBuildingClientBuilder.standard().build();\n        SlotTypeMetadata metadata = new SlotTypeMetadata().withName(\"PersonalDataSlot\").withDescription(\"Personal data slot\");\n        SlotTypeProperties properties = new SlotTypeProperties().withEnumerationValues(\n                new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB)\n        );\n        PutSlotTypeRequest request = new PutSlotTypeRequest().withName(\"PersonalDataSlot\").withChecksum(null) /* <===  */ \n                .withDescription(\"Personal data slot\").withEnumerationValues(properties.getEnumerationValues())\n                .withSlotTypeMetadata(metadata);\n        client.putSlotType(request);\n    }\n}"
                  },
                  {
                    "sample" : "request",
                    "lineNumber" : 15,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : "        AmazonLexModelBuilding client = AmazonLexModelBuildingClientBuilder.standard().build();\n        SlotTypeMetadata metadata = new SlotTypeMetadata().withName(\"PersonalDataSlot\").withDescription(\"Personal data slot\");\n        SlotTypeProperties properties = new SlotTypeProperties().withEnumerationValues(\n                new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB)\n        );\n        PutSlotTypeRequest request = new PutSlotTypeRequest().withName(\"PersonalDataSlot\").withChecksum(null) /* <=== com.amazonaws.services.lexmodelbuilding.model.PutSlotTypeRequest */ \n                .withDescription(\"Personal data slot\").withEnumerationValues(properties.getEnumerationValues())\n                .withSlotTypeMetadata(metadata);\n        client.putSlotType(request);\n    }\n}"
                  },
                  {
                    "sample" : "putSlotType(request)",
                    "lineNumber" : 18,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/lexModel.java",
                    "excerpt" : "                new com.amazonaws.services.lexmodelbuilding.model.EnumerationValue(firstName + \" \" + lastName + \" \" + phoneNumber + \" \" + DOB)\n        );\n        PutSlotTypeRequest request = new PutSlotTypeRequest().withName(\"PersonalDataSlot\").withChecksum(null)\n                .withDescription(\"Personal data slot\").withEnumerationValues(properties.getEnumerationValues())\n                .withSlotTypeMetadata(metadata);\n        client.putSlotType(request); /* <=== com.amazonaws.services.lexmodelbuilding.AmazonLexModelBuilding.putSlotType */ \n    }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "14191-14176-14175-14205-14204-14202-14201-14222-14213",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 16,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "        // Build the AWS Lambda client\n        AWSLambda lambdaClient = AWSLambdaClientBuilder.defaultClient();\n\n        // Encode the personal data as a JSON string\n        String payload = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" +\n                         \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" + /* <=== java.lang.String */ \n                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8));\n\n        // Send the personal data to the AWS Lambda function"
                  },
                  {
                    "sample" : "\"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" + \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" + \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" + \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\"",
                    "lineNumber" : 15,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "    public static void AWSLambdaFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        // Build the AWS Lambda client\n        AWSLambda lambdaClient = AWSLambdaClientBuilder.defaultClient();\n\n        // Encode the personal data as a JSON string\n        String payload = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" + /* <===  */ \n                         \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +\n                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8));\n"
                  },
                  {
                    "sample" : "payload",
                    "lineNumber" : 15,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "    public static void AWSLambdaFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        // Build the AWS Lambda client\n        AWSLambda lambdaClient = AWSLambdaClientBuilder.defaultClient();\n\n        // Encode the personal data as a JSON string\n        String payload = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" + /* <=== java.lang.String */ \n                         \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +\n                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8));\n"
                  },
                  {
                    "sample" : "payload",
                    "lineNumber" : 19,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "        // Encode the personal data as a JSON string\n        String payload = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" +\n                         \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +\n                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8)); /* <=== java.lang.String */ \n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest()\n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content);"
                  },
                  {
                    "sample" : "payload.getBytes(StandardCharsets.UTF_8)",
                    "lineNumber" : 19,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "        // Encode the personal data as a JSON string\n        String payload = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" +\n                         \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +\n                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8)); /* <=== java.lang.String.getBytes */ \n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest()\n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content);"
                  },
                  {
                    "sample" : "ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8))",
                    "lineNumber" : 19,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "        // Encode the personal data as a JSON string\n        String payload = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" +\n                         \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +\n                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8)); /* <=== java.nio.ByteBuffer.wrap */ \n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest()\n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content);"
                  },
                  {
                    "sample" : "content",
                    "lineNumber" : 19,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "        // Encode the personal data as a JSON string\n        String payload = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" +\n                         \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +\n                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8)); /* <=== java.nio.ByteBuffer */ \n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest()\n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content);"
                  },
                  {
                    "sample" : "content",
                    "lineNumber" : 24,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8));\n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest()\n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content); /* <=== java.nio.ByteBuffer */ \n        InvokeResult invokeResult = lambdaClient.invoke(invokeRequest);\n    }\n}\n"
                  },
                  {
                    "sample" : "withFunctionName(\"myLambdaFunction\")",
                    "lineNumber" : 22,
                    "columnNumber" : 39,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8));\n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest() /* <=== com.amazonaws.services.lambda.model.InvokeRequest.withFunctionName */ \n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content);\n        InvokeResult invokeResult = lambdaClient.invoke(invokeRequest);\n    }\n}"
                  }
                ]
              },
              {
                "pathId" : "12761-12759",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 19,
                    "columnNumber" : 81,
                    "fileName" : "/app/code/directory.java",
                    "excerpt" : "  \n  public static void AWSDirectoryFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    try {\n      // Create an entry in AWS Directory\n      DirectoryAttribute firstNameAttribute = new DirectoryAttribute(\"firstName\", firstName);\n      DirectoryAttribute lastNameAttribute = new DirectoryAttribute(\"lastName\", lastName); /* <=== java.lang.String */ \n      DirectoryAttribute phoneNumberAttribute = new DirectoryAttribute(\"phoneNumber\", phoneNumber);\n      DirectoryAttribute dobAttribute = new DirectoryAttribute(\"dob\", dob);\n      List<DirectoryAttribute> attributes = Arrays.asList(firstNameAttribute, lastNameAttribute, phoneNumberAttribute, dobAttribute);\n      AddUserToGroupRequest request = new AddUserToGroupRequest().withDirectoryId(\"your-directory-id\").withUserName(\"user-name\").withGroupName(\"group-name\").withAttributes(attributes);\n      client.addUserToGroup(request);"
                  },
                  {
                    "sample" : "new DirectoryAttribute(\"lastName\", lastName)",
                    "lineNumber" : 19,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/directory.java",
                    "excerpt" : "  \n  public static void AWSDirectoryFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    try {\n      // Create an entry in AWS Directory\n      DirectoryAttribute firstNameAttribute = new DirectoryAttribute(\"firstName\", firstName);\n      DirectoryAttribute lastNameAttribute = new DirectoryAttribute(\"lastName\", lastName); /* <=== com.amazonaws.services.directory.model.DirectoryAttribute.<init> */ \n      DirectoryAttribute phoneNumberAttribute = new DirectoryAttribute(\"phoneNumber\", phoneNumber);\n      DirectoryAttribute dobAttribute = new DirectoryAttribute(\"dob\", dob);\n      List<DirectoryAttribute> attributes = Arrays.asList(firstNameAttribute, lastNameAttribute, phoneNumberAttribute, dobAttribute);\n      AddUserToGroupRequest request = new AddUserToGroupRequest().withDirectoryId(\"your-directory-id\").withUserName(\"user-name\").withGroupName(\"group-name\").withAttributes(attributes);\n      client.addUserToGroup(request);"
                  }
                ]
              },
              {
                "pathId" : "10212-10211-10215-10219-10222",
                "path" : [
                  {
                    "sample" : "\"last_name\"",
                    "lineNumber" : 17,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/cloudcontrolapi.java",
                    "excerpt" : "        GetRightsizingRecommendationRequest request = new GetRightsizingRecommendationRequest();\n\n        // Add personal data to the request\n        Map<String, String> personalData = new HashMap<>();\n        personalData.put(\"first_name\", \"John\");\n        personalData.put(\"last_name\", \"Doe\"); /* <===  */ \n        personalData.put(\"email\", \"johndoe@example.com\");\n        personalData.put(\"phone_number\", \"555-555-1212\");\n        request.setPersonalData(personalData);\n\n        GetRightsizingRecommendationResult result = client.getRightsizingRecommendation(request);"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 17,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/cloudcontrolapi.java",
                    "excerpt" : "        GetRightsizingRecommendationRequest request = new GetRightsizingRecommendationRequest();\n\n        // Add personal data to the request\n        Map<String, String> personalData = new HashMap<>();\n        personalData.put(\"first_name\", \"John\");\n        personalData.put(\"last_name\", \"Doe\"); /* <=== java.util.Map */ \n        personalData.put(\"email\", \"johndoe@example.com\");\n        personalData.put(\"phone_number\", \"555-555-1212\");\n        request.setPersonalData(personalData);\n\n        GetRightsizingRecommendationResult result = client.getRightsizingRecommendation(request);"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 18,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/cloudcontrolapi.java",
                    "excerpt" : "\n        // Add personal data to the request\n        Map<String, String> personalData = new HashMap<>();\n        personalData.put(\"first_name\", \"John\");\n        personalData.put(\"last_name\", \"Doe\");\n        personalData.put(\"email\", \"johndoe@example.com\"); /* <=== java.util.Map */ \n        personalData.put(\"phone_number\", \"555-555-1212\");\n        request.setPersonalData(personalData);\n\n        GetRightsizingRecommendationResult result = client.getRightsizingRecommendation(request);\n        System.out.println(\"Rightsizing recommendation: \" + result.getRecommendation());"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 19,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/cloudcontrolapi.java",
                    "excerpt" : "        // Add personal data to the request\n        Map<String, String> personalData = new HashMap<>();\n        personalData.put(\"first_name\", \"John\");\n        personalData.put(\"last_name\", \"Doe\");\n        personalData.put(\"email\", \"johndoe@example.com\");\n        personalData.put(\"phone_number\", \"555-555-1212\"); /* <=== java.util.Map */ \n        request.setPersonalData(personalData);\n\n        GetRightsizingRecommendationResult result = client.getRightsizingRecommendation(request);\n        System.out.println(\"Rightsizing recommendation: \" + result.getRecommendation());\n    }"
                  },
                  {
                    "sample" : "setPersonalData(personalData)",
                    "lineNumber" : 20,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/cloudcontrolapi.java",
                    "excerpt" : "        Map<String, String> personalData = new HashMap<>();\n        personalData.put(\"first_name\", \"John\");\n        personalData.put(\"last_name\", \"Doe\");\n        personalData.put(\"email\", \"johndoe@example.com\");\n        personalData.put(\"phone_number\", \"555-555-1212\");\n        request.setPersonalData(personalData); /* <=== com.amazonaws.services.cloudcontrolapi.model.GetRightsizingRecommendationRequest.setPersonalData */ \n\n        GetRightsizingRecommendationResult result = client.getRightsizingRecommendation(request);\n        System.out.println(\"Rightsizing recommendation: \" + result.getRecommendation());\n    }\n}"
                  }
                ]
              },
              {
                "pathId" : "14646-14667-14661-14652-14651-14650-14672-14671-14670-14766",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 14,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "\npublic class AWSDataExchangeUtil {\n    public static void AWSDataExchangeFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob, AmazonDataExchange dataExchangeClient) {\n        String dataSetName = firstName + \" \" + lastName + \" Personal Data\";\n        String revisionId = \"Revision1\";\n        String assetName = firstName + \" \" + lastName + \" Asset\"; /* <=== java.lang.String */ \n\n        // Create a new data set\n        CreateDataSetRequest createDataSetRequest = new CreateDataSetRequest()\n                .withName(dataSetName)\n                .withDescription(\"Personal data of \" + firstName + \" \" + lastName);"
                  },
                  {
                    "sample" : "lastName",
                    "lineNumber" : 19,
                    "columnNumber" : 74,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        String assetName = firstName + \" \" + lastName + \" Asset\";\n\n        // Create a new data set\n        CreateDataSetRequest createDataSetRequest = new CreateDataSetRequest()\n                .withName(dataSetName)\n                .withDescription(\"Personal data of \" + firstName + \" \" + lastName); /* <=== java.lang.String */ \n        String dataSetId = dataExchangeClient.createDataSet(createDataSetRequest).getId();\n\n        // Create a revision for the data set\n        CreateRevisionRequest createRevisionRequest = new CreateRevisionRequest()\n                .withDataSetId(dataSetId)"
                  },
                  {
                    "sample" : "\"Personal data of \" + firstName + \" \" + lastName",
                    "lineNumber" : 19,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        String assetName = firstName + \" \" + lastName + \" Asset\";\n\n        // Create a new data set\n        CreateDataSetRequest createDataSetRequest = new CreateDataSetRequest()\n                .withName(dataSetName)\n                .withDescription(\"Personal data of \" + firstName + \" \" + lastName); /* <===  */ \n        String dataSetId = dataExchangeClient.createDataSet(createDataSetRequest).getId();\n\n        // Create a revision for the data set\n        CreateRevisionRequest createRevisionRequest = new CreateRevisionRequest()\n                .withDataSetId(dataSetId)"
                  },
                  {
                    "sample" : "withName(dataSetName)",
                    "lineNumber" : 17,
                    "columnNumber" : 53,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        String dataSetName = firstName + \" \" + lastName + \" Personal Data\";\n        String revisionId = \"Revision1\";\n        String assetName = firstName + \" \" + lastName + \" Asset\";\n\n        // Create a new data set\n        CreateDataSetRequest createDataSetRequest = new CreateDataSetRequest() /* <=== com.amazonaws.services.dataexchange.model.CreateDataSetRequest.withName */ \n                .withName(dataSetName)\n                .withDescription(\"Personal data of \" + firstName + \" \" + lastName);\n        String dataSetId = dataExchangeClient.createDataSet(createDataSetRequest).getId();\n\n        // Create a revision for the data set"
                  },
                  {
                    "sample" : "withDescription(\"Personal data of \" + firstName + \" \" + lastName)",
                    "lineNumber" : 17,
                    "columnNumber" : 53,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        String dataSetName = firstName + \" \" + lastName + \" Personal Data\";\n        String revisionId = \"Revision1\";\n        String assetName = firstName + \" \" + lastName + \" Asset\";\n\n        // Create a new data set\n        CreateDataSetRequest createDataSetRequest = new CreateDataSetRequest() /* <===  */ \n                .withName(dataSetName)\n                .withDescription(\"Personal data of \" + firstName + \" \" + lastName);\n        String dataSetId = dataExchangeClient.createDataSet(createDataSetRequest).getId();\n\n        // Create a revision for the data set"
                  },
                  {
                    "sample" : "createDataSetRequest",
                    "lineNumber" : 17,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        String dataSetName = firstName + \" \" + lastName + \" Personal Data\";\n        String revisionId = \"Revision1\";\n        String assetName = firstName + \" \" + lastName + \" Asset\";\n\n        // Create a new data set\n        CreateDataSetRequest createDataSetRequest = new CreateDataSetRequest() /* <=== com.amazonaws.services.dataexchange.model.CreateDataSetRequest */ \n                .withName(dataSetName)\n                .withDescription(\"Personal data of \" + firstName + \" \" + lastName);\n        String dataSetId = dataExchangeClient.createDataSet(createDataSetRequest).getId();\n\n        // Create a revision for the data set"
                  },
                  {
                    "sample" : "createDataSet(createDataSetRequest)",
                    "lineNumber" : 20,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "\n        // Create a new data set\n        CreateDataSetRequest createDataSetRequest = new CreateDataSetRequest()\n                .withName(dataSetName)\n                .withDescription(\"Personal data of \" + firstName + \" \" + lastName);\n        String dataSetId = dataExchangeClient.createDataSet(createDataSetRequest).getId(); /* <=== com.amazonaws.services.dataexchange.AmazonDataExchange.createDataSet */ \n\n        // Create a revision for the data set\n        CreateRevisionRequest createRevisionRequest = new CreateRevisionRequest()\n                .withDataSetId(dataSetId)\n                .withComment(\"First revision for \" + firstName + \" \" + lastName + \" data\");"
                  },
                  {
                    "sample" : "getId()",
                    "lineNumber" : 20,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "\n        // Create a new data set\n        CreateDataSetRequest createDataSetRequest = new CreateDataSetRequest()\n                .withName(dataSetName)\n                .withDescription(\"Personal data of \" + firstName + \" \" + lastName);\n        String dataSetId = dataExchangeClient.createDataSet(createDataSetRequest).getId(); /* <===  */ \n\n        // Create a revision for the data set\n        CreateRevisionRequest createRevisionRequest = new CreateRevisionRequest()\n                .withDataSetId(dataSetId)\n                .withComment(\"First revision for \" + firstName + \" \" + lastName + \" data\");"
                  },
                  {
                    "sample" : "dataSetId",
                    "lineNumber" : 20,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "\n        // Create a new data set\n        CreateDataSetRequest createDataSetRequest = new CreateDataSetRequest()\n                .withName(dataSetName)\n                .withDescription(\"Personal data of \" + firstName + \" \" + lastName);\n        String dataSetId = dataExchangeClient.createDataSet(createDataSetRequest).getId(); /* <=== java.lang.String */ \n\n        // Create a revision for the data set\n        CreateRevisionRequest createRevisionRequest = new CreateRevisionRequest()\n                .withDataSetId(dataSetId)\n                .withComment(\"First revision for \" + firstName + \" \" + lastName + \" data\");"
                  },
                  {
                    "sample" : "withDataSetId(dataSetId)",
                    "lineNumber" : 36,
                    "columnNumber" : 62,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        entries.add(new DataSetEntry().withEntryName(\"lastName\").withContent(lastName));\n        entries.add(new DataSetEntry().withEntryName(\"phoneNumber\").withContent(phoneNumber));\n        entries.add(new DataSetEntry().withEntryName(\"dob\").withContent(dob));\n\n        // Import the asset\n        ImportAssetFromSignedUrlRequest importAssetRequest = new ImportAssetFromSignedUrlRequest() /* <=== com.amazonaws.services.dataexchange.model.ImportAssetFromSignedUrlRequest.withDataSetId */ \n                .withDataSetId(dataSetId)\n                .withRevisionId(revisionId)\n                .withAssetName(assetName)\n                .withEntries(entries);\n        dataExchangeClient.importAssetFromSignedUrl(importAssetRequest);"
                  }
                ]
              },
              {
                "pathId" : "7468-7474-7469-7456",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 18,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/migrationHub.java",
                    "excerpt" : "\npublic void AWSMigrationHubProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\n    ImportMigrationTaskRequest importMigrationTaskRequest = new ImportMigrationTaskRequest()\n            .withMigrationTaskName(firstName + \"_\" + lastName) /* <=== java.lang.String */ \n            .withProgressUpdateStream(firstName + \"_\" + lastName + \"_Stream\")\n            .withResourceAttributeList(new ResourceAttribute().withType(\"PersonalData\")\n                    .withValue(personalData.toString()));\n\n    client.importMigrationTask(importMigrationTaskRequest);"
                  },
                  {
                    "sample" : "lastName",
                    "lineNumber" : 19,
                    "columnNumber" : 57,
                    "fileName" : "/app/code/migrationHub.java",
                    "excerpt" : "public void AWSMigrationHubProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\n    ImportMigrationTaskRequest importMigrationTaskRequest = new ImportMigrationTaskRequest()\n            .withMigrationTaskName(firstName + \"_\" + lastName)\n            .withProgressUpdateStream(firstName + \"_\" + lastName + \"_Stream\") /* <=== java.lang.String */ \n            .withResourceAttributeList(new ResourceAttribute().withType(\"PersonalData\")\n                    .withValue(personalData.toString()));\n\n    client.importMigrationTask(importMigrationTaskRequest);\n}"
                  },
                  {
                    "sample" : "firstName + \"_\" + lastName + \"_Stream\"",
                    "lineNumber" : 19,
                    "columnNumber" : 39,
                    "fileName" : "/app/code/migrationHub.java",
                    "excerpt" : "public void AWSMigrationHubProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\n    ImportMigrationTaskRequest importMigrationTaskRequest = new ImportMigrationTaskRequest()\n            .withMigrationTaskName(firstName + \"_\" + lastName)\n            .withProgressUpdateStream(firstName + \"_\" + lastName + \"_Stream\") /* <===  */ \n            .withResourceAttributeList(new ResourceAttribute().withType(\"PersonalData\")\n                    .withValue(personalData.toString()));\n\n    client.importMigrationTask(importMigrationTaskRequest);\n}"
                  },
                  {
                    "sample" : "withMigrationTaskName(firstName + \"_\" + lastName)",
                    "lineNumber" : 17,
                    "columnNumber" : 61,
                    "fileName" : "/app/code/migrationHub.java",
                    "excerpt" : "}\n\npublic void AWSMigrationHubProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\n    ImportMigrationTaskRequest importMigrationTaskRequest = new ImportMigrationTaskRequest() /* <=== com.amazonaws.services.migrationhub.model.ImportMigrationTaskRequest.withMigrationTaskName */ \n            .withMigrationTaskName(firstName + \"_\" + lastName)\n            .withProgressUpdateStream(firstName + \"_\" + lastName + \"_Stream\")\n            .withResourceAttributeList(new ResourceAttribute().withType(\"PersonalData\")\n                    .withValue(personalData.toString()));\n"
                  }
                ]
              },
              {
                "pathId" : "7446-7441-7440-7486-7477",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 15,
                    "columnNumber" : 83,
                    "fileName" : "/app/code/migrationHub.java",
                    "excerpt" : "public AWSMigrationHubUtil() {\n    client = AmazonMigrationHubClientBuilder.standard().build();\n}\n\npublic void AWSMigrationHubProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob); /* <=== java.lang.String */ \n\n    ImportMigrationTaskRequest importMigrationTaskRequest = new ImportMigrationTaskRequest()\n            .withMigrationTaskName(firstName + \"_\" + lastName)\n            .withProgressUpdateStream(firstName + \"_\" + lastName + \"_Stream\")\n            .withResourceAttributeList(new ResourceAttribute().withType(\"PersonalData\")"
                  },
                  {
                    "sample" : "Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob)",
                    "lineNumber" : 15,
                    "columnNumber" : 40,
                    "fileName" : "/app/code/migrationHub.java",
                    "excerpt" : "public AWSMigrationHubUtil() {\n    client = AmazonMigrationHubClientBuilder.standard().build();\n}\n\npublic void AWSMigrationHubProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob); /* <=== java.util.Map.of */ \n\n    ImportMigrationTaskRequest importMigrationTaskRequest = new ImportMigrationTaskRequest()\n            .withMigrationTaskName(firstName + \"_\" + lastName)\n            .withProgressUpdateStream(firstName + \"_\" + lastName + \"_Stream\")\n            .withResourceAttributeList(new ResourceAttribute().withType(\"PersonalData\")"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 15,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/migrationHub.java",
                    "excerpt" : "public AWSMigrationHubUtil() {\n    client = AmazonMigrationHubClientBuilder.standard().build();\n}\n\npublic void AWSMigrationHubProcessPersonalData(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob); /* <=== java.util.Map */ \n\n    ImportMigrationTaskRequest importMigrationTaskRequest = new ImportMigrationTaskRequest()\n            .withMigrationTaskName(firstName + \"_\" + lastName)\n            .withProgressUpdateStream(firstName + \"_\" + lastName + \"_Stream\")\n            .withResourceAttributeList(new ResourceAttribute().withType(\"PersonalData\")"
                  },
                  {
                    "sample" : "personalData.toString()",
                    "lineNumber" : 21,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/migrationHub.java",
                    "excerpt" : "\n    ImportMigrationTaskRequest importMigrationTaskRequest = new ImportMigrationTaskRequest()\n            .withMigrationTaskName(firstName + \"_\" + lastName)\n            .withProgressUpdateStream(firstName + \"_\" + lastName + \"_Stream\")\n            .withResourceAttributeList(new ResourceAttribute().withType(\"PersonalData\")\n                    .withValue(personalData.toString())); /* <=== java.util.Map.toString */ \n\n    client.importMigrationTask(importMigrationTaskRequest);\n}\n}"
                  },
                  {
                    "sample" : "withType(\"PersonalData\")",
                    "lineNumber" : 20,
                    "columnNumber" : 40,
                    "fileName" : "/app/code/migrationHub.java",
                    "excerpt" : "    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\n    ImportMigrationTaskRequest importMigrationTaskRequest = new ImportMigrationTaskRequest()\n            .withMigrationTaskName(firstName + \"_\" + lastName)\n            .withProgressUpdateStream(firstName + \"_\" + lastName + \"_Stream\")\n            .withResourceAttributeList(new ResourceAttribute().withType(\"PersonalData\") /* <=== com.amazonaws.services.migrationhub.model.ResourceAttribute.withType */ \n                    .withValue(personalData.toString()));\n\n    client.importMigrationTask(importMigrationTaskRequest);\n}\n}"
                  }
                ]
              },
              {
                "pathId" : "12013-12002-12001-12034-12033-12024",
                "path" : [
                  {
                    "sample" : "lastName",
                    "lineNumber" : 16,
                    "columnNumber" : 77,
                    "fileName" : "/app/code/apiGateway.java",
                    "excerpt" : "swift\nCopy code\n  Map<String, String> headers = new HashMap<>();\n  headers.put(\"Content-Type\", \"application/json\");\n  \n  String body = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \\\"lastName\\\": \\\"\" + lastName + \"\\\", \\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \\\"DOB\\\": \\\"\" + DOB + \"\\\"}\"; /* <=== java.lang.String */ \n \n  PostToConnectionRequest request = new PostToConnectionRequest()\n     .withConnectionId(\"connection-id\")\n     .withData(body.getBytes())\n     .withHeaders(headers);"
                  },
                  {
                    "sample" : "\"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \\\"lastName\\\": \\\"\" + lastName + \"\\\", \\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \\\"DOB\\\": \\\"\" + DOB + \"\\\"}\"",
                    "lineNumber" : 16,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/apiGateway.java",
                    "excerpt" : "swift\nCopy code\n  Map<String, String> headers = new HashMap<>();\n  headers.put(\"Content-Type\", \"application/json\");\n  \n  String body = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \\\"lastName\\\": \\\"\" + lastName + \"\\\", \\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \\\"DOB\\\": \\\"\" + DOB + \"\\\"}\"; /* <===  */ \n \n  PostToConnectionRequest request = new PostToConnectionRequest()\n     .withConnectionId(\"connection-id\")\n     .withData(body.getBytes())\n     .withHeaders(headers);"
                  },
                  {
                    "sample" : "body",
                    "lineNumber" : 16,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/apiGateway.java",
                    "excerpt" : "swift\nCopy code\n  Map<String, String> headers = new HashMap<>();\n  headers.put(\"Content-Type\", \"application/json\");\n  \n  String body = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \\\"lastName\\\": \\\"\" + lastName + \"\\\", \\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \\\"DOB\\\": \\\"\" + DOB + \"\\\"}\"; /* <=== java.lang.String */ \n \n  PostToConnectionRequest request = new PostToConnectionRequest()\n     .withConnectionId(\"connection-id\")\n     .withData(body.getBytes())\n     .withHeaders(headers);"
                  },
                  {
                    "sample" : "body",
                    "lineNumber" : 20,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/apiGateway.java",
                    "excerpt" : "  \n  String body = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \\\"lastName\\\": \\\"\" + lastName + \"\\\", \\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \\\"DOB\\\": \\\"\" + DOB + \"\\\"}\";\n \n  PostToConnectionRequest request = new PostToConnectionRequest()\n     .withConnectionId(\"connection-id\")\n     .withData(body.getBytes()) /* <=== java.lang.String */ \n     .withHeaders(headers);\n \n  client.postToConnection(request);\n}\n}"
                  },
                  {
                    "sample" : "body.getBytes()",
                    "lineNumber" : 20,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/apiGateway.java",
                    "excerpt" : "  \n  String body = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \\\"lastName\\\": \\\"\" + lastName + \"\\\", \\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \\\"DOB\\\": \\\"\" + DOB + \"\\\"}\";\n \n  PostToConnectionRequest request = new PostToConnectionRequest()\n     .withConnectionId(\"connection-id\")\n     .withData(body.getBytes()) /* <=== java.lang.String.getBytes */ \n     .withHeaders(headers);\n \n  client.postToConnection(request);\n}\n}"
                  },
                  {
                    "sample" : "withConnectionId(\"connection-id\")",
                    "lineNumber" : 18,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/apiGateway.java",
                    "excerpt" : "  Map<String, String> headers = new HashMap<>();\n  headers.put(\"Content-Type\", \"application/json\");\n  \n  String body = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \\\"lastName\\\": \\\"\" + lastName + \"\\\", \\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \\\"DOB\\\": \\\"\" + DOB + \"\\\"}\";\n \n  PostToConnectionRequest request = new PostToConnectionRequest() /* <=== com.amazonaws.services.apigateway.model.PostToConnectionRequest.withConnectionId */ \n     .withConnectionId(\"connection-id\")\n     .withData(body.getBytes())\n     .withHeaders(headers);\n \n  client.postToConnection(request);"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.ContactData.EmailAddress",
        "sinks" : [
          {
            "sinkType" : "third_parties",
            "id" : "ThirdParties.SDK.Amazon.Aws",
            "name" : "Amazon Aws",
            "category" : "",
            "domains" : [
              "aws.amazon.com"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "databaseDetails" : {
              "dbName" : "",
              "dbVendor" : "",
              "dbLocation" : "",
              "dbOperation" : ""
            },
            "paths" : [
              {
                "pathId" : "10138-10136",
                "path" : [
                  {
                    "sample" : "email",
                    "lineNumber" : 17,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/chimeSDKVoice.java",
                    "excerpt" : "  CreateParticipantRequest createParticipantRequest = new CreateParticipantRequest();\n  createParticipantRequest.setMeetingId(\"<MEETING_ID>\");\n  \n  createParticipantRequest.setFirstName(firstName);\n  createParticipantRequest.setLastName(lastName);\n  createParticipantRequest.setEmail(email); /* <=== java.lang.String */ \n  \n  CreateParticipantResult createParticipantResult = client.createParticipant(createParticipantRequest);\n  System.out.println(\"Successfully sent personal data to AWS Chime SDK Voice, Participant Identifier: \" + createParticipantResult.getParticipantId());\n} catch (AmazonChimeSDKVoiceException e) {\n  System.err.println(e.getMessage());"
                  },
                  {
                    "sample" : "setEmail(email)",
                    "lineNumber" : 17,
                    "columnNumber" : 3,
                    "fileName" : "/app/code/chimeSDKVoice.java",
                    "excerpt" : "  CreateParticipantRequest createParticipantRequest = new CreateParticipantRequest();\n  createParticipantRequest.setMeetingId(\"<MEETING_ID>\");\n  \n  createParticipantRequest.setFirstName(firstName);\n  createParticipantRequest.setLastName(lastName);\n  createParticipantRequest.setEmail(email); /* <=== com.amazonaws.services.chimesdkvoice.model.CreateParticipantRequest.setEmail */ \n  \n  CreateParticipantResult createParticipantResult = client.createParticipant(createParticipantRequest);\n  System.out.println(\"Successfully sent personal data to AWS Chime SDK Voice, Participant Identifier: \" + createParticipantResult.getParticipantId());\n} catch (AmazonChimeSDKVoiceException e) {\n  System.err.println(e.getMessage());"
                  }
                ]
              },
              {
                "pathId" : "6203-6194-6193-6192-6191-6208",
                "path" : [
                  {
                    "sample" : "email",
                    "lineNumber" : 36,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/amplifyBackend.java",
                    "excerpt" : "        CreateBackendAuthUserResult userResult = backendClient.createBackendAuthUser(userRequest);\n\n        // Update the user's personal information\n        UpdateBackendAuthUserRequest updateRequest = new UpdateBackendAuthUserRequest()\n                .withUserId(userId)\n                .withEmail(email) /* <=== java.lang.String */ \n                .withName(name);\n        UpdateBackendAuthUserResult updateResult = backendClient.updateBackendAuthUser(updateRequest);\n    }\n}\n"
                  },
                  {
                    "sample" : "withUserId(userId)",
                    "lineNumber" : 34,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/amplifyBackend.java",
                    "excerpt" : "                .withUsername(email)\n                .withPassword(name);\n        CreateBackendAuthUserResult userResult = backendClient.createBackendAuthUser(userRequest);\n\n        // Update the user's personal information\n        UpdateBackendAuthUserRequest updateRequest = new UpdateBackendAuthUserRequest() /* <=== com.amazonaws.services.amplifybackend.model.UpdateBackendAuthUserRequest.withUserId */ \n                .withUserId(userId)\n                .withEmail(email)\n                .withName(name);\n        UpdateBackendAuthUserResult updateResult = backendClient.updateBackendAuthUser(updateRequest);\n    }"
                  },
                  {
                    "sample" : "withEmail(email)",
                    "lineNumber" : 34,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/amplifyBackend.java",
                    "excerpt" : "                .withUsername(email)\n                .withPassword(name);\n        CreateBackendAuthUserResult userResult = backendClient.createBackendAuthUser(userRequest);\n\n        // Update the user's personal information\n        UpdateBackendAuthUserRequest updateRequest = new UpdateBackendAuthUserRequest() /* <===  */ \n                .withUserId(userId)\n                .withEmail(email)\n                .withName(name);\n        UpdateBackendAuthUserResult updateResult = backendClient.updateBackendAuthUser(updateRequest);\n    }"
                  },
                  {
                    "sample" : "withName(name)",
                    "lineNumber" : 34,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/amplifyBackend.java",
                    "excerpt" : "                .withUsername(email)\n                .withPassword(name);\n        CreateBackendAuthUserResult userResult = backendClient.createBackendAuthUser(userRequest);\n\n        // Update the user's personal information\n        UpdateBackendAuthUserRequest updateRequest = new UpdateBackendAuthUserRequest() /* <===  */ \n                .withUserId(userId)\n                .withEmail(email)\n                .withName(name);\n        UpdateBackendAuthUserResult updateResult = backendClient.updateBackendAuthUser(updateRequest);\n    }"
                  },
                  {
                    "sample" : "updateRequest",
                    "lineNumber" : 34,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/amplifyBackend.java",
                    "excerpt" : "                .withUsername(email)\n                .withPassword(name);\n        CreateBackendAuthUserResult userResult = backendClient.createBackendAuthUser(userRequest);\n\n        // Update the user's personal information\n        UpdateBackendAuthUserRequest updateRequest = new UpdateBackendAuthUserRequest() /* <=== com.amazonaws.services.amplifybackend.model.UpdateBackendAuthUserRequest */ \n                .withUserId(userId)\n                .withEmail(email)\n                .withName(name);\n        UpdateBackendAuthUserResult updateResult = backendClient.updateBackendAuthUser(updateRequest);\n    }"
                  },
                  {
                    "sample" : "updateBackendAuthUser(updateRequest)",
                    "lineNumber" : 38,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/amplifyBackend.java",
                    "excerpt" : "        // Update the user's personal information\n        UpdateBackendAuthUserRequest updateRequest = new UpdateBackendAuthUserRequest()\n                .withUserId(userId)\n                .withEmail(email)\n                .withName(name);\n        UpdateBackendAuthUserResult updateResult = backendClient.updateBackendAuthUser(updateRequest); /* <=== com.amazonaws.services.amplifybackend.AmplifyBackend.updateBackendAuthUser */ \n    }\n}\n\n"
                  }
                ]
              },
              {
                "pathId" : "11220-11219-11222-11221-11210",
                "path" : [
                  {
                    "sample" : "\"email\"",
                    "lineNumber" : 17,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Create a new account in Amazon Organizations to store the personal data\n        CreateAccountRequest createAccountRequest = new CreateAccountRequest()\n            .withEmail(personalData.get(\"email\")) /* <===  */ \n            .withAccountName(personalData.get(\"name\"))\n            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest);\n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId();\n"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 17,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Create a new account in Amazon Organizations to store the personal data\n        CreateAccountRequest createAccountRequest = new CreateAccountRequest()\n            .withEmail(personalData.get(\"email\")) /* <=== <unresolvedNamespace>.Map<String,String> */ \n            .withAccountName(personalData.get(\"name\"))\n            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest);\n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId();\n"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 18,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "\n    public void processPersonalData(Map<String,String> personalData) {\n        // Create a new account in Amazon Organizations to store the personal data\n        CreateAccountRequest createAccountRequest = new CreateAccountRequest()\n            .withEmail(personalData.get(\"email\"))\n            .withAccountName(personalData.get(\"name\")) /* <=== <unresolvedNamespace>.Map<String,String> */ \n            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest);\n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId();\n\n        // Add the personal data as tags to the created account"
                  },
                  {
                    "sample" : "get(\"name\")",
                    "lineNumber" : 18,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "\n    public void processPersonalData(Map<String,String> personalData) {\n        // Create a new account in Amazon Organizations to store the personal data\n        CreateAccountRequest createAccountRequest = new CreateAccountRequest()\n            .withEmail(personalData.get(\"email\"))\n            .withAccountName(personalData.get(\"name\")) /* <===  */ \n            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest);\n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId();\n\n        // Add the personal data as tags to the created account"
                  },
                  {
                    "sample" : "withEmail(personalData.get(\"email\"))",
                    "lineNumber" : 16,
                    "columnNumber" : 53,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "        organizationsClient = AWSOrganizationsClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Create a new account in Amazon Organizations to store the personal data\n        CreateAccountRequest createAccountRequest = new CreateAccountRequest() /* <=== com.amazonaws.services.organizations.model.CreateAccountRequest.withEmail */ \n            .withEmail(personalData.get(\"email\"))\n            .withAccountName(personalData.get(\"name\"))\n            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest);\n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId();"
                  }
                ]
              },
              {
                "pathId" : "6155-6179-6203-6194",
                "path" : [
                  {
                    "sample" : "email",
                    "lineNumber" : 22,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/amplifyBackend.java",
                    "excerpt" : "    public void processPersonalData(String userId, String email, String name) {\n        // Create an identity pool for the user\n        CreateBackendAuthIdentityPoolRequest poolRequest = new CreateBackendAuthIdentityPoolRequest()\n                .withIdentityPoolName(\"UserIdentityPool\")\n                .withUserId(userId)\n                .withUsername(email) /* <=== java.lang.String */ \n                .withPassword(name);\n        CreateBackendAuthIdentityPoolResult poolResult = backendClient.createBackendAuthIdentityPool(poolRequest);\n\n        // Create the user in the backend\n        CreateBackendAuthUserRequest userRequest = new CreateBackendAuthUserRequest()"
                  },
                  {
                    "sample" : "email",
                    "lineNumber" : 29,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/amplifyBackend.java",
                    "excerpt" : "        CreateBackendAuthIdentityPoolResult poolResult = backendClient.createBackendAuthIdentityPool(poolRequest);\n\n        // Create the user in the backend\n        CreateBackendAuthUserRequest userRequest = new CreateBackendAuthUserRequest()\n                .withUserId(userId)\n                .withUsername(email) /* <=== java.lang.String */ \n                .withPassword(name);\n        CreateBackendAuthUserResult userResult = backendClient.createBackendAuthUser(userRequest);\n\n        // Update the user's personal information\n        UpdateBackendAuthUserRequest updateRequest = new UpdateBackendAuthUserRequest()"
                  },
                  {
                    "sample" : "email",
                    "lineNumber" : 36,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/amplifyBackend.java",
                    "excerpt" : "        CreateBackendAuthUserResult userResult = backendClient.createBackendAuthUser(userRequest);\n\n        // Update the user's personal information\n        UpdateBackendAuthUserRequest updateRequest = new UpdateBackendAuthUserRequest()\n                .withUserId(userId)\n                .withEmail(email) /* <=== java.lang.String */ \n                .withName(name);\n        UpdateBackendAuthUserResult updateResult = backendClient.updateBackendAuthUser(updateRequest);\n    }\n}\n"
                  },
                  {
                    "sample" : "withUserId(userId)",
                    "lineNumber" : 34,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/amplifyBackend.java",
                    "excerpt" : "                .withUsername(email)\n                .withPassword(name);\n        CreateBackendAuthUserResult userResult = backendClient.createBackendAuthUser(userRequest);\n\n        // Update the user's personal information\n        UpdateBackendAuthUserRequest updateRequest = new UpdateBackendAuthUserRequest() /* <=== com.amazonaws.services.amplifybackend.model.UpdateBackendAuthUserRequest.withUserId */ \n                .withUserId(userId)\n                .withEmail(email)\n                .withName(name);\n        UpdateBackendAuthUserResult updateResult = backendClient.updateBackendAuthUser(updateRequest);\n    }"
                  }
                ]
              },
              {
                "pathId" : "6179-6170-6169-6168-6167-6184",
                "path" : [
                  {
                    "sample" : "email",
                    "lineNumber" : 29,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/amplifyBackend.java",
                    "excerpt" : "        CreateBackendAuthIdentityPoolResult poolResult = backendClient.createBackendAuthIdentityPool(poolRequest);\n\n        // Create the user in the backend\n        CreateBackendAuthUserRequest userRequest = new CreateBackendAuthUserRequest()\n                .withUserId(userId)\n                .withUsername(email) /* <=== java.lang.String */ \n                .withPassword(name);\n        CreateBackendAuthUserResult userResult = backendClient.createBackendAuthUser(userRequest);\n\n        // Update the user's personal information\n        UpdateBackendAuthUserRequest updateRequest = new UpdateBackendAuthUserRequest()"
                  },
                  {
                    "sample" : "withUserId(userId)",
                    "lineNumber" : 27,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/amplifyBackend.java",
                    "excerpt" : "                .withUsername(email)\n                .withPassword(name);\n        CreateBackendAuthIdentityPoolResult poolResult = backendClient.createBackendAuthIdentityPool(poolRequest);\n\n        // Create the user in the backend\n        CreateBackendAuthUserRequest userRequest = new CreateBackendAuthUserRequest() /* <=== com.amazonaws.services.amplifybackend.model.CreateBackendAuthUserRequest.withUserId */ \n                .withUserId(userId)\n                .withUsername(email)\n                .withPassword(name);\n        CreateBackendAuthUserResult userResult = backendClient.createBackendAuthUser(userRequest);\n"
                  },
                  {
                    "sample" : "withUsername(email)",
                    "lineNumber" : 27,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/amplifyBackend.java",
                    "excerpt" : "                .withUsername(email)\n                .withPassword(name);\n        CreateBackendAuthIdentityPoolResult poolResult = backendClient.createBackendAuthIdentityPool(poolRequest);\n\n        // Create the user in the backend\n        CreateBackendAuthUserRequest userRequest = new CreateBackendAuthUserRequest() /* <===  */ \n                .withUserId(userId)\n                .withUsername(email)\n                .withPassword(name);\n        CreateBackendAuthUserResult userResult = backendClient.createBackendAuthUser(userRequest);\n"
                  },
                  {
                    "sample" : "withPassword(name)",
                    "lineNumber" : 27,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/amplifyBackend.java",
                    "excerpt" : "                .withUsername(email)\n                .withPassword(name);\n        CreateBackendAuthIdentityPoolResult poolResult = backendClient.createBackendAuthIdentityPool(poolRequest);\n\n        // Create the user in the backend\n        CreateBackendAuthUserRequest userRequest = new CreateBackendAuthUserRequest() /* <===  */ \n                .withUserId(userId)\n                .withUsername(email)\n                .withPassword(name);\n        CreateBackendAuthUserResult userResult = backendClient.createBackendAuthUser(userRequest);\n"
                  },
                  {
                    "sample" : "userRequest",
                    "lineNumber" : 27,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/amplifyBackend.java",
                    "excerpt" : "                .withUsername(email)\n                .withPassword(name);\n        CreateBackendAuthIdentityPoolResult poolResult = backendClient.createBackendAuthIdentityPool(poolRequest);\n\n        // Create the user in the backend\n        CreateBackendAuthUserRequest userRequest = new CreateBackendAuthUserRequest() /* <=== com.amazonaws.services.amplifybackend.model.CreateBackendAuthUserRequest */ \n                .withUserId(userId)\n                .withUsername(email)\n                .withPassword(name);\n        CreateBackendAuthUserResult userResult = backendClient.createBackendAuthUser(userRequest);\n"
                  },
                  {
                    "sample" : "createBackendAuthUser(userRequest)",
                    "lineNumber" : 31,
                    "columnNumber" : 50,
                    "fileName" : "/app/code/amplifyBackend.java",
                    "excerpt" : "        // Create the user in the backend\n        CreateBackendAuthUserRequest userRequest = new CreateBackendAuthUserRequest()\n                .withUserId(userId)\n                .withUsername(email)\n                .withPassword(name);\n        CreateBackendAuthUserResult userResult = backendClient.createBackendAuthUser(userRequest); /* <=== com.amazonaws.services.amplifybackend.AmplifyBackend.createBackendAuthUser */ \n\n        // Update the user's personal information\n        UpdateBackendAuthUserRequest updateRequest = new UpdateBackendAuthUserRequest()\n                .withUserId(userId)\n                .withEmail(email)"
                  }
                ]
              },
              {
                "pathId" : "6155-6179-6170",
                "path" : [
                  {
                    "sample" : "email",
                    "lineNumber" : 22,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/amplifyBackend.java",
                    "excerpt" : "    public void processPersonalData(String userId, String email, String name) {\n        // Create an identity pool for the user\n        CreateBackendAuthIdentityPoolRequest poolRequest = new CreateBackendAuthIdentityPoolRequest()\n                .withIdentityPoolName(\"UserIdentityPool\")\n                .withUserId(userId)\n                .withUsername(email) /* <=== java.lang.String */ \n                .withPassword(name);\n        CreateBackendAuthIdentityPoolResult poolResult = backendClient.createBackendAuthIdentityPool(poolRequest);\n\n        // Create the user in the backend\n        CreateBackendAuthUserRequest userRequest = new CreateBackendAuthUserRequest()"
                  },
                  {
                    "sample" : "email",
                    "lineNumber" : 29,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/amplifyBackend.java",
                    "excerpt" : "        CreateBackendAuthIdentityPoolResult poolResult = backendClient.createBackendAuthIdentityPool(poolRequest);\n\n        // Create the user in the backend\n        CreateBackendAuthUserRequest userRequest = new CreateBackendAuthUserRequest()\n                .withUserId(userId)\n                .withUsername(email) /* <=== java.lang.String */ \n                .withPassword(name);\n        CreateBackendAuthUserResult userResult = backendClient.createBackendAuthUser(userRequest);\n\n        // Update the user's personal information\n        UpdateBackendAuthUserRequest updateRequest = new UpdateBackendAuthUserRequest()"
                  },
                  {
                    "sample" : "withUserId(userId)",
                    "lineNumber" : 27,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/amplifyBackend.java",
                    "excerpt" : "                .withUsername(email)\n                .withPassword(name);\n        CreateBackendAuthIdentityPoolResult poolResult = backendClient.createBackendAuthIdentityPool(poolRequest);\n\n        // Create the user in the backend\n        CreateBackendAuthUserRequest userRequest = new CreateBackendAuthUserRequest() /* <=== com.amazonaws.services.amplifybackend.model.CreateBackendAuthUserRequest.withUserId */ \n                .withUserId(userId)\n                .withUsername(email)\n                .withPassword(name);\n        CreateBackendAuthUserResult userResult = backendClient.createBackendAuthUser(userRequest);\n"
                  }
                ]
              },
              {
                "pathId" : "6155-6144-6143-6142-6141-6160",
                "path" : [
                  {
                    "sample" : "email",
                    "lineNumber" : 22,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/amplifyBackend.java",
                    "excerpt" : "    public void processPersonalData(String userId, String email, String name) {\n        // Create an identity pool for the user\n        CreateBackendAuthIdentityPoolRequest poolRequest = new CreateBackendAuthIdentityPoolRequest()\n                .withIdentityPoolName(\"UserIdentityPool\")\n                .withUserId(userId)\n                .withUsername(email) /* <=== java.lang.String */ \n                .withPassword(name);\n        CreateBackendAuthIdentityPoolResult poolResult = backendClient.createBackendAuthIdentityPool(poolRequest);\n\n        // Create the user in the backend\n        CreateBackendAuthUserRequest userRequest = new CreateBackendAuthUserRequest()"
                  },
                  {
                    "sample" : "withUserId(userId)",
                    "lineNumber" : 19,
                    "columnNumber" : 60,
                    "fileName" : "/app/code/amplifyBackend.java",
                    "excerpt" : "        backendClient = new AmplifyBackendClientBuilder().build();\n    }\n\n    public void processPersonalData(String userId, String email, String name) {\n        // Create an identity pool for the user\n        CreateBackendAuthIdentityPoolRequest poolRequest = new CreateBackendAuthIdentityPoolRequest() /* <===  */ \n                .withIdentityPoolName(\"UserIdentityPool\")\n                .withUserId(userId)\n                .withUsername(email)\n                .withPassword(name);\n        CreateBackendAuthIdentityPoolResult poolResult = backendClient.createBackendAuthIdentityPool(poolRequest);"
                  },
                  {
                    "sample" : "withUsername(email)",
                    "lineNumber" : 19,
                    "columnNumber" : 60,
                    "fileName" : "/app/code/amplifyBackend.java",
                    "excerpt" : "        backendClient = new AmplifyBackendClientBuilder().build();\n    }\n\n    public void processPersonalData(String userId, String email, String name) {\n        // Create an identity pool for the user\n        CreateBackendAuthIdentityPoolRequest poolRequest = new CreateBackendAuthIdentityPoolRequest() /* <===  */ \n                .withIdentityPoolName(\"UserIdentityPool\")\n                .withUserId(userId)\n                .withUsername(email)\n                .withPassword(name);\n        CreateBackendAuthIdentityPoolResult poolResult = backendClient.createBackendAuthIdentityPool(poolRequest);"
                  },
                  {
                    "sample" : "withPassword(name)",
                    "lineNumber" : 19,
                    "columnNumber" : 60,
                    "fileName" : "/app/code/amplifyBackend.java",
                    "excerpt" : "        backendClient = new AmplifyBackendClientBuilder().build();\n    }\n\n    public void processPersonalData(String userId, String email, String name) {\n        // Create an identity pool for the user\n        CreateBackendAuthIdentityPoolRequest poolRequest = new CreateBackendAuthIdentityPoolRequest() /* <===  */ \n                .withIdentityPoolName(\"UserIdentityPool\")\n                .withUserId(userId)\n                .withUsername(email)\n                .withPassword(name);\n        CreateBackendAuthIdentityPoolResult poolResult = backendClient.createBackendAuthIdentityPool(poolRequest);"
                  },
                  {
                    "sample" : "poolRequest",
                    "lineNumber" : 19,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/amplifyBackend.java",
                    "excerpt" : "        backendClient = new AmplifyBackendClientBuilder().build();\n    }\n\n    public void processPersonalData(String userId, String email, String name) {\n        // Create an identity pool for the user\n        CreateBackendAuthIdentityPoolRequest poolRequest = new CreateBackendAuthIdentityPoolRequest() /* <=== com.amazonaws.services.amplifybackend.model.CreateBackendAuthIdentityPoolRequest */ \n                .withIdentityPoolName(\"UserIdentityPool\")\n                .withUserId(userId)\n                .withUsername(email)\n                .withPassword(name);\n        CreateBackendAuthIdentityPoolResult poolResult = backendClient.createBackendAuthIdentityPool(poolRequest);"
                  },
                  {
                    "sample" : "createBackendAuthIdentityPool(poolRequest)",
                    "lineNumber" : 24,
                    "columnNumber" : 58,
                    "fileName" : "/app/code/amplifyBackend.java",
                    "excerpt" : "        CreateBackendAuthIdentityPoolRequest poolRequest = new CreateBackendAuthIdentityPoolRequest()\n                .withIdentityPoolName(\"UserIdentityPool\")\n                .withUserId(userId)\n                .withUsername(email)\n                .withPassword(name);\n        CreateBackendAuthIdentityPoolResult poolResult = backendClient.createBackendAuthIdentityPool(poolRequest); /* <=== com.amazonaws.services.amplifybackend.AmplifyBackend.createBackendAuthIdentityPool */ \n\n        // Create the user in the backend\n        CreateBackendAuthUserRequest userRequest = new CreateBackendAuthUserRequest()\n                .withUserId(userId)\n                .withUsername(email)"
                  }
                ]
              },
              {
                "pathId" : "11220-11219-11222-11221-11210-11209-11208-11207-11228-11227-11237",
                "path" : [
                  {
                    "sample" : "\"email\"",
                    "lineNumber" : 17,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Create a new account in Amazon Organizations to store the personal data\n        CreateAccountRequest createAccountRequest = new CreateAccountRequest()\n            .withEmail(personalData.get(\"email\")) /* <===  */ \n            .withAccountName(personalData.get(\"name\"))\n            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest);\n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId();\n"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 17,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Create a new account in Amazon Organizations to store the personal data\n        CreateAccountRequest createAccountRequest = new CreateAccountRequest()\n            .withEmail(personalData.get(\"email\")) /* <=== <unresolvedNamespace>.Map<String,String> */ \n            .withAccountName(personalData.get(\"name\"))\n            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest);\n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId();\n"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 18,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "\n    public void processPersonalData(Map<String,String> personalData) {\n        // Create a new account in Amazon Organizations to store the personal data\n        CreateAccountRequest createAccountRequest = new CreateAccountRequest()\n            .withEmail(personalData.get(\"email\"))\n            .withAccountName(personalData.get(\"name\")) /* <=== <unresolvedNamespace>.Map<String,String> */ \n            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest);\n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId();\n\n        // Add the personal data as tags to the created account"
                  },
                  {
                    "sample" : "get(\"name\")",
                    "lineNumber" : 18,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "\n    public void processPersonalData(Map<String,String> personalData) {\n        // Create a new account in Amazon Organizations to store the personal data\n        CreateAccountRequest createAccountRequest = new CreateAccountRequest()\n            .withEmail(personalData.get(\"email\"))\n            .withAccountName(personalData.get(\"name\")) /* <===  */ \n            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest);\n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId();\n\n        // Add the personal data as tags to the created account"
                  },
                  {
                    "sample" : "withEmail(personalData.get(\"email\"))",
                    "lineNumber" : 16,
                    "columnNumber" : 53,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "        organizationsClient = AWSOrganizationsClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Create a new account in Amazon Organizations to store the personal data\n        CreateAccountRequest createAccountRequest = new CreateAccountRequest() /* <=== com.amazonaws.services.organizations.model.CreateAccountRequest.withEmail */ \n            .withEmail(personalData.get(\"email\"))\n            .withAccountName(personalData.get(\"name\"))\n            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest);\n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId();"
                  },
                  {
                    "sample" : "withAccountName(personalData.get(\"name\"))",
                    "lineNumber" : 16,
                    "columnNumber" : 53,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "        organizationsClient = AWSOrganizationsClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Create a new account in Amazon Organizations to store the personal data\n        CreateAccountRequest createAccountRequest = new CreateAccountRequest() /* <===  */ \n            .withEmail(personalData.get(\"email\"))\n            .withAccountName(personalData.get(\"name\"))\n            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest);\n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId();"
                  },
                  {
                    "sample" : "withRoleName(\"PERSONAL_DATA_ROLE\")",
                    "lineNumber" : 16,
                    "columnNumber" : 53,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "        organizationsClient = AWSOrganizationsClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Create a new account in Amazon Organizations to store the personal data\n        CreateAccountRequest createAccountRequest = new CreateAccountRequest() /* <===  */ \n            .withEmail(personalData.get(\"email\"))\n            .withAccountName(personalData.get(\"name\"))\n            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest);\n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId();"
                  },
                  {
                    "sample" : "createAccountRequest",
                    "lineNumber" : 16,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "        organizationsClient = AWSOrganizationsClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Create a new account in Amazon Organizations to store the personal data\n        CreateAccountRequest createAccountRequest = new CreateAccountRequest() /* <=== com.amazonaws.services.organizations.model.CreateAccountRequest */ \n            .withEmail(personalData.get(\"email\"))\n            .withAccountName(personalData.get(\"name\"))\n            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest);\n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId();"
                  },
                  {
                    "sample" : "createAccount(createAccountRequest)",
                    "lineNumber" : 20,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "        // Create a new account in Amazon Organizations to store the personal data\n        CreateAccountRequest createAccountRequest = new CreateAccountRequest()\n            .withEmail(personalData.get(\"email\"))\n            .withAccountName(personalData.get(\"name\"))\n            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest); /* <=== com.amazonaws.services.organizations.AWSOrganizations.createAccount */ \n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId();\n\n        // Add the personal data as tags to the created account\n        TagResourceRequest tagResourceRequest = new TagResourceRequest()\n            .withResourceId(accountId)"
                  },
                  {
                    "sample" : "createAccountResult",
                    "lineNumber" : 20,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "        // Create a new account in Amazon Organizations to store the personal data\n        CreateAccountRequest createAccountRequest = new CreateAccountRequest()\n            .withEmail(personalData.get(\"email\"))\n            .withAccountName(personalData.get(\"name\"))\n            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest); /* <=== com.amazonaws.services.organizations.model.CreateAccountResult */ \n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId();\n\n        // Add the personal data as tags to the created account\n        TagResourceRequest tagResourceRequest = new TagResourceRequest()\n            .withResourceId(accountId)"
                  },
                  {
                    "sample" : "getCreateAccountStatus()",
                    "lineNumber" : 21,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "        CreateAccountRequest createAccountRequest = new CreateAccountRequest()\n            .withEmail(personalData.get(\"email\"))\n            .withAccountName(personalData.get(\"name\"))\n            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest);\n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId(); /* <=== com.amazonaws.services.organizations.model.CreateAccountResult.getCreateAccountStatus */ \n\n        // Add the personal data as tags to the created account\n        TagResourceRequest tagResourceRequest = new TagResourceRequest()\n            .withResourceId(accountId)\n            .withTags(personalData);"
                  }
                ]
              },
              {
                "pathId" : "12678-12677-12676-12665-12664-12663-12662-12684",
                "path" : [
                  {
                    "sample" : "\"email\"",
                    "lineNumber" : 19,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "    public void processPersonalData(Map<String,String> personalData) {\n        // Send the personal data to Amazon Lex for processing\n        PostTextRequest postTextRequest = new PostTextRequest()\n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\")) /* <===  */ \n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);\n\n        // Handle the Lex response\n        if (postTextResult.getDialogState() == \"Fulfilled\") {"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 19,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "    public void processPersonalData(Map<String,String> personalData) {\n        // Send the personal data to Amazon Lex for processing\n        PostTextRequest postTextRequest = new PostTextRequest()\n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\")) /* <=== <unresolvedNamespace>.Map<String,String> */ \n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);\n\n        // Handle the Lex response\n        if (postTextResult.getDialogState() == \"Fulfilled\") {"
                  },
                  {
                    "sample" : "get(\"email\")",
                    "lineNumber" : 19,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "    public void processPersonalData(Map<String,String> personalData) {\n        // Send the personal data to Amazon Lex for processing\n        PostTextRequest postTextRequest = new PostTextRequest()\n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\")) /* <===  */ \n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);\n\n        // Handle the Lex response\n        if (postTextResult.getDialogState() == \"Fulfilled\") {"
                  },
                  {
                    "sample" : "withBotAlias(\"latest\")",
                    "lineNumber" : 16,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "        lexRuntimeClient = AmazonLexRuntimeClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Send the personal data to Amazon Lex for processing\n        PostTextRequest postTextRequest = new PostTextRequest() /* <===  */ \n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\"))\n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);"
                  },
                  {
                    "sample" : "withUserId(personalData.get(\"email\"))",
                    "lineNumber" : 16,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "        lexRuntimeClient = AmazonLexRuntimeClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Send the personal data to Amazon Lex for processing\n        PostTextRequest postTextRequest = new PostTextRequest() /* <===  */ \n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\"))\n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);"
                  },
                  {
                    "sample" : "withInputText(personalData.toString())",
                    "lineNumber" : 16,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "        lexRuntimeClient = AmazonLexRuntimeClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Send the personal data to Amazon Lex for processing\n        PostTextRequest postTextRequest = new PostTextRequest() /* <===  */ \n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\"))\n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);"
                  },
                  {
                    "sample" : "postTextRequest",
                    "lineNumber" : 16,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "        lexRuntimeClient = AmazonLexRuntimeClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Send the personal data to Amazon Lex for processing\n        PostTextRequest postTextRequest = new PostTextRequest() /* <=== com.amazonaws.services.lexruntime.model.PostTextRequest */ \n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\"))\n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);"
                  },
                  {
                    "sample" : "postText(postTextRequest)",
                    "lineNumber" : 21,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "        PostTextRequest postTextRequest = new PostTextRequest()\n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\"))\n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest); /* <=== com.amazonaws.services.lexruntime.AmazonLexRuntime.postText */ \n\n        // Handle the Lex response\n        if (postTextResult.getDialogState() == \"Fulfilled\") {\n            // The personal data was successfully processed by Lex\n            System.out.println(\"Personal data processed by Lex: \" + postTextResult.getMessage());"
                  }
                ]
              },
              {
                "pathId" : "10216-10215-10219-10222",
                "path" : [
                  {
                    "sample" : "\"email\"",
                    "lineNumber" : 18,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/cloudcontrolapi.java",
                    "excerpt" : "\n        // Add personal data to the request\n        Map<String, String> personalData = new HashMap<>();\n        personalData.put(\"first_name\", \"John\");\n        personalData.put(\"last_name\", \"Doe\");\n        personalData.put(\"email\", \"johndoe@example.com\"); /* <===  */ \n        personalData.put(\"phone_number\", \"555-555-1212\");\n        request.setPersonalData(personalData);\n\n        GetRightsizingRecommendationResult result = client.getRightsizingRecommendation(request);\n        System.out.println(\"Rightsizing recommendation: \" + result.getRecommendation());"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 18,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/cloudcontrolapi.java",
                    "excerpt" : "\n        // Add personal data to the request\n        Map<String, String> personalData = new HashMap<>();\n        personalData.put(\"first_name\", \"John\");\n        personalData.put(\"last_name\", \"Doe\");\n        personalData.put(\"email\", \"johndoe@example.com\"); /* <=== java.util.Map */ \n        personalData.put(\"phone_number\", \"555-555-1212\");\n        request.setPersonalData(personalData);\n\n        GetRightsizingRecommendationResult result = client.getRightsizingRecommendation(request);\n        System.out.println(\"Rightsizing recommendation: \" + result.getRecommendation());"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 19,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/cloudcontrolapi.java",
                    "excerpt" : "        // Add personal data to the request\n        Map<String, String> personalData = new HashMap<>();\n        personalData.put(\"first_name\", \"John\");\n        personalData.put(\"last_name\", \"Doe\");\n        personalData.put(\"email\", \"johndoe@example.com\");\n        personalData.put(\"phone_number\", \"555-555-1212\"); /* <=== java.util.Map */ \n        request.setPersonalData(personalData);\n\n        GetRightsizingRecommendationResult result = client.getRightsizingRecommendation(request);\n        System.out.println(\"Rightsizing recommendation: \" + result.getRecommendation());\n    }"
                  },
                  {
                    "sample" : "setPersonalData(personalData)",
                    "lineNumber" : 20,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/cloudcontrolapi.java",
                    "excerpt" : "        Map<String, String> personalData = new HashMap<>();\n        personalData.put(\"first_name\", \"John\");\n        personalData.put(\"last_name\", \"Doe\");\n        personalData.put(\"email\", \"johndoe@example.com\");\n        personalData.put(\"phone_number\", \"555-555-1212\");\n        request.setPersonalData(personalData); /* <=== com.amazonaws.services.cloudcontrolapi.model.GetRightsizingRecommendationRequest.setPersonalData */ \n\n        GetRightsizingRecommendationResult result = client.getRightsizingRecommendation(request);\n        System.out.println(\"Rightsizing recommendation: \" + result.getRecommendation());\n    }\n}"
                  }
                ]
              },
              {
                "pathId" : "11220-11219-11222-11221-11210-11209-11208-11207-11228",
                "path" : [
                  {
                    "sample" : "\"email\"",
                    "lineNumber" : 17,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Create a new account in Amazon Organizations to store the personal data\n        CreateAccountRequest createAccountRequest = new CreateAccountRequest()\n            .withEmail(personalData.get(\"email\")) /* <===  */ \n            .withAccountName(personalData.get(\"name\"))\n            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest);\n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId();\n"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 17,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Create a new account in Amazon Organizations to store the personal data\n        CreateAccountRequest createAccountRequest = new CreateAccountRequest()\n            .withEmail(personalData.get(\"email\")) /* <=== <unresolvedNamespace>.Map<String,String> */ \n            .withAccountName(personalData.get(\"name\"))\n            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest);\n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId();\n"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 18,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "\n    public void processPersonalData(Map<String,String> personalData) {\n        // Create a new account in Amazon Organizations to store the personal data\n        CreateAccountRequest createAccountRequest = new CreateAccountRequest()\n            .withEmail(personalData.get(\"email\"))\n            .withAccountName(personalData.get(\"name\")) /* <=== <unresolvedNamespace>.Map<String,String> */ \n            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest);\n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId();\n\n        // Add the personal data as tags to the created account"
                  },
                  {
                    "sample" : "get(\"name\")",
                    "lineNumber" : 18,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "\n    public void processPersonalData(Map<String,String> personalData) {\n        // Create a new account in Amazon Organizations to store the personal data\n        CreateAccountRequest createAccountRequest = new CreateAccountRequest()\n            .withEmail(personalData.get(\"email\"))\n            .withAccountName(personalData.get(\"name\")) /* <===  */ \n            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest);\n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId();\n\n        // Add the personal data as tags to the created account"
                  },
                  {
                    "sample" : "withEmail(personalData.get(\"email\"))",
                    "lineNumber" : 16,
                    "columnNumber" : 53,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "        organizationsClient = AWSOrganizationsClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Create a new account in Amazon Organizations to store the personal data\n        CreateAccountRequest createAccountRequest = new CreateAccountRequest() /* <=== com.amazonaws.services.organizations.model.CreateAccountRequest.withEmail */ \n            .withEmail(personalData.get(\"email\"))\n            .withAccountName(personalData.get(\"name\"))\n            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest);\n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId();"
                  },
                  {
                    "sample" : "withAccountName(personalData.get(\"name\"))",
                    "lineNumber" : 16,
                    "columnNumber" : 53,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "        organizationsClient = AWSOrganizationsClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Create a new account in Amazon Organizations to store the personal data\n        CreateAccountRequest createAccountRequest = new CreateAccountRequest() /* <===  */ \n            .withEmail(personalData.get(\"email\"))\n            .withAccountName(personalData.get(\"name\"))\n            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest);\n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId();"
                  },
                  {
                    "sample" : "withRoleName(\"PERSONAL_DATA_ROLE\")",
                    "lineNumber" : 16,
                    "columnNumber" : 53,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "        organizationsClient = AWSOrganizationsClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Create a new account in Amazon Organizations to store the personal data\n        CreateAccountRequest createAccountRequest = new CreateAccountRequest() /* <===  */ \n            .withEmail(personalData.get(\"email\"))\n            .withAccountName(personalData.get(\"name\"))\n            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest);\n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId();"
                  },
                  {
                    "sample" : "createAccountRequest",
                    "lineNumber" : 16,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "        organizationsClient = AWSOrganizationsClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Create a new account in Amazon Organizations to store the personal data\n        CreateAccountRequest createAccountRequest = new CreateAccountRequest() /* <=== com.amazonaws.services.organizations.model.CreateAccountRequest */ \n            .withEmail(personalData.get(\"email\"))\n            .withAccountName(personalData.get(\"name\"))\n            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest);\n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId();"
                  },
                  {
                    "sample" : "createAccount(createAccountRequest)",
                    "lineNumber" : 20,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/organizations.java",
                    "excerpt" : "        // Create a new account in Amazon Organizations to store the personal data\n        CreateAccountRequest createAccountRequest = new CreateAccountRequest()\n            .withEmail(personalData.get(\"email\"))\n            .withAccountName(personalData.get(\"name\"))\n            .withRoleName(\"PERSONAL_DATA_ROLE\");\n        CreateAccountResult createAccountResult = organizationsClient.createAccount(createAccountRequest); /* <=== com.amazonaws.services.organizations.AWSOrganizations.createAccount */ \n        String accountId = createAccountResult.getCreateAccountStatus().getAccountId();\n\n        // Add the personal data as tags to the created account\n        TagResourceRequest tagResourceRequest = new TagResourceRequest()\n            .withResourceId(accountId)"
                  }
                ]
              },
              {
                "pathId" : "12678-12677-12676-12665-12664-12663-12662-12684-12683-12691",
                "path" : [
                  {
                    "sample" : "\"email\"",
                    "lineNumber" : 19,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "    public void processPersonalData(Map<String,String> personalData) {\n        // Send the personal data to Amazon Lex for processing\n        PostTextRequest postTextRequest = new PostTextRequest()\n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\")) /* <===  */ \n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);\n\n        // Handle the Lex response\n        if (postTextResult.getDialogState() == \"Fulfilled\") {"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 19,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "    public void processPersonalData(Map<String,String> personalData) {\n        // Send the personal data to Amazon Lex for processing\n        PostTextRequest postTextRequest = new PostTextRequest()\n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\")) /* <=== <unresolvedNamespace>.Map<String,String> */ \n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);\n\n        // Handle the Lex response\n        if (postTextResult.getDialogState() == \"Fulfilled\") {"
                  },
                  {
                    "sample" : "get(\"email\")",
                    "lineNumber" : 19,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "    public void processPersonalData(Map<String,String> personalData) {\n        // Send the personal data to Amazon Lex for processing\n        PostTextRequest postTextRequest = new PostTextRequest()\n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\")) /* <===  */ \n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);\n\n        // Handle the Lex response\n        if (postTextResult.getDialogState() == \"Fulfilled\") {"
                  },
                  {
                    "sample" : "withBotAlias(\"latest\")",
                    "lineNumber" : 16,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "        lexRuntimeClient = AmazonLexRuntimeClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Send the personal data to Amazon Lex for processing\n        PostTextRequest postTextRequest = new PostTextRequest() /* <===  */ \n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\"))\n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);"
                  },
                  {
                    "sample" : "withUserId(personalData.get(\"email\"))",
                    "lineNumber" : 16,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "        lexRuntimeClient = AmazonLexRuntimeClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Send the personal data to Amazon Lex for processing\n        PostTextRequest postTextRequest = new PostTextRequest() /* <===  */ \n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\"))\n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);"
                  },
                  {
                    "sample" : "withInputText(personalData.toString())",
                    "lineNumber" : 16,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "        lexRuntimeClient = AmazonLexRuntimeClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Send the personal data to Amazon Lex for processing\n        PostTextRequest postTextRequest = new PostTextRequest() /* <===  */ \n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\"))\n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);"
                  },
                  {
                    "sample" : "postTextRequest",
                    "lineNumber" : 16,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "        lexRuntimeClient = AmazonLexRuntimeClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(Map<String,String> personalData) {\n        // Send the personal data to Amazon Lex for processing\n        PostTextRequest postTextRequest = new PostTextRequest() /* <=== com.amazonaws.services.lexruntime.model.PostTextRequest */ \n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\"))\n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);"
                  },
                  {
                    "sample" : "postText(postTextRequest)",
                    "lineNumber" : 21,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "        PostTextRequest postTextRequest = new PostTextRequest()\n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\"))\n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest); /* <=== com.amazonaws.services.lexruntime.AmazonLexRuntime.postText */ \n\n        // Handle the Lex response\n        if (postTextResult.getDialogState() == \"Fulfilled\") {\n            // The personal data was successfully processed by Lex\n            System.out.println(\"Personal data processed by Lex: \" + postTextResult.getMessage());"
                  },
                  {
                    "sample" : "postTextResult",
                    "lineNumber" : 21,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "        PostTextRequest postTextRequest = new PostTextRequest()\n            .withBotName(\"PersonalDataBot\")\n            .withBotAlias(\"latest\")\n            .withUserId(personalData.get(\"email\"))\n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest); /* <=== com.amazonaws.services.lexruntime.model.PostTextResult */ \n\n        // Handle the Lex response\n        if (postTextResult.getDialogState() == \"Fulfilled\") {\n            // The personal data was successfully processed by Lex\n            System.out.println(\"Personal data processed by Lex: \" + postTextResult.getMessage());"
                  },
                  {
                    "sample" : "getDialogState()",
                    "lineNumber" : 24,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/lexRuntime.java",
                    "excerpt" : "            .withUserId(personalData.get(\"email\"))\n            .withInputText(personalData.toString());\n        PostTextResult postTextResult = lexRuntimeClient.postText(postTextRequest);\n\n        // Handle the Lex response\n        if (postTextResult.getDialogState() == \"Fulfilled\") { /* <=== com.amazonaws.services.lexruntime.model.PostTextResult.getDialogState */ \n            // The personal data was successfully processed by Lex\n            System.out.println(\"Personal data processed by Lex: \" + postTextResult.getMessage());\n        } else {\n            // An error occurred while processing the personal data\n            System.err.println(\"Error processing personal data: \" + postTextResult.getMessage());"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.AccountData.AccountName",
        "sinks" : [
          {
            "sinkType" : "third_parties",
            "id" : "ThirdParties.SDK.Amazon.Aws",
            "name" : "Amazon Aws",
            "category" : "",
            "domains" : [
              "aws.amazon.com"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "databaseDetails" : {
              "dbName" : "",
              "dbVendor" : "",
              "dbLocation" : "",
              "dbOperation" : ""
            },
            "paths" : [
              {
                "pathId" : "10445-10437",
                "path" : [
                  {
                    "sample" : "userName",
                    "lineNumber" : 14,
                    "columnNumber" : 68,
                    "fileName" : "/app/code/iam.java",
                    "excerpt" : "    public IAMProcessor() {\n        iamClient = AmazonIdentityManagementClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(String userName) {\n        GetUserRequest request = new GetUserRequest().withUserName(userName); /* <=== java.lang.String */ \n        GetUserResult result = iamClient.getUser(request);\n\n        // Perform processing on the user information obtained from the IAM service\n        // Ensure to handle any exceptions and follow best practices for secure processing of personal data\n"
                  },
                  {
                    "sample" : "withUserName(userName)",
                    "lineNumber" : 14,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/iam.java",
                    "excerpt" : "    public IAMProcessor() {\n        iamClient = AmazonIdentityManagementClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(String userName) {\n        GetUserRequest request = new GetUserRequest().withUserName(userName); /* <=== com.amazonaws.services.iam.model.GetUserRequest.withUserName */ \n        GetUserResult result = iamClient.getUser(request);\n\n        // Perform processing on the user information obtained from the IAM service\n        // Ensure to handle any exceptions and follow best practices for secure processing of personal data\n"
                  }
                ]
              },
              {
                "pathId" : "1487-1479-1478-1491-1490-1512",
                "path" : [
                  {
                    "sample" : "userName",
                    "lineNumber" : 15,
                    "columnNumber" : 68,
                    "fileName" : "/app/code/identitymanagement.java",
                    "excerpt" : "    public PersonalDataProcessor() {\n        iamClient = AmazonIdentityManagementClientBuilder.defaultClient();\n    }\n\n    public void processData(String userName) {\n        GetUserRequest request = new GetUserRequest().withUserName(userName); /* <=== java.lang.String */ \n        GetUserResult result = iamClient.getUser(request);\n\n        // Process the user data, for example, to retrieve personal information\n        String userId = result.getUser().getUserId();\n        String email = result.getUser().getEmail();"
                  },
                  {
                    "sample" : "withUserName(userName)",
                    "lineNumber" : 15,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/identitymanagement.java",
                    "excerpt" : "    public PersonalDataProcessor() {\n        iamClient = AmazonIdentityManagementClientBuilder.defaultClient();\n    }\n\n    public void processData(String userName) {\n        GetUserRequest request = new GetUserRequest().withUserName(userName); /* <=== com.amazonaws.services.identitymanagement.model.GetUserRequest.withUserName */ \n        GetUserResult result = iamClient.getUser(request);\n\n        // Process the user data, for example, to retrieve personal information\n        String userId = result.getUser().getUserId();\n        String email = result.getUser().getEmail();"
                  },
                  {
                    "sample" : "request",
                    "lineNumber" : 15,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/identitymanagement.java",
                    "excerpt" : "    public PersonalDataProcessor() {\n        iamClient = AmazonIdentityManagementClientBuilder.defaultClient();\n    }\n\n    public void processData(String userName) {\n        GetUserRequest request = new GetUserRequest().withUserName(userName); /* <=== com.amazonaws.services.identitymanagement.model.GetUserRequest */ \n        GetUserResult result = iamClient.getUser(request);\n\n        // Process the user data, for example, to retrieve personal information\n        String userId = result.getUser().getUserId();\n        String email = result.getUser().getEmail();"
                  },
                  {
                    "sample" : "getUser(request)",
                    "lineNumber" : 16,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/identitymanagement.java",
                    "excerpt" : "        iamClient = AmazonIdentityManagementClientBuilder.defaultClient();\n    }\n\n    public void processData(String userName) {\n        GetUserRequest request = new GetUserRequest().withUserName(userName);\n        GetUserResult result = iamClient.getUser(request); /* <=== com.amazonaws.services.identitymanagement.AmazonIdentityManagement.getUser */ \n\n        // Process the user data, for example, to retrieve personal information\n        String userId = result.getUser().getUserId();\n        String email = result.getUser().getEmail();\n        String arn = result.getUser().getArn();"
                  },
                  {
                    "sample" : "result",
                    "lineNumber" : 16,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/identitymanagement.java",
                    "excerpt" : "        iamClient = AmazonIdentityManagementClientBuilder.defaultClient();\n    }\n\n    public void processData(String userName) {\n        GetUserRequest request = new GetUserRequest().withUserName(userName);\n        GetUserResult result = iamClient.getUser(request); /* <=== com.amazonaws.services.identitymanagement.model.GetUserResult */ \n\n        // Process the user data, for example, to retrieve personal information\n        String userId = result.getUser().getUserId();\n        String email = result.getUser().getEmail();\n        String arn = result.getUser().getArn();"
                  },
                  {
                    "sample" : "getUser()",
                    "lineNumber" : 21,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/identitymanagement.java",
                    "excerpt" : "        GetUserResult result = iamClient.getUser(request);\n\n        // Process the user data, for example, to retrieve personal information\n        String userId = result.getUser().getUserId();\n        String email = result.getUser().getEmail();\n        String arn = result.getUser().getArn(); /* <=== com.amazonaws.services.identitymanagement.model.GetUserResult.getUser */ \n\n        // Perform any additional processing or storage of personal data as necessary\n        // ...\n    }\n}"
                  }
                ]
              },
              {
                "pathId" : "1487-1479-1478-1491-1490-1500",
                "path" : [
                  {
                    "sample" : "userName",
                    "lineNumber" : 15,
                    "columnNumber" : 68,
                    "fileName" : "/app/code/identitymanagement.java",
                    "excerpt" : "    public PersonalDataProcessor() {\n        iamClient = AmazonIdentityManagementClientBuilder.defaultClient();\n    }\n\n    public void processData(String userName) {\n        GetUserRequest request = new GetUserRequest().withUserName(userName); /* <=== java.lang.String */ \n        GetUserResult result = iamClient.getUser(request);\n\n        // Process the user data, for example, to retrieve personal information\n        String userId = result.getUser().getUserId();\n        String email = result.getUser().getEmail();"
                  },
                  {
                    "sample" : "withUserName(userName)",
                    "lineNumber" : 15,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/identitymanagement.java",
                    "excerpt" : "    public PersonalDataProcessor() {\n        iamClient = AmazonIdentityManagementClientBuilder.defaultClient();\n    }\n\n    public void processData(String userName) {\n        GetUserRequest request = new GetUserRequest().withUserName(userName); /* <=== com.amazonaws.services.identitymanagement.model.GetUserRequest.withUserName */ \n        GetUserResult result = iamClient.getUser(request);\n\n        // Process the user data, for example, to retrieve personal information\n        String userId = result.getUser().getUserId();\n        String email = result.getUser().getEmail();"
                  },
                  {
                    "sample" : "request",
                    "lineNumber" : 15,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/identitymanagement.java",
                    "excerpt" : "    public PersonalDataProcessor() {\n        iamClient = AmazonIdentityManagementClientBuilder.defaultClient();\n    }\n\n    public void processData(String userName) {\n        GetUserRequest request = new GetUserRequest().withUserName(userName); /* <=== com.amazonaws.services.identitymanagement.model.GetUserRequest */ \n        GetUserResult result = iamClient.getUser(request);\n\n        // Process the user data, for example, to retrieve personal information\n        String userId = result.getUser().getUserId();\n        String email = result.getUser().getEmail();"
                  },
                  {
                    "sample" : "getUser(request)",
                    "lineNumber" : 16,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/identitymanagement.java",
                    "excerpt" : "        iamClient = AmazonIdentityManagementClientBuilder.defaultClient();\n    }\n\n    public void processData(String userName) {\n        GetUserRequest request = new GetUserRequest().withUserName(userName);\n        GetUserResult result = iamClient.getUser(request); /* <=== com.amazonaws.services.identitymanagement.AmazonIdentityManagement.getUser */ \n\n        // Process the user data, for example, to retrieve personal information\n        String userId = result.getUser().getUserId();\n        String email = result.getUser().getEmail();\n        String arn = result.getUser().getArn();"
                  },
                  {
                    "sample" : "result",
                    "lineNumber" : 16,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/identitymanagement.java",
                    "excerpt" : "        iamClient = AmazonIdentityManagementClientBuilder.defaultClient();\n    }\n\n    public void processData(String userName) {\n        GetUserRequest request = new GetUserRequest().withUserName(userName);\n        GetUserResult result = iamClient.getUser(request); /* <=== com.amazonaws.services.identitymanagement.model.GetUserResult */ \n\n        // Process the user data, for example, to retrieve personal information\n        String userId = result.getUser().getUserId();\n        String email = result.getUser().getEmail();\n        String arn = result.getUser().getArn();"
                  },
                  {
                    "sample" : "getUser()",
                    "lineNumber" : 19,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/identitymanagement.java",
                    "excerpt" : "    public void processData(String userName) {\n        GetUserRequest request = new GetUserRequest().withUserName(userName);\n        GetUserResult result = iamClient.getUser(request);\n\n        // Process the user data, for example, to retrieve personal information\n        String userId = result.getUser().getUserId(); /* <=== com.amazonaws.services.identitymanagement.model.GetUserResult.getUser */ \n        String email = result.getUser().getEmail();\n        String arn = result.getUser().getArn();\n\n        // Perform any additional processing or storage of personal data as necessary\n        // ..."
                  }
                ]
              },
              {
                "pathId" : "1487-1479-1478-1491",
                "path" : [
                  {
                    "sample" : "userName",
                    "lineNumber" : 15,
                    "columnNumber" : 68,
                    "fileName" : "/app/code/identitymanagement.java",
                    "excerpt" : "    public PersonalDataProcessor() {\n        iamClient = AmazonIdentityManagementClientBuilder.defaultClient();\n    }\n\n    public void processData(String userName) {\n        GetUserRequest request = new GetUserRequest().withUserName(userName); /* <=== java.lang.String */ \n        GetUserResult result = iamClient.getUser(request);\n\n        // Process the user data, for example, to retrieve personal information\n        String userId = result.getUser().getUserId();\n        String email = result.getUser().getEmail();"
                  },
                  {
                    "sample" : "withUserName(userName)",
                    "lineNumber" : 15,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/identitymanagement.java",
                    "excerpt" : "    public PersonalDataProcessor() {\n        iamClient = AmazonIdentityManagementClientBuilder.defaultClient();\n    }\n\n    public void processData(String userName) {\n        GetUserRequest request = new GetUserRequest().withUserName(userName); /* <=== com.amazonaws.services.identitymanagement.model.GetUserRequest.withUserName */ \n        GetUserResult result = iamClient.getUser(request);\n\n        // Process the user data, for example, to retrieve personal information\n        String userId = result.getUser().getUserId();\n        String email = result.getUser().getEmail();"
                  },
                  {
                    "sample" : "request",
                    "lineNumber" : 15,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/identitymanagement.java",
                    "excerpt" : "    public PersonalDataProcessor() {\n        iamClient = AmazonIdentityManagementClientBuilder.defaultClient();\n    }\n\n    public void processData(String userName) {\n        GetUserRequest request = new GetUserRequest().withUserName(userName); /* <=== com.amazonaws.services.identitymanagement.model.GetUserRequest */ \n        GetUserResult result = iamClient.getUser(request);\n\n        // Process the user data, for example, to retrieve personal information\n        String userId = result.getUser().getUserId();\n        String email = result.getUser().getEmail();"
                  },
                  {
                    "sample" : "getUser(request)",
                    "lineNumber" : 16,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/identitymanagement.java",
                    "excerpt" : "        iamClient = AmazonIdentityManagementClientBuilder.defaultClient();\n    }\n\n    public void processData(String userName) {\n        GetUserRequest request = new GetUserRequest().withUserName(userName);\n        GetUserResult result = iamClient.getUser(request); /* <=== com.amazonaws.services.identitymanagement.AmazonIdentityManagement.getUser */ \n\n        // Process the user data, for example, to retrieve personal information\n        String userId = result.getUser().getUserId();\n        String email = result.getUser().getEmail();\n        String arn = result.getUser().getArn();"
                  }
                ]
              },
              {
                "pathId" : "1487-1479",
                "path" : [
                  {
                    "sample" : "userName",
                    "lineNumber" : 15,
                    "columnNumber" : 68,
                    "fileName" : "/app/code/identitymanagement.java",
                    "excerpt" : "    public PersonalDataProcessor() {\n        iamClient = AmazonIdentityManagementClientBuilder.defaultClient();\n    }\n\n    public void processData(String userName) {\n        GetUserRequest request = new GetUserRequest().withUserName(userName); /* <=== java.lang.String */ \n        GetUserResult result = iamClient.getUser(request);\n\n        // Process the user data, for example, to retrieve personal information\n        String userId = result.getUser().getUserId();\n        String email = result.getUser().getEmail();"
                  },
                  {
                    "sample" : "withUserName(userName)",
                    "lineNumber" : 15,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/identitymanagement.java",
                    "excerpt" : "    public PersonalDataProcessor() {\n        iamClient = AmazonIdentityManagementClientBuilder.defaultClient();\n    }\n\n    public void processData(String userName) {\n        GetUserRequest request = new GetUserRequest().withUserName(userName); /* <=== com.amazonaws.services.identitymanagement.model.GetUserRequest.withUserName */ \n        GetUserResult result = iamClient.getUser(request);\n\n        // Process the user data, for example, to retrieve personal information\n        String userId = result.getUser().getUserId();\n        String email = result.getUser().getEmail();"
                  }
                ]
              },
              {
                "pathId" : "1487-1479-1478-1491-1490-1506",
                "path" : [
                  {
                    "sample" : "userName",
                    "lineNumber" : 15,
                    "columnNumber" : 68,
                    "fileName" : "/app/code/identitymanagement.java",
                    "excerpt" : "    public PersonalDataProcessor() {\n        iamClient = AmazonIdentityManagementClientBuilder.defaultClient();\n    }\n\n    public void processData(String userName) {\n        GetUserRequest request = new GetUserRequest().withUserName(userName); /* <=== java.lang.String */ \n        GetUserResult result = iamClient.getUser(request);\n\n        // Process the user data, for example, to retrieve personal information\n        String userId = result.getUser().getUserId();\n        String email = result.getUser().getEmail();"
                  },
                  {
                    "sample" : "withUserName(userName)",
                    "lineNumber" : 15,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/identitymanagement.java",
                    "excerpt" : "    public PersonalDataProcessor() {\n        iamClient = AmazonIdentityManagementClientBuilder.defaultClient();\n    }\n\n    public void processData(String userName) {\n        GetUserRequest request = new GetUserRequest().withUserName(userName); /* <=== com.amazonaws.services.identitymanagement.model.GetUserRequest.withUserName */ \n        GetUserResult result = iamClient.getUser(request);\n\n        // Process the user data, for example, to retrieve personal information\n        String userId = result.getUser().getUserId();\n        String email = result.getUser().getEmail();"
                  },
                  {
                    "sample" : "request",
                    "lineNumber" : 15,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/identitymanagement.java",
                    "excerpt" : "    public PersonalDataProcessor() {\n        iamClient = AmazonIdentityManagementClientBuilder.defaultClient();\n    }\n\n    public void processData(String userName) {\n        GetUserRequest request = new GetUserRequest().withUserName(userName); /* <=== com.amazonaws.services.identitymanagement.model.GetUserRequest */ \n        GetUserResult result = iamClient.getUser(request);\n\n        // Process the user data, for example, to retrieve personal information\n        String userId = result.getUser().getUserId();\n        String email = result.getUser().getEmail();"
                  },
                  {
                    "sample" : "getUser(request)",
                    "lineNumber" : 16,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/identitymanagement.java",
                    "excerpt" : "        iamClient = AmazonIdentityManagementClientBuilder.defaultClient();\n    }\n\n    public void processData(String userName) {\n        GetUserRequest request = new GetUserRequest().withUserName(userName);\n        GetUserResult result = iamClient.getUser(request); /* <=== com.amazonaws.services.identitymanagement.AmazonIdentityManagement.getUser */ \n\n        // Process the user data, for example, to retrieve personal information\n        String userId = result.getUser().getUserId();\n        String email = result.getUser().getEmail();\n        String arn = result.getUser().getArn();"
                  },
                  {
                    "sample" : "result",
                    "lineNumber" : 16,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/identitymanagement.java",
                    "excerpt" : "        iamClient = AmazonIdentityManagementClientBuilder.defaultClient();\n    }\n\n    public void processData(String userName) {\n        GetUserRequest request = new GetUserRequest().withUserName(userName);\n        GetUserResult result = iamClient.getUser(request); /* <=== com.amazonaws.services.identitymanagement.model.GetUserResult */ \n\n        // Process the user data, for example, to retrieve personal information\n        String userId = result.getUser().getUserId();\n        String email = result.getUser().getEmail();\n        String arn = result.getUser().getArn();"
                  },
                  {
                    "sample" : "getUser()",
                    "lineNumber" : 20,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/identitymanagement.java",
                    "excerpt" : "        GetUserRequest request = new GetUserRequest().withUserName(userName);\n        GetUserResult result = iamClient.getUser(request);\n\n        // Process the user data, for example, to retrieve personal information\n        String userId = result.getUser().getUserId();\n        String email = result.getUser().getEmail(); /* <=== com.amazonaws.services.identitymanagement.model.GetUserResult.getUser */ \n        String arn = result.getUser().getArn();\n\n        // Perform any additional processing or storage of personal data as necessary\n        // ...\n    }"
                  }
                ]
              },
              {
                "pathId" : "9080-9096-9098-9097-9087-9086-9085-9102",
                "path" : [
                  {
                    "sample" : "java.lang.String username",
                    "lineNumber" : 30,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/identitystore.java",
                    "excerpt" : "    }\n}\n\nclass PersonalData {\n    private final String userPoolId;\n    private final String username; /* <=== 'username' is a member of 'PersonalData' class */ \n    private final List<AttributeType> userAttributes;\n\n    public PersonalData(String userPoolId, String username, List<AttributeType> userAttributes) {\n        this.userPoolId = userPoolId;\n        this.username = username;"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 16,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/gluedatabrew.java",
                    "excerpt" : "    public GlueDataBrewProcessor() {\n        this.glueDataBrewClient = AWSGlueDataBrewClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(List<PersonalData> personalDataList) {\n        for (PersonalData personalData : personalDataList) { /* <=== PersonalData */ \n            CreateProfileJobRequest createProfileJobRequest = new CreateProfileJobRequest()\n                    .withDatasetName(personalData.getDatasetName())\n                    .withRecipeReference(personalData.getRecipeReference());\n\n            CreateProfileJobResult createProfileJobResult = glueDataBrewClient.createProfileJob(createProfileJobRequest);"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 18,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/gluedatabrew.java",
                    "excerpt" : "    }\n\n    public void processPersonalData(List<PersonalData> personalDataList) {\n        for (PersonalData personalData : personalDataList) {\n            CreateProfileJobRequest createProfileJobRequest = new CreateProfileJobRequest()\n                    .withDatasetName(personalData.getDatasetName()) /* <=== PersonalData */ \n                    .withRecipeReference(personalData.getRecipeReference());\n\n            CreateProfileJobResult createProfileJobResult = glueDataBrewClient.createProfileJob(createProfileJobRequest);\n\n            // You can add additional processing logic here"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 19,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/gluedatabrew.java",
                    "excerpt" : "\n    public void processPersonalData(List<PersonalData> personalDataList) {\n        for (PersonalData personalData : personalDataList) {\n            CreateProfileJobRequest createProfileJobRequest = new CreateProfileJobRequest()\n                    .withDatasetName(personalData.getDatasetName())\n                    .withRecipeReference(personalData.getRecipeReference()); /* <=== PersonalData */ \n\n            CreateProfileJobResult createProfileJobResult = glueDataBrewClient.createProfileJob(createProfileJobRequest);\n\n            // You can add additional processing logic here\n        }"
                  },
                  {
                    "sample" : "personalData.getRecipeReference()",
                    "lineNumber" : 19,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/gluedatabrew.java",
                    "excerpt" : "\n    public void processPersonalData(List<PersonalData> personalDataList) {\n        for (PersonalData personalData : personalDataList) {\n            CreateProfileJobRequest createProfileJobRequest = new CreateProfileJobRequest()\n                    .withDatasetName(personalData.getDatasetName())\n                    .withRecipeReference(personalData.getRecipeReference()); /* <=== PersonalData.getRecipeReference */ \n\n            CreateProfileJobResult createProfileJobResult = glueDataBrewClient.createProfileJob(createProfileJobRequest);\n\n            // You can add additional processing logic here\n        }"
                  },
                  {
                    "sample" : "withDatasetName(personalData.getDatasetName())",
                    "lineNumber" : 17,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/gluedatabrew.java",
                    "excerpt" : "        this.glueDataBrewClient = AWSGlueDataBrewClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(List<PersonalData> personalDataList) {\n        for (PersonalData personalData : personalDataList) {\n            CreateProfileJobRequest createProfileJobRequest = new CreateProfileJobRequest() /* <=== com.amazonaws.services.gluedatabrew.model.CreateProfileJobRequest.withDatasetName */ \n                    .withDatasetName(personalData.getDatasetName())\n                    .withRecipeReference(personalData.getRecipeReference());\n\n            CreateProfileJobResult createProfileJobResult = glueDataBrewClient.createProfileJob(createProfileJobRequest);\n"
                  },
                  {
                    "sample" : "withRecipeReference(personalData.getRecipeReference())",
                    "lineNumber" : 17,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/gluedatabrew.java",
                    "excerpt" : "        this.glueDataBrewClient = AWSGlueDataBrewClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(List<PersonalData> personalDataList) {\n        for (PersonalData personalData : personalDataList) {\n            CreateProfileJobRequest createProfileJobRequest = new CreateProfileJobRequest() /* <===  */ \n                    .withDatasetName(personalData.getDatasetName())\n                    .withRecipeReference(personalData.getRecipeReference());\n\n            CreateProfileJobResult createProfileJobResult = glueDataBrewClient.createProfileJob(createProfileJobRequest);\n"
                  },
                  {
                    "sample" : "createProfileJobRequest",
                    "lineNumber" : 17,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/gluedatabrew.java",
                    "excerpt" : "        this.glueDataBrewClient = AWSGlueDataBrewClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(List<PersonalData> personalDataList) {\n        for (PersonalData personalData : personalDataList) {\n            CreateProfileJobRequest createProfileJobRequest = new CreateProfileJobRequest() /* <=== com.amazonaws.services.gluedatabrew.model.CreateProfileJobRequest */ \n                    .withDatasetName(personalData.getDatasetName())\n                    .withRecipeReference(personalData.getRecipeReference());\n\n            CreateProfileJobResult createProfileJobResult = glueDataBrewClient.createProfileJob(createProfileJobRequest);\n"
                  },
                  {
                    "sample" : "createProfileJob(createProfileJobRequest)",
                    "lineNumber" : 21,
                    "columnNumber" : 61,
                    "fileName" : "/app/code/gluedatabrew.java",
                    "excerpt" : "        for (PersonalData personalData : personalDataList) {\n            CreateProfileJobRequest createProfileJobRequest = new CreateProfileJobRequest()\n                    .withDatasetName(personalData.getDatasetName())\n                    .withRecipeReference(personalData.getRecipeReference());\n\n            CreateProfileJobResult createProfileJobResult = glueDataBrewClient.createProfileJob(createProfileJobRequest); /* <=== com.amazonaws.services.gluedatabrew.AWSGlueDataBrew.createProfileJob */ \n\n            // You can add additional processing logic here\n        }\n    }\n}"
                  }
                ]
              },
              {
                "pathId" : "10445-10437-10436-10449",
                "path" : [
                  {
                    "sample" : "userName",
                    "lineNumber" : 14,
                    "columnNumber" : 68,
                    "fileName" : "/app/code/iam.java",
                    "excerpt" : "    public IAMProcessor() {\n        iamClient = AmazonIdentityManagementClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(String userName) {\n        GetUserRequest request = new GetUserRequest().withUserName(userName); /* <=== java.lang.String */ \n        GetUserResult result = iamClient.getUser(request);\n\n        // Perform processing on the user information obtained from the IAM service\n        // Ensure to handle any exceptions and follow best practices for secure processing of personal data\n"
                  },
                  {
                    "sample" : "withUserName(userName)",
                    "lineNumber" : 14,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/iam.java",
                    "excerpt" : "    public IAMProcessor() {\n        iamClient = AmazonIdentityManagementClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(String userName) {\n        GetUserRequest request = new GetUserRequest().withUserName(userName); /* <=== com.amazonaws.services.iam.model.GetUserRequest.withUserName */ \n        GetUserResult result = iamClient.getUser(request);\n\n        // Perform processing on the user information obtained from the IAM service\n        // Ensure to handle any exceptions and follow best practices for secure processing of personal data\n"
                  },
                  {
                    "sample" : "request",
                    "lineNumber" : 14,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/iam.java",
                    "excerpt" : "    public IAMProcessor() {\n        iamClient = AmazonIdentityManagementClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(String userName) {\n        GetUserRequest request = new GetUserRequest().withUserName(userName); /* <=== com.amazonaws.services.iam.model.GetUserRequest */ \n        GetUserResult result = iamClient.getUser(request);\n\n        // Perform processing on the user information obtained from the IAM service\n        // Ensure to handle any exceptions and follow best practices for secure processing of personal data\n"
                  },
                  {
                    "sample" : "getUser(request)",
                    "lineNumber" : 15,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/iam.java",
                    "excerpt" : "        iamClient = AmazonIdentityManagementClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(String userName) {\n        GetUserRequest request = new GetUserRequest().withUserName(userName);\n        GetUserResult result = iamClient.getUser(request); /* <=== com.amazonaws.services.iam.AmazonIdentityManagement.getUser */ \n\n        // Perform processing on the user information obtained from the IAM service\n        // Ensure to handle any exceptions and follow best practices for secure processing of personal data\n\n        // Example processing: print user information"
                  }
                ]
              },
              {
                "pathId" : "9080-9096-9098-9097-9087",
                "path" : [
                  {
                    "sample" : "java.lang.String username",
                    "lineNumber" : 30,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/identitystore.java",
                    "excerpt" : "    }\n}\n\nclass PersonalData {\n    private final String userPoolId;\n    private final String username; /* <=== 'username' is a member of 'PersonalData' class */ \n    private final List<AttributeType> userAttributes;\n\n    public PersonalData(String userPoolId, String username, List<AttributeType> userAttributes) {\n        this.userPoolId = userPoolId;\n        this.username = username;"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 16,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/gluedatabrew.java",
                    "excerpt" : "    public GlueDataBrewProcessor() {\n        this.glueDataBrewClient = AWSGlueDataBrewClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(List<PersonalData> personalDataList) {\n        for (PersonalData personalData : personalDataList) { /* <=== PersonalData */ \n            CreateProfileJobRequest createProfileJobRequest = new CreateProfileJobRequest()\n                    .withDatasetName(personalData.getDatasetName())\n                    .withRecipeReference(personalData.getRecipeReference());\n\n            CreateProfileJobResult createProfileJobResult = glueDataBrewClient.createProfileJob(createProfileJobRequest);"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 18,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/gluedatabrew.java",
                    "excerpt" : "    }\n\n    public void processPersonalData(List<PersonalData> personalDataList) {\n        for (PersonalData personalData : personalDataList) {\n            CreateProfileJobRequest createProfileJobRequest = new CreateProfileJobRequest()\n                    .withDatasetName(personalData.getDatasetName()) /* <=== PersonalData */ \n                    .withRecipeReference(personalData.getRecipeReference());\n\n            CreateProfileJobResult createProfileJobResult = glueDataBrewClient.createProfileJob(createProfileJobRequest);\n\n            // You can add additional processing logic here"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 19,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/gluedatabrew.java",
                    "excerpt" : "\n    public void processPersonalData(List<PersonalData> personalDataList) {\n        for (PersonalData personalData : personalDataList) {\n            CreateProfileJobRequest createProfileJobRequest = new CreateProfileJobRequest()\n                    .withDatasetName(personalData.getDatasetName())\n                    .withRecipeReference(personalData.getRecipeReference()); /* <=== PersonalData */ \n\n            CreateProfileJobResult createProfileJobResult = glueDataBrewClient.createProfileJob(createProfileJobRequest);\n\n            // You can add additional processing logic here\n        }"
                  },
                  {
                    "sample" : "personalData.getRecipeReference()",
                    "lineNumber" : 19,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/gluedatabrew.java",
                    "excerpt" : "\n    public void processPersonalData(List<PersonalData> personalDataList) {\n        for (PersonalData personalData : personalDataList) {\n            CreateProfileJobRequest createProfileJobRequest = new CreateProfileJobRequest()\n                    .withDatasetName(personalData.getDatasetName())\n                    .withRecipeReference(personalData.getRecipeReference()); /* <=== PersonalData.getRecipeReference */ \n\n            CreateProfileJobResult createProfileJobResult = glueDataBrewClient.createProfileJob(createProfileJobRequest);\n\n            // You can add additional processing logic here\n        }"
                  },
                  {
                    "sample" : "withDatasetName(personalData.getDatasetName())",
                    "lineNumber" : 17,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/gluedatabrew.java",
                    "excerpt" : "        this.glueDataBrewClient = AWSGlueDataBrewClientBuilder.defaultClient();\n    }\n\n    public void processPersonalData(List<PersonalData> personalDataList) {\n        for (PersonalData personalData : personalDataList) {\n            CreateProfileJobRequest createProfileJobRequest = new CreateProfileJobRequest() /* <=== com.amazonaws.services.gluedatabrew.model.CreateProfileJobRequest.withDatasetName */ \n                    .withDatasetName(personalData.getDatasetName())\n                    .withRecipeReference(personalData.getRecipeReference());\n\n            CreateProfileJobResult createProfileJobResult = glueDataBrewClient.createProfileJob(createProfileJobRequest);\n"
                  }
                ]
              },
              {
                "pathId" : "5266-5268-5267-5257",
                "path" : [
                  {
                    "sample" : "java.lang.String username",
                    "lineNumber" : 30,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/identitystore.java",
                    "excerpt" : "    }\n}\n\nclass PersonalData {\n    private final String userPoolId;\n    private final String username; /* <=== 'username' is a member of 'PersonalData' class */ \n    private final List<AttributeType> userAttributes;\n\n    public PersonalData(String userPoolId, String username, List<AttributeType> userAttributes) {\n        this.userPoolId = userPoolId;\n        this.username = username;"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 16,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/identitystore.java",
                    "excerpt" : "    }\n\n    public void processData(PersonalData personalData) {\n        try {\n            CreateUserRequest createUserRequest = new CreateUserRequest()\n                .withUserPoolId(personalData.getUserPoolId()) /* <=== PersonalData */ \n                .withUsername(personalData.getUsername())\n                .withUserAttributes(personalData.getUserAttributes());\n\n            CreateUserResult createUserResult = identityStoreClient.createUser(createUserRequest);\n            System.out.println(\"Successfully sent personal data to Amazon Identity Store\");"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 17,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/identitystore.java",
                    "excerpt" : "\n    public void processData(PersonalData personalData) {\n        try {\n            CreateUserRequest createUserRequest = new CreateUserRequest()\n                .withUserPoolId(personalData.getUserPoolId())\n                .withUsername(personalData.getUsername()) /* <=== PersonalData */ \n                .withUserAttributes(personalData.getUserAttributes());\n\n            CreateUserResult createUserResult = identityStoreClient.createUser(createUserRequest);\n            System.out.println(\"Successfully sent personal data to Amazon Identity Store\");\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "personalData.getUsername()",
                    "lineNumber" : 17,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/identitystore.java",
                    "excerpt" : "\n    public void processData(PersonalData personalData) {\n        try {\n            CreateUserRequest createUserRequest = new CreateUserRequest()\n                .withUserPoolId(personalData.getUserPoolId())\n                .withUsername(personalData.getUsername()) /* <=== PersonalData.getUsername */ \n                .withUserAttributes(personalData.getUserAttributes());\n\n            CreateUserResult createUserResult = identityStoreClient.createUser(createUserRequest);\n            System.out.println(\"Successfully sent personal data to Amazon Identity Store\");\n        } catch (Exception e) {"
                  },
                  {
                    "sample" : "withUserPoolId(personalData.getUserPoolId())",
                    "lineNumber" : 15,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/identitystore.java",
                    "excerpt" : "        identityStoreClient = AWSIdentityStoreClientBuilder.defaultClient();\n    }\n\n    public void processData(PersonalData personalData) {\n        try {\n            CreateUserRequest createUserRequest = new CreateUserRequest() /* <=== com.amazonaws.services.identitystore.model.CreateUserRequest.withUserPoolId */ \n                .withUserPoolId(personalData.getUserPoolId())\n                .withUsername(personalData.getUsername())\n                .withUserAttributes(personalData.getUserAttributes());\n\n            CreateUserResult createUserResult = identityStoreClient.createUser(createUserRequest);"
                  }
                ]
              },
              {
                "pathId" : "5270-5269-5256-5255-5254-5274",
                "path" : [
                  {
                    "sample" : "java.lang.String username",
                    "lineNumber" : 30,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/identitystore.java",
                    "excerpt" : "    }\n}\n\nclass PersonalData {\n    private final String userPoolId;\n    private final String username; /* <=== 'username' is a member of 'PersonalData' class */ \n    private final List<AttributeType> userAttributes;\n\n    public PersonalData(String userPoolId, String username, List<AttributeType> userAttributes) {\n        this.userPoolId = userPoolId;\n        this.username = username;"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 18,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/identitystore.java",
                    "excerpt" : "    public void processData(PersonalData personalData) {\n        try {\n            CreateUserRequest createUserRequest = new CreateUserRequest()\n                .withUserPoolId(personalData.getUserPoolId())\n                .withUsername(personalData.getUsername())\n                .withUserAttributes(personalData.getUserAttributes()); /* <=== PersonalData */ \n\n            CreateUserResult createUserResult = identityStoreClient.createUser(createUserRequest);\n            System.out.println(\"Successfully sent personal data to Amazon Identity Store\");\n        } catch (Exception e) {\n            System.err.println(\"Error processing personal data: \" + e.getMessage());"
                  },
                  {
                    "sample" : "personalData.getUserAttributes()",
                    "lineNumber" : 18,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/identitystore.java",
                    "excerpt" : "    public void processData(PersonalData personalData) {\n        try {\n            CreateUserRequest createUserRequest = new CreateUserRequest()\n                .withUserPoolId(personalData.getUserPoolId())\n                .withUsername(personalData.getUsername())\n                .withUserAttributes(personalData.getUserAttributes()); /* <=== PersonalData.getUserAttributes */ \n\n            CreateUserResult createUserResult = identityStoreClient.createUser(createUserRequest);\n            System.out.println(\"Successfully sent personal data to Amazon Identity Store\");\n        } catch (Exception e) {\n            System.err.println(\"Error processing personal data: \" + e.getMessage());"
                  },
                  {
                    "sample" : "withUsername(personalData.getUsername())",
                    "lineNumber" : 15,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/identitystore.java",
                    "excerpt" : "        identityStoreClient = AWSIdentityStoreClientBuilder.defaultClient();\n    }\n\n    public void processData(PersonalData personalData) {\n        try {\n            CreateUserRequest createUserRequest = new CreateUserRequest() /* <===  */ \n                .withUserPoolId(personalData.getUserPoolId())\n                .withUsername(personalData.getUsername())\n                .withUserAttributes(personalData.getUserAttributes());\n\n            CreateUserResult createUserResult = identityStoreClient.createUser(createUserRequest);"
                  },
                  {
                    "sample" : "withUserAttributes(personalData.getUserAttributes())",
                    "lineNumber" : 15,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/identitystore.java",
                    "excerpt" : "        identityStoreClient = AWSIdentityStoreClientBuilder.defaultClient();\n    }\n\n    public void processData(PersonalData personalData) {\n        try {\n            CreateUserRequest createUserRequest = new CreateUserRequest() /* <===  */ \n                .withUserPoolId(personalData.getUserPoolId())\n                .withUsername(personalData.getUsername())\n                .withUserAttributes(personalData.getUserAttributes());\n\n            CreateUserResult createUserResult = identityStoreClient.createUser(createUserRequest);"
                  },
                  {
                    "sample" : "createUserRequest",
                    "lineNumber" : 15,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/identitystore.java",
                    "excerpt" : "        identityStoreClient = AWSIdentityStoreClientBuilder.defaultClient();\n    }\n\n    public void processData(PersonalData personalData) {\n        try {\n            CreateUserRequest createUserRequest = new CreateUserRequest() /* <=== com.amazonaws.services.identitystore.model.CreateUserRequest */ \n                .withUserPoolId(personalData.getUserPoolId())\n                .withUsername(personalData.getUsername())\n                .withUserAttributes(personalData.getUserAttributes());\n\n            CreateUserResult createUserResult = identityStoreClient.createUser(createUserRequest);"
                  },
                  {
                    "sample" : "createUser(createUserRequest)",
                    "lineNumber" : 20,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/identitystore.java",
                    "excerpt" : "            CreateUserRequest createUserRequest = new CreateUserRequest()\n                .withUserPoolId(personalData.getUserPoolId())\n                .withUsername(personalData.getUsername())\n                .withUserAttributes(personalData.getUserAttributes());\n\n            CreateUserResult createUserResult = identityStoreClient.createUser(createUserRequest); /* <=== com.amazonaws.services.identitystore.AWSIdentityStore.createUser */ \n            System.out.println(\"Successfully sent personal data to Amazon Identity Store\");\n        } catch (Exception e) {\n            System.err.println(\"Error processing personal data: \" + e.getMessage());\n        }\n    }"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.PersonalIdentification.DateofBirth",
        "sinks" : [
          {
            "sinkType" : "third_parties",
            "id" : "ThirdParties.SDK.Amazon.Aws",
            "name" : "Amazon Aws",
            "category" : "",
            "domains" : [
              "aws.amazon.com"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "databaseDetails" : {
              "dbName" : "",
              "dbVendor" : "",
              "dbLocation" : "",
              "dbOperation" : ""
            },
            "paths" : [
              {
                "pathId" : "11563-11554",
                "path" : [
                  {
                    "sample" : "dob",
                    "lineNumber" : 32,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "\n    List<Tag> tags = new ArrayList<>();\n    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob)); /* <=== java.lang.String */ \n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags);\n    workspacesClient.tagWorkspace(tagWorkspaceRequest);\n\n    System.out.println(\"Personal data saved successfully to workspace with ID: \" + workspaceId);"
                  },
                  {
                    "sample" : "withKey(\"dob\")",
                    "lineNumber" : 32,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "\n    List<Tag> tags = new ArrayList<>();\n    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob)); /* <=== com.amazonaws.services.workspaces.model.Tag.withKey */ \n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags);\n    workspacesClient.tagWorkspace(tagWorkspaceRequest);\n\n    System.out.println(\"Personal data saved successfully to workspace with ID: \" + workspaceId);"
                  }
                ]
              },
              {
                "pathId" : "3270-3271-3269-3285-3276",
                "path" : [
                  {
                    "sample" : "\"dob\"",
                    "lineNumber" : 18,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "    public static void AWSIoTRoboRunnerFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        Map<String, Object> personalData = new HashMap<>();\n        personalData.put(\"firstName\", firstName);\n        personalData.put(\"lastName\", lastName);\n        personalData.put(\"phoneNumber\", phoneNumber);\n        personalData.put(\"dob\", dob); /* <===  */ \n\n        PutThingShadowRequest request = new PutThingShadowRequest()\n                .withThingName(\"PersonalData\")\n                .withPayload(personalData);\n"
                  },
                  {
                    "sample" : "dob",
                    "lineNumber" : 18,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "    public static void AWSIoTRoboRunnerFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        Map<String, Object> personalData = new HashMap<>();\n        personalData.put(\"firstName\", firstName);\n        personalData.put(\"lastName\", lastName);\n        personalData.put(\"phoneNumber\", phoneNumber);\n        personalData.put(\"dob\", dob); /* <=== java.lang.String */ \n\n        PutThingShadowRequest request = new PutThingShadowRequest()\n                .withThingName(\"PersonalData\")\n                .withPayload(personalData);\n"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 18,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "    public static void AWSIoTRoboRunnerFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        Map<String, Object> personalData = new HashMap<>();\n        personalData.put(\"firstName\", firstName);\n        personalData.put(\"lastName\", lastName);\n        personalData.put(\"phoneNumber\", phoneNumber);\n        personalData.put(\"dob\", dob); /* <=== java.util.Map */ \n\n        PutThingShadowRequest request = new PutThingShadowRequest()\n                .withThingName(\"PersonalData\")\n                .withPayload(personalData);\n"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 22,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "        personalData.put(\"phoneNumber\", phoneNumber);\n        personalData.put(\"dob\", dob);\n\n        PutThingShadowRequest request = new PutThingShadowRequest()\n                .withThingName(\"PersonalData\")\n                .withPayload(personalData); /* <=== java.util.Map */ \n\n        PutThingShadowResult result = iotRoboRunnerClient.putThingShadow(request);\n        System.out.println(\"Data sent to AWS IoTRoboRunner successfully\");\n    }\n}"
                  },
                  {
                    "sample" : "withThingName(\"PersonalData\")",
                    "lineNumber" : 20,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "        personalData.put(\"firstName\", firstName);\n        personalData.put(\"lastName\", lastName);\n        personalData.put(\"phoneNumber\", phoneNumber);\n        personalData.put(\"dob\", dob);\n\n        PutThingShadowRequest request = new PutThingShadowRequest() /* <=== com.amazonaws.services.iotroborunner.model.PutThingShadowRequest.withThingName */ \n                .withThingName(\"PersonalData\")\n                .withPayload(personalData);\n\n        PutThingShadowResult result = iotRoboRunnerClient.putThingShadow(request);\n        System.out.println(\"Data sent to AWS IoTRoboRunner successfully\");"
                  }
                ]
              },
              {
                "pathId" : "13903-13894-13893-13892-13891-13905",
                "path" : [
                  {
                    "sample" : "dob",
                    "lineNumber" : 21,
                    "columnNumber" : 75,
                    "fileName" : "/app/code/simpleSystemManagement.java",
                    "excerpt" : "    parameterName = \"/personalData/phoneNumber\";\n    request = new PutParameterRequest().withName(parameterName).withValue(phoneNumber).withType(\"String\");\n    ssmClient.putParameter(request);\n    \n    parameterName = \"/personalData/dob\";\n    request = new PutParameterRequest().withName(parameterName).withValue(dob).withType(\"String\"); /* <=== java.lang.String */ \n    ssmClient.putParameter(request);\n    \n    System.out.println(\"Personal data saved successfully to SSM parameter store\");\n  }\n}"
                  },
                  {
                    "sample" : "withName(parameterName)",
                    "lineNumber" : 21,
                    "columnNumber" : 15,
                    "fileName" : "/app/code/simpleSystemManagement.java",
                    "excerpt" : "    parameterName = \"/personalData/phoneNumber\";\n    request = new PutParameterRequest().withName(parameterName).withValue(phoneNumber).withType(\"String\");\n    ssmClient.putParameter(request);\n    \n    parameterName = \"/personalData/dob\";\n    request = new PutParameterRequest().withName(parameterName).withValue(dob).withType(\"String\"); /* <=== com.amazonaws.services.simplesystemsmanagement.model.PutParameterRequest.withName */ \n    ssmClient.putParameter(request);\n    \n    System.out.println(\"Personal data saved successfully to SSM parameter store\");\n  }\n}"
                  },
                  {
                    "sample" : "withValue(dob)",
                    "lineNumber" : 21,
                    "columnNumber" : 15,
                    "fileName" : "/app/code/simpleSystemManagement.java",
                    "excerpt" : "    parameterName = \"/personalData/phoneNumber\";\n    request = new PutParameterRequest().withName(parameterName).withValue(phoneNumber).withType(\"String\");\n    ssmClient.putParameter(request);\n    \n    parameterName = \"/personalData/dob\";\n    request = new PutParameterRequest().withName(parameterName).withValue(dob).withType(\"String\"); /* <===  */ \n    ssmClient.putParameter(request);\n    \n    System.out.println(\"Personal data saved successfully to SSM parameter store\");\n  }\n}"
                  },
                  {
                    "sample" : "withType(\"String\")",
                    "lineNumber" : 21,
                    "columnNumber" : 15,
                    "fileName" : "/app/code/simpleSystemManagement.java",
                    "excerpt" : "    parameterName = \"/personalData/phoneNumber\";\n    request = new PutParameterRequest().withName(parameterName).withValue(phoneNumber).withType(\"String\");\n    ssmClient.putParameter(request);\n    \n    parameterName = \"/personalData/dob\";\n    request = new PutParameterRequest().withName(parameterName).withValue(dob).withType(\"String\"); /* <===  */ \n    ssmClient.putParameter(request);\n    \n    System.out.println(\"Personal data saved successfully to SSM parameter store\");\n  }\n}"
                  },
                  {
                    "sample" : "request",
                    "lineNumber" : 21,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/simpleSystemManagement.java",
                    "excerpt" : "    parameterName = \"/personalData/phoneNumber\";\n    request = new PutParameterRequest().withName(parameterName).withValue(phoneNumber).withType(\"String\");\n    ssmClient.putParameter(request);\n    \n    parameterName = \"/personalData/dob\";\n    request = new PutParameterRequest().withName(parameterName).withValue(dob).withType(\"String\"); /* <=== com.amazonaws.services.simplesystemsmanagement.model.PutParameterRequest */ \n    ssmClient.putParameter(request);\n    \n    System.out.println(\"Personal data saved successfully to SSM parameter store\");\n  }\n}"
                  },
                  {
                    "sample" : "putParameter(request)",
                    "lineNumber" : 22,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/simpleSystemManagement.java",
                    "excerpt" : "    request = new PutParameterRequest().withName(parameterName).withValue(phoneNumber).withType(\"String\");\n    ssmClient.putParameter(request);\n    \n    parameterName = \"/personalData/dob\";\n    request = new PutParameterRequest().withName(parameterName).withValue(dob).withType(\"String\");\n    ssmClient.putParameter(request); /* <=== com.amazonaws.services.simplesystemsmanagement.AWSSimpleSystemsManagement.putParameter */ \n    \n    System.out.println(\"Personal data saved successfully to SSM parameter store\");\n  }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "3270-3271-3269-3285-3276-3275-3274-3289",
                "path" : [
                  {
                    "sample" : "\"dob\"",
                    "lineNumber" : 18,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "    public static void AWSIoTRoboRunnerFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        Map<String, Object> personalData = new HashMap<>();\n        personalData.put(\"firstName\", firstName);\n        personalData.put(\"lastName\", lastName);\n        personalData.put(\"phoneNumber\", phoneNumber);\n        personalData.put(\"dob\", dob); /* <===  */ \n\n        PutThingShadowRequest request = new PutThingShadowRequest()\n                .withThingName(\"PersonalData\")\n                .withPayload(personalData);\n"
                  },
                  {
                    "sample" : "dob",
                    "lineNumber" : 18,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "    public static void AWSIoTRoboRunnerFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        Map<String, Object> personalData = new HashMap<>();\n        personalData.put(\"firstName\", firstName);\n        personalData.put(\"lastName\", lastName);\n        personalData.put(\"phoneNumber\", phoneNumber);\n        personalData.put(\"dob\", dob); /* <=== java.lang.String */ \n\n        PutThingShadowRequest request = new PutThingShadowRequest()\n                .withThingName(\"PersonalData\")\n                .withPayload(personalData);\n"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 18,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "    public static void AWSIoTRoboRunnerFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        Map<String, Object> personalData = new HashMap<>();\n        personalData.put(\"firstName\", firstName);\n        personalData.put(\"lastName\", lastName);\n        personalData.put(\"phoneNumber\", phoneNumber);\n        personalData.put(\"dob\", dob); /* <=== java.util.Map */ \n\n        PutThingShadowRequest request = new PutThingShadowRequest()\n                .withThingName(\"PersonalData\")\n                .withPayload(personalData);\n"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 22,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "        personalData.put(\"phoneNumber\", phoneNumber);\n        personalData.put(\"dob\", dob);\n\n        PutThingShadowRequest request = new PutThingShadowRequest()\n                .withThingName(\"PersonalData\")\n                .withPayload(personalData); /* <=== java.util.Map */ \n\n        PutThingShadowResult result = iotRoboRunnerClient.putThingShadow(request);\n        System.out.println(\"Data sent to AWS IoTRoboRunner successfully\");\n    }\n}"
                  },
                  {
                    "sample" : "withThingName(\"PersonalData\")",
                    "lineNumber" : 20,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "        personalData.put(\"firstName\", firstName);\n        personalData.put(\"lastName\", lastName);\n        personalData.put(\"phoneNumber\", phoneNumber);\n        personalData.put(\"dob\", dob);\n\n        PutThingShadowRequest request = new PutThingShadowRequest() /* <=== com.amazonaws.services.iotroborunner.model.PutThingShadowRequest.withThingName */ \n                .withThingName(\"PersonalData\")\n                .withPayload(personalData);\n\n        PutThingShadowResult result = iotRoboRunnerClient.putThingShadow(request);\n        System.out.println(\"Data sent to AWS IoTRoboRunner successfully\");"
                  },
                  {
                    "sample" : "withPayload(personalData)",
                    "lineNumber" : 20,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "        personalData.put(\"firstName\", firstName);\n        personalData.put(\"lastName\", lastName);\n        personalData.put(\"phoneNumber\", phoneNumber);\n        personalData.put(\"dob\", dob);\n\n        PutThingShadowRequest request = new PutThingShadowRequest() /* <===  */ \n                .withThingName(\"PersonalData\")\n                .withPayload(personalData);\n\n        PutThingShadowResult result = iotRoboRunnerClient.putThingShadow(request);\n        System.out.println(\"Data sent to AWS IoTRoboRunner successfully\");"
                  },
                  {
                    "sample" : "request",
                    "lineNumber" : 20,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "        personalData.put(\"firstName\", firstName);\n        personalData.put(\"lastName\", lastName);\n        personalData.put(\"phoneNumber\", phoneNumber);\n        personalData.put(\"dob\", dob);\n\n        PutThingShadowRequest request = new PutThingShadowRequest() /* <=== com.amazonaws.services.iotroborunner.model.PutThingShadowRequest */ \n                .withThingName(\"PersonalData\")\n                .withPayload(personalData);\n\n        PutThingShadowResult result = iotRoboRunnerClient.putThingShadow(request);\n        System.out.println(\"Data sent to AWS IoTRoboRunner successfully\");"
                  },
                  {
                    "sample" : "putThingShadow(request)",
                    "lineNumber" : 24,
                    "columnNumber" : 39,
                    "fileName" : "/app/code/iotRoboRunner.java",
                    "excerpt" : "\n        PutThingShadowRequest request = new PutThingShadowRequest()\n                .withThingName(\"PersonalData\")\n                .withPayload(personalData);\n\n        PutThingShadowResult result = iotRoboRunnerClient.putThingShadow(request); /* <=== com.amazonaws.services.iotroborunner.AWSIoTRoboRunner.putThingShadow */ \n        System.out.println(\"Data sent to AWS IoTRoboRunner successfully\");\n    }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "14759-14750",
                "path" : [
                  {
                    "sample" : "dob",
                    "lineNumber" : 33,
                    "columnNumber" : 73,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        // Prepare the asset\n        List<DataSetEntry> entries = new ArrayList<>();\n        entries.add(new DataSetEntry().withEntryName(\"firstName\").withContent(firstName));\n        entries.add(new DataSetEntry().withEntryName(\"lastName\").withContent(lastName));\n        entries.add(new DataSetEntry().withEntryName(\"phoneNumber\").withContent(phoneNumber));\n        entries.add(new DataSetEntry().withEntryName(\"dob\").withContent(dob)); /* <=== java.lang.String */ \n\n        // Import the asset\n        ImportAssetFromSignedUrlRequest importAssetRequest = new ImportAssetFromSignedUrlRequest()\n                .withDataSetId(dataSetId)\n                .withRevisionId(revisionId)"
                  },
                  {
                    "sample" : "withEntryName(\"dob\")",
                    "lineNumber" : 33,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        // Prepare the asset\n        List<DataSetEntry> entries = new ArrayList<>();\n        entries.add(new DataSetEntry().withEntryName(\"firstName\").withContent(firstName));\n        entries.add(new DataSetEntry().withEntryName(\"lastName\").withContent(lastName));\n        entries.add(new DataSetEntry().withEntryName(\"phoneNumber\").withContent(phoneNumber));\n        entries.add(new DataSetEntry().withEntryName(\"dob\").withContent(dob)); /* <=== com.amazonaws.services.dataexchange.model.DataSetEntry.withEntryName */ \n\n        // Import the asset\n        ImportAssetFromSignedUrlRequest importAssetRequest = new ImportAssetFromSignedUrlRequest()\n                .withDataSetId(dataSetId)\n                .withRevisionId(revisionId)"
                  }
                ]
              },
              {
                "pathId" : "1742-1743-1725-1724-1723-1747",
                "path" : [
                  {
                    "sample" : "\"dob\"",
                    "lineNumber" : 18,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "        PutJobSuccessResultRequest request = new PutJobSuccessResultRequest()\n            .withJobId(firstName)\n            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob); /* <===  */ \n\n        PutJobSuccessResultResult result = client.putJobSuccessResult(request);\n        System.out.println(\"Successfully sent personal data to CodePipeline: \" + result);\n    }\n}"
                  },
                  {
                    "sample" : "dob",
                    "lineNumber" : 18,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "        PutJobSuccessResultRequest request = new PutJobSuccessResultRequest()\n            .withJobId(firstName)\n            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob); /* <=== java.lang.String */ \n\n        PutJobSuccessResultResult result = client.putJobSuccessResult(request);\n        System.out.println(\"Successfully sent personal data to CodePipeline: \" + result);\n    }\n}"
                  },
                  {
                    "sample" : "addOutputVariablesEntry(\"phoneNumber\", phoneNumber)",
                    "lineNumber" : 13,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "    public AWSCodePipelineUtil(AWSCodePipeline client) {\n        this.client = client;\n    }\n\n    public void AWSCodePipelineFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        PutJobSuccessResultRequest request = new PutJobSuccessResultRequest() /* <===  */ \n            .withJobId(firstName)\n            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);"
                  },
                  {
                    "sample" : "addOutputVariablesEntry(\"dob\", dob)",
                    "lineNumber" : 13,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "    public AWSCodePipelineUtil(AWSCodePipeline client) {\n        this.client = client;\n    }\n\n    public void AWSCodePipelineFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        PutJobSuccessResultRequest request = new PutJobSuccessResultRequest() /* <===  */ \n            .withJobId(firstName)\n            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);"
                  },
                  {
                    "sample" : "request",
                    "lineNumber" : 13,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "    public AWSCodePipelineUtil(AWSCodePipeline client) {\n        this.client = client;\n    }\n\n    public void AWSCodePipelineFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        PutJobSuccessResultRequest request = new PutJobSuccessResultRequest() /* <=== com.amazonaws.services.codepipeline.model.PutJobSuccessResultRequest */ \n            .withJobId(firstName)\n            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);"
                  },
                  {
                    "sample" : "putJobSuccessResult(request)",
                    "lineNumber" : 20,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/codePipeline.java",
                    "excerpt" : "            .withContinuationToken(\"optional_token\")\n            .addOutputVariablesEntry(\"lastName\", lastName)\n            .addOutputVariablesEntry(\"phoneNumber\", phoneNumber)\n            .addOutputVariablesEntry(\"dob\", dob);\n\n        PutJobSuccessResultResult result = client.putJobSuccessResult(request); /* <=== com.amazonaws.services.codepipeline.AWSCodePipeline.putJobSuccessResult */ \n        System.out.println(\"Successfully sent personal data to CodePipeline: \" + result);\n    }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "16209-16200",
                "path" : [
                  {
                    "sample" : "dob",
                    "lineNumber" : 27,
                    "columnNumber" : 80,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "        // Define the user's personal data\n        List<AttributeType> userAttributes = new ArrayList<>();\n        userAttributes.add(new AttributeType().withName(\"given_name\").withValue(firstName));\n        userAttributes.add(new AttributeType().withName(\"family_name\").withValue(lastName));\n        userAttributes.add(new AttributeType().withName(\"phone_number\").withValue(phoneNumber));\n        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob)); /* <=== java.lang.String */ \n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest()\n                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName)"
                  },
                  {
                    "sample" : "withName(\"birthdate\")",
                    "lineNumber" : 27,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "        // Define the user's personal data\n        List<AttributeType> userAttributes = new ArrayList<>();\n        userAttributes.add(new AttributeType().withName(\"given_name\").withValue(firstName));\n        userAttributes.add(new AttributeType().withName(\"family_name\").withValue(lastName));\n        userAttributes.add(new AttributeType().withName(\"phone_number\").withValue(phoneNumber));\n        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob)); /* <=== com.amazonaws.services.cognitoidp.model.AttributeType.withName */ \n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest()\n                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName)"
                  }
                ]
              },
              {
                "pathId" : "16209-16200-16199-16198-16229-16214-16213-16212-16233-16232-16240",
                "path" : [
                  {
                    "sample" : "dob",
                    "lineNumber" : 27,
                    "columnNumber" : 80,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "        // Define the user's personal data\n        List<AttributeType> userAttributes = new ArrayList<>();\n        userAttributes.add(new AttributeType().withName(\"given_name\").withValue(firstName));\n        userAttributes.add(new AttributeType().withName(\"family_name\").withValue(lastName));\n        userAttributes.add(new AttributeType().withName(\"phone_number\").withValue(phoneNumber));\n        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob)); /* <=== java.lang.String */ \n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest()\n                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName)"
                  },
                  {
                    "sample" : "withName(\"birthdate\")",
                    "lineNumber" : 27,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "        // Define the user's personal data\n        List<AttributeType> userAttributes = new ArrayList<>();\n        userAttributes.add(new AttributeType().withName(\"given_name\").withValue(firstName));\n        userAttributes.add(new AttributeType().withName(\"family_name\").withValue(lastName));\n        userAttributes.add(new AttributeType().withName(\"phone_number\").withValue(phoneNumber));\n        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob)); /* <=== com.amazonaws.services.cognitoidp.model.AttributeType.withName */ \n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest()\n                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName)"
                  },
                  {
                    "sample" : "withValue(dob)",
                    "lineNumber" : 27,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "        // Define the user's personal data\n        List<AttributeType> userAttributes = new ArrayList<>();\n        userAttributes.add(new AttributeType().withName(\"given_name\").withValue(firstName));\n        userAttributes.add(new AttributeType().withName(\"family_name\").withValue(lastName));\n        userAttributes.add(new AttributeType().withName(\"phone_number\").withValue(phoneNumber));\n        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob)); /* <===  */ \n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest()\n                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName)"
                  },
                  {
                    "sample" : "userAttributes",
                    "lineNumber" : 27,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "        // Define the user's personal data\n        List<AttributeType> userAttributes = new ArrayList<>();\n        userAttributes.add(new AttributeType().withName(\"given_name\").withValue(firstName));\n        userAttributes.add(new AttributeType().withName(\"family_name\").withValue(lastName));\n        userAttributes.add(new AttributeType().withName(\"phone_number\").withValue(phoneNumber));\n        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob)); /* <=== ANY */ \n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest()\n                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName)"
                  },
                  {
                    "sample" : "userAttributes",
                    "lineNumber" : 33,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest()\n                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName)\n                .withUserAttributes(userAttributes); /* <=== ANY */ \n\n        // Send the request to create the user\n        AdminCreateUserResult createUserResult = cognitoIdpClient.adminCreateUser(createUserRequest);\n\n        // Get the user's unique identifier"
                  },
                  {
                    "sample" : "withUsername(firstName + lastName)",
                    "lineNumber" : 30,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "        userAttributes.add(new AttributeType().withName(\"family_name\").withValue(lastName));\n        userAttributes.add(new AttributeType().withName(\"phone_number\").withValue(phoneNumber));\n        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob));\n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest() /* <===  */ \n                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName)\n                .withUserAttributes(userAttributes);\n\n        // Send the request to create the user"
                  },
                  {
                    "sample" : "withUserAttributes(userAttributes)",
                    "lineNumber" : 30,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "        userAttributes.add(new AttributeType().withName(\"family_name\").withValue(lastName));\n        userAttributes.add(new AttributeType().withName(\"phone_number\").withValue(phoneNumber));\n        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob));\n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest() /* <===  */ \n                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName)\n                .withUserAttributes(userAttributes);\n\n        // Send the request to create the user"
                  },
                  {
                    "sample" : "createUserRequest",
                    "lineNumber" : 30,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "        userAttributes.add(new AttributeType().withName(\"family_name\").withValue(lastName));\n        userAttributes.add(new AttributeType().withName(\"phone_number\").withValue(phoneNumber));\n        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob));\n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest() /* <=== com.amazonaws.services.cognitoidp.model.AdminCreateUserRequest */ \n                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName)\n                .withUserAttributes(userAttributes);\n\n        // Send the request to create the user"
                  },
                  {
                    "sample" : "adminCreateUser(createUserRequest)",
                    "lineNumber" : 36,
                    "columnNumber" : 50,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName)\n                .withUserAttributes(userAttributes);\n\n        // Send the request to create the user\n        AdminCreateUserResult createUserResult = cognitoIdpClient.adminCreateUser(createUserRequest); /* <=== com.amazonaws.services.cognitoidp.AWSCognitoIdentityProvider.adminCreateUser */ \n\n        // Get the user's unique identifier\n        String userId = createUserResult.getUser().getUsername();\n\n        System.out.println(\"Successfully created user with ID: \" + userId);"
                  },
                  {
                    "sample" : "createUserResult",
                    "lineNumber" : 36,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName)\n                .withUserAttributes(userAttributes);\n\n        // Send the request to create the user\n        AdminCreateUserResult createUserResult = cognitoIdpClient.adminCreateUser(createUserRequest); /* <=== com.amazonaws.services.cognitoidp.model.AdminCreateUserResult */ \n\n        // Get the user's unique identifier\n        String userId = createUserResult.getUser().getUsername();\n\n        System.out.println(\"Successfully created user with ID: \" + userId);"
                  },
                  {
                    "sample" : "getUser()",
                    "lineNumber" : 39,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "\n        // Send the request to create the user\n        AdminCreateUserResult createUserResult = cognitoIdpClient.adminCreateUser(createUserRequest);\n\n        // Get the user's unique identifier\n        String userId = createUserResult.getUser().getUsername(); /* <=== com.amazonaws.services.cognitoidp.model.AdminCreateUserResult.getUser */ \n\n        System.out.println(\"Successfully created user with ID: \" + userId);\n    }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "12773-12771",
                "path" : [
                  {
                    "sample" : "dob",
                    "lineNumber" : 21,
                    "columnNumber" : 71,
                    "fileName" : "/app/code/directory.java",
                    "excerpt" : "    try {\n      // Create an entry in AWS Directory\n      DirectoryAttribute firstNameAttribute = new DirectoryAttribute(\"firstName\", firstName);\n      DirectoryAttribute lastNameAttribute = new DirectoryAttribute(\"lastName\", lastName);\n      DirectoryAttribute phoneNumberAttribute = new DirectoryAttribute(\"phoneNumber\", phoneNumber);\n      DirectoryAttribute dobAttribute = new DirectoryAttribute(\"dob\", dob); /* <=== java.lang.String */ \n      List<DirectoryAttribute> attributes = Arrays.asList(firstNameAttribute, lastNameAttribute, phoneNumberAttribute, dobAttribute);\n      AddUserToGroupRequest request = new AddUserToGroupRequest().withDirectoryId(\"your-directory-id\").withUserName(\"user-name\").withGroupName(\"group-name\").withAttributes(attributes);\n      client.addUserToGroup(request);\n    } catch (Exception e) {\n      System.err.println(\"Error sending personal data to AWS Directory: \" + e.getMessage());"
                  },
                  {
                    "sample" : "new DirectoryAttribute(\"dob\", dob)",
                    "lineNumber" : 21,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/directory.java",
                    "excerpt" : "    try {\n      // Create an entry in AWS Directory\n      DirectoryAttribute firstNameAttribute = new DirectoryAttribute(\"firstName\", firstName);\n      DirectoryAttribute lastNameAttribute = new DirectoryAttribute(\"lastName\", lastName);\n      DirectoryAttribute phoneNumberAttribute = new DirectoryAttribute(\"phoneNumber\", phoneNumber);\n      DirectoryAttribute dobAttribute = new DirectoryAttribute(\"dob\", dob); /* <=== com.amazonaws.services.directory.model.DirectoryAttribute.<init> */ \n      List<DirectoryAttribute> attributes = Arrays.asList(firstNameAttribute, lastNameAttribute, phoneNumberAttribute, dobAttribute);\n      AddUserToGroupRequest request = new AddUserToGroupRequest().withDirectoryId(\"your-directory-id\").withUserName(\"user-name\").withGroupName(\"group-name\").withAttributes(attributes);\n      client.addUserToGroup(request);\n    } catch (Exception e) {\n      System.err.println(\"Error sending personal data to AWS Directory: \" + e.getMessage());"
                  }
                ]
              },
              {
                "pathId" : "3194-3195-3193-3200",
                "path" : [
                  {
                    "sample" : "\"dob\"",
                    "lineNumber" : 15,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/chimeSdkMessaging.java",
                    "excerpt" : "  public static void AWSChimeSDKmessagingFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = new HashMap<>();\n    personalData.put(\"firstName\", firstName);\n    personalData.put(\"lastName\", lastName);\n    personalData.put(\"phoneNumber\", phoneNumber);\n    personalData.put(\"dob\", dob); /* <===  */ \n\n    MessageRequest messageRequest = new MessageRequest();\n    messageRequest.setContent(personalData.toString());\n\n    chimeSDKMessagingClient.sendMessage(messageRequest);"
                  },
                  {
                    "sample" : "dob",
                    "lineNumber" : 15,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/chimeSdkMessaging.java",
                    "excerpt" : "  public static void AWSChimeSDKmessagingFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = new HashMap<>();\n    personalData.put(\"firstName\", firstName);\n    personalData.put(\"lastName\", lastName);\n    personalData.put(\"phoneNumber\", phoneNumber);\n    personalData.put(\"dob\", dob); /* <=== java.lang.String */ \n\n    MessageRequest messageRequest = new MessageRequest();\n    messageRequest.setContent(personalData.toString());\n\n    chimeSDKMessagingClient.sendMessage(messageRequest);"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 15,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/chimeSdkMessaging.java",
                    "excerpt" : "  public static void AWSChimeSDKmessagingFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = new HashMap<>();\n    personalData.put(\"firstName\", firstName);\n    personalData.put(\"lastName\", lastName);\n    personalData.put(\"phoneNumber\", phoneNumber);\n    personalData.put(\"dob\", dob); /* <=== java.util.Map */ \n\n    MessageRequest messageRequest = new MessageRequest();\n    messageRequest.setContent(personalData.toString());\n\n    chimeSDKMessagingClient.sendMessage(messageRequest);"
                  },
                  {
                    "sample" : "setContent(personalData.toString())",
                    "lineNumber" : 18,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/chimeSdkMessaging.java",
                    "excerpt" : "    personalData.put(\"lastName\", lastName);\n    personalData.put(\"phoneNumber\", phoneNumber);\n    personalData.put(\"dob\", dob);\n\n    MessageRequest messageRequest = new MessageRequest();\n    messageRequest.setContent(personalData.toString()); /* <=== com.amazonaws.services.chimesdkmessaging.model.MessageRequest.setContent */ \n\n    chimeSDKMessagingClient.sendMessage(messageRequest);\n  }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "14759-14750-14749-14748-14777-14764-14763-14762-14778",
                "path" : [
                  {
                    "sample" : "dob",
                    "lineNumber" : 33,
                    "columnNumber" : 73,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        // Prepare the asset\n        List<DataSetEntry> entries = new ArrayList<>();\n        entries.add(new DataSetEntry().withEntryName(\"firstName\").withContent(firstName));\n        entries.add(new DataSetEntry().withEntryName(\"lastName\").withContent(lastName));\n        entries.add(new DataSetEntry().withEntryName(\"phoneNumber\").withContent(phoneNumber));\n        entries.add(new DataSetEntry().withEntryName(\"dob\").withContent(dob)); /* <=== java.lang.String */ \n\n        // Import the asset\n        ImportAssetFromSignedUrlRequest importAssetRequest = new ImportAssetFromSignedUrlRequest()\n                .withDataSetId(dataSetId)\n                .withRevisionId(revisionId)"
                  },
                  {
                    "sample" : "withEntryName(\"dob\")",
                    "lineNumber" : 33,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        // Prepare the asset\n        List<DataSetEntry> entries = new ArrayList<>();\n        entries.add(new DataSetEntry().withEntryName(\"firstName\").withContent(firstName));\n        entries.add(new DataSetEntry().withEntryName(\"lastName\").withContent(lastName));\n        entries.add(new DataSetEntry().withEntryName(\"phoneNumber\").withContent(phoneNumber));\n        entries.add(new DataSetEntry().withEntryName(\"dob\").withContent(dob)); /* <=== com.amazonaws.services.dataexchange.model.DataSetEntry.withEntryName */ \n\n        // Import the asset\n        ImportAssetFromSignedUrlRequest importAssetRequest = new ImportAssetFromSignedUrlRequest()\n                .withDataSetId(dataSetId)\n                .withRevisionId(revisionId)"
                  },
                  {
                    "sample" : "withContent(dob)",
                    "lineNumber" : 33,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        // Prepare the asset\n        List<DataSetEntry> entries = new ArrayList<>();\n        entries.add(new DataSetEntry().withEntryName(\"firstName\").withContent(firstName));\n        entries.add(new DataSetEntry().withEntryName(\"lastName\").withContent(lastName));\n        entries.add(new DataSetEntry().withEntryName(\"phoneNumber\").withContent(phoneNumber));\n        entries.add(new DataSetEntry().withEntryName(\"dob\").withContent(dob)); /* <===  */ \n\n        // Import the asset\n        ImportAssetFromSignedUrlRequest importAssetRequest = new ImportAssetFromSignedUrlRequest()\n                .withDataSetId(dataSetId)\n                .withRevisionId(revisionId)"
                  },
                  {
                    "sample" : "entries",
                    "lineNumber" : 33,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        // Prepare the asset\n        List<DataSetEntry> entries = new ArrayList<>();\n        entries.add(new DataSetEntry().withEntryName(\"firstName\").withContent(firstName));\n        entries.add(new DataSetEntry().withEntryName(\"lastName\").withContent(lastName));\n        entries.add(new DataSetEntry().withEntryName(\"phoneNumber\").withContent(phoneNumber));\n        entries.add(new DataSetEntry().withEntryName(\"dob\").withContent(dob)); /* <=== ANY */ \n\n        // Import the asset\n        ImportAssetFromSignedUrlRequest importAssetRequest = new ImportAssetFromSignedUrlRequest()\n                .withDataSetId(dataSetId)\n                .withRevisionId(revisionId)"
                  },
                  {
                    "sample" : "entries",
                    "lineNumber" : 40,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        // Import the asset\n        ImportAssetFromSignedUrlRequest importAssetRequest = new ImportAssetFromSignedUrlRequest()\n                .withDataSetId(dataSetId)\n                .withRevisionId(revisionId)\n                .withAssetName(assetName)\n                .withEntries(entries); /* <=== ANY */ \n        dataExchangeClient.importAssetFromSignedUrl(importAssetRequest);\n    }\n}\n"
                  },
                  {
                    "sample" : "withAssetName(assetName)",
                    "lineNumber" : 36,
                    "columnNumber" : 62,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        entries.add(new DataSetEntry().withEntryName(\"lastName\").withContent(lastName));\n        entries.add(new DataSetEntry().withEntryName(\"phoneNumber\").withContent(phoneNumber));\n        entries.add(new DataSetEntry().withEntryName(\"dob\").withContent(dob));\n\n        // Import the asset\n        ImportAssetFromSignedUrlRequest importAssetRequest = new ImportAssetFromSignedUrlRequest() /* <===  */ \n                .withDataSetId(dataSetId)\n                .withRevisionId(revisionId)\n                .withAssetName(assetName)\n                .withEntries(entries);\n        dataExchangeClient.importAssetFromSignedUrl(importAssetRequest);"
                  },
                  {
                    "sample" : "withEntries(entries)",
                    "lineNumber" : 36,
                    "columnNumber" : 62,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        entries.add(new DataSetEntry().withEntryName(\"lastName\").withContent(lastName));\n        entries.add(new DataSetEntry().withEntryName(\"phoneNumber\").withContent(phoneNumber));\n        entries.add(new DataSetEntry().withEntryName(\"dob\").withContent(dob));\n\n        // Import the asset\n        ImportAssetFromSignedUrlRequest importAssetRequest = new ImportAssetFromSignedUrlRequest() /* <===  */ \n                .withDataSetId(dataSetId)\n                .withRevisionId(revisionId)\n                .withAssetName(assetName)\n                .withEntries(entries);\n        dataExchangeClient.importAssetFromSignedUrl(importAssetRequest);"
                  },
                  {
                    "sample" : "importAssetRequest",
                    "lineNumber" : 36,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        entries.add(new DataSetEntry().withEntryName(\"lastName\").withContent(lastName));\n        entries.add(new DataSetEntry().withEntryName(\"phoneNumber\").withContent(phoneNumber));\n        entries.add(new DataSetEntry().withEntryName(\"dob\").withContent(dob));\n\n        // Import the asset\n        ImportAssetFromSignedUrlRequest importAssetRequest = new ImportAssetFromSignedUrlRequest() /* <=== com.amazonaws.services.dataexchange.model.ImportAssetFromSignedUrlRequest */ \n                .withDataSetId(dataSetId)\n                .withRevisionId(revisionId)\n                .withAssetName(assetName)\n                .withEntries(entries);\n        dataExchangeClient.importAssetFromSignedUrl(importAssetRequest);"
                  },
                  {
                    "sample" : "importAssetFromSignedUrl(importAssetRequest)",
                    "lineNumber" : 41,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/dataExchange.java",
                    "excerpt" : "        ImportAssetFromSignedUrlRequest importAssetRequest = new ImportAssetFromSignedUrlRequest()\n                .withDataSetId(dataSetId)\n                .withRevisionId(revisionId)\n                .withAssetName(assetName)\n                .withEntries(entries);\n        dataExchangeClient.importAssetFromSignedUrl(importAssetRequest); /* <=== com.amazonaws.services.dataexchange.AmazonDataExchange.importAssetFromSignedUrl */ \n    }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "13903-13894",
                "path" : [
                  {
                    "sample" : "dob",
                    "lineNumber" : 21,
                    "columnNumber" : 75,
                    "fileName" : "/app/code/simpleSystemManagement.java",
                    "excerpt" : "    parameterName = \"/personalData/phoneNumber\";\n    request = new PutParameterRequest().withName(parameterName).withValue(phoneNumber).withType(\"String\");\n    ssmClient.putParameter(request);\n    \n    parameterName = \"/personalData/dob\";\n    request = new PutParameterRequest().withName(parameterName).withValue(dob).withType(\"String\"); /* <=== java.lang.String */ \n    ssmClient.putParameter(request);\n    \n    System.out.println(\"Personal data saved successfully to SSM parameter store\");\n  }\n}"
                  },
                  {
                    "sample" : "withName(parameterName)",
                    "lineNumber" : 21,
                    "columnNumber" : 15,
                    "fileName" : "/app/code/simpleSystemManagement.java",
                    "excerpt" : "    parameterName = \"/personalData/phoneNumber\";\n    request = new PutParameterRequest().withName(parameterName).withValue(phoneNumber).withType(\"String\");\n    ssmClient.putParameter(request);\n    \n    parameterName = \"/personalData/dob\";\n    request = new PutParameterRequest().withName(parameterName).withValue(dob).withType(\"String\"); /* <=== com.amazonaws.services.simplesystemsmanagement.model.PutParameterRequest.withName */ \n    ssmClient.putParameter(request);\n    \n    System.out.println(\"Personal data saved successfully to SSM parameter store\");\n  }\n}"
                  }
                ]
              },
              {
                "pathId" : "13325-13323",
                "path" : [
                  {
                    "sample" : "dob",
                    "lineNumber" : 19,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/marketplacemetering.java",
                    "excerpt" : "    // Build the MeterUsageRequest with personal data such as first name, last name, phone number, DOB.\n    MeterUsageRequest request = new MeterUsageRequest();\n    request.setProductCode(firstName);\n    request.setTimestamp(lastName);\n    request.setUsageDimension(phoneNumber);\n    request.setUsageQuantity(dob); /* <=== java.lang.String */ \n\n    // Call the meterUsage method of the AmazonMarketplaceMeteringClient to send the data.\n    client.meterUsage(request);\n  }\n}"
                  },
                  {
                    "sample" : "setUsageQuantity(dob)",
                    "lineNumber" : 19,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/marketplacemetering.java",
                    "excerpt" : "    // Build the MeterUsageRequest with personal data such as first name, last name, phone number, DOB.\n    MeterUsageRequest request = new MeterUsageRequest();\n    request.setProductCode(firstName);\n    request.setTimestamp(lastName);\n    request.setUsageDimension(phoneNumber);\n    request.setUsageQuantity(dob); /* <=== com.amazonaws.services.marketplacemetering.model.MeterUsageRequest.setUsageQuantity */ \n\n    // Call the meterUsage method of the AmazonMarketplaceMeteringClient to send the data.\n    client.meterUsage(request);\n  }\n}"
                  }
                ]
              },
              {
                "pathId" : "7218-7209-7208-7236-7235-7233-7224",
                "path" : [
                  {
                    "sample" : "dob",
                    "lineNumber" : 17,
                    "columnNumber" : 128,
                    "fileName" : "/app/code/emrServerless.java",
                    "excerpt" : "public AWSEMRServerlessUtil() {\n    client = AmazonEMRServerlessClientBuilder.standard().build();\n}\n\npublic void AWSEMRServerlessFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob); /* <=== java.lang.String */ \n\n    PutRecordRequest putRecordRequest = new PutRecordRequest()\n            .withStreamName(\"PersonalDataStream\")\n            .withData(ByteBuffer.wrap(personalData.toString().getBytes()))\n            .withPartitionKey(\"partitionKey\");"
                  },
                  {
                    "sample" : "Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob)",
                    "lineNumber" : 17,
                    "columnNumber" : 40,
                    "fileName" : "/app/code/emrServerless.java",
                    "excerpt" : "public AWSEMRServerlessUtil() {\n    client = AmazonEMRServerlessClientBuilder.standard().build();\n}\n\npublic void AWSEMRServerlessFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob); /* <=== java.util.Map.of */ \n\n    PutRecordRequest putRecordRequest = new PutRecordRequest()\n            .withStreamName(\"PersonalDataStream\")\n            .withData(ByteBuffer.wrap(personalData.toString().getBytes()))\n            .withPartitionKey(\"partitionKey\");"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 17,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/emrServerless.java",
                    "excerpt" : "public AWSEMRServerlessUtil() {\n    client = AmazonEMRServerlessClientBuilder.standard().build();\n}\n\npublic void AWSEMRServerlessFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob); /* <=== java.util.Map */ \n\n    PutRecordRequest putRecordRequest = new PutRecordRequest()\n            .withStreamName(\"PersonalDataStream\")\n            .withData(ByteBuffer.wrap(personalData.toString().getBytes()))\n            .withPartitionKey(\"partitionKey\");"
                  },
                  {
                    "sample" : "personalData.toString()",
                    "lineNumber" : 21,
                    "columnNumber" : 39,
                    "fileName" : "/app/code/emrServerless.java",
                    "excerpt" : "public void AWSEMRServerlessFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\n    PutRecordRequest putRecordRequest = new PutRecordRequest()\n            .withStreamName(\"PersonalDataStream\")\n            .withData(ByteBuffer.wrap(personalData.toString().getBytes())) /* <=== java.util.Map.toString */ \n            .withPartitionKey(\"partitionKey\");\n\n    client.putRecord(putRecordRequest);\n}\n}"
                  },
                  {
                    "sample" : "personalData.toString().getBytes()",
                    "lineNumber" : 21,
                    "columnNumber" : 39,
                    "fileName" : "/app/code/emrServerless.java",
                    "excerpt" : "public void AWSEMRServerlessFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\n    PutRecordRequest putRecordRequest = new PutRecordRequest()\n            .withStreamName(\"PersonalDataStream\")\n            .withData(ByteBuffer.wrap(personalData.toString().getBytes())) /* <=== java.lang.String.getBytes */ \n            .withPartitionKey(\"partitionKey\");\n\n    client.putRecord(putRecordRequest);\n}\n}"
                  },
                  {
                    "sample" : "ByteBuffer.wrap(personalData.toString().getBytes())",
                    "lineNumber" : 21,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/emrServerless.java",
                    "excerpt" : "public void AWSEMRServerlessFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\n    PutRecordRequest putRecordRequest = new PutRecordRequest()\n            .withStreamName(\"PersonalDataStream\")\n            .withData(ByteBuffer.wrap(personalData.toString().getBytes())) /* <=== java.nio.ByteBuffer.wrap */ \n            .withPartitionKey(\"partitionKey\");\n\n    client.putRecord(putRecordRequest);\n}\n}"
                  },
                  {
                    "sample" : "withStreamName(\"PersonalDataStream\")",
                    "lineNumber" : 19,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/emrServerless.java",
                    "excerpt" : "}\n\npublic void AWSEMRServerlessFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\n    PutRecordRequest putRecordRequest = new PutRecordRequest() /* <=== com.amazonaws.services.EMRServerless.model.PutRecordRequest.withStreamName */ \n            .withStreamName(\"PersonalDataStream\")\n            .withData(ByteBuffer.wrap(personalData.toString().getBytes()))\n            .withPartitionKey(\"partitionKey\");\n\n    client.putRecord(putRecordRequest);"
                  }
                ]
              },
              {
                "pathId" : "11817-11804-11803-11802-11819",
                "path" : [
                  {
                    "sample" : "dob",
                    "lineNumber" : 18,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/oam.java",
                    "excerpt" : "  public CreateUserResult AWSOAMFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    CreateUserRequest request = new CreateUserRequest()\n      .withFirstName(firstName)\n      .withLastName(lastName)\n      .withPhoneNumber(phoneNumber)\n      .withDateOfBirth(dob); /* <=== java.lang.String */ \n    return oamClient.createUser(request);\n  }\n}\n"
                  },
                  {
                    "sample" : "withPhoneNumber(phoneNumber)",
                    "lineNumber" : 14,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/oam.java",
                    "excerpt" : "  public AWSOAMUtil(AWSOAM oamClient) {\n    this.oamClient = oamClient;\n  }\n\n  public CreateUserResult AWSOAMFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    CreateUserRequest request = new CreateUserRequest() /* <===  */ \n      .withFirstName(firstName)\n      .withLastName(lastName)\n      .withPhoneNumber(phoneNumber)\n      .withDateOfBirth(dob);\n    return oamClient.createUser(request);"
                  },
                  {
                    "sample" : "withDateOfBirth(dob)",
                    "lineNumber" : 14,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/oam.java",
                    "excerpt" : "  public AWSOAMUtil(AWSOAM oamClient) {\n    this.oamClient = oamClient;\n  }\n\n  public CreateUserResult AWSOAMFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    CreateUserRequest request = new CreateUserRequest() /* <===  */ \n      .withFirstName(firstName)\n      .withLastName(lastName)\n      .withPhoneNumber(phoneNumber)\n      .withDateOfBirth(dob);\n    return oamClient.createUser(request);"
                  },
                  {
                    "sample" : "request",
                    "lineNumber" : 14,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/oam.java",
                    "excerpt" : "  public AWSOAMUtil(AWSOAM oamClient) {\n    this.oamClient = oamClient;\n  }\n\n  public CreateUserResult AWSOAMFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    CreateUserRequest request = new CreateUserRequest() /* <=== com.amazonaws.services.oam.model.CreateUserRequest */ \n      .withFirstName(firstName)\n      .withLastName(lastName)\n      .withPhoneNumber(phoneNumber)\n      .withDateOfBirth(dob);\n    return oamClient.createUser(request);"
                  },
                  {
                    "sample" : "createUser(request)",
                    "lineNumber" : 19,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/oam.java",
                    "excerpt" : "    CreateUserRequest request = new CreateUserRequest()\n      .withFirstName(firstName)\n      .withLastName(lastName)\n      .withPhoneNumber(phoneNumber)\n      .withDateOfBirth(dob);\n    return oamClient.createUser(request); /* <=== com.amazonaws.services.oam.AWSOAM.createUser */ \n  }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "5859-5850-5849-5863-5862-5881",
                "path" : [
                  {
                    "sample" : "dob",
                    "lineNumber" : 16,
                    "columnNumber" : 132,
                    "fileName" : "/app/code/scheduler.java",
                    "excerpt" : "    public AWSSchedulerUtil() {\n        client = AmazonSchedulerClientBuilder.standard().build();\n    }\n\n    public void AWSSchedulerFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob); /* <=== java.lang.String */ \n\n        PutEventsRequest putEventsRequest = new PutEventsRequest()\n                .withEntries(new Event().withDetail(personalData.toString()));\n\n        client.putEvents(putEventsRequest);"
                  },
                  {
                    "sample" : "Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob)",
                    "lineNumber" : 16,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/scheduler.java",
                    "excerpt" : "    public AWSSchedulerUtil() {\n        client = AmazonSchedulerClientBuilder.standard().build();\n    }\n\n    public void AWSSchedulerFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob); /* <=== java.util.Map.of */ \n\n        PutEventsRequest putEventsRequest = new PutEventsRequest()\n                .withEntries(new Event().withDetail(personalData.toString()));\n\n        client.putEvents(putEventsRequest);"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 16,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/scheduler.java",
                    "excerpt" : "    public AWSSchedulerUtil() {\n        client = AmazonSchedulerClientBuilder.standard().build();\n    }\n\n    public void AWSSchedulerFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob); /* <=== java.util.Map */ \n\n        PutEventsRequest putEventsRequest = new PutEventsRequest()\n                .withEntries(new Event().withDetail(personalData.toString()));\n\n        client.putEvents(putEventsRequest);"
                  },
                  {
                    "sample" : "withEntries(new Event().withDetail(personalData.toString()))",
                    "lineNumber" : 18,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/scheduler.java",
                    "excerpt" : "    }\n\n    public void AWSSchedulerFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\n        PutEventsRequest putEventsRequest = new PutEventsRequest() /* <=== com.amazonaws.services.scheduler.model.PutEventsRequest.withEntries */ \n                .withEntries(new Event().withDetail(personalData.toString()));\n\n        client.putEvents(putEventsRequest);\n    }\n}"
                  },
                  {
                    "sample" : "putEventsRequest",
                    "lineNumber" : 18,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/scheduler.java",
                    "excerpt" : "    }\n\n    public void AWSSchedulerFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\n        PutEventsRequest putEventsRequest = new PutEventsRequest() /* <=== com.amazonaws.services.scheduler.model.PutEventsRequest */ \n                .withEntries(new Event().withDetail(personalData.toString()));\n\n        client.putEvents(putEventsRequest);\n    }\n}"
                  },
                  {
                    "sample" : "putEvents(putEventsRequest)",
                    "lineNumber" : 21,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/scheduler.java",
                    "excerpt" : "        Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\n        PutEventsRequest putEventsRequest = new PutEventsRequest()\n                .withEntries(new Event().withDetail(personalData.toString()));\n\n        client.putEvents(putEventsRequest); /* <=== com.amazonaws.services.scheduler.AmazonScheduler.putEvents */ \n    }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "5859-5850-5849-5871",
                "path" : [
                  {
                    "sample" : "dob",
                    "lineNumber" : 16,
                    "columnNumber" : 132,
                    "fileName" : "/app/code/scheduler.java",
                    "excerpt" : "    public AWSSchedulerUtil() {\n        client = AmazonSchedulerClientBuilder.standard().build();\n    }\n\n    public void AWSSchedulerFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob); /* <=== java.lang.String */ \n\n        PutEventsRequest putEventsRequest = new PutEventsRequest()\n                .withEntries(new Event().withDetail(personalData.toString()));\n\n        client.putEvents(putEventsRequest);"
                  },
                  {
                    "sample" : "Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob)",
                    "lineNumber" : 16,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/scheduler.java",
                    "excerpt" : "    public AWSSchedulerUtil() {\n        client = AmazonSchedulerClientBuilder.standard().build();\n    }\n\n    public void AWSSchedulerFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob); /* <=== java.util.Map.of */ \n\n        PutEventsRequest putEventsRequest = new PutEventsRequest()\n                .withEntries(new Event().withDetail(personalData.toString()));\n\n        client.putEvents(putEventsRequest);"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 16,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/scheduler.java",
                    "excerpt" : "    public AWSSchedulerUtil() {\n        client = AmazonSchedulerClientBuilder.standard().build();\n    }\n\n    public void AWSSchedulerFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob); /* <=== java.util.Map */ \n\n        PutEventsRequest putEventsRequest = new PutEventsRequest()\n                .withEntries(new Event().withDetail(personalData.toString()));\n\n        client.putEvents(putEventsRequest);"
                  },
                  {
                    "sample" : "withDetail(personalData.toString())",
                    "lineNumber" : 19,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/scheduler.java",
                    "excerpt" : "\n    public void AWSSchedulerFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\n        PutEventsRequest putEventsRequest = new PutEventsRequest()\n                .withEntries(new Event().withDetail(personalData.toString())); /* <=== com.amazonaws.services.scheduler.model.Event.withDetail */ \n\n        client.putEvents(putEventsRequest);\n    }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "7218-7209-7208-7236-7235-7233-7224-7223-7222-7221-7239",
                "path" : [
                  {
                    "sample" : "dob",
                    "lineNumber" : 17,
                    "columnNumber" : 128,
                    "fileName" : "/app/code/emrServerless.java",
                    "excerpt" : "public AWSEMRServerlessUtil() {\n    client = AmazonEMRServerlessClientBuilder.standard().build();\n}\n\npublic void AWSEMRServerlessFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob); /* <=== java.lang.String */ \n\n    PutRecordRequest putRecordRequest = new PutRecordRequest()\n            .withStreamName(\"PersonalDataStream\")\n            .withData(ByteBuffer.wrap(personalData.toString().getBytes()))\n            .withPartitionKey(\"partitionKey\");"
                  },
                  {
                    "sample" : "Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob)",
                    "lineNumber" : 17,
                    "columnNumber" : 40,
                    "fileName" : "/app/code/emrServerless.java",
                    "excerpt" : "public AWSEMRServerlessUtil() {\n    client = AmazonEMRServerlessClientBuilder.standard().build();\n}\n\npublic void AWSEMRServerlessFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob); /* <=== java.util.Map.of */ \n\n    PutRecordRequest putRecordRequest = new PutRecordRequest()\n            .withStreamName(\"PersonalDataStream\")\n            .withData(ByteBuffer.wrap(personalData.toString().getBytes()))\n            .withPartitionKey(\"partitionKey\");"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 17,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/emrServerless.java",
                    "excerpt" : "public AWSEMRServerlessUtil() {\n    client = AmazonEMRServerlessClientBuilder.standard().build();\n}\n\npublic void AWSEMRServerlessFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob); /* <=== java.util.Map */ \n\n    PutRecordRequest putRecordRequest = new PutRecordRequest()\n            .withStreamName(\"PersonalDataStream\")\n            .withData(ByteBuffer.wrap(personalData.toString().getBytes()))\n            .withPartitionKey(\"partitionKey\");"
                  },
                  {
                    "sample" : "personalData.toString()",
                    "lineNumber" : 21,
                    "columnNumber" : 39,
                    "fileName" : "/app/code/emrServerless.java",
                    "excerpt" : "public void AWSEMRServerlessFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\n    PutRecordRequest putRecordRequest = new PutRecordRequest()\n            .withStreamName(\"PersonalDataStream\")\n            .withData(ByteBuffer.wrap(personalData.toString().getBytes())) /* <=== java.util.Map.toString */ \n            .withPartitionKey(\"partitionKey\");\n\n    client.putRecord(putRecordRequest);\n}\n}"
                  },
                  {
                    "sample" : "personalData.toString().getBytes()",
                    "lineNumber" : 21,
                    "columnNumber" : 39,
                    "fileName" : "/app/code/emrServerless.java",
                    "excerpt" : "public void AWSEMRServerlessFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\n    PutRecordRequest putRecordRequest = new PutRecordRequest()\n            .withStreamName(\"PersonalDataStream\")\n            .withData(ByteBuffer.wrap(personalData.toString().getBytes())) /* <=== java.lang.String.getBytes */ \n            .withPartitionKey(\"partitionKey\");\n\n    client.putRecord(putRecordRequest);\n}\n}"
                  },
                  {
                    "sample" : "ByteBuffer.wrap(personalData.toString().getBytes())",
                    "lineNumber" : 21,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/emrServerless.java",
                    "excerpt" : "public void AWSEMRServerlessFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\n    PutRecordRequest putRecordRequest = new PutRecordRequest()\n            .withStreamName(\"PersonalDataStream\")\n            .withData(ByteBuffer.wrap(personalData.toString().getBytes())) /* <=== java.nio.ByteBuffer.wrap */ \n            .withPartitionKey(\"partitionKey\");\n\n    client.putRecord(putRecordRequest);\n}\n}"
                  },
                  {
                    "sample" : "withStreamName(\"PersonalDataStream\")",
                    "lineNumber" : 19,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/emrServerless.java",
                    "excerpt" : "}\n\npublic void AWSEMRServerlessFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\n    PutRecordRequest putRecordRequest = new PutRecordRequest() /* <=== com.amazonaws.services.EMRServerless.model.PutRecordRequest.withStreamName */ \n            .withStreamName(\"PersonalDataStream\")\n            .withData(ByteBuffer.wrap(personalData.toString().getBytes()))\n            .withPartitionKey(\"partitionKey\");\n\n    client.putRecord(putRecordRequest);"
                  },
                  {
                    "sample" : "withData(ByteBuffer.wrap(personalData.toString().getBytes()))",
                    "lineNumber" : 19,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/emrServerless.java",
                    "excerpt" : "}\n\npublic void AWSEMRServerlessFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\n    PutRecordRequest putRecordRequest = new PutRecordRequest() /* <===  */ \n            .withStreamName(\"PersonalDataStream\")\n            .withData(ByteBuffer.wrap(personalData.toString().getBytes()))\n            .withPartitionKey(\"partitionKey\");\n\n    client.putRecord(putRecordRequest);"
                  },
                  {
                    "sample" : "withPartitionKey(\"partitionKey\")",
                    "lineNumber" : 19,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/emrServerless.java",
                    "excerpt" : "}\n\npublic void AWSEMRServerlessFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\n    PutRecordRequest putRecordRequest = new PutRecordRequest() /* <===  */ \n            .withStreamName(\"PersonalDataStream\")\n            .withData(ByteBuffer.wrap(personalData.toString().getBytes()))\n            .withPartitionKey(\"partitionKey\");\n\n    client.putRecord(putRecordRequest);"
                  },
                  {
                    "sample" : "putRecordRequest",
                    "lineNumber" : 19,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/emrServerless.java",
                    "excerpt" : "}\n\npublic void AWSEMRServerlessFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n    Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\n    PutRecordRequest putRecordRequest = new PutRecordRequest() /* <=== com.amazonaws.services.EMRServerless.model.PutRecordRequest */ \n            .withStreamName(\"PersonalDataStream\")\n            .withData(ByteBuffer.wrap(personalData.toString().getBytes()))\n            .withPartitionKey(\"partitionKey\");\n\n    client.putRecord(putRecordRequest);"
                  },
                  {
                    "sample" : "putRecord(putRecordRequest)",
                    "lineNumber" : 24,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/emrServerless.java",
                    "excerpt" : "    PutRecordRequest putRecordRequest = new PutRecordRequest()\n            .withStreamName(\"PersonalDataStream\")\n            .withData(ByteBuffer.wrap(personalData.toString().getBytes()))\n            .withPartitionKey(\"partitionKey\");\n\n    client.putRecord(putRecordRequest); /* <=== com.amazonaws.services.EMRServerless.AmazonEMRServerless.putRecord */ \n}\n}"
                  }
                ]
              },
              {
                "pathId" : "14197-14176-14175-14205-14204-14202-14201-14222-14213-14212-14211-14226",
                "path" : [
                  {
                    "sample" : "dob",
                    "lineNumber" : 18,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "\n        // Encode the personal data as a JSON string\n        String payload = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" +\n                         \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +\n                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\"; /* <=== java.lang.String */ \n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8));\n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest()\n                .withFunctionName(\"myLambdaFunction\")"
                  },
                  {
                    "sample" : "\"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" + \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" + \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" + \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\"",
                    "lineNumber" : 15,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "    public static void AWSLambdaFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        // Build the AWS Lambda client\n        AWSLambda lambdaClient = AWSLambdaClientBuilder.defaultClient();\n\n        // Encode the personal data as a JSON string\n        String payload = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" + /* <===  */ \n                         \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +\n                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8));\n"
                  },
                  {
                    "sample" : "payload",
                    "lineNumber" : 15,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "    public static void AWSLambdaFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        // Build the AWS Lambda client\n        AWSLambda lambdaClient = AWSLambdaClientBuilder.defaultClient();\n\n        // Encode the personal data as a JSON string\n        String payload = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" + /* <=== java.lang.String */ \n                         \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +\n                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8));\n"
                  },
                  {
                    "sample" : "payload",
                    "lineNumber" : 19,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "        // Encode the personal data as a JSON string\n        String payload = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" +\n                         \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +\n                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8)); /* <=== java.lang.String */ \n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest()\n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content);"
                  },
                  {
                    "sample" : "payload.getBytes(StandardCharsets.UTF_8)",
                    "lineNumber" : 19,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "        // Encode the personal data as a JSON string\n        String payload = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" +\n                         \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +\n                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8)); /* <=== java.lang.String.getBytes */ \n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest()\n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content);"
                  },
                  {
                    "sample" : "ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8))",
                    "lineNumber" : 19,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "        // Encode the personal data as a JSON string\n        String payload = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" +\n                         \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +\n                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8)); /* <=== java.nio.ByteBuffer.wrap */ \n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest()\n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content);"
                  },
                  {
                    "sample" : "content",
                    "lineNumber" : 19,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "        // Encode the personal data as a JSON string\n        String payload = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" +\n                         \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +\n                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8)); /* <=== java.nio.ByteBuffer */ \n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest()\n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content);"
                  },
                  {
                    "sample" : "content",
                    "lineNumber" : 24,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8));\n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest()\n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content); /* <=== java.nio.ByteBuffer */ \n        InvokeResult invokeResult = lambdaClient.invoke(invokeRequest);\n    }\n}\n"
                  },
                  {
                    "sample" : "withFunctionName(\"myLambdaFunction\")",
                    "lineNumber" : 22,
                    "columnNumber" : 39,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8));\n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest() /* <=== com.amazonaws.services.lambda.model.InvokeRequest.withFunctionName */ \n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content);\n        InvokeResult invokeResult = lambdaClient.invoke(invokeRequest);\n    }\n}"
                  },
                  {
                    "sample" : "withPayload(content)",
                    "lineNumber" : 22,
                    "columnNumber" : 39,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8));\n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest() /* <===  */ \n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content);\n        InvokeResult invokeResult = lambdaClient.invoke(invokeRequest);\n    }\n}"
                  },
                  {
                    "sample" : "invokeRequest",
                    "lineNumber" : 22,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8));\n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest() /* <=== com.amazonaws.services.lambda.model.InvokeRequest */ \n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content);\n        InvokeResult invokeResult = lambdaClient.invoke(invokeRequest);\n    }\n}"
                  },
                  {
                    "sample" : "invoke(invokeRequest)",
                    "lineNumber" : 25,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest()\n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content);\n        InvokeResult invokeResult = lambdaClient.invoke(invokeRequest); /* <=== com.amazonaws.services.lambda.AWSLambda.invoke */ \n    }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "16209-16200-16199-16198-16229-16214-16213-16212-16233",
                "path" : [
                  {
                    "sample" : "dob",
                    "lineNumber" : 27,
                    "columnNumber" : 80,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "        // Define the user's personal data\n        List<AttributeType> userAttributes = new ArrayList<>();\n        userAttributes.add(new AttributeType().withName(\"given_name\").withValue(firstName));\n        userAttributes.add(new AttributeType().withName(\"family_name\").withValue(lastName));\n        userAttributes.add(new AttributeType().withName(\"phone_number\").withValue(phoneNumber));\n        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob)); /* <=== java.lang.String */ \n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest()\n                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName)"
                  },
                  {
                    "sample" : "withName(\"birthdate\")",
                    "lineNumber" : 27,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "        // Define the user's personal data\n        List<AttributeType> userAttributes = new ArrayList<>();\n        userAttributes.add(new AttributeType().withName(\"given_name\").withValue(firstName));\n        userAttributes.add(new AttributeType().withName(\"family_name\").withValue(lastName));\n        userAttributes.add(new AttributeType().withName(\"phone_number\").withValue(phoneNumber));\n        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob)); /* <=== com.amazonaws.services.cognitoidp.model.AttributeType.withName */ \n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest()\n                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName)"
                  },
                  {
                    "sample" : "withValue(dob)",
                    "lineNumber" : 27,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "        // Define the user's personal data\n        List<AttributeType> userAttributes = new ArrayList<>();\n        userAttributes.add(new AttributeType().withName(\"given_name\").withValue(firstName));\n        userAttributes.add(new AttributeType().withName(\"family_name\").withValue(lastName));\n        userAttributes.add(new AttributeType().withName(\"phone_number\").withValue(phoneNumber));\n        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob)); /* <===  */ \n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest()\n                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName)"
                  },
                  {
                    "sample" : "userAttributes",
                    "lineNumber" : 27,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "        // Define the user's personal data\n        List<AttributeType> userAttributes = new ArrayList<>();\n        userAttributes.add(new AttributeType().withName(\"given_name\").withValue(firstName));\n        userAttributes.add(new AttributeType().withName(\"family_name\").withValue(lastName));\n        userAttributes.add(new AttributeType().withName(\"phone_number\").withValue(phoneNumber));\n        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob)); /* <=== ANY */ \n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest()\n                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName)"
                  },
                  {
                    "sample" : "userAttributes",
                    "lineNumber" : 33,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest()\n                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName)\n                .withUserAttributes(userAttributes); /* <=== ANY */ \n\n        // Send the request to create the user\n        AdminCreateUserResult createUserResult = cognitoIdpClient.adminCreateUser(createUserRequest);\n\n        // Get the user's unique identifier"
                  },
                  {
                    "sample" : "withUsername(firstName + lastName)",
                    "lineNumber" : 30,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "        userAttributes.add(new AttributeType().withName(\"family_name\").withValue(lastName));\n        userAttributes.add(new AttributeType().withName(\"phone_number\").withValue(phoneNumber));\n        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob));\n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest() /* <===  */ \n                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName)\n                .withUserAttributes(userAttributes);\n\n        // Send the request to create the user"
                  },
                  {
                    "sample" : "withUserAttributes(userAttributes)",
                    "lineNumber" : 30,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "        userAttributes.add(new AttributeType().withName(\"family_name\").withValue(lastName));\n        userAttributes.add(new AttributeType().withName(\"phone_number\").withValue(phoneNumber));\n        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob));\n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest() /* <===  */ \n                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName)\n                .withUserAttributes(userAttributes);\n\n        // Send the request to create the user"
                  },
                  {
                    "sample" : "createUserRequest",
                    "lineNumber" : 30,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "        userAttributes.add(new AttributeType().withName(\"family_name\").withValue(lastName));\n        userAttributes.add(new AttributeType().withName(\"phone_number\").withValue(phoneNumber));\n        userAttributes.add(new AttributeType().withName(\"birthdate\").withValue(dob));\n\n        // Create the request to create the user\n        AdminCreateUserRequest createUserRequest = new AdminCreateUserRequest() /* <=== com.amazonaws.services.cognitoidp.model.AdminCreateUserRequest */ \n                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName)\n                .withUserAttributes(userAttributes);\n\n        // Send the request to create the user"
                  },
                  {
                    "sample" : "adminCreateUser(createUserRequest)",
                    "lineNumber" : 36,
                    "columnNumber" : 50,
                    "fileName" : "/app/code/cognitoIDP.java",
                    "excerpt" : "                .withUserPoolId(USER_POOL_ID)\n                .withUsername(firstName + lastName)\n                .withUserAttributes(userAttributes);\n\n        // Send the request to create the user\n        AdminCreateUserResult createUserResult = cognitoIdpClient.adminCreateUser(createUserRequest); /* <=== com.amazonaws.services.cognitoidp.AWSCognitoIdentityProvider.adminCreateUser */ \n\n        // Get the user's unique identifier\n        String userId = createUserResult.getUser().getUsername();\n\n        System.out.println(\"Successfully created user with ID: \" + userId);"
                  }
                ]
              },
              {
                "pathId" : "9869-9867",
                "path" : [
                  {
                    "sample" : "\"DOB\"",
                    "lineNumber" : 14,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/devOpsGuru.java",
                    "excerpt" : "        Event event = new Event();\n        event.setName(\"PersonalDataEvent\");\n        event.addDetail(\"FirstName\", firstName);\n        event.addDetail(\"LastName\", lastName);\n        event.addDetail(\"PhoneNumber\", phoneNumber);\n        event.addDetail(\"DOB\", DOB); /* <===  */ \n        PutEventRequest request = new PutEventRequest().withEvent(event);\n        devOpsGuruClient.putEvent(request);\n    }\n}\n"
                  },
                  {
                    "sample" : "addDetail(\"DOB\", DOB)",
                    "lineNumber" : 14,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/devOpsGuru.java",
                    "excerpt" : "        Event event = new Event();\n        event.setName(\"PersonalDataEvent\");\n        event.addDetail(\"FirstName\", firstName);\n        event.addDetail(\"LastName\", lastName);\n        event.addDetail(\"PhoneNumber\", phoneNumber);\n        event.addDetail(\"DOB\", DOB); /* <=== com.amazonaws.services.devopsguru.model.Event.addDetail */ \n        PutEventRequest request = new PutEventRequest().withEvent(event);\n        devOpsGuruClient.putEvent(request);\n    }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "14197-14176-14175-14205-14204-14202-14201-14222-14213",
                "path" : [
                  {
                    "sample" : "dob",
                    "lineNumber" : 18,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "\n        // Encode the personal data as a JSON string\n        String payload = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" +\n                         \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +\n                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\"; /* <=== java.lang.String */ \n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8));\n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest()\n                .withFunctionName(\"myLambdaFunction\")"
                  },
                  {
                    "sample" : "\"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" + \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" + \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" + \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\"",
                    "lineNumber" : 15,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "    public static void AWSLambdaFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        // Build the AWS Lambda client\n        AWSLambda lambdaClient = AWSLambdaClientBuilder.defaultClient();\n\n        // Encode the personal data as a JSON string\n        String payload = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" + /* <===  */ \n                         \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +\n                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8));\n"
                  },
                  {
                    "sample" : "payload",
                    "lineNumber" : 15,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "    public static void AWSLambdaFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        // Build the AWS Lambda client\n        AWSLambda lambdaClient = AWSLambdaClientBuilder.defaultClient();\n\n        // Encode the personal data as a JSON string\n        String payload = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" + /* <=== java.lang.String */ \n                         \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +\n                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8));\n"
                  },
                  {
                    "sample" : "payload",
                    "lineNumber" : 19,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "        // Encode the personal data as a JSON string\n        String payload = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" +\n                         \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +\n                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8)); /* <=== java.lang.String */ \n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest()\n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content);"
                  },
                  {
                    "sample" : "payload.getBytes(StandardCharsets.UTF_8)",
                    "lineNumber" : 19,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "        // Encode the personal data as a JSON string\n        String payload = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" +\n                         \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +\n                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8)); /* <=== java.lang.String.getBytes */ \n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest()\n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content);"
                  },
                  {
                    "sample" : "ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8))",
                    "lineNumber" : 19,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "        // Encode the personal data as a JSON string\n        String payload = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" +\n                         \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +\n                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8)); /* <=== java.nio.ByteBuffer.wrap */ \n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest()\n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content);"
                  },
                  {
                    "sample" : "content",
                    "lineNumber" : 19,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "        // Encode the personal data as a JSON string\n        String payload = \"{\\\"firstName\\\": \\\"\" + firstName + \"\\\", \" +\n                         \"\\\"lastName\\\": \\\"\" + lastName + \"\\\", \" +\n                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8)); /* <=== java.nio.ByteBuffer */ \n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest()\n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content);"
                  },
                  {
                    "sample" : "content",
                    "lineNumber" : 24,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8));\n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest()\n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content); /* <=== java.nio.ByteBuffer */ \n        InvokeResult invokeResult = lambdaClient.invoke(invokeRequest);\n    }\n}\n"
                  },
                  {
                    "sample" : "withFunctionName(\"myLambdaFunction\")",
                    "lineNumber" : 22,
                    "columnNumber" : 39,
                    "fileName" : "/app/code/lambda.java",
                    "excerpt" : "                         \"\\\"phoneNumber\\\": \\\"\" + phoneNumber + \"\\\", \" +\n                         \"\\\"dob\\\": \\\"\" + dob + \"\\\"}\";\n        ByteBuffer content = ByteBuffer.wrap(payload.getBytes(StandardCharsets.UTF_8));\n\n        // Send the personal data to the AWS Lambda function\n        InvokeRequest invokeRequest = new InvokeRequest() /* <=== com.amazonaws.services.lambda.model.InvokeRequest.withFunctionName */ \n                .withFunctionName(\"myLambdaFunction\")\n                .withPayload(content);\n        InvokeResult invokeResult = lambdaClient.invoke(invokeRequest);\n    }\n}"
                  }
                ]
              },
              {
                "pathId" : "11732-11733-11731-11751-11738-11737-11736-11752",
                "path" : [
                  {
                    "sample" : "\"DOB\"",
                    "lineNumber" : 15,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/mgn.java",
                    "excerpt" : "    \n    Map<String, String> personalData = new HashMap<>();\n    personalData.put(\"firstName\", firstName);\n    personalData.put(\"lastName\", lastName);\n    personalData.put(\"phoneNumber\", phoneNumber);\n    personalData.put(\"DOB\", DOB); /* <===  */ \n    \n    IndexDocumentRequest indexDocumentRequest = new IndexDocumentRequest()\n        .withIndexName(\"personal-data\")\n        .withId(firstName + lastName)\n        .withSource(personalData);"
                  },
                  {
                    "sample" : "DOB",
                    "lineNumber" : 15,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/mgn.java",
                    "excerpt" : "    \n    Map<String, String> personalData = new HashMap<>();\n    personalData.put(\"firstName\", firstName);\n    personalData.put(\"lastName\", lastName);\n    personalData.put(\"phoneNumber\", phoneNumber);\n    personalData.put(\"DOB\", DOB); /* <=== java.lang.String */ \n    \n    IndexDocumentRequest indexDocumentRequest = new IndexDocumentRequest()\n        .withIndexName(\"personal-data\")\n        .withId(firstName + lastName)\n        .withSource(personalData);"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 15,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/mgn.java",
                    "excerpt" : "    \n    Map<String, String> personalData = new HashMap<>();\n    personalData.put(\"firstName\", firstName);\n    personalData.put(\"lastName\", lastName);\n    personalData.put(\"phoneNumber\", phoneNumber);\n    personalData.put(\"DOB\", DOB); /* <=== java.util.Map */ \n    \n    IndexDocumentRequest indexDocumentRequest = new IndexDocumentRequest()\n        .withIndexName(\"personal-data\")\n        .withId(firstName + lastName)\n        .withSource(personalData);"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 20,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/mgn.java",
                    "excerpt" : "    personalData.put(\"DOB\", DOB);\n    \n    IndexDocumentRequest indexDocumentRequest = new IndexDocumentRequest()\n        .withIndexName(\"personal-data\")\n        .withId(firstName + lastName)\n        .withSource(personalData); /* <=== java.util.Map */ \n    \n    mgnClient.indexDocument(indexDocumentRequest);\n  }\n}\n"
                  },
                  {
                    "sample" : "withId(firstName + lastName)",
                    "lineNumber" : 17,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/mgn.java",
                    "excerpt" : "    personalData.put(\"firstName\", firstName);\n    personalData.put(\"lastName\", lastName);\n    personalData.put(\"phoneNumber\", phoneNumber);\n    personalData.put(\"DOB\", DOB);\n    \n    IndexDocumentRequest indexDocumentRequest = new IndexDocumentRequest() /* <===  */ \n        .withIndexName(\"personal-data\")\n        .withId(firstName + lastName)\n        .withSource(personalData);\n    \n    mgnClient.indexDocument(indexDocumentRequest);"
                  },
                  {
                    "sample" : "withSource(personalData)",
                    "lineNumber" : 17,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/mgn.java",
                    "excerpt" : "    personalData.put(\"firstName\", firstName);\n    personalData.put(\"lastName\", lastName);\n    personalData.put(\"phoneNumber\", phoneNumber);\n    personalData.put(\"DOB\", DOB);\n    \n    IndexDocumentRequest indexDocumentRequest = new IndexDocumentRequest() /* <===  */ \n        .withIndexName(\"personal-data\")\n        .withId(firstName + lastName)\n        .withSource(personalData);\n    \n    mgnClient.indexDocument(indexDocumentRequest);"
                  },
                  {
                    "sample" : "indexDocumentRequest",
                    "lineNumber" : 17,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/mgn.java",
                    "excerpt" : "    personalData.put(\"firstName\", firstName);\n    personalData.put(\"lastName\", lastName);\n    personalData.put(\"phoneNumber\", phoneNumber);\n    personalData.put(\"DOB\", DOB);\n    \n    IndexDocumentRequest indexDocumentRequest = new IndexDocumentRequest() /* <=== com.amazonaws.services.mgn.model.IndexDocumentRequest */ \n        .withIndexName(\"personal-data\")\n        .withId(firstName + lastName)\n        .withSource(personalData);\n    \n    mgnClient.indexDocument(indexDocumentRequest);"
                  },
                  {
                    "sample" : "indexDocument(indexDocumentRequest)",
                    "lineNumber" : 22,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/mgn.java",
                    "excerpt" : "    IndexDocumentRequest indexDocumentRequest = new IndexDocumentRequest()\n        .withIndexName(\"personal-data\")\n        .withId(firstName + lastName)\n        .withSource(personalData);\n    \n    mgnClient.indexDocument(indexDocumentRequest); /* <=== com.amazonaws.services.mgn.AmazonMGNClient.indexDocument */ \n  }\n}\n"
                  }
                ]
              },
              {
                "pathId" : "5859-5850-5849-5863",
                "path" : [
                  {
                    "sample" : "dob",
                    "lineNumber" : 16,
                    "columnNumber" : 132,
                    "fileName" : "/app/code/scheduler.java",
                    "excerpt" : "    public AWSSchedulerUtil() {\n        client = AmazonSchedulerClientBuilder.standard().build();\n    }\n\n    public void AWSSchedulerFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob); /* <=== java.lang.String */ \n\n        PutEventsRequest putEventsRequest = new PutEventsRequest()\n                .withEntries(new Event().withDetail(personalData.toString()));\n\n        client.putEvents(putEventsRequest);"
                  },
                  {
                    "sample" : "Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob)",
                    "lineNumber" : 16,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/scheduler.java",
                    "excerpt" : "    public AWSSchedulerUtil() {\n        client = AmazonSchedulerClientBuilder.standard().build();\n    }\n\n    public void AWSSchedulerFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob); /* <=== java.util.Map.of */ \n\n        PutEventsRequest putEventsRequest = new PutEventsRequest()\n                .withEntries(new Event().withDetail(personalData.toString()));\n\n        client.putEvents(putEventsRequest);"
                  },
                  {
                    "sample" : "personalData",
                    "lineNumber" : 16,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/scheduler.java",
                    "excerpt" : "    public AWSSchedulerUtil() {\n        client = AmazonSchedulerClientBuilder.standard().build();\n    }\n\n    public void AWSSchedulerFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob); /* <=== java.util.Map */ \n\n        PutEventsRequest putEventsRequest = new PutEventsRequest()\n                .withEntries(new Event().withDetail(personalData.toString()));\n\n        client.putEvents(putEventsRequest);"
                  },
                  {
                    "sample" : "withEntries(new Event().withDetail(personalData.toString()))",
                    "lineNumber" : 18,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/scheduler.java",
                    "excerpt" : "    }\n\n    public void AWSSchedulerFirstNameFlow(String firstName, String lastName, String phoneNumber, String dob) {\n        Map<String, String> personalData = Map.of(\"firstName\", firstName, \"lastName\", lastName, \"phoneNumber\", phoneNumber, \"dob\", dob);\n\n        PutEventsRequest putEventsRequest = new PutEventsRequest() /* <=== com.amazonaws.services.scheduler.model.PutEventsRequest.withEntries */ \n                .withEntries(new Event().withDetail(personalData.toString()));\n\n        client.putEvents(putEventsRequest);\n    }\n}"
                  }
                ]
              },
              {
                "pathId" : "11563-11554-11553-11552-11577-11568-11567-11566-11578",
                "path" : [
                  {
                    "sample" : "dob",
                    "lineNumber" : 32,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "\n    List<Tag> tags = new ArrayList<>();\n    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob)); /* <=== java.lang.String */ \n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags);\n    workspacesClient.tagWorkspace(tagWorkspaceRequest);\n\n    System.out.println(\"Personal data saved successfully to workspace with ID: \" + workspaceId);"
                  },
                  {
                    "sample" : "withKey(\"dob\")",
                    "lineNumber" : 32,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "\n    List<Tag> tags = new ArrayList<>();\n    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob)); /* <=== com.amazonaws.services.workspaces.model.Tag.withKey */ \n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags);\n    workspacesClient.tagWorkspace(tagWorkspaceRequest);\n\n    System.out.println(\"Personal data saved successfully to workspace with ID: \" + workspaceId);"
                  },
                  {
                    "sample" : "withValue(dob)",
                    "lineNumber" : 32,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "\n    List<Tag> tags = new ArrayList<>();\n    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob)); /* <===  */ \n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags);\n    workspacesClient.tagWorkspace(tagWorkspaceRequest);\n\n    System.out.println(\"Personal data saved successfully to workspace with ID: \" + workspaceId);"
                  },
                  {
                    "sample" : "tags",
                    "lineNumber" : 32,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "\n    List<Tag> tags = new ArrayList<>();\n    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob)); /* <=== ANY */ \n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags);\n    workspacesClient.tagWorkspace(tagWorkspaceRequest);\n\n    System.out.println(\"Personal data saved successfully to workspace with ID: \" + workspaceId);"
                  },
                  {
                    "sample" : "tags",
                    "lineNumber" : 34,
                    "columnNumber" : 110,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags); /* <=== ANY */ \n    workspacesClient.tagWorkspace(tagWorkspaceRequest);\n\n    System.out.println(\"Personal data saved successfully to workspace with ID: \" + workspaceId);\n  }\n"
                  },
                  {
                    "sample" : "withResourceId(workspaceId)",
                    "lineNumber" : 34,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags); /* <=== com.amazonaws.services.workspaces.model.TagWorkspaceRequest.withResourceId */ \n    workspacesClient.tagWorkspace(tagWorkspaceRequest);\n\n    System.out.println(\"Personal data saved successfully to workspace with ID: \" + workspaceId);\n  }\n"
                  },
                  {
                    "sample" : "withTags(tags)",
                    "lineNumber" : 34,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags); /* <===  */ \n    workspacesClient.tagWorkspace(tagWorkspaceRequest);\n\n    System.out.println(\"Personal data saved successfully to workspace with ID: \" + workspaceId);\n  }\n"
                  },
                  {
                    "sample" : "tagWorkspaceRequest",
                    "lineNumber" : 34,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags); /* <=== com.amazonaws.services.workspaces.model.TagWorkspaceRequest */ \n    workspacesClient.tagWorkspace(tagWorkspaceRequest);\n\n    System.out.println(\"Personal data saved successfully to workspace with ID: \" + workspaceId);\n  }\n"
                  },
                  {
                    "sample" : "tagWorkspace(tagWorkspaceRequest)",
                    "lineNumber" : 35,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags);\n    workspacesClient.tagWorkspace(tagWorkspaceRequest); /* <=== com.amazonaws.services.workspaces.AmazonWorkspaces.tagWorkspace */ \n\n    System.out.println(\"Personal data saved successfully to workspace with ID: \" + workspaceId);\n  }\n\n}"
                  }
                ]
              },
              {
                "pathId" : "11563-11554-11553-11552-11577-11568",
                "path" : [
                  {
                    "sample" : "dob",
                    "lineNumber" : 32,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "\n    List<Tag> tags = new ArrayList<>();\n    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob)); /* <=== java.lang.String */ \n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags);\n    workspacesClient.tagWorkspace(tagWorkspaceRequest);\n\n    System.out.println(\"Personal data saved successfully to workspace with ID: \" + workspaceId);"
                  },
                  {
                    "sample" : "withKey(\"dob\")",
                    "lineNumber" : 32,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "\n    List<Tag> tags = new ArrayList<>();\n    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob)); /* <=== com.amazonaws.services.workspaces.model.Tag.withKey */ \n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags);\n    workspacesClient.tagWorkspace(tagWorkspaceRequest);\n\n    System.out.println(\"Personal data saved successfully to workspace with ID: \" + workspaceId);"
                  },
                  {
                    "sample" : "withValue(dob)",
                    "lineNumber" : 32,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "\n    List<Tag> tags = new ArrayList<>();\n    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob)); /* <===  */ \n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags);\n    workspacesClient.tagWorkspace(tagWorkspaceRequest);\n\n    System.out.println(\"Personal data saved successfully to workspace with ID: \" + workspaceId);"
                  },
                  {
                    "sample" : "tags",
                    "lineNumber" : 32,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "\n    List<Tag> tags = new ArrayList<>();\n    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob)); /* <=== ANY */ \n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags);\n    workspacesClient.tagWorkspace(tagWorkspaceRequest);\n\n    System.out.println(\"Personal data saved successfully to workspace with ID: \" + workspaceId);"
                  },
                  {
                    "sample" : "tags",
                    "lineNumber" : 34,
                    "columnNumber" : 110,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags); /* <=== ANY */ \n    workspacesClient.tagWorkspace(tagWorkspaceRequest);\n\n    System.out.println(\"Personal data saved successfully to workspace with ID: \" + workspaceId);\n  }\n"
                  },
                  {
                    "sample" : "withResourceId(workspaceId)",
                    "lineNumber" : 34,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/workspaces.java",
                    "excerpt" : "    tags.add(new Tag().withKey(\"firstName\").withValue(firstName));\n    tags.add(new Tag().withKey(\"lastName\").withValue(lastName));\n    tags.add(new Tag().withKey(\"phoneNumber\").withValue(phoneNumber));\n    tags.add(new Tag().withKey(\"dob\").withValue(dob));\n\n    TagWorkspaceRequest tagWorkspaceRequest = new TagWorkspaceRequest().withResourceId(workspaceId).withTags(tags); /* <=== com.amazonaws.services.workspaces.model.TagWorkspaceRequest.withResourceId */ \n    workspacesClient.tagWorkspace(tagWorkspaceRequest);\n\n    System.out.println(\"Personal data saved successfully to workspace with ID: \" + workspaceId);\n  }\n"
                  }
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "collections" : [
  ],
  "violations" : [
    {
      "policyId" : "Threats.Leakage.isDataLeakingToLog",
      "policyDetails" : {
        "name" : "PII data is written to the log files",
        "policyType" : "threat",
        "description" : "Sensitive Data written to log files or file system may lead to unauthorized access or exposure to potential attack.",
        "fix" : "It is not recommended to log Sensitive Data to log files or the file system. The data must be encrypted if it is absolutely necessary to log it.",
        "action" : "",
        "tags" : {
          "CWE-359" : "https://cwe.mitre.org/data/definitions/359.html",
          "CWE-532" : "https://cwe.mitre.org/data/definitions/532.html",
          "MSTG-STORAGE-3" : "https://github.com/OWASP/owasp-mstg/blob/master/Document/0x05d-Testing-Data-Storage.md#Testing-Logs-for-Sensitive-Data-MSTG-STORAGE-3",
          "MITRE" : "Sharing.Exposure"
        }
      },
      "dataFlow" : [
        {
          "sourceId" : "Data.Sensitive.PersonalIdentification.FirstName",
          "sinkId" : "Leakages.Log.Console",
          "pathIds" : [
            "4606-4604-4603-4635-4625",
            "8823-8815-8814-8813-8812-8829-8828-8834",
            "13493-13482-13481-13480-13501-13500-13506",
            "1736-1728-1727-1726-1725-1724-1723-1747-1746-1752",
            "13023-13048-13037-13036-13035-13034-13033-13032-13066-13065-13071"
          ]
        },
        {
          "sourceId" : "Data.Sensitive.PersonalIdentification.Age",
          "sinkId" : "Leakages.Log.Console",
          "pathIds" : [
            "4615-4639-4625"
          ]
        },
        {
          "sourceId" : "Data.Sensitive.PersonalIdentification.DateofBirth",
          "sinkId" : "Leakages.Log.Console",
          "pathIds" : [
            "1742-1743-1725-1724-1723-1747-1746-1752"
          ]
        },
        {
          "sourceId" : "Data.Sensitive.AccountData.AccountName",
          "sinkId" : "Leakages.Log.Console",
          "pathIds" : [
            "10445-10437-10436-10449-10448-10454"
          ]
        },
        {
          "sourceId" : "Data.Sensitive.ContactData.EmailAddress",
          "sinkId" : "Leakages.Log.Console",
          "pathIds" : [
            "12678-12677-12676-12665-12664-12663-12662-12684-12683-12705",
            "12678-12677-12676-12665-12664-12663-12662-12684-12683-12695"
          ]
        },
        {
          "sourceId" : "Data.Sensitive.AccountData.AccountID",
          "sinkId" : "Leakages.Log.Console",
          "pathIds" : [
            "16238-16248-16242"
          ]
        },
        {
          "sourceId" : "Data.Sensitive.PersonalIdentification.LastName",
          "sinkId" : "Leakages.Log.Console",
          "pathIds" : [
            "12582-12577-12576-12596-12595-12608-12607-12611",
            "4612-4610-4609-4637-4625",
            "8824-8815-8814-8813-8812-8829-8828-8834",
            "13495-13482-13481-13480-13501-13500-13506",
            "1738-1739-1727-1726-1725-1724-1723-1747-1746-1752",
            "13050-13037-13036-13035-13034-13033-13032-13066-13065-13071"
          ]
        },
        {
          "sourceId" : "Data.Sensitive.ContactData.PhoneNumber",
          "sinkId" : "Leakages.Log.Console",
          "pathIds" : [
            "13475-13468-13467-13497-13482-13481-13480-13501-13500-13506",
            "1740-1741-1726-1725-1724-1723-1747-1746-1752",
            "13027-13020-13019-13061-13034-13033-13032-13066-13065-13071",
            "8825-8814-8813-8812-8829-8828-8834"
          ]
        },
        {
          "sourceId" : "Data.Sensitive.ContactData.Address",
          "sinkId" : "Leakages.Log.Console",
          "pathIds" : [
            "4624-4622-4621-4641-4625"
          ]
        }
      ],
      "processing" : null
    }
  ]
}